{
	"id": 0,
	"name": "@raycast/api",
	"kind": 1,
	"kindString": "Project",
	"flags": {},
	"originalName": "",
	"children": [
		{
			"id": 78,
			"name": "ActionPanel",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 83,
					"name": "Item",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 94,
							"name": "ActionPanelItem"
						}
					}
				},
				{
					"id": 84,
					"name": "Section",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 86,
							"name": "ActionPanelSection"
						}
					}
				},
				{
					"id": 85,
					"name": "Submenu",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 125,
							"name": "ActionPanelSubmenu"
						}
					}
				},
				{
					"id": 82,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 79,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 80,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 81,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										81
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						83,
						84,
						85,
						82,
						79
					]
				}
			]
		},
		{
			"id": 97,
			"name": "ActionPanelItem",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 124,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 98,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 99,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 102,
									"name": "icon",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 103,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 104,
																					"name": "fileIcon",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "intrinsic",
																								"name": "string"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "PropTypes.string"
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						104
																					]
																				}
																			]
																		}
																	}
																],
																"name": "InferProps"
															}
														],
														"name": "Required"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 105,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 110,
																					"name": "mask",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "reference",
																								"name": "ImageMask"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 106,
																					"name": "source",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "union",
																								"types": [
																									{
																										"type": "intrinsic",
																										"name": "string"
																									},
																									{
																										"type": "reference",
																										"typeArguments": [
																											{
																												"type": "reflection",
																												"declaration": {
																													"id": 107,
																													"name": "__type",
																													"kind": 65536,
																													"kindString": "Type literal",
																													"flags": {},
																													"children": [
																														{
																															"id": 109,
																															"name": "dark",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														},
																														{
																															"id": 108,
																															"name": "light",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														}
																													],
																													"groups": [
																														{
																															"title": "Properties",
																															"kind": 1024,
																															"children": [
																																109,
																																108
																															]
																														}
																													]
																												}
																											}
																										],
																										"name": "InferProps"
																									}
																								]
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 111,
																					"name": "tintColor",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "union",
																								"types": [
																									{
																										"type": "intrinsic",
																										"name": "string"
																									},
																									{
																										"type": "reference",
																										"typeArguments": [
																											{
																												"type": "reflection",
																												"declaration": {
																													"id": 112,
																													"name": "__type",
																													"kind": 65536,
																													"kindString": "Type literal",
																													"flags": {},
																													"children": [
																														{
																															"id": 115,
																															"name": "adjustContrast",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "boolean"
																																	}
																																],
																																"name": "Requireable"
																															},
																															"defaultValue": "PropTypes.bool"
																														},
																														{
																															"id": 114,
																															"name": "dark",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														},
																														{
																															"id": 113,
																															"name": "light",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														}
																													],
																													"groups": [
																														{
																															"title": "Properties",
																															"kind": 1024,
																															"children": [
																																115,
																																114,
																																113
																															]
																														}
																													]
																												}
																											}
																										],
																										"name": "InferProps"
																									}
																								]
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						110,
																						106,
																						111
																					]
																				}
																			]
																		}
																	}
																],
																"name": "InferProps"
															}
														],
														"name": "Required"
													}
												]
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "imagePropType"
								},
								{
									"id": 100,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 120,
									"name": "onAction",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 121,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 122,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 123,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.func"
								},
								{
									"id": 116,
									"name": "shortcut",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reflection",
																"declaration": {
																	"id": 117,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 119,
																			"name": "key",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "intrinsic",
																						"name": "string"
																					}
																				],
																				"name": "Validator"
																			},
																			"defaultValue": "PropTypes.string.isRequired"
																		},
																		{
																			"id": 118,
																			"name": "modifiers",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "array",
																						"elementType": {
																							"type": "union",
																							"types": [
																								{
																									"type": "intrinsic",
																									"name": "undefined"
																								},
																								{
																									"type": "literal",
																									"value": null
																								},
																								{
																									"type": "intrinsic",
																									"name": "string"
																								}
																							]
																						}
																					}
																				],
																				"name": "Validator"
																			},
																			"defaultValue": "..."
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				119,
																				118
																			]
																		}
																	]
																}
															}
														],
														"name": "InferProps"
													}
												],
												"name": "Required"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "keyboardShortcutPropType"
								},
								{
									"id": 101,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "PropTypes.string.isRequired"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										102,
										100,
										120,
										116,
										101
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						124,
						98
					]
				}
			]
		},
		{
			"id": 89,
			"name": "ActionPanelSection",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 93,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 90,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 91,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 92,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										92
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						93,
						90
					]
				}
			]
		},
		{
			"id": 128,
			"name": "ActionPanelSubmenu",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 151,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 129,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 130,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 133,
									"name": "icon",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 134,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 135,
																					"name": "fileIcon",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "intrinsic",
																								"name": "string"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "PropTypes.string"
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						135
																					]
																				}
																			]
																		}
																	}
																],
																"name": "InferProps"
															}
														],
														"name": "Required"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 136,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 141,
																					"name": "mask",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "reference",
																								"name": "ImageMask"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 137,
																					"name": "source",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "union",
																								"types": [
																									{
																										"type": "intrinsic",
																										"name": "string"
																									},
																									{
																										"type": "reference",
																										"typeArguments": [
																											{
																												"type": "reflection",
																												"declaration": {
																													"id": 138,
																													"name": "__type",
																													"kind": 65536,
																													"kindString": "Type literal",
																													"flags": {},
																													"children": [
																														{
																															"id": 140,
																															"name": "dark",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														},
																														{
																															"id": 139,
																															"name": "light",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														}
																													],
																													"groups": [
																														{
																															"title": "Properties",
																															"kind": 1024,
																															"children": [
																																140,
																																139
																															]
																														}
																													]
																												}
																											}
																										],
																										"name": "InferProps"
																									}
																								]
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 142,
																					"name": "tintColor",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "union",
																								"types": [
																									{
																										"type": "intrinsic",
																										"name": "string"
																									},
																									{
																										"type": "reference",
																										"typeArguments": [
																											{
																												"type": "reflection",
																												"declaration": {
																													"id": 143,
																													"name": "__type",
																													"kind": 65536,
																													"kindString": "Type literal",
																													"flags": {},
																													"children": [
																														{
																															"id": 146,
																															"name": "adjustContrast",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "boolean"
																																	}
																																],
																																"name": "Requireable"
																															},
																															"defaultValue": "PropTypes.bool"
																														},
																														{
																															"id": 145,
																															"name": "dark",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														},
																														{
																															"id": 144,
																															"name": "light",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														}
																													],
																													"groups": [
																														{
																															"title": "Properties",
																															"kind": 1024,
																															"children": [
																																146,
																																145,
																																144
																															]
																														}
																													]
																												}
																											}
																										],
																										"name": "InferProps"
																									}
																								]
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						141,
																						137,
																						142
																					]
																				}
																			]
																		}
																	}
																],
																"name": "InferProps"
															}
														],
														"name": "Required"
													}
												]
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "imagePropType"
								},
								{
									"id": 131,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 147,
									"name": "shortcut",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reflection",
																"declaration": {
																	"id": 148,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 150,
																			"name": "key",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "intrinsic",
																						"name": "string"
																					}
																				],
																				"name": "Validator"
																			},
																			"defaultValue": "PropTypes.string.isRequired"
																		},
																		{
																			"id": 149,
																			"name": "modifiers",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "array",
																						"elementType": {
																							"type": "union",
																							"types": [
																								{
																									"type": "intrinsic",
																									"name": "undefined"
																								},
																								{
																									"type": "literal",
																									"value": null
																								},
																								{
																									"type": "intrinsic",
																									"name": "string"
																								}
																							]
																						}
																					}
																				],
																				"name": "Validator"
																			},
																			"defaultValue": "..."
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				150,
																				149
																			]
																		}
																	]
																}
															}
														],
														"name": "InferProps"
													}
												],
												"name": "Required"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "keyboardShortcutPropType"
								},
								{
									"id": 132,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "PropTypes.string.isRequired"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										133,
										131,
										147,
										132
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						151,
						129
					]
				}
			]
		},
		{
			"id": 176,
			"name": "Detail",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 182,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 177,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 178,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 180,
									"name": "isLoading",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.bool"
								},
								{
									"id": 181,
									"name": "markdown",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 179,
									"name": "navigationTitle",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										180,
										181,
										179
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						182,
						177
					]
				}
			]
		},
		{
			"id": 192,
			"name": "Form",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 205,
					"name": "Checkbox",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 247,
							"name": "FormCheckbox"
						}
					}
				},
				{
					"id": 206,
					"name": "DatePicker",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 264,
							"name": "FormDatePicker"
						}
					}
				},
				{
					"id": 208,
					"name": "Dropdown",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 284,
							"name": "FormDropdown"
						}
					}
				},
				{
					"id": 210,
					"name": "DropdownItem",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 310,
							"name": "FormDropdownItem"
						}
					}
				},
				{
					"id": 209,
					"name": "DropdownSection",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 302,
							"name": "FormDropdownSection"
						}
					}
				},
				{
					"id": 207,
					"name": "Separator",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 280,
							"name": "FormSeparator"
						}
					}
				},
				{
					"id": 211,
					"name": "TagPicker",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 333,
							"name": "FormTagPicker"
						}
					}
				},
				{
					"id": 212,
					"name": "TagPickerItem",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 351,
							"name": "FormTagPickerItem"
						}
					}
				},
				{
					"id": 204,
					"name": "TextArea",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 230,
							"name": "FormTextArea"
						}
					}
				},
				{
					"id": 203,
					"name": "TextField",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 213,
							"name": "FormTextField"
						}
					}
				},
				{
					"id": 202,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 193,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 194,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 197,
									"name": "isLoading",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.bool"
								},
								{
									"id": 196,
									"name": "navigationTitle",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 198,
									"name": "onSubmit",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 199,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 200,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 201,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.func"
								},
								{
									"id": 195,
									"name": "submitTitle",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										197,
										196,
										198,
										195
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						205,
						206,
						208,
						210,
						209,
						207,
						211,
						212,
						204,
						203,
						202,
						193
					]
				}
			]
		},
		{
			"id": 250,
			"name": "FormCheckbox",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 263,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 251,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 252,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 257,
									"name": "defaultValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.bool"
								},
								{
									"id": 253,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "PropTypes.string.isRequired"
								},
								{
									"id": 258,
									"name": "label",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 259,
									"name": "onChange",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 260,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 261,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 262,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.func"
								},
								{
									"id": 255,
									"name": "storeValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.bool"
								},
								{
									"id": 254,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 256,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.bool"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										257,
										253,
										258,
										259,
										255,
										254,
										256
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						263,
						251
					]
				}
			]
		},
		{
			"id": 267,
			"name": "FormDatePicker",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 279,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 268,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 269,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 274,
									"name": "defaultValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Date"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 270,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "PropTypes.string.isRequired"
								},
								{
									"id": 275,
									"name": "onChange",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 276,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 277,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 278,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.func"
								},
								{
									"id": 272,
									"name": "storeValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.bool"
								},
								{
									"id": 271,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 273,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Date"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										274,
										270,
										275,
										272,
										271,
										273
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						279,
						268
					]
				}
			]
		},
		{
			"id": 287,
			"name": "FormDropdown",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 301,
					"name": "Item",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 310,
							"name": "FormDropdownItem"
						}
					}
				},
				{
					"id": 300,
					"name": "Section",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 302,
							"name": "FormDropdownSection"
						}
					}
				},
				{
					"id": 299,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 288,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 289,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 294,
									"name": "defaultValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 290,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "PropTypes.string.isRequired"
								},
								{
									"id": 295,
									"name": "onChange",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 296,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 297,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 298,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.func"
								},
								{
									"id": 292,
									"name": "storeValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.bool"
								},
								{
									"id": 291,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 293,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										294,
										290,
										295,
										292,
										291,
										293
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						301,
						300,
						299,
						288
					]
				}
			]
		},
		{
			"id": 313,
			"name": "FormDropdownItem",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 332,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 314,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 315,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 318,
									"name": "icon",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 319,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 320,
																					"name": "fileIcon",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "intrinsic",
																								"name": "string"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "PropTypes.string"
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						320
																					]
																				}
																			]
																		}
																	}
																],
																"name": "InferProps"
															}
														],
														"name": "Required"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 321,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 326,
																					"name": "mask",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "reference",
																								"name": "ImageMask"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 322,
																					"name": "source",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "union",
																								"types": [
																									{
																										"type": "intrinsic",
																										"name": "string"
																									},
																									{
																										"type": "reference",
																										"typeArguments": [
																											{
																												"type": "reflection",
																												"declaration": {
																													"id": 323,
																													"name": "__type",
																													"kind": 65536,
																													"kindString": "Type literal",
																													"flags": {},
																													"children": [
																														{
																															"id": 325,
																															"name": "dark",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														},
																														{
																															"id": 324,
																															"name": "light",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														}
																													],
																													"groups": [
																														{
																															"title": "Properties",
																															"kind": 1024,
																															"children": [
																																325,
																																324
																															]
																														}
																													]
																												}
																											}
																										],
																										"name": "InferProps"
																									}
																								]
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 327,
																					"name": "tintColor",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "union",
																								"types": [
																									{
																										"type": "intrinsic",
																										"name": "string"
																									},
																									{
																										"type": "reference",
																										"typeArguments": [
																											{
																												"type": "reflection",
																												"declaration": {
																													"id": 328,
																													"name": "__type",
																													"kind": 65536,
																													"kindString": "Type literal",
																													"flags": {},
																													"children": [
																														{
																															"id": 331,
																															"name": "adjustContrast",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "boolean"
																																	}
																																],
																																"name": "Requireable"
																															},
																															"defaultValue": "PropTypes.bool"
																														},
																														{
																															"id": 330,
																															"name": "dark",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														},
																														{
																															"id": 329,
																															"name": "light",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														}
																													],
																													"groups": [
																														{
																															"title": "Properties",
																															"kind": 1024,
																															"children": [
																																331,
																																330,
																																329
																															]
																														}
																													]
																												}
																											}
																										],
																										"name": "InferProps"
																									}
																								]
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						326,
																						322,
																						327
																					]
																				}
																			]
																		}
																	}
																],
																"name": "InferProps"
															}
														],
														"name": "Required"
													}
												]
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "imagePropType"
								},
								{
									"id": 317,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "PropTypes.string.isRequired"
								},
								{
									"id": 316,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										318,
										317,
										316
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						332,
						314
					]
				}
			]
		},
		{
			"id": 305,
			"name": "FormDropdownSection",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 309,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 306,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 307,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 308,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										308
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						309,
						306
					]
				}
			]
		},
		{
			"id": 282,
			"name": "FormSeparator",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 283,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						283
					]
				}
			]
		},
		{
			"id": 336,
			"name": "FormTagPicker",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 350,
					"name": "Item",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 351,
							"name": "FormTagPickerItem"
						}
					}
				},
				{
					"id": 349,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 337,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 338,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 344,
									"name": "defaultValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "undefined"
														},
														{
															"type": "literal",
															"value": null
														},
														{
															"type": "intrinsic",
															"name": "string"
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 339,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "PropTypes.string.isRequired"
								},
								{
									"id": 345,
									"name": "onChange",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 346,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 347,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 348,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.func"
								},
								{
									"id": 342,
									"name": "placeholder",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 341,
									"name": "storeValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.bool"
								},
								{
									"id": 340,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 343,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "undefined"
														},
														{
															"type": "literal",
															"value": null
														},
														{
															"type": "intrinsic",
															"name": "string"
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										344,
										339,
										345,
										342,
										341,
										340,
										343
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						350,
						349,
						337
					]
				}
			]
		},
		{
			"id": 354,
			"name": "FormTagPickerItem",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 373,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 355,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 356,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 359,
									"name": "icon",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 360,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 361,
																					"name": "fileIcon",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "intrinsic",
																								"name": "string"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "PropTypes.string"
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						361
																					]
																				}
																			]
																		}
																	}
																],
																"name": "InferProps"
															}
														],
														"name": "Required"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 362,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 367,
																					"name": "mask",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "reference",
																								"name": "ImageMask"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 363,
																					"name": "source",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "union",
																								"types": [
																									{
																										"type": "intrinsic",
																										"name": "string"
																									},
																									{
																										"type": "reference",
																										"typeArguments": [
																											{
																												"type": "reflection",
																												"declaration": {
																													"id": 364,
																													"name": "__type",
																													"kind": 65536,
																													"kindString": "Type literal",
																													"flags": {},
																													"children": [
																														{
																															"id": 366,
																															"name": "dark",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														},
																														{
																															"id": 365,
																															"name": "light",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														}
																													],
																													"groups": [
																														{
																															"title": "Properties",
																															"kind": 1024,
																															"children": [
																																366,
																																365
																															]
																														}
																													]
																												}
																											}
																										],
																										"name": "InferProps"
																									}
																								]
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 368,
																					"name": "tintColor",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "union",
																								"types": [
																									{
																										"type": "intrinsic",
																										"name": "string"
																									},
																									{
																										"type": "reference",
																										"typeArguments": [
																											{
																												"type": "reflection",
																												"declaration": {
																													"id": 369,
																													"name": "__type",
																													"kind": 65536,
																													"kindString": "Type literal",
																													"flags": {},
																													"children": [
																														{
																															"id": 372,
																															"name": "adjustContrast",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "boolean"
																																	}
																																],
																																"name": "Requireable"
																															},
																															"defaultValue": "PropTypes.bool"
																														},
																														{
																															"id": 371,
																															"name": "dark",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														},
																														{
																															"id": 370,
																															"name": "light",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														}
																													],
																													"groups": [
																														{
																															"title": "Properties",
																															"kind": 1024,
																															"children": [
																																372,
																																371,
																																370
																															]
																														}
																													]
																												}
																											}
																										],
																										"name": "InferProps"
																									}
																								]
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						367,
																						363,
																						368
																					]
																				}
																			]
																		}
																	}
																],
																"name": "InferProps"
															}
														],
														"name": "Required"
													}
												]
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "imagePropType"
								},
								{
									"id": 358,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "PropTypes.string.isRequired"
								},
								{
									"id": 357,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "PropTypes.string.isRequired"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										359,
										358,
										357
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						373,
						355
					]
				}
			]
		},
		{
			"id": 233,
			"name": "FormTextArea",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 246,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 234,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 235,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 240,
									"name": "defaultValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 236,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "PropTypes.string.isRequired"
								},
								{
									"id": 242,
									"name": "onChange",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 243,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 244,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 245,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.func"
								},
								{
									"id": 241,
									"name": "placeholder",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 238,
									"name": "storeValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.bool"
								},
								{
									"id": 237,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 239,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										240,
										236,
										242,
										241,
										238,
										237,
										239
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						246,
						234
					]
				}
			]
		},
		{
			"id": 216,
			"name": "FormTextField",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 229,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 217,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 218,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 223,
									"name": "defaultValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 219,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "PropTypes.string.isRequired"
								},
								{
									"id": 225,
									"name": "onChange",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 226,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 227,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 228,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.func"
								},
								{
									"id": 224,
									"name": "placeholder",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 221,
									"name": "storeValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.bool"
								},
								{
									"id": 220,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 222,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										223,
										219,
										225,
										224,
										221,
										220,
										222
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						229,
						217
					]
				}
			]
		},
		{
			"id": 73,
			"name": "GlobalActionPanel",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 74,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						74
					]
				}
			]
		},
		{
			"id": 472,
			"name": "List",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 487,
					"name": "Item",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 499,
							"name": "ListItem"
						}
					}
				},
				{
					"id": 488,
					"name": "Section",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 489,
							"name": "ListSection"
						}
					}
				},
				{
					"id": 486,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 473,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 474,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 478,
									"name": "onSearchTextChange",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 479,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 480,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 481,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.func"
								},
								{
									"id": 482,
									"name": "onSelectionChange",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 483,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 484,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 485,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.func"
								},
								{
									"id": 476,
									"name": "searchBarPlaceholder",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 475,
									"name": "selectedItemId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 477,
									"name": "throttle",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.bool"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										478,
										482,
										476,
										475,
										477
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						487,
						488,
						486,
						473
					]
				}
			]
		},
		{
			"id": 502,
			"name": "ListItem",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 524,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 503,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 504,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 508,
									"name": "accessoryTitle",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 510,
									"name": "icon",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 511,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 512,
																					"name": "fileIcon",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "intrinsic",
																								"name": "string"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "PropTypes.string"
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						512
																					]
																				}
																			]
																		}
																	}
																],
																"name": "InferProps"
															}
														],
														"name": "Required"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 513,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 518,
																					"name": "mask",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "reference",
																								"name": "ImageMask"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 514,
																					"name": "source",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "union",
																								"types": [
																									{
																										"type": "intrinsic",
																										"name": "string"
																									},
																									{
																										"type": "reference",
																										"typeArguments": [
																											{
																												"type": "reflection",
																												"declaration": {
																													"id": 515,
																													"name": "__type",
																													"kind": 65536,
																													"kindString": "Type literal",
																													"flags": {},
																													"children": [
																														{
																															"id": 517,
																															"name": "dark",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														},
																														{
																															"id": 516,
																															"name": "light",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														}
																													],
																													"groups": [
																														{
																															"title": "Properties",
																															"kind": 1024,
																															"children": [
																																517,
																																516
																															]
																														}
																													]
																												}
																											}
																										],
																										"name": "InferProps"
																									}
																								]
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 519,
																					"name": "tintColor",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "union",
																								"types": [
																									{
																										"type": "intrinsic",
																										"name": "string"
																									},
																									{
																										"type": "reference",
																										"typeArguments": [
																											{
																												"type": "reflection",
																												"declaration": {
																													"id": 520,
																													"name": "__type",
																													"kind": 65536,
																													"kindString": "Type literal",
																													"flags": {},
																													"children": [
																														{
																															"id": 523,
																															"name": "adjustContrast",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "boolean"
																																	}
																																],
																																"name": "Requireable"
																															},
																															"defaultValue": "PropTypes.bool"
																														},
																														{
																															"id": 522,
																															"name": "dark",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														},
																														{
																															"id": 521,
																															"name": "light",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														}
																													],
																													"groups": [
																														{
																															"title": "Properties",
																															"kind": 1024,
																															"children": [
																																523,
																																522,
																																521
																															]
																														}
																													]
																												}
																											}
																										],
																										"name": "InferProps"
																									}
																								]
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						518,
																						514,
																						519
																					]
																				}
																			]
																		}
																	}
																],
																"name": "InferProps"
															}
														],
														"name": "Required"
													}
												]
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "imagePropType"
								},
								{
									"id": 505,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 509,
									"name": "keywords",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "undefined"
														},
														{
															"type": "literal",
															"value": null
														},
														{
															"type": "intrinsic",
															"name": "string"
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 507,
									"name": "subtitle",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 506,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "PropTypes.string.isRequired"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										508,
										510,
										505,
										509,
										507,
										506
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						524,
						503
					]
				}
			]
		},
		{
			"id": 492,
			"name": "ListSection",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 498,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 493,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 494,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 495,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 497,
									"name": "subtitle",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 496,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										495,
										497,
										496
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						498,
						493
					]
				}
			]
		},
		{
			"id": 718,
			"name": "Color",
			"kind": 8,
			"kindString": "Enumeration",
			"flags": {},
			"comment": {
				"shortText": "The standard colors. Use this colors for consistency.",
				"tags": [
					{
						"tag": "remarks",
						"text": "\nThe colors automatically adopt to light and dark theme.\n"
					},
					{
						"tag": "example",
						"text": "\n```typescript\nimport { Color, Icon, List } from \"@raycast/api\";\n\nexport default function Command() {\n return (\n <List>\n   <List.Item title=\"Blue\" icon={{ source: Icon.Circle, tintColor: Color.Blue }} />\n   <List.Item title=\"Green\" icon={{ source: Icon.Circle, tintColor: Color.Green }} />\n   <List.Item title=\"Brown\" icon={{ source: Icon.Circle, tintColor: Color.Brown }} />\n   <List.Item title=\"Magenta\" icon={{ source: Icon.Circle, tintColor: Color.Magenta }} />\n   <List.Item title=\"Orange\" icon={{ source: Icon.Circle, tintColor: Color.Orange }} />\n   <List.Item title=\"Purple\" icon={{ source: Icon.Circle, tintColor: Color.Purple }} />\n   <List.Item title=\"Red\" icon={{ source: Icon.Circle, tintColor: Color.Red }} />\n   <List.Item title=\"Yellow\" icon={{ source: Icon.Circle, tintColor: Color.Yellow }} />\n   <List.Item title=\"PrimaryText\" icon={{ source: Icon.Circle, tintColor: Color.PrimaryText }} />\n   <List.Item title=\"SecondaryText\" icon={{ source: Icon.Circle, tintColor: Color.SecondaryText }} />\n </List>\n );\n};\n```\n"
					},
					{
						"tag": "subcategory",
						"text": "Colors\n"
					}
				]
			},
			"children": [
				{
					"id": 719,
					"name": "Blue",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"raycast-blue\""
				},
				{
					"id": 720,
					"name": "Brown",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"raycast-brown\""
				},
				{
					"id": 721,
					"name": "Green",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"raycast-green\""
				},
				{
					"id": 722,
					"name": "Magenta",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"raycast-magenta\""
				},
				{
					"id": 723,
					"name": "Orange",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"raycast-orange\""
				},
				{
					"id": 727,
					"name": "PrimaryText",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"raycast-primary-text\""
				},
				{
					"id": 724,
					"name": "Purple",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"raycast-purple\""
				},
				{
					"id": 725,
					"name": "Red",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"raycast-red\""
				},
				{
					"id": 728,
					"name": "SecondaryText",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"raycast-secondary-text\""
				},
				{
					"id": 726,
					"name": "Yellow",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"raycast-yellow\""
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						719,
						720,
						721,
						722,
						723,
						727,
						724,
						725,
						728,
						726
					]
				}
			]
		},
		{
			"id": 733,
			"name": "Icon",
			"kind": 8,
			"kindString": "Enumeration",
			"flags": {},
			"comment": {
				"shortText": "List of built-in icons that can be used for actions or list items.",
				"tags": [
					{
						"tag": "example",
						"text": "\n```typescript\nimport { Icon, List } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List>\n      <List.Item title=\"Icon\" icon={Icon.Circle} />\n    </List>\n  );\n};\n```\n"
					},
					{
						"tag": "subcategory",
						"text": "Icons & Images\n"
					}
				]
			},
			"children": [
				{
					"id": 734,
					"name": "ArrowClockwise",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"arrow-clockwise-16\""
				},
				{
					"id": 735,
					"name": "ArrowRight",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"arrow-right-16\""
				},
				{
					"id": 736,
					"name": "Binoculars",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"binoculars-16\""
				},
				{
					"id": 737,
					"name": "Bubble",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"bubble-left-16\""
				},
				{
					"id": 738,
					"name": "Calendar",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"calendar-16\""
				},
				{
					"id": 739,
					"name": "Checkmark",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"checkmark-circle-16\""
				},
				{
					"id": 740,
					"name": "ChevronDown",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"chevron-down-16\""
				},
				{
					"id": 741,
					"name": "ChevronUp",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"chevron-up-16\""
				},
				{
					"id": 742,
					"name": "Circle",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"circle-16\""
				},
				{
					"id": 743,
					"name": "Clipboard",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"doc-on-clipboard-16\""
				},
				{
					"id": 744,
					"name": "Clock",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"clock-16\""
				},
				{
					"id": 745,
					"name": "Desktop",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"desktopcomputer-16\""
				},
				{
					"id": 746,
					"name": "Document",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"doc-16\""
				},
				{
					"id": 747,
					"name": "Dot",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"dot-16\""
				},
				{
					"id": 748,
					"name": "Download",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"square-and-arrow-down-16\""
				},
				{
					"id": 749,
					"name": "Envelope",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"envelope-16\""
				},
				{
					"id": 750,
					"name": "ExclamationMark",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"exclamation-mark-triangle-16\""
				},
				{
					"id": 751,
					"name": "Eye",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"eye-16\""
				},
				{
					"id": 752,
					"name": "EyeSlash",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"eye-slash-16\""
				},
				{
					"id": 753,
					"name": "Finder",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"finder-16\""
				},
				{
					"id": 754,
					"name": "Gear",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"gearshape-16\""
				},
				{
					"id": 755,
					"name": "Globe",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"globe-16\""
				},
				{
					"id": 756,
					"name": "Hammer",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"hammer-16\""
				},
				{
					"id": 757,
					"name": "LevelMeter",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"level-meter-16\""
				},
				{
					"id": 758,
					"name": "Link",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"link-16\""
				},
				{
					"id": 759,
					"name": "List",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"main-list-view-16\""
				},
				{
					"id": 760,
					"name": "MagnifyingGlass",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"magnifyingglass-16\""
				},
				{
					"id": 761,
					"name": "MemoryChip",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"memorychip-16\""
				},
				{
					"id": 762,
					"name": "Message",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"message-16\""
				},
				{
					"id": 763,
					"name": "Pencil",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"pencil-16\""
				},
				{
					"id": 764,
					"name": "Person",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"person-crop-circle-16\""
				},
				{
					"id": 765,
					"name": "Phone",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"phone-16\""
				},
				{
					"id": 766,
					"name": "Pin",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"pin-16\""
				},
				{
					"id": 767,
					"name": "Plus",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"plus-16\""
				},
				{
					"id": 775,
					"name": "QuestionMark",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"questionmark-circle-16\""
				},
				{
					"id": 768,
					"name": "Sidebar",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"sidebar-right-16\""
				},
				{
					"id": 769,
					"name": "SpeakerArrowDown",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"speaker-arrow-down-16\""
				},
				{
					"id": 770,
					"name": "SpeakerArrowUp",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"speaker-arrow-up-16\""
				},
				{
					"id": 771,
					"name": "SpeakerSlash",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"speaker-slash-16\""
				},
				{
					"id": 772,
					"name": "Star",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"star-16\""
				},
				{
					"id": 776,
					"name": "Terminal",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"terminal-16\""
				},
				{
					"id": 773,
					"name": "Text",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"text-alignleft-16\""
				},
				{
					"id": 774,
					"name": "TextDocument",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"doc-plaintext-16\""
				},
				{
					"id": 777,
					"name": "Trash",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"trash-16\""
				},
				{
					"id": 778,
					"name": "Upload",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"square-and-arrow-up-16\""
				},
				{
					"id": 779,
					"name": "Video",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"video-16\""
				},
				{
					"id": 780,
					"name": "Window",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"macwindow-16\""
				},
				{
					"id": 781,
					"name": "XmarkCircle",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"xmark-circle-16\""
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						734,
						735,
						736,
						737,
						738,
						739,
						740,
						741,
						742,
						743,
						744,
						745,
						746,
						747,
						748,
						749,
						750,
						751,
						752,
						753,
						754,
						755,
						756,
						757,
						758,
						759,
						760,
						761,
						762,
						763,
						764,
						765,
						766,
						767,
						775,
						768,
						769,
						770,
						771,
						772,
						776,
						773,
						774,
						777,
						778,
						779,
						780,
						781
					]
				}
			]
		},
		{
			"id": 793,
			"name": "ImageMask",
			"kind": 8,
			"kindString": "Enumeration",
			"flags": {},
			"comment": {
				"shortText": "Available masks that can be used to change the shape of an image.",
				"tags": [
					{
						"tag": "remarks",
						"text": "\nCan be handy to shape avatars or other items in a list.\n"
					},
					{
						"tag": "example",
						"text": "\n```typescript\nimport { ImageMask, List } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List>\n      <List.Item title=\"Icon\" icon={{ source: \"https://raycast.com/uploads/avatar.png\", mask: ImageMask.Circle }} />\n    </List>\n  );\n};\n```\n"
					},
					{
						"tag": "subcategory",
						"text": "Icons & Images\n"
					}
				]
			},
			"children": [
				{
					"id": 794,
					"name": "Circle",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Masks an image with a circle. Good to use for avatars."
					},
					"defaultValue": "\"circle\""
				},
				{
					"id": 795,
					"name": "RoundedRectangle",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Masks an image with a rounded rectangle."
					},
					"defaultValue": "\"roundedRectangle\""
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						794,
						795
					]
				}
			]
		},
		{
			"id": 831,
			"name": "ToastStyle",
			"kind": 8,
			"kindString": "Enumeration",
			"flags": {},
			"comment": {
				"shortText": "Defines the visual style of the Toast.",
				"tags": [
					{
						"tag": "remarks",
						"text": "\nUse {@link ToastStyle.Success} for confirmations and {@link ToastStyle.Failure} for displaying errors.\nUse {@link ToastStyle.Animated} when your Toast should be shown until a process is completed.\nYou can hide it later by using {@link Toast.hide} or update the properties of an existing Toast.\n"
					},
					{
						"tag": "subcategory",
						"text": "Toast\n"
					}
				]
			},
			"children": [
				{
					"id": 834,
					"name": "Animated",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"ANIMATED\""
				},
				{
					"id": 833,
					"name": "Failure",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"FAILURE\""
				},
				{
					"id": 832,
					"name": "Success",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"SUCCESS\""
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						834,
						833,
						832
					]
				}
			]
		},
		{
			"id": 804,
			"name": "Toast",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"shortText": "A Toast with a certain style, title, and message.",
				"tags": [
					{
						"tag": "remarks",
						"text": "\nUse {@link showToast} as shortcut for creating and showing a Toast.\n"
					},
					{
						"tag": "example",
						"text": "\n```typescript\nimport { Toast, ToastStyle } from \"@raycast/api\";\nimport { setTimeout } from \"timers/promises\";\n\nexport default async () => {\n  const toast = new Toast({ style: ToastStyle.Animated, title: \"Uploading image\" });\n  await toast.show();\n\n  await setTimeout(1000);\n\n  toast.style = ToastStyle.Success;\n  toast.title = \"Uploaded image\";\n};\n```\n"
					},
					{
						"tag": "subcategory",
						"text": "Toast\n"
					}
				]
			},
			"children": [
				{
					"id": 805,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"signatures": [
						{
							"id": 806,
							"name": "new Toast",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 807,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 827,
										"name": "ToastOptions"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 804,
								"name": "Toast"
							}
						}
					]
				},
				{
					"id": 817,
					"name": "message",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isPublic": true
					},
					"getSignature": [
						{
							"id": 818,
							"name": "message",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"setSignature": [
						{
							"id": 819,
							"name": "message",
							"kind": 1048576,
							"kindString": "Set signature",
							"flags": {},
							"parameters": [
								{
									"id": 820,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 809,
					"name": "style",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isPublic": true
					},
					"getSignature": [
						{
							"id": 810,
							"name": "style",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 831,
								"name": "ToastStyle"
							}
						}
					],
					"setSignature": [
						{
							"id": 811,
							"name": "style",
							"kind": 1048576,
							"kindString": "Set signature",
							"flags": {},
							"parameters": [
								{
									"id": 812,
									"name": "style",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 831,
										"name": "ToastStyle"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 813,
					"name": "title",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isPublic": true
					},
					"getSignature": [
						{
							"id": 814,
							"name": "title",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"setSignature": [
						{
							"id": 815,
							"name": "title",
							"kind": 1048576,
							"kindString": "Set signature",
							"flags": {},
							"parameters": [
								{
									"id": 816,
									"name": "title",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 823,
					"name": "hide",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"signatures": [
						{
							"id": 824,
							"name": "hide",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Hides the Toast.",
								"returns": "A promise that resolves when toast is hidden.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 821,
					"name": "show",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"signatures": [
						{
							"id": 822,
							"name": "show",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Shows the Toast.",
								"returns": "A promise that resolves when toast is shown.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						805
					]
				},
				{
					"title": "Accessors",
					"kind": 262144,
					"children": [
						817,
						809,
						813
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						823,
						821
					]
				}
			]
		},
		{
			"id": 160,
			"name": "ActionPanelItemProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link ActionPanel.Item} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Action Panel\n"
					}
				]
			},
			"children": [
				{
					"id": 163,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon displayed for the action."
					},
					"type": {
						"type": "reference",
						"id": 784,
						"name": "ImageLike"
					}
				},
				{
					"id": 161,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "ID of the item.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nMake sure to assign each section or item a unique ID. If no ID is specified, a memoized auto-generated is used.\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 164,
					"name": "shortcut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The keyboard shortcut for the item."
					},
					"type": {
						"type": "reference",
						"id": 42,
						"name": "KeyboardShortcut"
					}
				},
				{
					"id": 162,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The title displayed for the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 165,
					"name": "onAction",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 166,
							"name": "onAction",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback that is triggered when the item is selected."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						163,
						161,
						164,
						162
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						165
					]
				}
			]
		},
		{
			"id": 154,
			"name": "ActionPanelProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link ActionPanel} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Action Panel\n"
					}
				]
			},
			"children": [
				{
					"id": 155,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Sections or items. If {@link ActionPanel.Item} elements are specified, a default section is automatically created."
					},
					"type": {
						"type": "reference",
						"id": 152,
						"name": "ActionPanelChildren"
					}
				},
				{
					"id": 156,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The title displayed at the top of the panel"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						155,
						156
					]
				}
			]
		},
		{
			"id": 157,
			"name": "ActionPanelSectionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link ActionPanel.Section} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Action Panel\n"
					}
				]
			},
			"children": [
				{
					"id": 158,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The item elements of the section.\nWhen used for the action panel, the first item in the list is the *primary* action that will be triggered by the default shortcut (ENTER), while the second item is the *secondary* action triggered by CMD + ENTER."
					},
					"type": {
						"type": "reference",
						"id": 153,
						"name": "ActionPanelSectionChildren"
					}
				},
				{
					"id": 159,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Title displayed above the section"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						158,
						159
					]
				}
			]
		},
		{
			"id": 691,
			"name": "ActionPanelState",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Return type of the {@link useActionPanel} hook to perform global Action Panel updates.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Action Panel\n"
					}
				]
			},
			"children": [
				{
					"id": 692,
					"name": "update",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 693,
							"name": "update",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Updates the global Action Panel."
							},
							"parameters": [
								{
									"id": 694,
									"name": "actionPanel",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 154,
														"name": "ActionPanelProps"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "any"
																	}
																],
																"name": "JSXElementConstructor"
															}
														]
													}
												],
												"name": "ReactElement"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						692
					]
				}
			]
		},
		{
			"id": 167,
			"name": "ActionPanelSubmenuProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link ActionPanel.Submenu} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Action Panel\n"
					}
				]
			},
			"children": [
				{
					"id": 172,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Items of the submenu.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\n<ActionPanel.Submenu title=\"Submenu\">\n   <ActionPanel.Item title=\"Just an action\" />\n</ActionPanel.Submenu>\n```\n"
							},
							{
								"tag": "remarks",
								"text": "\nIf {@link ActionPanel.Item} elements are specified, a default section is automatically created.\\\nUse {@link ActionPanel.Submenu} as parent when specifying sub-menu's children to make code is more readable.\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 152,
						"name": "ActionPanelChildren"
					}
				},
				{
					"id": 170,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon displayed for the submenu."
					},
					"type": {
						"type": "reference",
						"id": 784,
						"name": "ImageLike"
					}
				},
				{
					"id": 168,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "ID of the submenu.\nMake sure to assign each section a unique ID or a UUID will be auto-generated."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 171,
					"name": "shortcut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The keyboard shortcut for the submenu."
					},
					"type": {
						"type": "reference",
						"id": 42,
						"name": "KeyboardShortcut"
					}
				},
				{
					"id": 169,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The title displayed for submenu."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						172,
						170,
						168,
						171,
						169
					]
				}
			]
		},
		{
			"id": 28,
			"name": "Application",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "An object that represents a locally installed application on the system.",
				"tags": [
					{
						"tag": "remarks",
						"text": "\nIt can be used to open files or folders in a specific application. Use {@link getApplications} or\n{@link getDefaultApplication} to get applications that can open a specific file or folder.\n"
					}
				]
			},
			"children": [
				{
					"id": 31,
					"name": "bundleId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The bundle identifier of the application, e.g. `com.raycast.macos`."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 29,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The display name of the application."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 30,
					"name": "path",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The absolute path to the application bundle, e.g. `/Applications/Raycast.app`,"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						31,
						29,
						30
					]
				}
			]
		},
		{
			"id": 558,
			"name": "CopyToClipboardActionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link CopyToClipboardAction} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Actions\n"
					}
				]
			},
			"children": [
				{
					"id": 559,
					"name": "content",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The contents that will be written to the clipboard as string."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 561,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A optional icon displayed for the item. See {@link ImageLike} for the supported formats and types.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "{@link Icon.Clipboard}\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 784,
						"name": "ImageLike"
					}
				},
				{
					"id": 562,
					"name": "shortcut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The keyboard shortcut for the action."
					},
					"type": {
						"type": "reference",
						"id": 42,
						"name": "KeyboardShortcut"
					}
				},
				{
					"id": 560,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An optional title for the action."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 563,
					"name": "onCopy",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 564,
							"name": "onCopy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback when the content was copied to clipboard.",
								"tags": [
									{
										"tag": "remarks",
										"text": "\nThis is handy when you want to act on the copied content, e.g. up-rank recently copied content.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 565,
									"name": "content",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						559,
						561,
						562,
						560
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						563
					]
				}
			]
		},
		{
			"id": 183,
			"name": "DetailProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Detail} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Detail\n"
					}
				]
			},
			"children": [
				{
					"id": 186,
					"name": "actions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A reference to an {@link ActionPanel}."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 154,
										"name": "ActionPanelProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ActionsInterface.actions"
					}
				},
				{
					"id": 185,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": ""
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "unknown"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							}
						]
					}
				},
				{
					"id": 188,
					"name": "isLoading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates whether a loading bar should be shown or hidden below the search bar",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "false\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "NavigationChildInterface.isLoading"
					}
				},
				{
					"id": 184,
					"name": "markdown",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The CommonMark string to be rendered."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 187,
					"name": "navigationTitle",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The main title for that view displayed in Raycast",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "Command title\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "NavigationChildInterface.navigationTitle"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						186,
						185,
						188,
						184,
						187
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "ActionsInterface"
				},
				{
					"type": "reference",
					"name": "NavigationChildInterface"
				}
			]
		},
		{
			"id": 662,
			"name": "Environment",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Holds data about the environment the command is running in. Use the global {@link environment} object to retrieve values."
			},
			"children": [
				{
					"id": 666,
					"name": "assetsPath",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The absolute path to the assets directory of the extension.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThis directory is used internally to load icons, images, and other bundled assets.\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 665,
					"name": "commandName",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The name of the launched command, as specified in package.json"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 664,
					"name": "extensionName",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The name of the extension, as specified in package.json"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 668,
					"name": "isDevelopment",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Indicates whether the command is a development command (vs. an installed command from the Store)."
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 663,
					"name": "raycastVersion",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The version of the main Raycast app"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 667,
					"name": "supportPath",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The absolute path for the support directory of an extension. Use it to read and write files related to your extension or command.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThe directory at this path might not physically exist already. Use Node's `fs` module to make sure this directory exists before using it.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nfs.mkdirSync(ray.environment.supportPath, { recursive: true });\n```\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						666,
						665,
						664,
						668,
						663,
						667
					]
				}
			]
		},
		{
			"id": 782,
			"name": "FileIcon",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "An icon as it's used in the Finder.",
				"tags": [
					{
						"tag": "example",
						"text": "\n```typescript\nimport { List } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List>\n      <List.Item title=\"File icon\" icon={{ fileIcon: __filename }} />\n    </List>\n  );\n};\n```\n"
					},
					{
						"tag": "subcategory",
						"text": "Icons & Images\n"
					}
				]
			},
			"children": [
				{
					"id": 783,
					"name": "fileIcon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The path to a file or folder to get it's icon from."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						783
					]
				}
			]
		},
		{
			"id": 417,
			"name": "FormCheckboxProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form.Checkbox} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"children": [
				{
					"id": 423,
					"name": "defaultValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The default value of the item.\nKeep in mind that `defaultValue` will be configured once per component lifecycle. This means that if a user changes the value, `defaultValue` won't be configured on re-rendering.",
						"tags": [
							{
								"tag": "important",
								"text": "If you're using {@link FormItemProps.storeValue} and configured it as `true` then the stored value will be set."
							},
							{
								"tag": "important",
								"text": "If you configure {@link FormItemProps.value} at the same time with {@link FormItemProps.defaultValue}, the `value` will be set instead of `defaultValue`.\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 392,
						"name": "FormItemProps.defaultValue"
					}
				},
				{
					"id": 419,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "ID of the form item.\nMake sure to assign each form item a unique id."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 388,
						"name": "FormItemProps.id"
					}
				},
				{
					"id": 418,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The label displayed on the right side of the checkbox."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 421,
					"name": "storeValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates whether the value of the item should be persisted after submitting, and restored next time the form is rendered."
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 390,
						"name": "FormItemProps.storeValue"
					}
				},
				{
					"id": 420,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The title displayed on the left side of the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 389,
						"name": "FormItemProps.title"
					}
				},
				{
					"id": 422,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The current value of the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 391,
						"name": "FormItemProps.value"
					}
				},
				{
					"id": 424,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 425,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The callback which will be triggered on the {@link FormItemProps.value} change for the item."
							},
							"parameters": [
								{
									"id": 426,
									"name": "newValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 396,
										"name": "Value"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 394,
								"name": "FormItemProps.onChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 393,
						"name": "FormItemProps.onChange"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						423,
						419,
						418,
						421,
						420,
						422
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						424
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 387,
					"typeArguments": [
						{
							"type": "intrinsic",
							"name": "boolean"
						}
					],
					"name": "FormItemProps"
				}
			]
		},
		{
			"id": 427,
			"name": "FormDatePickerProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form.DatePicker} React component.\nThe default {@link FormDatePickerProps.value} of the date picker **must** be formatted according to {@link FormViewDatePicker.dateFormat}.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"children": [
				{
					"id": 432,
					"name": "defaultValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The default value of the item.\nKeep in mind that `defaultValue` will be configured once per component lifecycle. This means that if a user changes the value, `defaultValue` won't be configured on re-rendering.",
						"tags": [
							{
								"tag": "important",
								"text": "If you're using {@link FormItemProps.storeValue} and configured it as `true` then the stored value will be set."
							},
							{
								"tag": "important",
								"text": "If you configure {@link FormItemProps.value} at the same time with {@link FormItemProps.defaultValue}, the `value` will be set instead of `defaultValue`.\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"name": "Date"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 392,
						"name": "FormItemProps.defaultValue"
					}
				},
				{
					"id": 428,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "ID of the form item.\nMake sure to assign each form item a unique id."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 388,
						"name": "FormItemProps.id"
					}
				},
				{
					"id": 430,
					"name": "storeValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates whether the value of the item should be persisted after submitting, and restored next time the form is rendered."
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 390,
						"name": "FormItemProps.storeValue"
					}
				},
				{
					"id": 429,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The title displayed on the left side of the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 389,
						"name": "FormItemProps.title"
					}
				},
				{
					"id": 431,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The current value of the item."
					},
					"type": {
						"type": "reference",
						"name": "Date"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 391,
						"name": "FormItemProps.value"
					}
				},
				{
					"id": 433,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 434,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The callback which will be triggered on the {@link FormItemProps.value} change for the item."
							},
							"parameters": [
								{
									"id": 435,
									"name": "newValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 396,
										"name": "Value"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 394,
								"name": "FormItemProps.onChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 393,
						"name": "FormItemProps.onChange"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						432,
						428,
						430,
						429,
						431
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						433
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 387,
					"typeArguments": [
						{
							"type": "reference",
							"name": "Date"
						}
					],
					"name": "FormItemProps"
				}
			]
		},
		{
			"id": 450,
			"name": "FormDropdownItemProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form.Dropdown.Item} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"children": [
				{
					"id": 453,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A optional icon displayed for the item.\nSee {@link ImageLike} for the supported formats and types."
					},
					"type": {
						"type": "reference",
						"id": 784,
						"name": "ImageLike"
					}
				},
				{
					"id": 452,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The title displayed for the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 451,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Value of the dropdown item.\nMake sure to assign each unique value for each item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						453,
						452,
						451
					]
				}
			]
		},
		{
			"id": 437,
			"name": "FormDropdownProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form.Dropdown} React component.\nThe {@link FormDropdownProps.value} here is ID ({@link FormDropdownItemProps.id}) of the default selected item.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"children": [
				{
					"id": 438,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Sections or items. If {@link FormDropdownItem} elements are specified, a default section is automatically created."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 447,
										"name": "FormDropdownSectionProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 447,
											"name": "FormDropdownSectionProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 450,
										"name": "FormDropdownItemProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 450,
											"name": "FormDropdownItemProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							}
						]
					}
				},
				{
					"id": 443,
					"name": "defaultValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The default value of the item.\nKeep in mind that `defaultValue` will be configured once per component lifecycle. This means that if a user changes the value, `defaultValue` won't be configured on re-rendering.",
						"tags": [
							{
								"tag": "important",
								"text": "If you're using {@link FormItemProps.storeValue} and configured it as `true` then the stored value will be set."
							},
							{
								"tag": "important",
								"text": "If you configure {@link FormItemProps.value} at the same time with {@link FormItemProps.defaultValue}, the `value` will be set instead of `defaultValue`.\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 392,
						"name": "FormItemProps.defaultValue"
					}
				},
				{
					"id": 439,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "ID of the form item.\nMake sure to assign each form item a unique id."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 388,
						"name": "FormItemProps.id"
					}
				},
				{
					"id": 441,
					"name": "storeValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates whether the value of the item should be persisted after submitting, and restored next time the form is rendered."
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 390,
						"name": "FormItemProps.storeValue"
					}
				},
				{
					"id": 440,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The title displayed on the left side of the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 389,
						"name": "FormItemProps.title"
					}
				},
				{
					"id": 442,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The current value of the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 391,
						"name": "FormItemProps.value"
					}
				},
				{
					"id": 444,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 445,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The callback which will be triggered on the {@link FormItemProps.value} change for the item."
							},
							"parameters": [
								{
									"id": 446,
									"name": "newValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 396,
										"name": "Value"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 394,
								"name": "FormItemProps.onChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 393,
						"name": "FormItemProps.onChange"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						438,
						443,
						439,
						441,
						440,
						442
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						444
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 387,
					"typeArguments": [
						{
							"type": "intrinsic",
							"name": "string"
						}
					],
					"name": "FormItemProps"
				}
			]
		},
		{
			"id": 447,
			"name": "FormDropdownSectionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form.Dropdown.Section} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"children": [
				{
					"id": 448,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The item elements of the section.\nWhen used for the action panel, the first item in the list is the *primary* action that will be triggered by the default shortcut (ENTER), while the second item is the *secondary* action triggered by CMD + ENTER."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 450,
										"name": "FormDropdownItemProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 450,
											"name": "FormDropdownItemProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							}
						]
					}
				},
				{
					"id": 449,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Title displayed above the section"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						448,
						449
					]
				}
			]
		},
		{
			"id": 387,
			"name": "FormItemProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form.Item} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"children": [
				{
					"id": 392,
					"name": "defaultValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The default value of the item.\nKeep in mind that `defaultValue` will be configured once per component lifecycle. This means that if a user changes the value, `defaultValue` won't be configured on re-rendering.",
						"tags": [
							{
								"tag": "important",
								"text": "If you're using {@link FormItemProps.storeValue} and configured it as `true` then the stored value will be set."
							},
							{
								"tag": "important",
								"text": "If you configure {@link FormItemProps.value} at the same time with {@link FormItemProps.defaultValue}, the `value` will be set instead of `defaultValue`.\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 396,
						"name": "Value"
					}
				},
				{
					"id": 388,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "ID of the form item.\nMake sure to assign each form item a unique id."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 390,
					"name": "storeValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates whether the value of the item should be persisted after submitting, and restored next time the form is rendered."
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 389,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The title displayed on the left side of the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 391,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The current value of the item."
					},
					"type": {
						"type": "reference",
						"id": 396,
						"name": "Value"
					}
				},
				{
					"id": 393,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 394,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The callback which will be triggered on the {@link FormItemProps.value} change for the item."
							},
							"parameters": [
								{
									"id": 395,
									"name": "newValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 396,
										"name": "Value"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						392,
						388,
						390,
						389,
						391
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						393
					]
				}
			],
			"typeParameter": [
				{
					"id": 396,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"type": {
						"type": "reference",
						"id": 374,
						"name": "FormValue"
					}
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 397,
					"name": "FormTextFieldProps"
				},
				{
					"type": "reference",
					"id": 407,
					"name": "FormTextAreaProps"
				},
				{
					"type": "reference",
					"id": 417,
					"name": "FormCheckboxProps"
				},
				{
					"type": "reference",
					"id": 427,
					"name": "FormDatePickerProps"
				},
				{
					"type": "reference",
					"id": 437,
					"name": "FormDropdownProps"
				},
				{
					"type": "reference",
					"id": 454,
					"name": "FormTagPickerProps"
				}
			]
		},
		{
			"id": 382,
			"name": "FormProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"children": [
				{
					"id": 384,
					"name": "actions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A reference to an {@link ActionPanel}."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 154,
										"name": "ActionPanelProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ActionsInterface.actions"
					}
				},
				{
					"id": 383,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The {@link FormItemElement} elements of the form."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 387,
										"typeArguments": [
											{
												"type": "reference",
												"id": 374,
												"name": "FormValue"
											}
										],
										"name": "FormItemProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 387,
											"typeArguments": [
												{
													"type": "reference",
													"id": 374,
													"name": "FormValue"
												}
											],
											"name": "FormItemProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							}
						]
					}
				},
				{
					"id": 386,
					"name": "isLoading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates whether a loading bar should be shown or hidden below the search bar",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "false\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "NavigationChildInterface.isLoading"
					}
				},
				{
					"id": 385,
					"name": "navigationTitle",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The main title for that view displayed in Raycast",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "Command title\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "NavigationChildInterface.navigationTitle"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						384,
						383,
						386,
						385
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "ActionsInterface"
				},
				{
					"type": "reference",
					"name": "NavigationChildInterface"
				}
			]
		},
		{
			"id": 436,
			"name": "FormSeparatorProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form.Separator} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			}
		},
		{
			"id": 465,
			"name": "FormTagPickerItemProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form.FormTagPicker.Item} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"children": [
				{
					"id": 468,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An icon to show in the token."
					},
					"type": {
						"type": "reference",
						"id": 784,
						"name": "ImageLike"
					}
				},
				{
					"id": 467,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The display title of the token."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 466,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Value of the tag picker item.\nMake sure to assign unique value for each item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						468,
						467,
						466
					]
				}
			]
		},
		{
			"id": 454,
			"name": "FormTagPickerProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form.TagPicker} React component.\nThe {@link FormTagPickerProps.value} here is the IDs ({@link FormTagPickerItemProps.id}) of the default selected items.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"children": [
				{
					"id": 455,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of tag picker's items."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 465,
										"name": "FormTagPickerItemProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 465,
											"name": "FormTagPickerItemProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							}
						]
					}
				},
				{
					"id": 461,
					"name": "defaultValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The default value of the item.\nKeep in mind that `defaultValue` will be configured once per component lifecycle. This means that if a user changes the value, `defaultValue` won't be configured on re-rendering.",
						"tags": [
							{
								"tag": "important",
								"text": "If you're using {@link FormItemProps.storeValue} and configured it as `true` then the stored value will be set."
							},
							{
								"tag": "important",
								"text": "If you configure {@link FormItemProps.value} at the same time with {@link FormItemProps.defaultValue}, the `value` will be set instead of `defaultValue`.\n"
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 392,
						"name": "FormItemProps.defaultValue"
					}
				},
				{
					"id": 457,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "ID of the form item.\nMake sure to assign each form item a unique id."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 388,
						"name": "FormItemProps.id"
					}
				},
				{
					"id": 456,
					"name": "placeholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Placeholder text shown in the token field."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 459,
					"name": "storeValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates whether the value of the item should be persisted after submitting, and restored next time the form is rendered."
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 390,
						"name": "FormItemProps.storeValue"
					}
				},
				{
					"id": 458,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The title displayed on the left side of the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 389,
						"name": "FormItemProps.title"
					}
				},
				{
					"id": 460,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The current value of the item."
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 391,
						"name": "FormItemProps.value"
					}
				},
				{
					"id": 462,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 463,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The callback which will be triggered on the {@link FormItemProps.value} change for the item."
							},
							"parameters": [
								{
									"id": 464,
									"name": "newValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 396,
										"name": "Value"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 394,
								"name": "FormItemProps.onChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 393,
						"name": "FormItemProps.onChange"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						455,
						461,
						457,
						456,
						459,
						458,
						460
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						462
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 387,
					"typeArguments": [
						{
							"type": "array",
							"elementType": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"name": "FormItemProps"
				}
			]
		},
		{
			"id": 407,
			"name": "FormTextAreaProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form.TextArea} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"children": [
				{
					"id": 413,
					"name": "defaultValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The default value of the item.\nKeep in mind that `defaultValue` will be configured once per component lifecycle. This means that if a user changes the value, `defaultValue` won't be configured on re-rendering.",
						"tags": [
							{
								"tag": "important",
								"text": "If you're using {@link FormItemProps.storeValue} and configured it as `true` then the stored value will be set."
							},
							{
								"tag": "important",
								"text": "If you configure {@link FormItemProps.value} at the same time with {@link FormItemProps.defaultValue}, the `value` will be set instead of `defaultValue`.\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 392,
						"name": "FormItemProps.defaultValue"
					}
				},
				{
					"id": 409,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "ID of the form item.\nMake sure to assign each form item a unique id."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 388,
						"name": "FormItemProps.id"
					}
				},
				{
					"id": 408,
					"name": "placeholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Placeholder text shown in the text field."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 411,
					"name": "storeValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates whether the value of the item should be persisted after submitting, and restored next time the form is rendered."
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 390,
						"name": "FormItemProps.storeValue"
					}
				},
				{
					"id": 410,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The title displayed on the left side of the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 389,
						"name": "FormItemProps.title"
					}
				},
				{
					"id": 412,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The current value of the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 391,
						"name": "FormItemProps.value"
					}
				},
				{
					"id": 414,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 415,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The callback which will be triggered on the {@link FormItemProps.value} change for the item."
							},
							"parameters": [
								{
									"id": 416,
									"name": "newValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 396,
										"name": "Value"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 394,
								"name": "FormItemProps.onChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 393,
						"name": "FormItemProps.onChange"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						413,
						409,
						408,
						411,
						410,
						412
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						414
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 387,
					"typeArguments": [
						{
							"type": "intrinsic",
							"name": "string"
						}
					],
					"name": "FormItemProps"
				}
			]
		},
		{
			"id": 397,
			"name": "FormTextFieldProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form.TextField} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"children": [
				{
					"id": 403,
					"name": "defaultValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The default value of the item.\nKeep in mind that `defaultValue` will be configured once per component lifecycle. This means that if a user changes the value, `defaultValue` won't be configured on re-rendering.",
						"tags": [
							{
								"tag": "important",
								"text": "If you're using {@link FormItemProps.storeValue} and configured it as `true` then the stored value will be set."
							},
							{
								"tag": "important",
								"text": "If you configure {@link FormItemProps.value} at the same time with {@link FormItemProps.defaultValue}, the `value` will be set instead of `defaultValue`.\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 392,
						"name": "FormItemProps.defaultValue"
					}
				},
				{
					"id": 399,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "ID of the form item.\nMake sure to assign each form item a unique id."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 388,
						"name": "FormItemProps.id"
					}
				},
				{
					"id": 398,
					"name": "placeholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Placeholder text shown in the text field."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 401,
					"name": "storeValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates whether the value of the item should be persisted after submitting, and restored next time the form is rendered."
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 390,
						"name": "FormItemProps.storeValue"
					}
				},
				{
					"id": 400,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The title displayed on the left side of the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 389,
						"name": "FormItemProps.title"
					}
				},
				{
					"id": 402,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The current value of the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 391,
						"name": "FormItemProps.value"
					}
				},
				{
					"id": 404,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 405,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The callback which will be triggered on the {@link FormItemProps.value} change for the item."
							},
							"parameters": [
								{
									"id": 406,
									"name": "newValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 396,
										"name": "Value"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 394,
								"name": "FormItemProps.onChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 393,
						"name": "FormItemProps.onChange"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						403,
						399,
						398,
						401,
						400,
						402
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						404
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 387,
					"typeArguments": [
						{
							"type": "intrinsic",
							"name": "string"
						}
					],
					"name": "FormItemProps"
				}
			]
		},
		{
			"id": 379,
			"name": "FormValues",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Values of items in the form.",
				"tags": [
					{
						"tag": "remarks",
						"text": "\nFor type-safe form values you can define your own interface. Use the ID's of the form items\nas property name. See the example for more details.\n"
					},
					{
						"tag": "example",
						"text": "\n```typescript\nimport { Form } from \"@raycast/api\";\n\ninterface Values {\n  todo: string;\n  due?: Date;\n}\n\nexport default function Command() {\n  function handleSubmit(values: Values) {\n    console.log(values);\n  }\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Form.TextField id=\"todo\" title=\"Todo\" />\n      <Form.DatePicker id=\"due\" title=\"Due Date\" />\n    </Form>\n  );\n};\n```\n"
					},
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"indexSignature": {
				"id": 380,
				"name": "__index",
				"kind": 8192,
				"kindString": "Index signature",
				"flags": {},
				"comment": {
					"shortText": "The form value of a given item."
				},
				"parameters": [
					{
						"id": 381,
						"name": "item",
						"kind": 32768,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				],
				"type": {
					"type": "intrinsic",
					"name": "any"
				}
			}
		},
		{
			"id": 785,
			"name": "Image",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Display different types of images, including network images or bundled assets.",
				"tags": [
					{
						"tag": "example",
						"text": "\n```typescript\n// Built-in icon\nconst icon = Icon.Eye\n\n// Built-in icon with tint color\nconst tintedIcon = { source: Icon.Bubble, tintColor: Color.Red }\n\n// Bundled asset with circular mask\nconst avatar = { source: \"avatar.png\", mask: ImageMask.Circle }\n\n// Theme-aware icon\nconst icon = { source: { light: \"icon-light.png\", dark: \"icon-dark.png\" }}\n```\n"
					},
					{
						"tag": "remark",
						"text": "\nApply image transforms to the source, such as a `mask` or a `tintColor`.\n"
					},
					{
						"tag": "subcategory",
						"text": "Icons & Images\n"
					}
				]
			},
			"children": [
				{
					"id": 787,
					"name": "mask",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A {@link ImageMask} to apply to the image."
					},
					"type": {
						"type": "reference",
						"id": 793,
						"name": "ImageMask"
					}
				},
				{
					"id": 786,
					"name": "source",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The source of the image."
					},
					"type": {
						"type": "reference",
						"id": 789,
						"name": "ImageSource"
					}
				},
				{
					"id": 788,
					"name": "tintColor",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A {@link ColorLike} to tint all the non-transparent pixels of the image."
					},
					"type": {
						"type": "reference",
						"id": 729,
						"name": "ColorLike"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						787,
						786,
						788
					]
				}
			]
		},
		{
			"id": 42,
			"name": "KeyboardShortcut",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "A keyboard shortcut is defined by one or more modifier keys (command, control, etc.) and a single key equivalent (a character or special key).\nSee {@link KeyModifier} and {@link KeyEquivalent} for supported values.",
				"tags": [
					{
						"tag": "example",
						"text": "\n```typescript\nimport { ActionPanel, Detail } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Detail markdown=\"Let's play some games 👾\" actions={\n      <ActionPanel title=\"Game controls\">\n        <ActionPanel.Item\n          title=\"Up\"\n          shortcut={{ modifiers: [\"opt\"], key: \"arrowUp\" }}\n          onAction={() => console.log(\"Go up\")}\n        />\n        <ActionPanel.Item\n          title=\"Down\"\n          shortcut={{ modifiers: [\"opt\"], key: \"arrowDown\" }}\n          onAction={() => console.log(\"Go down\")}\n        />\n        <ActionPanel.Item\n          title=\"Left\"\n          shortcut={{ modifiers: [\"opt\"], key: \"arrowLeft\" }}\n          onAction={() => console.log(\"Go left\")}\n        />\n        <ActionPanel.Item\n          title=\"Right\"\n          shortcut={{ modifiers: [\"opt\"], key: \"arrowRight\" }}\n          onAction={() => console.log(\"Go right\")}\n        />\n      </ActionPanel>}\n    />\n  );\n}\n```\n"
					}
				]
			},
			"children": [
				{
					"id": 44,
					"name": "key",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The key of the keyboard shortcut."
					},
					"type": {
						"type": "reference",
						"id": 47,
						"name": "KeyEquivalent"
					}
				},
				{
					"id": 43,
					"name": "modifiers",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The modifier keys of the keyboard shortcut."
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 46,
							"name": "KeyModifier"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						44,
						43
					]
				}
			]
		},
		{
			"id": 544,
			"name": "ListItemProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link List.Item} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "List\n"
					}
				]
			},
			"children": [
				{
					"id": 551,
					"name": "accessoryIcon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A optional icon displayed as accessory for the list item.\nSee {@link ImageLike} for the supported formats and types."
					},
					"type": {
						"type": "reference",
						"id": 784,
						"name": "ImageLike"
					}
				},
				{
					"id": 548,
					"name": "accessoryTitle",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An additional icon displayed for the item.\nSee {@link ImageLike} for the supported formats and types."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 552,
					"name": "actions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An {@link ActionPanel} that will be updated for the selected list item."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 154,
										"name": "ActionPanelProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							}
						]
					},
					"overwrites": {
						"type": "reference",
						"name": "ActionsInterface.actions"
					}
				},
				{
					"id": 550,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A optional icon displayed for the list item.\nSee {@link ImageLike} for the supported formats and types."
					},
					"type": {
						"type": "reference",
						"id": 784,
						"name": "ImageLike"
					}
				},
				{
					"id": 545,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "ID of the item.\nMake sure to assign each item a unique ID or a UUID will be auto generated."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 549,
					"name": "keywords",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An optional property used for providing additional indexable strings for search.\nWhen filtering the list in Raycast through the search bar, the keywords will be searched in addition to the title."
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 547,
					"name": "subtitle",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An optional subtitle displayed next to the main title."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 546,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The main title displayed for that item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						551,
						548,
						552,
						550,
						545,
						549,
						547,
						546
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "ActionsInterface"
				}
			]
		},
		{
			"id": 525,
			"name": "ListProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link List} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "List\n"
					}
				]
			},
			"children": [
				{
					"id": 536,
					"name": "actions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A reference to an {@link ActionPanel}."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 154,
										"name": "ActionPanelProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ActionsInterface.actions"
					}
				},
				{
					"id": 526,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "List sections or items. If {@link List.Item} elements are specified, a default section is automatically created."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 539,
										"name": "ListSectionProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 539,
											"name": "ListSectionProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 544,
										"name": "ListItemProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 544,
											"name": "ListItemProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							}
						]
					}
				},
				{
					"id": 538,
					"name": "isLoading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates whether a loading bar should be shown or hidden below the search bar",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "false\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "NavigationChildInterface.isLoading"
					}
				},
				{
					"id": 537,
					"name": "navigationTitle",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The main title for that view displayed in Raycast",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "Command title\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "NavigationChildInterface.navigationTitle"
					}
				},
				{
					"id": 530,
					"name": "searchBarPlaceholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Placeholder text that will be shown in the search bar.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "Search value...\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 531,
					"name": "selectedItemId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Selects the item with the specified id."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 532,
					"name": "throttle",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Defines whether the {@link ListProps.onSearchTextChange} will be triggered on every keyboard press or with a delay for throttling the events.\nRecommended to set to `true` when using custom filtering logic with asynchronous operations (e.g. network requests).",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "false\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 533,
					"name": "onSearchTextChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 534,
							"name": "onSearchTextChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback triggered when the search bar text changes.\nNote that built-in list filtering will be disabled when this callback is set."
							},
							"parameters": [
								{
									"id": 535,
									"name": "text",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 527,
					"name": "onSelectionChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 528,
							"name": "onSelectionChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback triggered when the item selection in the list changes."
							},
							"parameters": [
								{
									"id": 529,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						536,
						526,
						538,
						537,
						530,
						531,
						532
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						533,
						527
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "ActionsInterface"
				},
				{
					"type": "reference",
					"name": "NavigationChildInterface"
				}
			]
		},
		{
			"id": 539,
			"name": "ListSectionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link List.Section} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "List\n"
					}
				]
			},
			"children": [
				{
					"id": 540,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The {@link List.Item} elements of the section."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 544,
										"name": "ListItemProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 544,
											"name": "ListItemProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							}
						]
					}
				},
				{
					"id": 541,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "ID of the section.\nMake sure to assign each section a unique ID or a UUID will be auto generated."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 543,
					"name": "subtitle",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An optional subtitle displayed next to the title of the section."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 542,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Title displayed above the section."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						540,
						541,
						543,
						542
					]
				}
			]
		},
		{
			"id": 65,
			"name": "LocalStorageValues",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Values of local storage items.",
				"tags": [
					{
						"tag": "remarks",
						"text": "\nFor type-safe values you can define your own interface. Use the keys of the local storage items as property name.\n"
					}
				]
			},
			"indexSignature": {
				"id": 66,
				"name": "__index",
				"kind": 8192,
				"kindString": "Index signature",
				"flags": {},
				"comment": {
					"shortText": "The local storage value of a given key."
				},
				"parameters": [
					{
						"id": 67,
						"name": "key",
						"kind": 32768,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				],
				"type": {
					"type": "intrinsic",
					"name": "any"
				}
			}
		},
		{
			"id": 703,
			"name": "Navigation",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Return type of the {@link useNavigation} hook to perform push and pop actions.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Navigation\n"
					}
				]
			},
			"children": [
				{
					"id": 707,
					"name": "pop",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 708,
							"name": "pop",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Pop current view component from the navigation stack."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 704,
					"name": "push",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 705,
							"name": "push",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Push a new view component to the navigation stack."
							},
							"parameters": [
								{
									"id": 706,
									"name": "component",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The React component to push to the navigation stack.\n"
									},
									"type": {
										"type": "reference",
										"name": "ReactNode"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						707,
						704
					]
				}
			]
		},
		{
			"id": 569,
			"name": "OpenActionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link OpenAction} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Actions\n"
					}
				]
			},
			"children": [
				{
					"id": 571,
					"name": "application",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The application name to use for opening the file.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nIf no application name is specified, the default application as determined by the system is used to open the\nspecified file.\n"
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"id": 28,
								"name": "Application"
							}
						]
					}
				},
				{
					"id": 573,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon displayed for the action.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "{@link Icon.Finder}\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 784,
						"name": "ImageLike"
					}
				},
				{
					"id": 574,
					"name": "shortcut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The keyboard shortcut for the action."
					},
					"type": {
						"type": "reference",
						"id": 42,
						"name": "KeyboardShortcut"
					}
				},
				{
					"id": 570,
					"name": "target",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The file, folder or URL to open."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 572,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The title for the action."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 575,
					"name": "onOpen",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 576,
							"name": "onOpen",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback when the file or folder was opened.",
								"tags": [
									{
										"tag": "remarks",
										"text": "\nThis is handy when you want to act on an opened file or folder, e.g. store a history of opened items.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 577,
									"name": "target",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						571,
						573,
						574,
						570,
						572
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						575
					]
				}
			]
		},
		{
			"id": 581,
			"name": "OpenInBrowserActionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link OpenInBrowserAction} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Actions\n"
					}
				]
			},
			"children": [
				{
					"id": 584,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon displayed for the action.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "{@link Icon.Globe}\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 784,
						"name": "ImageLike"
					}
				},
				{
					"id": 585,
					"name": "shortcut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The optional keyboard shortcut for the menu item"
					},
					"type": {
						"type": "reference",
						"id": 42,
						"name": "KeyboardShortcut"
					}
				},
				{
					"id": 583,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An optional title for the action."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 582,
					"name": "url",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The URL to open."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 586,
					"name": "onOpen",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 587,
							"name": "onOpen",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback when the URL was opened in the browser.",
								"tags": [
									{
										"tag": "remarks",
										"text": "\nThis is handy when you want to act on the opened link, e.g. store a history of visited links.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 588,
									"name": "url",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						584,
						585,
						583,
						582
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						586
					]
				}
			]
		},
		{
			"id": 592,
			"name": "OpenWithActionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link OpenWithAction} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Actions\n"
					}
				]
			},
			"children": [
				{
					"id": 595,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon displayed for the action.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "{@link Icon.Upload}\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 784,
						"name": "ImageLike"
					}
				},
				{
					"id": 593,
					"name": "path",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The path to open."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 596,
					"name": "shortcut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The keyboard shortcut for the action."
					},
					"type": {
						"type": "reference",
						"id": 42,
						"name": "KeyboardShortcut"
					}
				},
				{
					"id": 594,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The title for the action.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "Open With\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 597,
					"name": "onOpen",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 598,
							"name": "onOpen",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback when the file or folder was opened.",
								"tags": [
									{
										"tag": "remarks",
										"text": "\nThis is handy when you want to act on an opened file or folder, e.g. store a history of opened items.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 599,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						595,
						593,
						596,
						594
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						597
					]
				}
			]
		},
		{
			"id": 603,
			"name": "PasteActionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link PasteAction} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Actions\n"
					}
				]
			},
			"children": [
				{
					"id": 604,
					"name": "content",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The contents that will be written to the clipboard as string."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 606,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon displayed for the action.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "{@link Icon.Clipboard}\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 784,
						"name": "ImageLike"
					}
				},
				{
					"id": 607,
					"name": "shortcut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The keyboard shortcut for the action."
					},
					"type": {
						"type": "reference",
						"id": 42,
						"name": "KeyboardShortcut"
					}
				},
				{
					"id": 605,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An optional title for the action."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 608,
					"name": "onPaste",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 609,
							"name": "onPaste",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback when the content was pasted into the front-most application.",
								"tags": [
									{
										"tag": "remarks",
										"text": "\nThis is handy when you want to act on the pasted content, e.g. up-rank recently pasted content.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 610,
									"name": "content",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						604,
						606,
						607,
						605
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						608
					]
				}
			]
		},
		{
			"id": 674,
			"name": "Preference",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Holds data about a single preference item (entered in Raycast Preferences). Use the {@link getPreferenceValues}\nfunction or the global {@link preferences} object to retrieve values.",
				"tags": [
					{
						"tag": "remarks",
						"text": "\nThe object maps to a defined preference in the `package.json` manifest file.\n"
					}
				]
			},
			"children": [
				{
					"id": 684,
					"name": "data",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The data that is used for dropdowns.\nFor the dropdown items, add an array of objects with `title` and `value` properties, such as: `{\"title\": \"Foo\", \"value\": \"bar\"}`"
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "unknown"
						}
					}
				},
				{
					"id": 681,
					"name": "default",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The default value of the preference if there is no `value` specified.\nFor dropdowns, this references the `value` property of an object in the data array."
					},
					"type": {
						"type": "intrinsic",
						"name": "unknown"
					}
				},
				{
					"id": 679,
					"name": "description",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The description of the preference.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThe description is shown in the Raycast preferences as well as in the\nonboarding view for required preferences.\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 683,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A label that is used for checkboxes.\nYou can create checkbox groups by setting this property and leaving the title property empty for all checkboxes except the first."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 675,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The name of the preference."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 682,
					"name": "placeholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A placeholder that is used for text fields and passwords."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 677,
					"name": "required",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Specifies if the preference is required.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nIf the preference is required, an onboarding view is shown when the\nextension is opened for the first time.\n"
							},
							{
								"tag": "defaultvalue",
								"text": "false\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 678,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The title of the preference.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThe title is also shown in the Raycast preferences.\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 676,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The type of the preference."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "textfield"
							},
							{
								"type": "literal",
								"value": "password"
							},
							{
								"type": "literal",
								"value": "checkbox"
							},
							{
								"type": "literal",
								"value": "dropdown"
							}
						]
					}
				},
				{
					"id": 680,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The value of the preference."
					},
					"type": {
						"type": "intrinsic",
						"name": "unknown"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						684,
						681,
						679,
						683,
						675,
						682,
						677,
						678,
						676,
						680
					]
				}
			]
		},
		{
			"id": 686,
			"name": "PreferenceValues",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Values of preference items."
			},
			"indexSignature": {
				"id": 687,
				"name": "__index",
				"kind": 8192,
				"kindString": "Index signature",
				"flags": {},
				"parameters": [
					{
						"id": 688,
						"name": "name",
						"kind": 32768,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				],
				"type": {
					"type": "intrinsic",
					"name": "any"
				}
			}
		},
		{
			"id": 614,
			"name": "PushActionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link PushAction} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Actions\n"
					}
				]
			},
			"children": [
				{
					"id": 617,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon displayed for the action."
					},
					"type": {
						"type": "reference",
						"id": 784,
						"name": "ImageLike"
					}
				},
				{
					"id": 618,
					"name": "shortcut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The keyboard shortcut for the action."
					},
					"type": {
						"type": "reference",
						"id": 42,
						"name": "KeyboardShortcut"
					}
				},
				{
					"id": 616,
					"name": "target",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The target view that will be pushed to the navigation stack."
					},
					"type": {
						"type": "reference",
						"name": "ReactNode"
					}
				},
				{
					"id": 615,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The title displayed for the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 619,
					"name": "onPush",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 620,
							"name": "onPush",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback when the target view was pushed.",
								"tags": [
									{
										"tag": "remarks",
										"text": "\nThis is handy when you want to act on the pushed target view, e.g. uprank a selected list item.\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						617,
						618,
						616,
						615
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						619
					]
				}
			]
		},
		{
			"id": 624,
			"name": "ShowInFinderActionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link ShowInFinderAction} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Actions\n"
					}
				]
			},
			"children": [
				{
					"id": 627,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A optional icon displayed for the item. See {@link ImageLike} for the supported formats and types.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "{@link Icon.Finder}\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 784,
						"name": "ImageLike"
					}
				},
				{
					"id": 625,
					"name": "path",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The path to open."
					},
					"type": {
						"type": "reference",
						"name": "PathLike"
					}
				},
				{
					"id": 628,
					"name": "shortcut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The keyboard shortcut for the action."
					},
					"type": {
						"type": "reference",
						"id": 42,
						"name": "KeyboardShortcut"
					}
				},
				{
					"id": 626,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An optional title for the action.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "Show in Finder\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 629,
					"name": "onShow",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 630,
							"name": "onShow",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback when the file or folder was shown in the Finder.",
								"tags": [
									{
										"tag": "remarks",
										"text": "\nThis is handy when you want to act on revealed files or folders, e.g. up-rank recently opened items.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 631,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "PathLike"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						627,
						625,
						628,
						626
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						629
					]
				}
			]
		},
		{
			"id": 636,
			"name": "SubmitFormActionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link SubmitFormAction} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Actions\n"
					}
				]
			},
			"children": [
				{
					"id": 638,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon displayed for the action."
					},
					"type": {
						"type": "reference",
						"id": 784,
						"name": "ImageLike"
					}
				},
				{
					"id": 639,
					"name": "shortcut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The keyboard shortcut for the action."
					},
					"type": {
						"type": "reference",
						"id": 42,
						"name": "KeyboardShortcut"
					}
				},
				{
					"id": 637,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The title displayed for the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 640,
					"name": "onSubmit",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 641,
							"name": "onSubmit",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback that is triggered when the submit was submitted.\nUse the handler to perform custom validation logic and call other Raycast API methods.\nThe handler receives a the values object containing the user input."
							},
							"parameters": [
								{
									"id": 642,
									"name": "input",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 643,
										"name": "Values"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						638,
						639,
						637
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						640
					]
				}
			],
			"typeParameter": [
				{
					"id": 643,
					"name": "Values",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			]
		},
		{
			"id": 827,
			"name": "ToastOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "The options to create a {@link Toast}.",
				"tags": [
					{
						"tag": "example",
						"text": "\n```typescript\nimport { Toast, ToastOptions, ToastStyle } from \"@raycast/api\";\n\nexport default async () => {\n  const options: ToastOptions = {\n    style: ToastStyle.Success,\n    title: \"Finished cooking\",\n    message: \"Delicious pasta for lunch\",\n  };\n  const toast = new Toast(options);\n  await toast.show();\n};\n```\n"
					},
					{
						"tag": "subcategory",
						"text": "Toast\n"
					}
				]
			},
			"children": [
				{
					"id": 830,
					"name": "message",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An additional message for the toast. Useful to show more information, e.g. an identifier of a newly create asset"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 828,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The style of a toast."
					},
					"type": {
						"type": "reference",
						"id": 831,
						"name": "ToastStyle"
					}
				},
				{
					"id": 829,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The title of a toast. Displayed on the top."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						830,
						828,
						829
					]
				}
			]
		},
		{
			"id": 647,
			"name": "TrashActionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link TrashAction} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Actions\n"
					}
				]
			},
			"children": [
				{
					"id": 650,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A optional icon displayed for the action.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "{@link Icon.Trash}\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 784,
						"name": "ImageLike"
					}
				},
				{
					"id": 648,
					"name": "paths",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The item or items to move to the trash."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "PathLike"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "PathLike"
								}
							}
						]
					}
				},
				{
					"id": 651,
					"name": "shortcut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The optional keyboard shortcut for the action."
					},
					"type": {
						"type": "reference",
						"id": 42,
						"name": "KeyboardShortcut"
					}
				},
				{
					"id": 649,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An optional title for the action.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "Move to Trash\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 652,
					"name": "onTrash",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 653,
							"name": "onTrash",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback when all items were moved to the trash.",
								"tags": [
									{
										"tag": "remarks",
										"text": "\nThis is handy when you want to act on a trashed item, e.g. update a list.\nThe callback returns the same `paths` as passed originally.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 654,
									"name": "paths",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "PathLike"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "PathLike"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						650,
						648,
						651,
						649
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						652
					]
				}
			]
		},
		{
			"id": 152,
			"name": "ActionPanelChildren",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "Supported children for the {@link ActionPanel} and {@link ActionPanel.Submenu} components.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Action Panel\n"
					}
				]
			},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 157,
								"name": "ActionPanelSectionProps"
							}
						],
						"name": "ReactElement"
					},
					{
						"type": "array",
						"elementType": {
							"type": "reference",
							"typeArguments": [
								{
									"type": "reference",
									"id": 157,
									"name": "ActionPanelSectionProps"
								}
							],
							"name": "ReactElement"
						}
					},
					{
						"type": "reference",
						"id": 153,
						"name": "ActionPanelSectionChildren"
					},
					{
						"type": "literal",
						"value": null
					}
				]
			}
		},
		{
			"id": 153,
			"name": "ActionPanelSectionChildren",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "Supported children for the {@link ActionPanel.Section} component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Action Panel\n"
					}
				]
			},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 160,
								"name": "ActionPanelItemProps"
							}
						],
						"name": "ReactElement"
					},
					{
						"type": "array",
						"elementType": {
							"type": "reference",
							"typeArguments": [
								{
									"type": "reference",
									"id": 160,
									"name": "ActionPanelItemProps"
								}
							],
							"name": "ReactElement"
						}
					},
					{
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 167,
								"name": "ActionPanelSubmenuProps"
							}
						],
						"name": "ReactElement"
					},
					{
						"type": "array",
						"elementType": {
							"type": "reference",
							"typeArguments": [
								{
									"type": "reference",
									"id": 167,
									"name": "ActionPanelSubmenuProps"
								}
							],
							"name": "ReactElement"
						}
					},
					{
						"type": "literal",
						"value": null
					}
				]
			}
		},
		{
			"id": 729,
			"name": "ColorLike",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "Union type for the supported color types.",
				"tags": [
					{
						"tag": "remark",
						"text": "\nBesides the {@link Color}, you can use any of the following color formats:\n- HEX, e.g `#FF0000`\n- Short HEX, e.g. `#F00`\n- RGBA, e.g. `rgb(255, 0, 0)`\n- RGBA Percentage, e.g. `rgb(255, 0, 0, 1.0)`\n- HSL, e.g. `hsla(200, 20%, 33%, 0.2)`\n- Keywords, e.g. `red`\n\nColors different to the built-in ones (see {@link Color}) will be dynamically adjusted to fit the contrast.\n"
					},
					{
						"tag": "example",
						"text": "\n```typescript\nimport { Color, Icon, List } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List>\n      <List.Item title=\"Built-in color\" icon={{ source: Icon.Circle, tintColor: Color.Red }} />\n      <List.Item title=\"HEX\" icon={{ source: Icon.Circle, tintColor: \"#FF0000\" }} />\n      <List.Item title=\"Short HEX\" icon={{ source: Icon.Circle, tintColor: \"#F00\" }} />\n      <List.Item title=\"RGBA\" icon={{ source: Icon.Circle, tintColor: \"rgb(255, 0, 0)\" }} />\n      <List.Item title=\"RGBA Percentage\" icon={{ source: Icon.Circle, tintColor: \"rgb(255, 0, 0, 1.0)\" }} />\n      <List.Item title=\"HSL\" icon={{ source: Icon.Circle, tintColor: \"hsla(200, 20%, 33%, 0.2)\" }} />\n      <List.Item title=\"Keywords\" icon={{ source: Icon.Circle, tintColor: \"red\" }} />\n    </List>\n  );\n};\n```\n"
					},
					{
						"tag": "subcategory",
						"text": "Colors\n"
					}
				]
			},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"name": "DynamicColor"
					},
					{
						"type": "reference",
						"id": 718,
						"name": "Color"
					},
					{
						"type": "intrinsic",
						"name": "string"
					}
				]
			}
		},
		{
			"id": 374,
			"name": "FormValue",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "A possible form item value that will be used as an input for the submit callback of a form.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "string"
					},
					{
						"type": "intrinsic",
						"name": "number"
					},
					{
						"type": "intrinsic",
						"name": "boolean"
					},
					{
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					{
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "number"
						}
					},
					{
						"type": "reference",
						"name": "Date"
					},
					{
						"type": "literal",
						"value": null
					}
				]
			}
		},
		{
			"id": 784,
			"name": "ImageLike",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "Union type for the supported image types.",
				"tags": [
					{
						"tag": "example",
						"text": "\n```typescript\nimport { Icon, ImageMask, List } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List>\n      <List.Item title=\"String\" icon=\"https://raycast.com/uploads/avatar.png\" />\n      <List.Item title=\"Icon\" icon={Icon.Circle} />\n      <List.Item title=\"FileIcon\" icon={{ fileIcon: __filename }} />\n      <List.Item title=\"Image\" icon={{ source: \"https://raycast.com/uploads/avatar.png\", mask: ImageMask.Circle }} />\n    </List>\n  );\n};\n```\n"
					},
					{
						"tag": "subcategory",
						"text": "Icons & Images\n"
					}
				]
			},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "string"
					},
					{
						"type": "reference",
						"id": 733,
						"name": "Icon"
					},
					{
						"type": "reference",
						"id": 782,
						"name": "FileIcon"
					},
					{
						"type": "reference",
						"id": 785,
						"name": "Image"
					}
				]
			}
		},
		{
			"id": 789,
			"name": "ImageSource",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "The source of an {@link Image}. Can be either a remote URL, a local file resource, a built-in {@link Icon} or\na single emoji.",
				"tags": [
					{
						"tag": "remarks",
						"text": "\nFor consistency, it's best to use the built-in {@link Icon} in lists, the Action Panel and other places. If a\nspecific icon isn't built-in, you can reference custom ones from the `assets` folder of the extension by file name,\ne.g. `my-icon.png`. Alternatively, you can reference an absolute HTTPS url that points to an image or use an emoji.\nYou can also specify different remote or local assets for light and dark theme.\n"
					},
					{
						"tag": "example",
						"text": "\n```typescript\nimport { Icon, List } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List>\n      <List.Item title=\"String\" icon={{ source: \"https://raycast.com/uploads/avatar.png\" }} />\n      <List.Item title=\"Icon\" icon={{ source: Icon.Circle }} />\n      <List.Item\n        title=\"Theme\"\n        icon={{\n          source: { light: \"https://raycast.com/uploads/avatar.png\", dark: \"https://raycast.com/uploads/avatar.png\" },\n        }}\n      />\n    </List>\n  );\n};\n```\n"
					},
					{
						"tag": "subcategory",
						"text": "Icons & Images\n"
					}
				]
			},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "string"
					},
					{
						"type": "reference",
						"id": 733,
						"name": "Icon"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 790,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 792,
									"name": "dark",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 791,
									"name": "light",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										792,
										791
									]
								}
							]
						}
					}
				]
			}
		},
		{
			"id": 47,
			"name": "KeyEquivalent",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "KeyEquivalent of a {@link KeyboardShortcut}"
			},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "a"
					},
					{
						"type": "literal",
						"value": "b"
					},
					{
						"type": "literal",
						"value": "c"
					},
					{
						"type": "literal",
						"value": "d"
					},
					{
						"type": "literal",
						"value": "e"
					},
					{
						"type": "literal",
						"value": "f"
					},
					{
						"type": "literal",
						"value": "g"
					},
					{
						"type": "literal",
						"value": "h"
					},
					{
						"type": "literal",
						"value": "i"
					},
					{
						"type": "literal",
						"value": "j"
					},
					{
						"type": "literal",
						"value": "k"
					},
					{
						"type": "literal",
						"value": "l"
					},
					{
						"type": "literal",
						"value": "m"
					},
					{
						"type": "literal",
						"value": "n"
					},
					{
						"type": "literal",
						"value": "o"
					},
					{
						"type": "literal",
						"value": "p"
					},
					{
						"type": "literal",
						"value": "q"
					},
					{
						"type": "literal",
						"value": "r"
					},
					{
						"type": "literal",
						"value": "s"
					},
					{
						"type": "literal",
						"value": "t"
					},
					{
						"type": "literal",
						"value": "u"
					},
					{
						"type": "literal",
						"value": "v"
					},
					{
						"type": "literal",
						"value": "w"
					},
					{
						"type": "literal",
						"value": "x"
					},
					{
						"type": "literal",
						"value": "y"
					},
					{
						"type": "literal",
						"value": "z"
					},
					{
						"type": "literal",
						"value": "0"
					},
					{
						"type": "literal",
						"value": "1"
					},
					{
						"type": "literal",
						"value": "2"
					},
					{
						"type": "literal",
						"value": "3"
					},
					{
						"type": "literal",
						"value": "4"
					},
					{
						"type": "literal",
						"value": "5"
					},
					{
						"type": "literal",
						"value": "6"
					},
					{
						"type": "literal",
						"value": "7"
					},
					{
						"type": "literal",
						"value": "8"
					},
					{
						"type": "literal",
						"value": "9"
					},
					{
						"type": "literal",
						"value": "."
					},
					{
						"type": "literal",
						"value": ","
					},
					{
						"type": "literal",
						"value": ";"
					},
					{
						"type": "literal",
						"value": "="
					},
					{
						"type": "literal",
						"value": "+"
					},
					{
						"type": "literal",
						"value": "-"
					},
					{
						"type": "literal",
						"value": "["
					},
					{
						"type": "literal",
						"value": "]"
					},
					{
						"type": "literal",
						"value": "{"
					},
					{
						"type": "literal",
						"value": "}"
					},
					{
						"type": "literal",
						"value": "«"
					},
					{
						"type": "literal",
						"value": "»"
					},
					{
						"type": "literal",
						"value": "("
					},
					{
						"type": "literal",
						"value": ")"
					},
					{
						"type": "literal",
						"value": "/"
					},
					{
						"type": "literal",
						"value": "\\"
					},
					{
						"type": "literal",
						"value": "'"
					},
					{
						"type": "literal",
						"value": "`"
					},
					{
						"type": "literal",
						"value": "§"
					},
					{
						"type": "literal",
						"value": "^"
					},
					{
						"type": "literal",
						"value": "@"
					},
					{
						"type": "literal",
						"value": "$"
					},
					{
						"type": "literal",
						"value": "return"
					},
					{
						"type": "literal",
						"value": "delete"
					},
					{
						"type": "literal",
						"value": "deleteForward"
					},
					{
						"type": "literal",
						"value": "tab"
					},
					{
						"type": "literal",
						"value": "arrowUp"
					},
					{
						"type": "literal",
						"value": "arrowDown"
					},
					{
						"type": "literal",
						"value": "arrowLeft"
					},
					{
						"type": "literal",
						"value": "arrowRight"
					},
					{
						"type": "literal",
						"value": "pageUp"
					},
					{
						"type": "literal",
						"value": "pageDown"
					},
					{
						"type": "literal",
						"value": "home"
					},
					{
						"type": "literal",
						"value": "end"
					},
					{
						"type": "literal",
						"value": "space"
					},
					{
						"type": "literal",
						"value": "escape"
					},
					{
						"type": "literal",
						"value": "enter"
					},
					{
						"type": "literal",
						"value": "backspace"
					}
				]
			}
		},
		{
			"id": 46,
			"name": "KeyModifier",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "Modifier of a {@link KeyboardShortcut}"
			},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "cmd"
					},
					{
						"type": "literal",
						"value": "ctrl"
					},
					{
						"type": "literal",
						"value": "opt"
					},
					{
						"type": "literal",
						"value": "shift"
					}
				]
			}
		},
		{
			"id": 64,
			"name": "LocalStorageValue",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "Supported storage value types.",
				"tags": [
					{
						"tag": "example",
						"text": "\n```typescript\nimport { setLocalStorageItem } from \"@raycast/api\";\n\nexport default async () => {\n  // String\n  await setLocalStorageItem(\"favorite-fruit\", \"cherry\");\n\n  // Number\n  await setLocalStorageItem(\"fruit-basket-count\", 3);\n\n  // Boolean\n  await setLocalStorageItem(\"fruit-eaten-today\", true);\n};\n```\n"
					}
				]
			},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "string"
					},
					{
						"type": "intrinsic",
						"name": "number"
					},
					{
						"type": "intrinsic",
						"name": "boolean"
					}
				]
			}
		},
		{
			"id": 673,
			"name": "Preferences",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "A record type holding the preferences (entered in Raycast Preferences) that have been passed to the command."
			},
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "intrinsic",
						"name": "string"
					},
					{
						"type": "reference",
						"id": 674,
						"name": "Preference"
					}
				],
				"name": "Record"
			}
		},
		{
			"id": 669,
			"name": "environment",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"comment": {
				"shortText": "Contains environment values such as the Raycast version, extension info, and paths.",
				"tags": [
					{
						"tag": "example",
						"text": "\n```typescript\nimport { environment } from \"@raycast/api\";\n\nconsole.log(`Raycast version: ${environment.raycastVersion}`);\nconsole.log(`Extension name: ${environment.extensionName}`);\nconsole.log(`Command name: ${environment.commandName}`);\nconsole.log(`Assets path: ${environment.assetsPath}`);\nconsole.log(`Support path: ${environment.supportPath}`);\nconsole.log(`Is development mode: ${environment.isDevelopment}`);\n```\n"
					}
				]
			},
			"type": {
				"type": "reference",
				"id": 662,
				"name": "Environment"
			},
			"defaultValue": "..."
		},
		{
			"id": 685,
			"name": "preferences",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"comment": {
				"shortText": "Contains the preference values that have been passed to the command."
			},
			"type": {
				"type": "reference",
				"id": 673,
				"name": "Preferences"
			},
			"defaultValue": "workerData.preferences"
		},
		{
			"id": 75,
			"name": "ActionPanel",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 76,
					"name": "ActionPanel",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Exposes a list of actions that can be performed by the user.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nOften items are context-aware, e.g. based on the selected list item. Actions can be grouped into semantic\nsection and can have keyboard shortcuts assigned.\n\nThe first and second action become the primary and secondary action. They get automatically the default keyboard shortcuts assigned.\nIn list and details, this is `↵` for the primary and `⌘` `↵` for the secondary action. In forms it's `⌘` `↵` for the primary and\n`⌘` `⇧` `↵` for the secondary.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, CopyToClipboardAction, List, OpenInBrowserAction } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List navigationTitle=\"Open Pull Requests\">\n      <List.Item\n        title=\"Docs: Update API Reference\"\n        subtitle=\"#1\"\n        actions={\n          <ActionPanel title=\"#1 in raycast/extensions\">\n            <OpenInBrowserAction url=\"https://github.com/raycast/extensions/pull/1\" />\n            <CopyToClipboardAction\n              title=\"Copy Pull Request URL\"\n              content=\"https://github.com/raycast/extensions/pull/1\"\n            />\n          </ActionPanel>\n        }\n      />\n    </List>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Action Panel\n"
							}
						]
					},
					"parameters": [
						{
							"id": 77,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 154,
								"name": "ActionPanelProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 154,
								"name": "ActionPanelProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 94,
			"name": "ActionPanelItem",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 95,
					"name": "ActionPanelItem",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A context-specific action that can be performed by the user.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nAssign keyboard shortcuts to items to make it easier for users to perform frequently used actions.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, CopyToClipboardAction, List, OpenInBrowserAction } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List navigationTitle=\"Open Pull Requests\">\n      <List.Item\n        title=\"Docs: Update API Reference\"\n        subtitle=\"#1\"\n        actions={\n          <ActionPanel title=\"#1 in raycast/extensions\">\n            <OpenInBrowserAction url=\"https://github.com/raycast/extensions/pull/1\" />\n            <CopyToClipboardAction title=\"Copy Pull Request Number\" content=\"#1\" />\n            <ActionPanel.Item title=\"Close Pull Request\" onAction={() => console.log(\"Close PR #1\")} />\n          </ActionPanel>\n        }\n      />\n    </List>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Action Panel\n"
							}
						]
					},
					"parameters": [
						{
							"id": 96,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 160,
								"name": "ActionPanelItemProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 160,
								"name": "ActionPanelItemProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 86,
			"name": "ActionPanelSection",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 87,
					"name": "ActionPanelSection",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A group of visually separated items.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nUse sections if the {@link ActionPanel} contains a lot of actions to help guide the user to related actions.\nFor example, create a section for all copy actions.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, CopyToClipboardAction, List, OpenInBrowserAction } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List navigationTitle=\"Open Pull Requests\">\n      <List.Item\n        title=\"Docs: Update API Reference\"\n        subtitle=\"#1\"\n        actions={\n          <ActionPanel title=\"#1 in raycast/extensions\">\n            <ActionPanel.Section title=\"Copy\">\n              <CopyToClipboardAction title=\"Copy Pull Request Number\" content=\"#1\" />\n              <CopyToClipboardAction\n                title=\"Copy Pull Request URL\"\n                content=\"https://github.com/raycast/extensions/pull/1\"\n              />\n              <CopyToClipboardAction title=\"Copy Pull Request Title\" content=\"Docs: Update API Reference\" />\n            </ActionPanel.Section>\n            <ActionPanel.Section title=\"Danger zone\">\n              <ActionPanel.Item title=\"Close Pull Request\" onAction={() => console.log(\"Close PR #1\")} />\n            </ActionPanel.Section>\n          </ActionPanel>\n        }\n      />\n    </List>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Action Panel\n"
							}
						]
					},
					"parameters": [
						{
							"id": 88,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 157,
								"name": "ActionPanelSectionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 157,
								"name": "ActionPanelSectionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 125,
			"name": "ActionPanelSubmenu",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 126,
					"name": "ActionPanelSubmenu",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "An action that shows more actions in a submenu.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThis is handy when an action needs to select from a range of options. For example, to add a label to a GitHub pull request\nor an assignee to a todo.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, Color, Icon, List } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List navigationTitle=\"Open Pull Requests\">\n      <List.Item\n        title=\"Docs: Update API Reference\"\n        subtitle=\"#1\"\n        actions={\n          <ActionPanel title=\"#1 in raycast/extensions\">\n            <ActionPanel.Submenu title=\"Add Label\">\n              <ActionPanel.Item\n                icon={{ source: Icon.Circle, tintColor: Color.Red }}\n                title=\"Bug\"\n                onAction={() => console.log(\"Add bug label\")}\n              />\n              <ActionPanel.Item\n                icon={{ source: Icon.Circle, tintColor: Color.Yellow }}\n                title=\"Enhancement\"\n                onAction={() => console.log(\"Add enhancement label\")}\n              />\n              <ActionPanel.Item\n                icon={{ source: Icon.Circle, tintColor: Color.Blue }}\n                title=\"Help Wanted\"\n                onAction={() => console.log(\"Add help wanted label\")}\n              />\n            </ActionPanel.Submenu>\n          </ActionPanel>\n        }\n      />\n    </List>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Action Panel\n"
							}
						]
					},
					"parameters": [
						{
							"id": 127,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 167,
								"name": "ActionPanelSubmenuProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 160,
								"name": "ActionPanelItemProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 555,
			"name": "CopyToClipboardAction",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 556,
					"name": "CopyToClipboardAction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Action that copies the content to the clipboard.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThe main window is closed and a HUD is shown after the content was copied to the clipboard.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, CopyToClipboardAction, Detail } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Detail\n      markdown=\"Press `⌘ + .` and share some love.\"\n      actions={\n        <ActionPanel>\n          <CopyToClipboardAction content=\"I ❤️ Raycast\" shortcut={{ modifiers: [\"cmd\"], key: \".\" }} />\n        </ActionPanel>\n      }\n    />\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Actions\n"
							}
						]
					},
					"parameters": [
						{
							"id": 557,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 558,
								"name": "CopyToClipboardActionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 558,
								"name": "CopyToClipboardActionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 173,
			"name": "Detail",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 174,
					"name": "Detail",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Renders a markdown (CommonMark) string.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nTypically used when navigating from a list or as standalone view.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { Detail } from \"@raycast/api\";\n\nexport default function Command() {\n  return <Detail markdown=\"**Hello** _World_!\" />;\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Detail\n"
							}
						]
					},
					"parameters": [
						{
							"id": 175,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 183,
								"name": "DetailProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 183,
								"name": "DetailProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 189,
			"name": "Form",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 190,
					"name": "Form",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Shows a list of form items such as {@link FormViewTextField}, {@link FormViewCheckbox} or {@link FormViewDropdown}.",
						"tags": [
							{
								"tag": "subcategory",
								"text": "Form\n"
							}
						]
					},
					"parameters": [
						{
							"id": 191,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 382,
								"name": "FormProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 382,
								"name": "FormProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 247,
			"name": "FormCheckbox",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 248,
					"name": "FormCheckbox",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A form item with a checkbox.",
						"tags": [
							{
								"tag": "example",
								"text": "\nUncontrolled checkbox\n\n```typescript\nimport { Form } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.Checkbox id=\"checkbox\" label=\"Are you happy?\" defaultValue={true} />\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "example",
								"text": "\nControlled checkbox\n\n```typescript\nimport { Form } from \"@raycast/api\";\nimport { useState } from \"react\";\n\nexport default function Command() {\n  const [checked, setChecked] = useState(true);\n\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.Checkbox id=\"checkbox\" label=\"Do you like orange juice?\" value={checked} onChange={setChecked} />\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Form\n"
							}
						]
					},
					"parameters": [
						{
							"id": 249,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 417,
								"name": "FormCheckboxProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 417,
								"name": "FormCheckboxProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 264,
			"name": "FormDatePicker",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 265,
					"name": "FormDatePicker",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A form item with a date picker.",
						"tags": [
							{
								"tag": "example",
								"text": "\nUncontrolled date picker\n\n```typescript\nimport { Form } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.DatePicker id=\"dateOfBirth\" title=\"Date of Birth\" defaultValue={new Date(1955, 1, 24)} />\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "example",
								"text": "\nControlled date picker\n\n```typescript\nimport { Form } from \"@raycast/api\";\nimport { useState } from \"react\";\n\nexport default function Command() {\n  const [date, setDate] = useState<Date>();\n\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.DatePicker id=\"launchDate\" title=\"Launch Date\" value={date} onChange={setDate} />\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Form\n"
							}
						]
					},
					"parameters": [
						{
							"id": 266,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 427,
								"name": "FormDatePickerProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 427,
								"name": "FormDatePickerProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 284,
			"name": "FormDropdown",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 285,
					"name": "FormDropdown",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A form item with a dropdown menu.",
						"tags": [
							{
								"tag": "example",
								"text": "\nUncontrolled dropdown\n\n```typescript\nimport { Form } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.Dropdown id=\"emoji\" title=\"Favorite Emoji\" defaultValue=\"lol\">\n        <Form.Dropdown.Item value=\"poop\" title=\"Pile of poop\" icon=\"💩\" />\n        <Form.Dropdown.Item value=\"rocket\" title=\"Rocket\" icon=\"🚀\" />\n        <Form.Dropdown.Item value=\"lol\" title=\"Rolling on the floor laughing face\" icon=\"🤣\" />\n      </Form.Dropdown>\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "example",
								"text": "\nControlled dropdown\n\n```typescript\nimport { Form } from \"@raycast/api\";\nimport { useState } from \"react\";\n\nexport default function Command() {\n  const [programmingLanguage, setProgrammingLanguage] = useState<string>(\"typescript\");\n\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.Dropdown\n        id=\"dropdown\"\n        title=\"Favorite Language\"\n        value={programmingLanguage}\n        onChange={setProgrammingLanguage}\n      >\n        <Form.Dropdown.Item value=\"cpp\" title=\"C++\" />\n        <Form.Dropdown.Item value=\"javascript\" title=\"JavaScript\" />\n        <Form.Dropdown.Item value=\"ruby\" title=\"Ruby\" />\n        <Form.Dropdown.Item value=\"python\" title=\"Python\" />\n        <Form.Dropdown.Item value=\"swift\" title=\"Swift\" />\n        <Form.Dropdown.Item value=\"typescript\" title=\"TypeScript\" />\n      </Form.Dropdown>\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Form\n"
							}
						]
					},
					"parameters": [
						{
							"id": 286,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 437,
								"name": "FormDropdownProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 437,
								"name": "FormDropdownProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 310,
			"name": "FormDropdownItem",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 311,
					"name": "FormDropdownItem",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Represents a context-specific action that can be selected in the user interface or triggered through an assigned keyboard shortcut on the respective view.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { Form, Icon } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.Dropdown id=\"icon\" title=\"Icon\">\n        <Form.Dropdown.Item value=\"circle\" title=\"Cirlce\" icon={Icon.Circle} />\n      </Form.Dropdown>\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Form\n"
							}
						]
					},
					"parameters": [
						{
							"id": 312,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 450,
								"name": "FormDropdownItemProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 450,
								"name": "FormDropdownItemProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 302,
			"name": "FormDropdownSection",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 303,
					"name": "FormDropdownSection",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Visually separated group of dropdown items.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nUse sections to group related menu items together.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { Form } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.Dropdown id=\"food\" title=\"Favorite Food\">\n        <Form.Dropdown.Section title=\"Fruits\">\n          <Form.Dropdown.Item value=\"apple\" title=\"Apple\" icon=\"🍎\" />\n          <Form.Dropdown.Item value=\"banana\" title=\"Banana\" icon=\"🍌\" />\n        </Form.Dropdown.Section>\n        <Form.Dropdown.Section title=\"Vegetables\">\n          <Form.Dropdown.Item value=\"broccoli\" title=\"Broccoli\" icon=\"🥦\" />\n          <Form.Dropdown.Item value=\"carrot\" title=\"Carrot\" icon=\"🥕\" />\n        </Form.Dropdown.Section>\n      </Form.Dropdown>\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Form\n"
							}
						]
					},
					"parameters": [
						{
							"id": 304,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 447,
								"name": "FormDropdownSectionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 447,
								"name": "FormDropdownSectionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 280,
			"name": "FormSeparator",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 281,
					"name": "FormSeparator",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A form item that shows a separator line.\nUse for grouping and visually separating form items.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { Form } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.TextField id=\"textfield\" />\n      <Form.Separator />\n      <Form.TextArea id=\"textarea\" />\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Form\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 436,
								"name": "FormSeparatorProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 333,
			"name": "FormTagPicker",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 334,
					"name": "FormTagPicker",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A form item with a tag picker that allows the user to select multiple items.",
						"tags": [
							{
								"tag": "example",
								"text": "\nUncontrolled tag picker\n\n```typescript\nimport { Form } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.TagPicker id=\"sports\" title=\"Favorite Sports\" defaultValue={[\"football\"]}>\n        <Form.TagPicker.Item value=\"basketball\" title=\"Basketball\" icon=\"🏀\" />\n        <Form.TagPicker.Item value=\"football\" title=\"Football\" icon=\"⚽️\" />\n        <Form.TagPicker.Item value=\"tennis\" title=\"Tennis\" icon=\"🎾\" />\n      </Form.TagPicker>\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "example",
								"text": "\nControlled tag picker\n\n```typescript\nimport { Form } from \"@raycast/api\";\nimport { useState } from \"react\";\n\nexport default function Command() {\n  const [countries, setCountries] = useState<string[]>([\"ger\", \"ned\", \"pol\"]);\n\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.TagPicker id=\"countries\" title=\"Visited Countries\" value={countries} onChange={setCountries}>\n        <Form.TagPicker.Item value=\"ger\" title=\"Germany\" icon=\"🇩🇪\" />\n        <Form.TagPicker.Item value=\"ind\" title=\"India\" icon=\"🇮🇳\" />\n        <Form.TagPicker.Item value=\"ned\" title=\"Netherlands\" icon=\"🇳🇱\" />\n        <Form.TagPicker.Item value=\"nor\" title=\"Norway\" icon=\"🇳🇴\" />\n        <Form.TagPicker.Item value=\"pol\" title=\"Poland\" icon=\"🇵🇱\" />\n        <Form.TagPicker.Item value=\"rus\" title=\"Russia\" icon=\"🇷🇺\" />\n        <Form.TagPicker.Item value=\"sco\" title=\"Scotland\" icon=\"🏴󠁧󠁢󠁳󠁣󠁴󠁿\" />\n      </Form.TagPicker>\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Form\n"
							}
						]
					},
					"parameters": [
						{
							"id": 335,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 454,
								"name": "FormTagPickerProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 454,
								"name": "FormTagPickerProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 351,
			"name": "FormTagPickerItem",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 352,
					"name": "FormTagPickerItem",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A tag picker item in a {@link FormTagPicker}.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { Color, Form, Icon } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.TagPicker id=\"color\" title=\"Color\">\n        <Form.TagPicker.Item value=\"ger\" title=\"Germany\" icon={{ source: Icon.Circle, tintColor: Color.Red }} />\n      </Form.TagPicker>\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Form\n"
							}
						]
					},
					"parameters": [
						{
							"id": 353,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 465,
								"name": "FormTagPickerItemProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 465,
								"name": "FormTagPickerItemProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 230,
			"name": "FormTextArea",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 231,
					"name": "FormTextArea",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A form item with a text area for input.\nThe item supports multiline text entry.",
						"tags": [
							{
								"tag": "example",
								"text": "\nUncontrolled text area\n\n```typescript\nimport { Form } from \"@raycast/api\";\n\nconst DESCRIPTION =\n  \"We spend too much time starring at loading indicators. The Raycast team is dedicated to make everybody interact faster with their computers.\";\n\nexport default function Command() {\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.TextArea id=\"description\" defaultValue={DESCRIPTION} />\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "example",
								"text": "\nControlled text area\n\n```typescript\nimport { Form } from \"@raycast/api\";\nimport { useState } from \"react\";\n\nexport default function Command() {\n  const [text, setText] = useState<string>();\n\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.TextArea id=\"textarea\" value={text} onChange={setText} />\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Form\n"
							}
						]
					},
					"parameters": [
						{
							"id": 232,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 407,
								"name": "FormTextAreaProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 407,
								"name": "FormTextAreaProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 213,
			"name": "FormTextField",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 214,
					"name": "FormTextField",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A form item with a text field for input.",
						"tags": [
							{
								"tag": "example",
								"text": "\nUncontrolled text field\n\n```typescript\nimport { Form } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.TextField id=\"name\" defaultValue=\"Steve\" />\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "example",
								"text": "\nControlled text field\n\n```typescript\nimport { Form } from \"@raycast/api\";\nimport { useState } from \"react\";\n\nexport default function Command() {\n  const [text, setText] = useState<string>();\n\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.TextField id=\"textfield\" value={text} onChange={setText} />\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Form\n"
							}
						]
					},
					"parameters": [
						{
							"id": 215,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 397,
								"name": "FormTextFieldProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 397,
								"name": "FormTextFieldProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 469,
			"name": "List",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 470,
					"name": "List",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Displays {@link List.Section} or {@link List.Item}.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThe list uses built-in filtering by indexing the title of list items and additionally keywords.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { List } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List navigationTitle=\"Search Beers\" searchBarPlaceholder=\"Search your favorite beer\">\n      <List.Item title=\"Augustiner Helles\" />\n      <List.Item title=\"Camden Hells\" />\n      <List.Item title=\"Leffe Blonde\" />\n      <List.Item title=\"Sierra Nevada IPA\" />\n    </List>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "List\n"
							}
						]
					},
					"parameters": [
						{
							"id": 471,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 525,
								"name": "ListProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 525,
								"name": "ListProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 499,
			"name": "ListItem",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 500,
					"name": "ListItem",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A item in the {@link List}.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThis is one of the foundational UI components of Raycast. A list item represents a single entity. It can be a\nGitHub pull request, a file or anything else. Most likely you want to perform actions on this item, so make it clear\nto the user what this list item is about.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { Icon, List } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List>\n      <List.Item icon={Icon.Star} title=\"Augustiner Helles\" subtitle=\"0,5 Liter\" accessoryTitle=\"Germany\" />\n    </List>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "List\n"
							}
						]
					},
					"parameters": [
						{
							"id": 501,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 544,
								"name": "ListItemProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 544,
								"name": "ListItemProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 489,
			"name": "ListSection",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 490,
					"name": "ListSection",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A group of related {@link List.Item}.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nSections are a great way to structure your list. F.e. group GitHub issues with the same status and order them by priority.\nThis way the user can quickly access what is most relevant.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { List } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List>\n      <List.Section title=\"Lager\">\n        <List.Item title=\"Camden Hells\" />\n      </List.Section>\n      <List.Section title=\"IPA\">\n        <List.Item title=\"Sierra Nevada IPA\" />\n      </List.Section>\n    </List>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "List\n"
							}
						]
					},
					"parameters": [
						{
							"id": 491,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 539,
								"name": "ListSectionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 539,
								"name": "ListSectionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 566,
			"name": "OpenAction",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 567,
					"name": "OpenAction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "An action to open a file or folder with a specific application, just as if you had double-clicked the\nfile's icon.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThe main window is closed, after the file was opened.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, Detail, OpenAction } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Detail\n      markdown=\"Check out your extension code.\"\n      actions={\n        <ActionPanel>\n          <OpenAction title=\"Open Folder\" target={__dirname} />\n        </ActionPanel>\n      }\n    />\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Actions\n"
							}
						]
					},
					"parameters": [
						{
							"id": 568,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 569,
								"name": "OpenActionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 569,
								"name": "OpenActionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 578,
			"name": "OpenInBrowserAction",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 579,
					"name": "OpenInBrowserAction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Action that opens a URL in the default browser..",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThe main window is closed, after the URL was opened in the browser.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, Detail, OpenInBrowserAction } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Detail\n      markdown=\"Join the gang!\"\n      actions={\n        <ActionPanel>\n          <OpenInBrowserAction url=\"https://raycast.com/jobs\" />\n        </ActionPanel>\n      }\n    />\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Actions\n"
							}
						]
					},
					"parameters": [
						{
							"id": 580,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 581,
								"name": "OpenInBrowserActionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 581,
								"name": "OpenInBrowserActionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 589,
			"name": "OpenWithAction",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 590,
					"name": "OpenWithAction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "An action to open a file or folder with a specific application.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThe action opens a sub-menu with all applications that can open the file or folder.\nThe main window is closed after the file was opened in the specified application.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, Detail, OpenWithAction } from \"@raycast/api\";\nimport { homedir } from \"os\";\n\nconst DESKTOP_DIR = `${homedir()}/Desktop`;\n\nexport default function Command() {\n  return (\n    <Detail\n      markdown=\"What do you want to use to open your desktop with?\"\n      actions={\n        <ActionPanel>\n          <OpenWithAction path={DESKTOP_DIR} />\n        </ActionPanel>\n      }\n    />\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Actions\n"
							}
						]
					},
					"parameters": [
						{
							"id": 591,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 592,
								"name": "OpenWithActionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 592,
								"name": "OpenWithActionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 600,
			"name": "PasteAction",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 601,
					"name": "PasteAction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Action that pastes the content to the front-most applications.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThe main window is closed, after the content was pasted to the front-most application.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, Detail, PasteAction } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Detail\n      markdown=\"Let us know what you think about the Raycast API?\"\n      actions={\n        <ActionPanel>\n          <PasteAction content=\"api@raycast.com\" />\n        </ActionPanel>\n      }\n    />\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Actions\n"
							}
						]
					},
					"parameters": [
						{
							"id": 602,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 603,
								"name": "PasteActionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 603,
								"name": "PasteActionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 611,
			"name": "PushAction",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 612,
					"name": "PushAction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Action that allows to push a new view to the navigation stack.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, Detail, PushAction } from \"@raycast/api\";\n\nfunction Ping() {\n  return (\n    <Detail\n      markdown=\"Ping\"\n      actions={\n        <ActionPanel>\n          <PushAction title=\"Push Pong\" target={<Pong />} />\n        </ActionPanel>\n      }\n    />\n  );\n}\n\nfunction Pong() {\n  return <Detail markdown=\"Pong\" />;\n}\n\nexport default function Command() {\n  return <Ping />;\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Actions\n"
							}
						]
					},
					"parameters": [
						{
							"id": 613,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 614,
								"name": "PushActionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 614,
								"name": "PushActionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 621,
			"name": "ShowInFinderAction",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 622,
					"name": "ShowInFinderAction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Action that shows a file or folder in the Finder.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThe main window is closed, after the file or folder was revealed in the Finder.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, Detail, ShowInFinderAction } from \"@raycast/api\";\nimport { homedir } from \"os\";\n\nconst DOWNLOADS_DIR = `${homedir()}/Downloads`;\n\nexport default function Command() {\n  return (\n    <Detail\n      markdown=\"Are your downloads pilling up again?\"\n      actions={\n        <ActionPanel>\n          <ShowInFinderAction path={DOWNLOADS_DIR} />\n        </ActionPanel>\n      }\n    />\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Actions\n"
							}
						]
					},
					"parameters": [
						{
							"id": 623,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 624,
								"name": "ShowInFinderActionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 624,
								"name": "ShowInFinderActionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 632,
			"name": "SubmitFormAction",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 633,
					"name": "SubmitFormAction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Action that allows to add a submit handler for capturing form values.",
						"tags": [
							{
								"tag": "subcategory",
								"text": "Actions\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 634,
							"name": "Values",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 379,
								"name": "FormValues"
							},
							"default": {
								"type": "reference",
								"id": 379,
								"name": "FormValues"
							}
						}
					],
					"parameters": [
						{
							"id": 635,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 636,
								"typeArguments": [
									{
										"type": "reference",
										"id": 634,
										"name": "Values"
									}
								],
								"name": "SubmitFormActionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 636,
								"typeArguments": [
									{
										"type": "reference",
										"id": 634,
										"name": "Values"
									}
								],
								"name": "SubmitFormActionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 644,
			"name": "TrashAction",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 645,
					"name": "TrashAction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Action that moves a file or folder to the Trash.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, Detail, TrashAction } from \"@raycast/api\";\nimport { homedir } from \"os\";\n\nconst FILE = `${homedir()}/Downloads/get-rid-of-me.txt`;\n\nexport default function Command() {\n  return (\n    <Detail\n      markdown=\"Some spring cleaning?\"\n      actions={\n        <ActionPanel>\n          <TrashAction paths={FILE} />\n        </ActionPanel>\n      }\n    />\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Actions\n"
							}
						]
					},
					"parameters": [
						{
							"id": 646,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 647,
								"name": "TrashActionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 647,
								"name": "TrashActionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 48,
			"name": "allLocalStorageItems",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 49,
					"name": "allLocalStorageItems",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Retrieve all stored values in the local storage of an extension.",
						"returns": "A promise that resolves with an object containing all {@link LocalStorageValues}.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { allLocalStorageItems } from \"@raycast/api\";\n\ninterface Values {\n  todo: string;\n  priority: number;\n}\n\nexport default async () => {\n  const items: Values = await allLocalStorageItems();\n  console.log(`Local storage item count: ${Object.entries(items).length}`);\n};\n```\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 50,
							"name": "Values",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 65,
								"name": "LocalStorageValues"
							},
							"default": {
								"type": "reference",
								"id": 65,
								"name": "LocalStorageValues"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 50,
								"name": "Values"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 35,
			"name": "clearClipboard",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 36,
					"name": "clearClipboard",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Clears the current clipboard contents.",
						"returns": "A promise that resolves when the clipboard is cleared.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { clearClipboard } from \"@raycast/api\";\n\nexport default async () => {\n  await clearClipboard();\n};\n```\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 62,
			"name": "clearLocalStorage",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 63,
					"name": "clearLocalStorage",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Removes all stored values of an extension.",
						"returns": "A promise that resolves when all values were removed.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { clearLocalStorage } from \"@raycast/api\";\n\nexport default async () => {\n  await clearLocalStorage();\n};\n```\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 11,
			"name": "clearSearchBar",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 12,
					"name": "clearSearchBar",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Clear the text in the search bar.",
						"returns": "A promise that resolves when the search bar is cleared.\n",
						"tags": [
							{
								"tag": "subcategory",
								"text": "Window & Search Bar\n"
							}
						]
					},
					"parameters": [
						{
							"id": 13,
							"name": "options",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Can be used to force scrolling to the top. Defaults to scrolling to the top after the\nthe search bar was cleared."
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 14,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 15,
											"name": "forceScrollToTop",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												15
											]
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 1,
			"name": "closeMainWindow",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 2,
					"name": "closeMainWindow",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Closes the main Raycast window.",
						"returns": "A promise that resolves when the main window is closed.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { closeMainWindow } from \"@raycast/api\";\nimport { setTimeout } from \"timers/promises\";\n\nexport default async () => {\n  await setTimeout(1000);\n  await closeMainWindow({ clearRootSearch: true });\n};\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Window & Search Bar\n"
							}
						]
					},
					"parameters": [
						{
							"id": 3,
							"name": "options",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Can be used to clear the root search. Defaults to not clearing the root search after\nthe window was closed."
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 4,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 5,
											"name": "clearRootSearch",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												5
											]
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 32,
			"name": "copyTextToClipboard",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 33,
					"name": "copyTextToClipboard",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Copies text to the clipboard.",
						"returns": "A promise that resolves when the text got copied to the clipboard.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { copyTextToClipboard } from \"@raycast/api\";\n\nexport default async () => {\n  await copyTextToClipboard(\"https://raycast.com\");\n};\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 34,
							"name": "text",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The text to copy to the clipboard."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 22,
			"name": "getApplications",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 23,
					"name": "getApplications",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns all applications that can open the file.",
						"returns": "An array of {@link Application}.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { getApplications } from \"@raycast/api\";\n\nexport default async () => {\n  const installedApplications = await getApplications();\n  console.log(\"The following applications are installed on your Mac:\");\n  console.log(installedApplications.map((a) => a.name).join(\", \"));\n};\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 24,
							"name": "path",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The path of the file or folder to get the applications for. If no path is specified, all installed applications are returned."
							},
							"type": {
								"type": "reference",
								"name": "PathLike"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 28,
									"name": "Application"
								}
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 25,
			"name": "getDefaultApplication",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 26,
					"name": "getDefaultApplication",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the default application that the file would be opened with.",
						"returns": "The default {@link Application} that would open the file. Throws an error if no application was found.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { getDefaultApplication } from \"@raycast/api\";\n\nexport default async () => {\n  const defaultApplication = await getDefaultApplication(__filename);\n  console.log(`Default application for JavaScript is: ${defaultApplication.name}`);\n};\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 27,
							"name": "path",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The path of the file or folder to get the default application for."
							},
							"type": {
								"type": "reference",
								"name": "PathLike"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 28,
								"name": "Application"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 51,
			"name": "getLocalStorageItem",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 52,
					"name": "getLocalStorageItem",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Retrieve the stored value for the given key.",
						"returns": "A promise that resolves with the the stored value for the given key. If the key does not exist, `undefined` is returned.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { getLocalStorageItem } from \"@raycast/api\";\n\nexport default async () => {\n  const item: string = await getLocalStorageItem(\"favorite-fruit\");\n  console.log(item);\n};\n```\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 53,
							"name": "Value",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 64,
								"name": "LocalStorageValue"
							},
							"default": {
								"type": "reference",
								"id": 64,
								"name": "LocalStorageValue"
							}
						}
					],
					"parameters": [
						{
							"id": 54,
							"name": "key",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The key you want to retrieve the value of."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 53,
										"name": "Value"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 670,
			"name": "getPreferenceValues",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 671,
					"name": "getPreferenceValues",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A convenience function for type-safe access to the values of the {@link preferences} object.",
						"returns": "An object with the preference names as property key and the typed value as property value.\n",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nEach preference name is mapped to its value and the defined default values are used as fallback values.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { getPreferenceValues } from \"@raycast/api\";\n\ninterface Preferences {\n  name: string;\n  bodyWeight?: string;\n  bodyHeight?: string;\n}\n\nexport default async () => {\n  const preferences: Preferences = getPreferenceValues();\n  console.log(preferences);\n};\n```\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 672,
							"name": "Values",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 686,
								"name": "PreferenceValues"
							},
							"default": {
								"type": "reference",
								"id": 686,
								"name": "PreferenceValues"
							}
						}
					],
					"type": {
						"type": "reference",
						"id": 672,
						"name": "Values"
					}
				}
			]
		},
		{
			"id": 40,
			"name": "getSelectedText",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 41,
					"name": "getSelectedText",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Gets the selected text of the frontmost application.",
						"returns": "Returns a promise that resolves with the selected text.\n",
						"tags": [
							{
								"tag": "throws",
								"text": "An error when no text is selected in the frontmost application."
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { getSelectedText, pasteText, showToast, ToastStyle } from \"@raycast/api\";\n\nexport default async () => {\n  try {\n    const selectedText = await getSelectedText();\n    const transformedText = selectedText.toUpperCase();\n    await pasteText(transformedText);\n  } catch (error) {\n    await showToast(ToastStyle.Failure, \"Cannot transform text\", String(error));\n  }\n};\n```\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 37,
			"name": "pasteText",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 38,
					"name": "pasteText",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Pastes text to the current selection of the frontmost application.",
						"returns": "A promise that resolves when the text got pasted.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { pasteText } from \"@raycast/api\";\n\nexport default async () => {\n  await pasteText(\"I really like Raycast's API\");\n};\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 39,
							"name": "text",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The text to insert at the cursor."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 6,
			"name": "popToRoot",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 7,
					"name": "popToRoot",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Pops the navigation stack back to root search.",
						"returns": "A promise that resolves when Raycast popped to root.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { Detail, popToRoot } from \"@raycast/api\";\nimport { useEffect } from \"react\";\nimport { setTimeout } from \"timers\";\n\nexport default function Command() {\n  useEffect(() => {\n    setTimeout(() => {\n      popToRoot({ clearSearchBar: true });\n    }, 3000);\n  }, []);\n\n  return <Detail markdown=\"See you soon 👋\" />;\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Window & Search Bar\n"
							}
						]
					},
					"parameters": [
						{
							"id": 8,
							"name": "options",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Can be used to clear the search bar. Defaults to clearing the search bar after popped to root."
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 9,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 10,
											"name": "clearSearchBar",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												10
											]
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 835,
			"name": "randomId",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 836,
					"name": "randomId",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Generate secure URL-friendly unique ID.",
						"text": "By default, the ID will have 21 symbols to have a collision probability\nsimilar to UUID v4.\n",
						"returns": "A random string.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { pasteText, randomId } from \"@raycast/api\";\n\nexport default async () => {\n  const id = randomId();\n  await pasteText(id);\n};\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 837,
							"name": "size",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Size of the ID. The default size is 21."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 59,
			"name": "removeLocalStorageItem",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 60,
					"name": "removeLocalStorageItem",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Removes the stored value for the given key.",
						"returns": "A promise that resolves when the value was removed.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { removeLocalStorageItem } from \"@raycast/api\";\n\nexport default async () => {\n  await removeLocalStorageItem(\"favorite-fruit\");\n};\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 61,
							"name": "key",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The key you want to remove the value of."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 709,
			"name": "render",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 710,
					"name": "render",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Takes a React Component and renders it in Raycast for command types that show a `view`.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { Detail } from \"@raycast/api\"\nconst Command = () => <Detail markdown=\"Hello World\" />\nrender(<Command />)\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Rendering\n"
							}
						]
					},
					"parameters": [
						{
							"id": 711,
							"name": "nodeToRender",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ReactNode"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "void"
					}
				}
			]
		},
		{
			"id": 55,
			"name": "setLocalStorageItem",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 56,
					"name": "setLocalStorageItem",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Stores a value for the given key.",
						"returns": "A promise that resolves when the value was stored.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { setLocalStorageItem } from \"@raycast/api\";\n\nexport default async () => {\n  await setLocalStorageItem(\"favorite-fruit\", \"cherry\");\n};\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 57,
							"name": "key",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The key you want to create or update the value of."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 58,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The value you want to create or update for the given key."
							},
							"type": {
								"type": "reference",
								"id": 64,
								"name": "LocalStorageValue"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 801,
			"name": "showHUD",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 802,
					"name": "showHUD",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A HUD will automatically hide the main window and show a compact Toast at the bottom of the screen.",
						"returns": "A promise that resolves when the HUD is shown.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { showHUD } from \"@raycast/api\";\n\nexport default async () => {\n  await showHUD(\"Hey there 👋\");\n};\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Toast\n"
							}
						]
					},
					"parameters": [
						{
							"id": 803,
							"name": "title",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The title that will be displayed for the HUD."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 16,
			"name": "showInFinder",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 17,
					"name": "showInFinder",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Shows a file or directory in the Finder.",
						"returns": "A promise that resolves when item is revealed in the Finder.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { showInFinder } from \"@raycast/api\"\nimport { homedir } from \"os\"\nshowInFinder(homedir(), \"Downloads\")\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 18,
							"name": "path",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The path to show in the Finder."
							},
							"type": {
								"type": "reference",
								"name": "PathLike"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 796,
			"name": "showToast",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 797,
					"name": "showToast",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Creates and shows a Toast with the the given style, title, and message.",
						"returns": "A promise that resolves with the shown toast. The toast can be used to change or hide it.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { showToast, ToastStyle } from \"@raycast/api\";\n\nexport default async () => {\n  const success = false;\n\n  if (success) {\n    await showToast(ToastStyle.Success, \"Dinner is ready\", \"Pizza margherita\");\n  } else {\n    await showToast(ToastStyle.Failure, \"Dinner isn't ready\", \"Pizza dropped on the floor\");\n  }\n};\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Toast\n"
							}
						]
					},
					"parameters": [
						{
							"id": 798,
							"name": "style",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The visual style of the Toast."
							},
							"type": {
								"type": "reference",
								"id": 831,
								"name": "ToastStyle"
							}
						},
						{
							"id": 799,
							"name": "title",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The title that will be displayed in the Toast."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 800,
							"name": "message",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The message that will be displayed in the Toast."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 804,
								"name": "Toast"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 19,
			"name": "trash",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 20,
					"name": "trash",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Moves a file or director to the Trash.",
						"returns": "A promise that resolves when all files are moved to the trash.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { trash } from \"@raycast/api\";\nimport { writeFile } from \"fs/promises\";\nimport { homedir } from \"os\";\n\nexport default async () => {\n  const file = `${homedir()}/Desktop/yolo.txt`;\n  await writeFile(file, \"I will be deleted soon!\");\n  await trash(file);\n};\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 21,
							"name": "path",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "PathLike"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "PathLike"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 689,
			"name": "useActionPanel",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 690,
					"name": "useActionPanel",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A hook that lets you update the global Action Panel.",
						"returns": "A {@link ActionPanelState} object with an {@link update} function.\nUse the function to update the global Action Panel.\n",
						"tags": [
							{
								"tag": "subcategory",
								"text": "Action Panel\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 691,
						"name": "ActionPanelState"
					}
				}
			]
		},
		{
			"id": 695,
			"name": "useId",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 696,
					"name": "useId",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Generates a memoized random ID.",
						"returns": "The an string ID that is either the `defaultId` if provided, or a randomly generated ID with\nthe `generateId` function.\n",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThe generated ID is preserved across renders. It's used internally to generate fallback ID's\nfor {@link List.Section} or {@link List.Item}. The generated ID is saved as React `ref` and\nwon't change unless the React component is unmounted.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { Detail, useId } from \"@raycast/api\";\n\nexport default function Command() {\n  const id = useId();\n  console.log(id);\n  return <Detail key={id} markdown=\"I remember you 🧠\" />;\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Utilities\n"
							}
						]
					},
					"parameters": [
						{
							"id": 697,
							"name": "defaultId",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The ID that is returned by default."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 698,
							"name": "generateId",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A function that is used to generate a random ID. Uses {@link randomId} by default."
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 699,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 700,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							},
							"defaultValue": "randomId"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 701,
			"name": "useNavigation",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 702,
					"name": "useNavigation",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A hook that lets you push and pop view components in the navigation stack.",
						"returns": "A {@link Navigation} object with {@link Navigation.push} and {@link Navigation.pop} functions.\nUse the functions to alter the navigation stack.\n",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nMost likely you won't use this hook too often. To push a new component, use the {@link PushAction}.\nWhen a user presses `ESC`, we automatically push to the previous component.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, Detail, useNavigation } from \"@raycast/api\";\n\nfunction Ping() {\n  const { push } = useNavigation();\n\n  return (\n    <Detail\n      markdown=\"Ping\"\n      actions={\n        <ActionPanel>\n          <ActionPanel.Item title=\"Push\" onAction={() => push(<Pong />)} />\n        </ActionPanel>\n      }\n    />\n  );\n}\n\nfunction Pong() {\n  const { pop } = useNavigation();\n\n  return (\n    <Detail\n      markdown=\"Pong\"\n      actions={\n        <ActionPanel>\n          <ActionPanel.Item title=\"Pop\" onAction={pop} />\n        </ActionPanel>\n      }\n    />\n  );\n}\n\nexport default function Command() {\n  return <Ping />;\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Navigation\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 703,
						"name": "Navigation"
					}
				}
			]
		}
	],
	"groups": [
		{
			"title": "Namespaces",
			"kind": 4,
			"children": [
				78,
				97,
				89,
				128,
				176,
				192,
				250,
				267,
				287,
				313,
				305,
				282,
				336,
				354,
				233,
				216,
				73,
				472,
				502,
				492
			]
		},
		{
			"title": "Enumerations",
			"kind": 8,
			"children": [
				718,
				733,
				793,
				831
			]
		},
		{
			"title": "Classes",
			"kind": 128,
			"children": [
				804
			]
		},
		{
			"title": "Interfaces",
			"kind": 256,
			"children": [
				160,
				154,
				157,
				691,
				167,
				28,
				558,
				183,
				662,
				782,
				417,
				427,
				450,
				437,
				447,
				387,
				382,
				436,
				465,
				454,
				407,
				397,
				379,
				785,
				42,
				544,
				525,
				539,
				65,
				703,
				569,
				581,
				592,
				603,
				674,
				686,
				614,
				624,
				636,
				827,
				647
			]
		},
		{
			"title": "Type aliases",
			"kind": 4194304,
			"children": [
				152,
				153,
				729,
				374,
				784,
				789,
				47,
				46,
				64,
				673
			]
		},
		{
			"title": "Variables",
			"kind": 32,
			"children": [
				669,
				685
			]
		},
		{
			"title": "Functions",
			"kind": 64,
			"children": [
				75,
				94,
				86,
				125,
				555,
				173,
				189,
				247,
				264,
				284,
				310,
				302,
				280,
				333,
				351,
				230,
				213,
				469,
				499,
				489,
				566,
				578,
				589,
				600,
				611,
				621,
				632,
				644,
				48,
				35,
				62,
				11,
				1,
				32,
				22,
				25,
				51,
				670,
				40,
				37,
				6,
				835,
				59,
				709,
				55,
				801,
				16,
				796,
				19,
				689,
				695,
				701
			]
		}
	],
	"categories": [
		{
			"title": "User Interface",
			"children": [
				718,
				733,
				793,
				831,
				804,
				160,
				154,
				157,
				691,
				167,
				558,
				183,
				782,
				417,
				427,
				450,
				437,
				447,
				387,
				382,
				436,
				465,
				454,
				407,
				397,
				379,
				785,
				544,
				525,
				539,
				703,
				569,
				581,
				592,
				603,
				614,
				624,
				636,
				827,
				647,
				152,
				153,
				729,
				374,
				784,
				789,
				75,
				94,
				86,
				125,
				555,
				173,
				189,
				247,
				264,
				284,
				310,
				302,
				280,
				333,
				351,
				230,
				213,
				469,
				499,
				489,
				566,
				578,
				589,
				600,
				611,
				621,
				632,
				644,
				11,
				1,
				6,
				709,
				801,
				796,
				689,
				695,
				701
			]
		},
		{
			"title": "Keyboard",
			"children": [
				42,
				47,
				46
			]
		},
		{
			"title": "Clipboard",
			"children": [
				35,
				32,
				40,
				37
			]
		},
		{
			"title": "Storage",
			"children": [
				65,
				64,
				48,
				62,
				51,
				59,
				55
			]
		},
		{
			"title": "Environment",
			"children": [
				662,
				669
			]
		},
		{
			"title": "Other",
			"children": [
				78,
				97,
				89,
				128,
				176,
				192,
				250,
				267,
				287,
				313,
				305,
				282,
				336,
				354,
				233,
				216,
				73,
				472,
				502,
				492
			]
		},
		{
			"title": "Preferences",
			"children": [
				674,
				686,
				673,
				685,
				670
			]
		},
		{
			"title": "Utilities",
			"children": [
				28,
				22,
				25,
				835,
				16,
				19
			]
		}
	]
}