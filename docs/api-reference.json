{
	"id": 0,
	"name": "@raycast/api",
	"kind": 1,
	"kindString": "Project",
	"flags": {},
	"originalName": "",
	"children": [
		{
			"id": 82,
			"name": "ActionPanel",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 87,
					"name": "Item",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 98,
							"name": "ActionPanelItem"
						}
					}
				},
				{
					"id": 88,
					"name": "Section",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 90,
							"name": "ActionPanelSection"
						}
					}
				},
				{
					"id": 89,
					"name": "Submenu",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 129,
							"name": "ActionPanelSubmenu"
						}
					}
				},
				{
					"id": 86,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 83,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 84,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 85,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										85
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						87,
						88,
						89,
						86,
						83
					]
				}
			]
		},
		{
			"id": 101,
			"name": "ActionPanelItem",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 128,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 102,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 103,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 106,
									"name": "icon",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 107,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 108,
																					"name": "fileIcon",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "intrinsic",
																								"name": "string"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "PropTypes.string"
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						108
																					]
																				}
																			]
																		}
																	}
																],
																"name": "InferProps"
															}
														],
														"name": "Required"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 109,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 114,
																					"name": "mask",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "reference",
																								"name": "ImageMask"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 110,
																					"name": "source",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "union",
																								"types": [
																									{
																										"type": "intrinsic",
																										"name": "string"
																									},
																									{
																										"type": "reference",
																										"typeArguments": [
																											{
																												"type": "reflection",
																												"declaration": {
																													"id": 111,
																													"name": "__type",
																													"kind": 65536,
																													"kindString": "Type literal",
																													"flags": {},
																													"children": [
																														{
																															"id": 113,
																															"name": "dark",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														},
																														{
																															"id": 112,
																															"name": "light",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														}
																													],
																													"groups": [
																														{
																															"title": "Properties",
																															"kind": 1024,
																															"children": [
																																113,
																																112
																															]
																														}
																													]
																												}
																											}
																										],
																										"name": "InferProps"
																									}
																								]
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 115,
																					"name": "tintColor",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "union",
																								"types": [
																									{
																										"type": "intrinsic",
																										"name": "string"
																									},
																									{
																										"type": "reference",
																										"typeArguments": [
																											{
																												"type": "reflection",
																												"declaration": {
																													"id": 116,
																													"name": "__type",
																													"kind": 65536,
																													"kindString": "Type literal",
																													"flags": {},
																													"children": [
																														{
																															"id": 119,
																															"name": "adjustContrast",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "boolean"
																																	}
																																],
																																"name": "Requireable"
																															},
																															"defaultValue": "PropTypes.bool"
																														},
																														{
																															"id": 118,
																															"name": "dark",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														},
																														{
																															"id": 117,
																															"name": "light",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														}
																													],
																													"groups": [
																														{
																															"title": "Properties",
																															"kind": 1024,
																															"children": [
																																119,
																																118,
																																117
																															]
																														}
																													]
																												}
																											}
																										],
																										"name": "InferProps"
																									}
																								]
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						114,
																						110,
																						115
																					]
																				}
																			]
																		}
																	}
																],
																"name": "InferProps"
															}
														],
														"name": "Required"
													}
												]
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "imagePropType"
								},
								{
									"id": 104,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 124,
									"name": "onAction",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 125,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 126,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 127,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.func"
								},
								{
									"id": 120,
									"name": "shortcut",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reflection",
																"declaration": {
																	"id": 121,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 123,
																			"name": "key",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "intrinsic",
																						"name": "string"
																					}
																				],
																				"name": "Validator"
																			},
																			"defaultValue": "PropTypes.string.isRequired"
																		},
																		{
																			"id": 122,
																			"name": "modifiers",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "array",
																						"elementType": {
																							"type": "union",
																							"types": [
																								{
																									"type": "intrinsic",
																									"name": "undefined"
																								},
																								{
																									"type": "literal",
																									"value": null
																								},
																								{
																									"type": "intrinsic",
																									"name": "string"
																								}
																							]
																						}
																					}
																				],
																				"name": "Validator"
																			},
																			"defaultValue": "..."
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				123,
																				122
																			]
																		}
																	]
																}
															}
														],
														"name": "InferProps"
													}
												],
												"name": "Required"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "keyboardShortcutPropType"
								},
								{
									"id": 105,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "PropTypes.string.isRequired"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										106,
										104,
										124,
										120,
										105
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						128,
						102
					]
				}
			]
		},
		{
			"id": 93,
			"name": "ActionPanelSection",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 97,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 94,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 95,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 96,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										96
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						97,
						94
					]
				}
			]
		},
		{
			"id": 132,
			"name": "ActionPanelSubmenu",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 155,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 133,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 134,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 137,
									"name": "icon",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 138,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 139,
																					"name": "fileIcon",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "intrinsic",
																								"name": "string"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "PropTypes.string"
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						139
																					]
																				}
																			]
																		}
																	}
																],
																"name": "InferProps"
															}
														],
														"name": "Required"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 140,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 145,
																					"name": "mask",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "reference",
																								"name": "ImageMask"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 141,
																					"name": "source",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "union",
																								"types": [
																									{
																										"type": "intrinsic",
																										"name": "string"
																									},
																									{
																										"type": "reference",
																										"typeArguments": [
																											{
																												"type": "reflection",
																												"declaration": {
																													"id": 142,
																													"name": "__type",
																													"kind": 65536,
																													"kindString": "Type literal",
																													"flags": {},
																													"children": [
																														{
																															"id": 144,
																															"name": "dark",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														},
																														{
																															"id": 143,
																															"name": "light",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														}
																													],
																													"groups": [
																														{
																															"title": "Properties",
																															"kind": 1024,
																															"children": [
																																144,
																																143
																															]
																														}
																													]
																												}
																											}
																										],
																										"name": "InferProps"
																									}
																								]
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 146,
																					"name": "tintColor",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "union",
																								"types": [
																									{
																										"type": "intrinsic",
																										"name": "string"
																									},
																									{
																										"type": "reference",
																										"typeArguments": [
																											{
																												"type": "reflection",
																												"declaration": {
																													"id": 147,
																													"name": "__type",
																													"kind": 65536,
																													"kindString": "Type literal",
																													"flags": {},
																													"children": [
																														{
																															"id": 150,
																															"name": "adjustContrast",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "boolean"
																																	}
																																],
																																"name": "Requireable"
																															},
																															"defaultValue": "PropTypes.bool"
																														},
																														{
																															"id": 149,
																															"name": "dark",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														},
																														{
																															"id": 148,
																															"name": "light",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														}
																													],
																													"groups": [
																														{
																															"title": "Properties",
																															"kind": 1024,
																															"children": [
																																150,
																																149,
																																148
																															]
																														}
																													]
																												}
																											}
																										],
																										"name": "InferProps"
																									}
																								]
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						145,
																						141,
																						146
																					]
																				}
																			]
																		}
																	}
																],
																"name": "InferProps"
															}
														],
														"name": "Required"
													}
												]
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "imagePropType"
								},
								{
									"id": 135,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 151,
									"name": "shortcut",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reflection",
																"declaration": {
																	"id": 152,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 154,
																			"name": "key",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "intrinsic",
																						"name": "string"
																					}
																				],
																				"name": "Validator"
																			},
																			"defaultValue": "PropTypes.string.isRequired"
																		},
																		{
																			"id": 153,
																			"name": "modifiers",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "array",
																						"elementType": {
																							"type": "union",
																							"types": [
																								{
																									"type": "intrinsic",
																									"name": "undefined"
																								},
																								{
																									"type": "literal",
																									"value": null
																								},
																								{
																									"type": "intrinsic",
																									"name": "string"
																								}
																							]
																						}
																					}
																				],
																				"name": "Validator"
																			},
																			"defaultValue": "..."
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				154,
																				153
																			]
																		}
																	]
																}
															}
														],
														"name": "InferProps"
													}
												],
												"name": "Required"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "keyboardShortcutPropType"
								},
								{
									"id": 136,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "PropTypes.string.isRequired"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										137,
										135,
										151,
										136
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						155,
						133
					]
				}
			]
		},
		{
			"id": 180,
			"name": "Detail",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 186,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 181,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 182,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 184,
									"name": "isLoading",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.bool"
								},
								{
									"id": 185,
									"name": "markdown",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 183,
									"name": "navigationTitle",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										184,
										185,
										183
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						186,
						181
					]
				}
			]
		},
		{
			"id": 196,
			"name": "Form",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 209,
					"name": "Checkbox",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 251,
							"name": "FormCheckbox"
						}
					}
				},
				{
					"id": 210,
					"name": "DatePicker",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 268,
							"name": "FormDatePicker"
						}
					}
				},
				{
					"id": 212,
					"name": "Dropdown",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 288,
							"name": "FormDropdown"
						}
					}
				},
				{
					"id": 214,
					"name": "DropdownItem",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 314,
							"name": "FormDropdownItem"
						}
					}
				},
				{
					"id": 213,
					"name": "DropdownSection",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 306,
							"name": "FormDropdownSection"
						}
					}
				},
				{
					"id": 211,
					"name": "Separator",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 284,
							"name": "FormSeparator"
						}
					}
				},
				{
					"id": 215,
					"name": "TagPicker",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 337,
							"name": "FormTagPicker"
						}
					}
				},
				{
					"id": 216,
					"name": "TagPickerItem",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 355,
							"name": "FormTagPickerItem"
						}
					}
				},
				{
					"id": 208,
					"name": "TextArea",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 234,
							"name": "FormTextArea"
						}
					}
				},
				{
					"id": 207,
					"name": "TextField",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 217,
							"name": "FormTextField"
						}
					}
				},
				{
					"id": 206,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 197,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 198,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 201,
									"name": "isLoading",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.bool"
								},
								{
									"id": 200,
									"name": "navigationTitle",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 202,
									"name": "onSubmit",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 203,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 204,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 205,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.func"
								},
								{
									"id": 199,
									"name": "submitTitle",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										201,
										200,
										202,
										199
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						209,
						210,
						212,
						214,
						213,
						211,
						215,
						216,
						208,
						207,
						206,
						197
					]
				}
			]
		},
		{
			"id": 254,
			"name": "FormCheckbox",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 267,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 255,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 256,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 261,
									"name": "defaultValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.bool"
								},
								{
									"id": 257,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "PropTypes.string.isRequired"
								},
								{
									"id": 262,
									"name": "label",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 263,
									"name": "onChange",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 264,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 265,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 266,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.func"
								},
								{
									"id": 259,
									"name": "storeValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.bool"
								},
								{
									"id": 258,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 260,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.bool"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										261,
										257,
										262,
										263,
										259,
										258,
										260
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						267,
						255
					]
				}
			]
		},
		{
			"id": 271,
			"name": "FormDatePicker",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 283,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 272,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 273,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 278,
									"name": "defaultValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Date"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 274,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "PropTypes.string.isRequired"
								},
								{
									"id": 279,
									"name": "onChange",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 280,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 281,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 282,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.func"
								},
								{
									"id": 276,
									"name": "storeValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.bool"
								},
								{
									"id": 275,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 277,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Date"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										278,
										274,
										279,
										276,
										275,
										277
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						283,
						272
					]
				}
			]
		},
		{
			"id": 291,
			"name": "FormDropdown",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 305,
					"name": "Item",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 314,
							"name": "FormDropdownItem"
						}
					}
				},
				{
					"id": 304,
					"name": "Section",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 306,
							"name": "FormDropdownSection"
						}
					}
				},
				{
					"id": 303,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 292,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 293,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 298,
									"name": "defaultValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 294,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "PropTypes.string.isRequired"
								},
								{
									"id": 299,
									"name": "onChange",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 300,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 301,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 302,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.func"
								},
								{
									"id": 296,
									"name": "storeValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.bool"
								},
								{
									"id": 295,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 297,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										298,
										294,
										299,
										296,
										295,
										297
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						305,
						304,
						303,
						292
					]
				}
			]
		},
		{
			"id": 317,
			"name": "FormDropdownItem",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 336,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 318,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 319,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 322,
									"name": "icon",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 323,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 324,
																					"name": "fileIcon",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "intrinsic",
																								"name": "string"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "PropTypes.string"
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						324
																					]
																				}
																			]
																		}
																	}
																],
																"name": "InferProps"
															}
														],
														"name": "Required"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 325,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 330,
																					"name": "mask",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "reference",
																								"name": "ImageMask"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 326,
																					"name": "source",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "union",
																								"types": [
																									{
																										"type": "intrinsic",
																										"name": "string"
																									},
																									{
																										"type": "reference",
																										"typeArguments": [
																											{
																												"type": "reflection",
																												"declaration": {
																													"id": 327,
																													"name": "__type",
																													"kind": 65536,
																													"kindString": "Type literal",
																													"flags": {},
																													"children": [
																														{
																															"id": 329,
																															"name": "dark",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														},
																														{
																															"id": 328,
																															"name": "light",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														}
																													],
																													"groups": [
																														{
																															"title": "Properties",
																															"kind": 1024,
																															"children": [
																																329,
																																328
																															]
																														}
																													]
																												}
																											}
																										],
																										"name": "InferProps"
																									}
																								]
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 331,
																					"name": "tintColor",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "union",
																								"types": [
																									{
																										"type": "intrinsic",
																										"name": "string"
																									},
																									{
																										"type": "reference",
																										"typeArguments": [
																											{
																												"type": "reflection",
																												"declaration": {
																													"id": 332,
																													"name": "__type",
																													"kind": 65536,
																													"kindString": "Type literal",
																													"flags": {},
																													"children": [
																														{
																															"id": 335,
																															"name": "adjustContrast",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "boolean"
																																	}
																																],
																																"name": "Requireable"
																															},
																															"defaultValue": "PropTypes.bool"
																														},
																														{
																															"id": 334,
																															"name": "dark",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														},
																														{
																															"id": 333,
																															"name": "light",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														}
																													],
																													"groups": [
																														{
																															"title": "Properties",
																															"kind": 1024,
																															"children": [
																																335,
																																334,
																																333
																															]
																														}
																													]
																												}
																											}
																										],
																										"name": "InferProps"
																									}
																								]
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						330,
																						326,
																						331
																					]
																				}
																			]
																		}
																	}
																],
																"name": "InferProps"
															}
														],
														"name": "Required"
													}
												]
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "imagePropType"
								},
								{
									"id": 321,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "PropTypes.string.isRequired"
								},
								{
									"id": 320,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										322,
										321,
										320
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						336,
						318
					]
				}
			]
		},
		{
			"id": 309,
			"name": "FormDropdownSection",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 313,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 310,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 311,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 312,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										312
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						313,
						310
					]
				}
			]
		},
		{
			"id": 286,
			"name": "FormSeparator",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 287,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						287
					]
				}
			]
		},
		{
			"id": 340,
			"name": "FormTagPicker",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 354,
					"name": "Item",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 355,
							"name": "FormTagPickerItem"
						}
					}
				},
				{
					"id": 353,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 341,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 342,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 348,
									"name": "defaultValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "undefined"
														},
														{
															"type": "literal",
															"value": null
														},
														{
															"type": "intrinsic",
															"name": "string"
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 343,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "PropTypes.string.isRequired"
								},
								{
									"id": 349,
									"name": "onChange",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 350,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 351,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 352,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.func"
								},
								{
									"id": 346,
									"name": "placeholder",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 345,
									"name": "storeValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.bool"
								},
								{
									"id": 344,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 347,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "undefined"
														},
														{
															"type": "literal",
															"value": null
														},
														{
															"type": "intrinsic",
															"name": "string"
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										348,
										343,
										349,
										346,
										345,
										344,
										347
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						354,
						353,
						341
					]
				}
			]
		},
		{
			"id": 358,
			"name": "FormTagPickerItem",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 377,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 359,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 360,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 363,
									"name": "icon",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 364,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 365,
																					"name": "fileIcon",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "intrinsic",
																								"name": "string"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "PropTypes.string"
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						365
																					]
																				}
																			]
																		}
																	}
																],
																"name": "InferProps"
															}
														],
														"name": "Required"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 366,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 371,
																					"name": "mask",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "reference",
																								"name": "ImageMask"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 367,
																					"name": "source",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "union",
																								"types": [
																									{
																										"type": "intrinsic",
																										"name": "string"
																									},
																									{
																										"type": "reference",
																										"typeArguments": [
																											{
																												"type": "reflection",
																												"declaration": {
																													"id": 368,
																													"name": "__type",
																													"kind": 65536,
																													"kindString": "Type literal",
																													"flags": {},
																													"children": [
																														{
																															"id": 370,
																															"name": "dark",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														},
																														{
																															"id": 369,
																															"name": "light",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														}
																													],
																													"groups": [
																														{
																															"title": "Properties",
																															"kind": 1024,
																															"children": [
																																370,
																																369
																															]
																														}
																													]
																												}
																											}
																										],
																										"name": "InferProps"
																									}
																								]
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 372,
																					"name": "tintColor",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "union",
																								"types": [
																									{
																										"type": "intrinsic",
																										"name": "string"
																									},
																									{
																										"type": "reference",
																										"typeArguments": [
																											{
																												"type": "reflection",
																												"declaration": {
																													"id": 373,
																													"name": "__type",
																													"kind": 65536,
																													"kindString": "Type literal",
																													"flags": {},
																													"children": [
																														{
																															"id": 376,
																															"name": "adjustContrast",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "boolean"
																																	}
																																],
																																"name": "Requireable"
																															},
																															"defaultValue": "PropTypes.bool"
																														},
																														{
																															"id": 375,
																															"name": "dark",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														},
																														{
																															"id": 374,
																															"name": "light",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														}
																													],
																													"groups": [
																														{
																															"title": "Properties",
																															"kind": 1024,
																															"children": [
																																376,
																																375,
																																374
																															]
																														}
																													]
																												}
																											}
																										],
																										"name": "InferProps"
																									}
																								]
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						371,
																						367,
																						372
																					]
																				}
																			]
																		}
																	}
																],
																"name": "InferProps"
															}
														],
														"name": "Required"
													}
												]
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "imagePropType"
								},
								{
									"id": 362,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "PropTypes.string.isRequired"
								},
								{
									"id": 361,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "PropTypes.string.isRequired"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										363,
										362,
										361
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						377,
						359
					]
				}
			]
		},
		{
			"id": 237,
			"name": "FormTextArea",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 250,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 238,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 239,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 244,
									"name": "defaultValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 240,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "PropTypes.string.isRequired"
								},
								{
									"id": 246,
									"name": "onChange",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 247,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 248,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 249,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.func"
								},
								{
									"id": 245,
									"name": "placeholder",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 242,
									"name": "storeValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.bool"
								},
								{
									"id": 241,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 243,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										244,
										240,
										246,
										245,
										242,
										241,
										243
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						250,
						238
					]
				}
			]
		},
		{
			"id": 220,
			"name": "FormTextField",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 233,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 221,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 222,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 227,
									"name": "defaultValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 223,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "PropTypes.string.isRequired"
								},
								{
									"id": 229,
									"name": "onChange",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 230,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 231,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 232,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.func"
								},
								{
									"id": 228,
									"name": "placeholder",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 225,
									"name": "storeValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.bool"
								},
								{
									"id": 224,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 226,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										227,
										223,
										229,
										228,
										225,
										224,
										226
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						233,
						221
					]
				}
			]
		},
		{
			"id": 77,
			"name": "GlobalActionPanel",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 78,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						78
					]
				}
			]
		},
		{
			"id": 476,
			"name": "List",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 491,
					"name": "Item",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 503,
							"name": "ListItem"
						}
					}
				},
				{
					"id": 492,
					"name": "Section",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 493,
							"name": "ListSection"
						}
					}
				},
				{
					"id": 490,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 477,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 478,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 482,
									"name": "onSearchTextChange",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 483,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 484,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 485,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.func"
								},
								{
									"id": 486,
									"name": "onSelectionChange",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 487,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 488,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 489,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.func"
								},
								{
									"id": 480,
									"name": "searchBarPlaceholder",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 479,
									"name": "selectedItemId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 481,
									"name": "throttle",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.bool"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										482,
										486,
										480,
										479,
										481
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						491,
						492,
						490,
						477
					]
				}
			]
		},
		{
			"id": 506,
			"name": "ListItem",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 528,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 507,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 508,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 512,
									"name": "accessoryTitle",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 514,
									"name": "icon",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 515,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 516,
																					"name": "fileIcon",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "intrinsic",
																								"name": "string"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "PropTypes.string"
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						516
																					]
																				}
																			]
																		}
																	}
																],
																"name": "InferProps"
															}
														],
														"name": "Required"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 517,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 522,
																					"name": "mask",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "reference",
																								"name": "ImageMask"
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 518,
																					"name": "source",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "union",
																								"types": [
																									{
																										"type": "intrinsic",
																										"name": "string"
																									},
																									{
																										"type": "reference",
																										"typeArguments": [
																											{
																												"type": "reflection",
																												"declaration": {
																													"id": 519,
																													"name": "__type",
																													"kind": 65536,
																													"kindString": "Type literal",
																													"flags": {},
																													"children": [
																														{
																															"id": 521,
																															"name": "dark",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														},
																														{
																															"id": 520,
																															"name": "light",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														}
																													],
																													"groups": [
																														{
																															"title": "Properties",
																															"kind": 1024,
																															"children": [
																																521,
																																520
																															]
																														}
																													]
																												}
																											}
																										],
																										"name": "InferProps"
																									}
																								]
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 523,
																					"name": "tintColor",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "union",
																								"types": [
																									{
																										"type": "intrinsic",
																										"name": "string"
																									},
																									{
																										"type": "reference",
																										"typeArguments": [
																											{
																												"type": "reflection",
																												"declaration": {
																													"id": 524,
																													"name": "__type",
																													"kind": 65536,
																													"kindString": "Type literal",
																													"flags": {},
																													"children": [
																														{
																															"id": 527,
																															"name": "adjustContrast",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "boolean"
																																	}
																																],
																																"name": "Requireable"
																															},
																															"defaultValue": "PropTypes.bool"
																														},
																														{
																															"id": 526,
																															"name": "dark",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														},
																														{
																															"id": 525,
																															"name": "light",
																															"kind": 1024,
																															"kindString": "Property",
																															"flags": {},
																															"type": {
																																"type": "reference",
																																"typeArguments": [
																																	{
																																		"type": "intrinsic",
																																		"name": "string"
																																	}
																																],
																																"name": "Validator"
																															},
																															"defaultValue": "PropTypes.string.isRequired"
																														}
																													],
																													"groups": [
																														{
																															"title": "Properties",
																															"kind": 1024,
																															"children": [
																																527,
																																526,
																																525
																															]
																														}
																													]
																												}
																											}
																										],
																										"name": "InferProps"
																									}
																								]
																							}
																						],
																						"name": "Requireable"
																					},
																					"defaultValue": "..."
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						522,
																						518,
																						523
																					]
																				}
																			]
																		}
																	}
																],
																"name": "InferProps"
															}
														],
														"name": "Required"
													}
												]
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "imagePropType"
								},
								{
									"id": 509,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 513,
									"name": "keywords",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "undefined"
														},
														{
															"type": "literal",
															"value": null
														},
														{
															"type": "intrinsic",
															"name": "string"
														}
													]
												}
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "..."
								},
								{
									"id": 511,
									"name": "subtitle",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 510,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Validator"
									},
									"defaultValue": "PropTypes.string.isRequired"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										512,
										514,
										509,
										513,
										511,
										510
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						528,
						507
					]
				}
			]
		},
		{
			"id": 496,
			"name": "ListSection",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 502,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 497,
					"name": "propTypes",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 498,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 499,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 501,
									"name": "subtitle",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								},
								{
									"id": 500,
									"name": "title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Requireable"
									},
									"defaultValue": "PropTypes.string"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										499,
										501,
										500
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						502,
						497
					]
				}
			]
		},
		{
			"id": 726,
			"name": "Color",
			"kind": 8,
			"kindString": "Enumeration",
			"flags": {},
			"comment": {
				"shortText": "The standard colors. Use this colors for consistency.",
				"tags": [
					{
						"tag": "remarks",
						"text": "\nThe colors automatically adopt to light and dark theme.\n"
					},
					{
						"tag": "example",
						"text": "\n```typescript\nimport { Color, Icon, List } from \"@raycast/api\";\n\nexport default function Command() {\n return (\n <List>\n   <List.Item title=\"Blue\" icon={{ source: Icon.Circle, tintColor: Color.Blue }} />\n   <List.Item title=\"Green\" icon={{ source: Icon.Circle, tintColor: Color.Green }} />\n   <List.Item title=\"Brown\" icon={{ source: Icon.Circle, tintColor: Color.Brown }} />\n   <List.Item title=\"Magenta\" icon={{ source: Icon.Circle, tintColor: Color.Magenta }} />\n   <List.Item title=\"Orange\" icon={{ source: Icon.Circle, tintColor: Color.Orange }} />\n   <List.Item title=\"Purple\" icon={{ source: Icon.Circle, tintColor: Color.Purple }} />\n   <List.Item title=\"Red\" icon={{ source: Icon.Circle, tintColor: Color.Red }} />\n   <List.Item title=\"Yellow\" icon={{ source: Icon.Circle, tintColor: Color.Yellow }} />\n   <List.Item title=\"PrimaryText\" icon={{ source: Icon.Circle, tintColor: Color.PrimaryText }} />\n   <List.Item title=\"SecondaryText\" icon={{ source: Icon.Circle, tintColor: Color.SecondaryText }} />\n </List>\n );\n};\n```\n"
					},
					{
						"tag": "subcategory",
						"text": "Colors\n"
					}
				]
			},
			"children": [
				{
					"id": 727,
					"name": "Blue",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"raycast-blue\""
				},
				{
					"id": 728,
					"name": "Brown",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"raycast-brown\""
				},
				{
					"id": 729,
					"name": "Green",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"raycast-green\""
				},
				{
					"id": 730,
					"name": "Magenta",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"raycast-magenta\""
				},
				{
					"id": 731,
					"name": "Orange",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"raycast-orange\""
				},
				{
					"id": 735,
					"name": "PrimaryText",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"raycast-primary-text\""
				},
				{
					"id": 732,
					"name": "Purple",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"raycast-purple\""
				},
				{
					"id": 733,
					"name": "Red",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"raycast-red\""
				},
				{
					"id": 736,
					"name": "SecondaryText",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"raycast-secondary-text\""
				},
				{
					"id": 734,
					"name": "Yellow",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"raycast-yellow\""
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						727,
						728,
						729,
						730,
						731,
						735,
						732,
						733,
						736,
						734
					]
				}
			]
		},
		{
			"id": 741,
			"name": "Icon",
			"kind": 8,
			"kindString": "Enumeration",
			"flags": {},
			"comment": {
				"shortText": "List of built-in icons that can be used for actions or list items.",
				"tags": [
					{
						"tag": "example",
						"text": "\n```typescript\nimport { Icon, List } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List>\n      <List.Item title=\"Icon\" icon={Icon.Circle} />\n    </List>\n  );\n};\n```\n"
					},
					{
						"tag": "subcategory",
						"text": "Icons & Images\n"
					}
				]
			},
			"children": [
				{
					"id": 742,
					"name": "ArrowClockwise",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"arrow-clockwise-16\""
				},
				{
					"id": 743,
					"name": "ArrowRight",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"arrow-right-16\""
				},
				{
					"id": 744,
					"name": "Binoculars",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"binoculars-16\""
				},
				{
					"id": 745,
					"name": "Bubble",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"bubble-left-16\""
				},
				{
					"id": 746,
					"name": "Calendar",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"calendar-16\""
				},
				{
					"id": 747,
					"name": "Checkmark",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"checkmark-circle-16\""
				},
				{
					"id": 748,
					"name": "ChevronDown",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"chevron-down-16\""
				},
				{
					"id": 749,
					"name": "ChevronUp",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"chevron-up-16\""
				},
				{
					"id": 750,
					"name": "Circle",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"circle-16\""
				},
				{
					"id": 751,
					"name": "Clipboard",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"doc-on-clipboard-16\""
				},
				{
					"id": 752,
					"name": "Clock",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"clock-16\""
				},
				{
					"id": 753,
					"name": "Desktop",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"desktopcomputer-16\""
				},
				{
					"id": 754,
					"name": "Document",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"doc-16\""
				},
				{
					"id": 755,
					"name": "Dot",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"dot-16\""
				},
				{
					"id": 756,
					"name": "Download",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"square-and-arrow-down-16\""
				},
				{
					"id": 757,
					"name": "Envelope",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"envelope-16\""
				},
				{
					"id": 758,
					"name": "ExclamationMark",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"exclamation-mark-triangle-16\""
				},
				{
					"id": 759,
					"name": "Eye",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"eye-16\""
				},
				{
					"id": 760,
					"name": "EyeSlash",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"eye-slash-16\""
				},
				{
					"id": 761,
					"name": "Finder",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"finder-16\""
				},
				{
					"id": 762,
					"name": "Gear",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"gearshape-16\""
				},
				{
					"id": 763,
					"name": "Globe",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"globe-16\""
				},
				{
					"id": 764,
					"name": "Hammer",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"hammer-16\""
				},
				{
					"id": 765,
					"name": "LevelMeter",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"level-meter-16\""
				},
				{
					"id": 766,
					"name": "Link",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"link-16\""
				},
				{
					"id": 767,
					"name": "List",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"main-list-view-16\""
				},
				{
					"id": 768,
					"name": "MagnifyingGlass",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"magnifyingglass-16\""
				},
				{
					"id": 769,
					"name": "MemoryChip",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"memorychip-16\""
				},
				{
					"id": 770,
					"name": "Message",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"message-16\""
				},
				{
					"id": 771,
					"name": "Pencil",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"pencil-16\""
				},
				{
					"id": 772,
					"name": "Person",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"person-crop-circle-16\""
				},
				{
					"id": 773,
					"name": "Phone",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"phone-16\""
				},
				{
					"id": 774,
					"name": "Pin",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"pin-16\""
				},
				{
					"id": 775,
					"name": "Plus",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"plus-16\""
				},
				{
					"id": 783,
					"name": "QuestionMark",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"questionmark-circle-16\""
				},
				{
					"id": 776,
					"name": "Sidebar",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"sidebar-right-16\""
				},
				{
					"id": 777,
					"name": "SpeakerArrowDown",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"speaker-arrow-down-16\""
				},
				{
					"id": 778,
					"name": "SpeakerArrowUp",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"speaker-arrow-up-16\""
				},
				{
					"id": 779,
					"name": "SpeakerSlash",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"speaker-slash-16\""
				},
				{
					"id": 780,
					"name": "Star",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"star-16\""
				},
				{
					"id": 784,
					"name": "Terminal",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"terminal-16\""
				},
				{
					"id": 781,
					"name": "Text",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"text-alignleft-16\""
				},
				{
					"id": 782,
					"name": "TextDocument",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"doc-plaintext-16\""
				},
				{
					"id": 785,
					"name": "Trash",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"trash-16\""
				},
				{
					"id": 786,
					"name": "Upload",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"square-and-arrow-up-16\""
				},
				{
					"id": 787,
					"name": "Video",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"video-16\""
				},
				{
					"id": 788,
					"name": "Window",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"macwindow-16\""
				},
				{
					"id": 789,
					"name": "XmarkCircle",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"xmark-circle-16\""
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						742,
						743,
						744,
						745,
						746,
						747,
						748,
						749,
						750,
						751,
						752,
						753,
						754,
						755,
						756,
						757,
						758,
						759,
						760,
						761,
						762,
						763,
						764,
						765,
						766,
						767,
						768,
						769,
						770,
						771,
						772,
						773,
						774,
						775,
						783,
						776,
						777,
						778,
						779,
						780,
						784,
						781,
						782,
						785,
						786,
						787,
						788,
						789
					]
				}
			]
		},
		{
			"id": 801,
			"name": "ImageMask",
			"kind": 8,
			"kindString": "Enumeration",
			"flags": {},
			"comment": {
				"shortText": "Available masks that can be used to change the shape of an image.",
				"tags": [
					{
						"tag": "remarks",
						"text": "\nCan be handy to shape avatars or other items in a list.\n"
					},
					{
						"tag": "example",
						"text": "\n```typescript\nimport { ImageMask, List } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List>\n      <List.Item title=\"Icon\" icon={{ source: \"https://raycast.com/uploads/avatar.png\", mask: ImageMask.Circle }} />\n    </List>\n  );\n};\n```\n"
					},
					{
						"tag": "subcategory",
						"text": "Icons & Images\n"
					}
				]
			},
			"children": [
				{
					"id": 802,
					"name": "Circle",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Masks an image with a circle. Good to use for avatars."
					},
					"defaultValue": "\"circle\""
				},
				{
					"id": 803,
					"name": "RoundedRectangle",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Masks an image with a rounded rectangle."
					},
					"defaultValue": "\"roundedRectangle\""
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						802,
						803
					]
				}
			]
		},
		{
			"id": 839,
			"name": "ToastStyle",
			"kind": 8,
			"kindString": "Enumeration",
			"flags": {},
			"comment": {
				"shortText": "Defines the visual style of the Toast.",
				"tags": [
					{
						"tag": "remarks",
						"text": "\nUse {@link ToastStyle.Success} for confirmations and {@link ToastStyle.Failure} for displaying errors.\nUse {@link ToastStyle.Animated} when your Toast should be shown until a process is completed.\nYou can hide it later by using {@link Toast.hide} or update the properties of an existing Toast.\n"
					},
					{
						"tag": "subcategory",
						"text": "Toast\n"
					}
				]
			},
			"children": [
				{
					"id": 842,
					"name": "Animated",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"ANIMATED\""
				},
				{
					"id": 841,
					"name": "Failure",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"FAILURE\""
				},
				{
					"id": 840,
					"name": "Success",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"defaultValue": "\"SUCCESS\""
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						842,
						841,
						840
					]
				}
			]
		},
		{
			"id": 812,
			"name": "Toast",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"shortText": "A Toast with a certain style, title, and message.",
				"tags": [
					{
						"tag": "remarks",
						"text": "\nUse {@link showToast} as shortcut for creating and showing a Toast.\n"
					},
					{
						"tag": "example",
						"text": "\n```typescript\nimport { Toast, ToastStyle } from \"@raycast/api\";\nimport { setTimeout } from \"timers/promises\";\n\nexport default async () => {\n  const toast = new Toast({ style: ToastStyle.Animated, title: \"Uploading image\" });\n  await toast.show();\n\n  await setTimeout(1000);\n\n  toast.style = ToastStyle.Success;\n  toast.title = \"Uploaded image\";\n};\n```\n"
					},
					{
						"tag": "subcategory",
						"text": "Toast\n"
					}
				]
			},
			"children": [
				{
					"id": 813,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"signatures": [
						{
							"id": 814,
							"name": "new Toast",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 815,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 835,
										"name": "ToastOptions"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 812,
								"name": "Toast"
							}
						}
					]
				},
				{
					"id": 825,
					"name": "message",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isPublic": true
					},
					"getSignature": [
						{
							"id": 826,
							"name": "message",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"setSignature": [
						{
							"id": 827,
							"name": "message",
							"kind": 1048576,
							"kindString": "Set signature",
							"flags": {},
							"parameters": [
								{
									"id": 828,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 817,
					"name": "style",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isPublic": true
					},
					"getSignature": [
						{
							"id": 818,
							"name": "style",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 839,
								"name": "ToastStyle"
							}
						}
					],
					"setSignature": [
						{
							"id": 819,
							"name": "style",
							"kind": 1048576,
							"kindString": "Set signature",
							"flags": {},
							"parameters": [
								{
									"id": 820,
									"name": "style",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 839,
										"name": "ToastStyle"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 821,
					"name": "title",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isPublic": true
					},
					"getSignature": [
						{
							"id": 822,
							"name": "title",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"setSignature": [
						{
							"id": 823,
							"name": "title",
							"kind": 1048576,
							"kindString": "Set signature",
							"flags": {},
							"parameters": [
								{
									"id": 824,
									"name": "title",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 831,
					"name": "hide",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"signatures": [
						{
							"id": 832,
							"name": "hide",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Hides the Toast.",
								"returns": "A promise that resolves when toast is hidden.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 829,
					"name": "show",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"signatures": [
						{
							"id": 830,
							"name": "show",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Shows the Toast.",
								"returns": "A promise that resolves when toast is shown.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						813
					]
				},
				{
					"title": "Accessors",
					"kind": 262144,
					"children": [
						825,
						817,
						821
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						831,
						829
					]
				}
			]
		},
		{
			"id": 164,
			"name": "ActionPanelItemProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link ActionPanel.Item} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Action Panel\n"
					}
				]
			},
			"children": [
				{
					"id": 167,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon displayed for the action."
					},
					"type": {
						"type": "reference",
						"id": 792,
						"name": "ImageLike"
					}
				},
				{
					"id": 165,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "ID of the item.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nMake sure to assign each section or item a unique ID. If no ID is specified, a memoized auto-generated is used.\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 168,
					"name": "shortcut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The keyboard shortcut for the item."
					},
					"type": {
						"type": "reference",
						"id": 46,
						"name": "KeyboardShortcut"
					}
				},
				{
					"id": 166,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The title displayed for the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 169,
					"name": "onAction",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 170,
							"name": "onAction",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback that is triggered when the item is selected."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						167,
						165,
						168,
						166
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						169
					]
				}
			]
		},
		{
			"id": 158,
			"name": "ActionPanelProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link ActionPanel} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Action Panel\n"
					}
				]
			},
			"children": [
				{
					"id": 159,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Sections or items. If {@link ActionPanel.Item} elements are specified, a default section is automatically created."
					},
					"type": {
						"type": "reference",
						"id": 156,
						"name": "ActionPanelChildren"
					}
				},
				{
					"id": 160,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The title displayed at the top of the panel"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						159,
						160
					]
				}
			]
		},
		{
			"id": 161,
			"name": "ActionPanelSectionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link ActionPanel.Section} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Action Panel\n"
					}
				]
			},
			"children": [
				{
					"id": 162,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The item elements of the section.\nWhen used for the action panel, the first item in the list is the *primary* action that will be triggered by the default shortcut (ENTER), while the second item is the *secondary* action triggered by CMD + ENTER."
					},
					"type": {
						"type": "reference",
						"id": 157,
						"name": "ActionPanelSectionChildren"
					}
				},
				{
					"id": 163,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Title displayed above the section"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						162,
						163
					]
				}
			]
		},
		{
			"id": 695,
			"name": "ActionPanelState",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Return type of the {@link useActionPanel} hook to perform global Action Panel updates.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Action Panel\n"
					}
				]
			},
			"children": [
				{
					"id": 696,
					"name": "update",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 697,
							"name": "update",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Updates the global Action Panel."
							},
							"parameters": [
								{
									"id": 698,
									"name": "actionPanel",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 158,
														"name": "ActionPanelProps"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "any"
																	}
																],
																"name": "JSXElementConstructor"
															}
														]
													}
												],
												"name": "ReactElement"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						696
					]
				}
			]
		},
		{
			"id": 171,
			"name": "ActionPanelSubmenuProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link ActionPanel.Submenu} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Action Panel\n"
					}
				]
			},
			"children": [
				{
					"id": 176,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Items of the submenu.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\n<ActionPanel.Submenu title=\"Submenu\">\n   <ActionPanel.Item title=\"Just an action\" />\n</ActionPanel.Submenu>\n```\n"
							},
							{
								"tag": "remarks",
								"text": "\nIf {@link ActionPanel.Item} elements are specified, a default section is automatically created.\\\nUse {@link ActionPanel.Submenu} as parent when specifying sub-menu's children to make code is more readable.\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 156,
						"name": "ActionPanelChildren"
					}
				},
				{
					"id": 174,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon displayed for the submenu."
					},
					"type": {
						"type": "reference",
						"id": 792,
						"name": "ImageLike"
					}
				},
				{
					"id": 172,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "ID of the submenu.\nMake sure to assign each submenu a unique ID or a UUID will be auto-generated."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 175,
					"name": "shortcut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The keyboard shortcut for the submenu."
					},
					"type": {
						"type": "reference",
						"id": 46,
						"name": "KeyboardShortcut"
					}
				},
				{
					"id": 173,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The title displayed for submenu."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						176,
						174,
						172,
						175,
						173
					]
				}
			]
		},
		{
			"id": 32,
			"name": "Application",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "An object that represents a locally installed application on the system.",
				"tags": [
					{
						"tag": "remarks",
						"text": "\nIt can be used to open files or folders in a specific application. Use {@link getApplications} or\n{@link getDefaultApplication} to get applications that can open a specific file or folder.\n"
					}
				]
			},
			"children": [
				{
					"id": 35,
					"name": "bundleId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The bundle identifier of the application, e.g. `com.raycast.macos`."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 33,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The display name of the application."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 34,
					"name": "path",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The absolute path to the application bundle, e.g. `/Applications/Raycast.app`,"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						35,
						33,
						34
					]
				}
			]
		},
		{
			"id": 562,
			"name": "CopyToClipboardActionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link CopyToClipboardAction} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Actions\n"
					}
				]
			},
			"children": [
				{
					"id": 563,
					"name": "content",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The contents that will be written to the clipboard as string."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 565,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A optional icon displayed for the item. See {@link ImageLike} for the supported formats and types.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "{@link Icon.Clipboard}\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 792,
						"name": "ImageLike"
					}
				},
				{
					"id": 566,
					"name": "shortcut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The keyboard shortcut for the action."
					},
					"type": {
						"type": "reference",
						"id": 46,
						"name": "KeyboardShortcut"
					}
				},
				{
					"id": 564,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An optional title for the action."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 567,
					"name": "onCopy",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 568,
							"name": "onCopy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback when the content was copied to clipboard.",
								"tags": [
									{
										"tag": "remarks",
										"text": "\nThis is handy when you want to act on the copied content, e.g. up-rank recently copied content.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 569,
									"name": "content",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						563,
						565,
						566,
						564
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						567
					]
				}
			]
		},
		{
			"id": 187,
			"name": "DetailProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Detail} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Detail\n"
					}
				]
			},
			"children": [
				{
					"id": 190,
					"name": "actions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A reference to an {@link ActionPanel}."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 158,
										"name": "ActionPanelProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ActionsInterface.actions"
					}
				},
				{
					"id": 189,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": ""
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "unknown"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							}
						]
					}
				},
				{
					"id": 192,
					"name": "isLoading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates whether a loading bar should be shown or hidden below the search bar",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "false\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "NavigationChildInterface.isLoading"
					}
				},
				{
					"id": 188,
					"name": "markdown",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The CommonMark string to be rendered."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 191,
					"name": "navigationTitle",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The main title for that view displayed in Raycast",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "Command title\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "NavigationChildInterface.navigationTitle"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						190,
						189,
						192,
						188,
						191
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "ActionsInterface"
				},
				{
					"type": "reference",
					"name": "NavigationChildInterface"
				}
			]
		},
		{
			"id": 666,
			"name": "Environment",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Holds data about the environment the command is running in. Use the global {@link environment} object to retrieve values."
			},
			"children": [
				{
					"id": 670,
					"name": "assetsPath",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The absolute path to the assets directory of the extension.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThis directory is used internally to load icons, images, and other bundled assets.\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 669,
					"name": "commandName",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The name of the launched command, as specified in package.json"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 668,
					"name": "extensionName",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The name of the extension, as specified in package.json"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 672,
					"name": "isDevelopment",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Indicates whether the command is a development command (vs. an installed command from the Store)."
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 667,
					"name": "raycastVersion",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The version of the main Raycast app"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 671,
					"name": "supportPath",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The absolute path for the support directory of an extension. Use it to read and write files related to your extension or command.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThe directory at this path might not physically exist already. Use Node's `fs` module to make sure this directory exists before using it.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nfs.mkdirSync(ray.environment.supportPath, { recursive: true });\n```\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						670,
						669,
						668,
						672,
						667,
						671
					]
				}
			]
		},
		{
			"id": 790,
			"name": "FileIcon",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "An icon as it's used in the Finder.",
				"tags": [
					{
						"tag": "example",
						"text": "\n```typescript\nimport { List } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List>\n      <List.Item title=\"File icon\" icon={{ fileIcon: __filename }} />\n    </List>\n  );\n};\n```\n"
					},
					{
						"tag": "subcategory",
						"text": "Icons & Images\n"
					}
				]
			},
			"children": [
				{
					"id": 791,
					"name": "fileIcon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The path to a file or folder to get it's icon from."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						791
					]
				}
			]
		},
		{
			"id": 421,
			"name": "FormCheckboxProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form.Checkbox} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"children": [
				{
					"id": 427,
					"name": "defaultValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The default value of the item.\nKeep in mind that `defaultValue` will be configured once per component lifecycle. This means that if a user changes the value, `defaultValue` won't be configured on re-rendering.",
						"tags": [
							{
								"tag": "important",
								"text": "If you're using {@link FormItemProps.storeValue} and configured it as `true` then the stored value will be set."
							},
							{
								"tag": "important",
								"text": "If you configure {@link FormItemProps.value} at the same time with {@link FormItemProps.defaultValue}, the `value` will be set instead of `defaultValue`.\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 396,
						"name": "FormItemProps.defaultValue"
					}
				},
				{
					"id": 423,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "ID of the form item.\nMake sure to assign each form item a unique id."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 392,
						"name": "FormItemProps.id"
					}
				},
				{
					"id": 422,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The label displayed on the right side of the checkbox."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 425,
					"name": "storeValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates whether the value of the item should be persisted after submitting, and restored next time the form is rendered."
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 394,
						"name": "FormItemProps.storeValue"
					}
				},
				{
					"id": 424,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The title displayed on the left side of the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 393,
						"name": "FormItemProps.title"
					}
				},
				{
					"id": 426,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The current value of the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 395,
						"name": "FormItemProps.value"
					}
				},
				{
					"id": 428,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 429,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The callback which will be triggered on the {@link FormItemProps.value} change for the item."
							},
							"parameters": [
								{
									"id": 430,
									"name": "newValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 400,
										"name": "Value"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 398,
								"name": "FormItemProps.onChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 397,
						"name": "FormItemProps.onChange"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						427,
						423,
						422,
						425,
						424,
						426
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						428
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 391,
					"typeArguments": [
						{
							"type": "intrinsic",
							"name": "boolean"
						}
					],
					"name": "FormItemProps"
				}
			]
		},
		{
			"id": 431,
			"name": "FormDatePickerProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form.DatePicker} React component.\nThe default {@link FormDatePickerProps.value} of the date picker **must** be formatted according to {@link FormViewDatePicker.dateFormat}.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"children": [
				{
					"id": 436,
					"name": "defaultValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The default value of the item.\nKeep in mind that `defaultValue` will be configured once per component lifecycle. This means that if a user changes the value, `defaultValue` won't be configured on re-rendering.",
						"tags": [
							{
								"tag": "important",
								"text": "If you're using {@link FormItemProps.storeValue} and configured it as `true` then the stored value will be set."
							},
							{
								"tag": "important",
								"text": "If you configure {@link FormItemProps.value} at the same time with {@link FormItemProps.defaultValue}, the `value` will be set instead of `defaultValue`.\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"name": "Date"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 396,
						"name": "FormItemProps.defaultValue"
					}
				},
				{
					"id": 432,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "ID of the form item.\nMake sure to assign each form item a unique id."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 392,
						"name": "FormItemProps.id"
					}
				},
				{
					"id": 434,
					"name": "storeValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates whether the value of the item should be persisted after submitting, and restored next time the form is rendered."
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 394,
						"name": "FormItemProps.storeValue"
					}
				},
				{
					"id": 433,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The title displayed on the left side of the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 393,
						"name": "FormItemProps.title"
					}
				},
				{
					"id": 435,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The current value of the item."
					},
					"type": {
						"type": "reference",
						"name": "Date"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 395,
						"name": "FormItemProps.value"
					}
				},
				{
					"id": 437,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 438,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The callback which will be triggered on the {@link FormItemProps.value} change for the item."
							},
							"parameters": [
								{
									"id": 439,
									"name": "newValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 400,
										"name": "Value"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 398,
								"name": "FormItemProps.onChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 397,
						"name": "FormItemProps.onChange"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						436,
						432,
						434,
						433,
						435
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						437
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 391,
					"typeArguments": [
						{
							"type": "reference",
							"name": "Date"
						}
					],
					"name": "FormItemProps"
				}
			]
		},
		{
			"id": 454,
			"name": "FormDropdownItemProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form.Dropdown.Item} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"children": [
				{
					"id": 457,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A optional icon displayed for the item.\nSee {@link ImageLike} for the supported formats and types."
					},
					"type": {
						"type": "reference",
						"id": 792,
						"name": "ImageLike"
					}
				},
				{
					"id": 456,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The title displayed for the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 455,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Value of the dropdown item.\nMake sure to assign each unique value for each item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						457,
						456,
						455
					]
				}
			]
		},
		{
			"id": 441,
			"name": "FormDropdownProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form.Dropdown} React component.\nThe {@link FormDropdownProps.value} here is ID ({@link FormDropdownItemProps.id}) of the default selected item.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"children": [
				{
					"id": 442,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Sections or items. If {@link FormDropdownItem} elements are specified, a default section is automatically created."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 451,
										"name": "FormDropdownSectionProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 451,
											"name": "FormDropdownSectionProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 454,
										"name": "FormDropdownItemProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 454,
											"name": "FormDropdownItemProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							}
						]
					}
				},
				{
					"id": 447,
					"name": "defaultValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The default value of the item.\nKeep in mind that `defaultValue` will be configured once per component lifecycle. This means that if a user changes the value, `defaultValue` won't be configured on re-rendering.",
						"tags": [
							{
								"tag": "important",
								"text": "If you're using {@link FormItemProps.storeValue} and configured it as `true` then the stored value will be set."
							},
							{
								"tag": "important",
								"text": "If you configure {@link FormItemProps.value} at the same time with {@link FormItemProps.defaultValue}, the `value` will be set instead of `defaultValue`.\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 396,
						"name": "FormItemProps.defaultValue"
					}
				},
				{
					"id": 443,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "ID of the form item.\nMake sure to assign each form item a unique id."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 392,
						"name": "FormItemProps.id"
					}
				},
				{
					"id": 445,
					"name": "storeValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates whether the value of the item should be persisted after submitting, and restored next time the form is rendered."
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 394,
						"name": "FormItemProps.storeValue"
					}
				},
				{
					"id": 444,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The title displayed on the left side of the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 393,
						"name": "FormItemProps.title"
					}
				},
				{
					"id": 446,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The current value of the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 395,
						"name": "FormItemProps.value"
					}
				},
				{
					"id": 448,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 449,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The callback which will be triggered on the {@link FormItemProps.value} change for the item."
							},
							"parameters": [
								{
									"id": 450,
									"name": "newValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 400,
										"name": "Value"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 398,
								"name": "FormItemProps.onChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 397,
						"name": "FormItemProps.onChange"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						442,
						447,
						443,
						445,
						444,
						446
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						448
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 391,
					"typeArguments": [
						{
							"type": "intrinsic",
							"name": "string"
						}
					],
					"name": "FormItemProps"
				}
			]
		},
		{
			"id": 451,
			"name": "FormDropdownSectionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form.Dropdown.Section} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"children": [
				{
					"id": 452,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The item elements of the section.\nWhen used for the action panel, the first item in the list is the *primary* action that will be triggered by the default shortcut (ENTER), while the second item is the *secondary* action triggered by CMD + ENTER."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 454,
										"name": "FormDropdownItemProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 454,
											"name": "FormDropdownItemProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							}
						]
					}
				},
				{
					"id": 453,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Title displayed above the section"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						452,
						453
					]
				}
			]
		},
		{
			"id": 391,
			"name": "FormItemProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form.Item} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"children": [
				{
					"id": 396,
					"name": "defaultValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The default value of the item.\nKeep in mind that `defaultValue` will be configured once per component lifecycle. This means that if a user changes the value, `defaultValue` won't be configured on re-rendering.",
						"tags": [
							{
								"tag": "important",
								"text": "If you're using {@link FormItemProps.storeValue} and configured it as `true` then the stored value will be set."
							},
							{
								"tag": "important",
								"text": "If you configure {@link FormItemProps.value} at the same time with {@link FormItemProps.defaultValue}, the `value` will be set instead of `defaultValue`.\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 400,
						"name": "Value"
					}
				},
				{
					"id": 392,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "ID of the form item.\nMake sure to assign each form item a unique id."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 394,
					"name": "storeValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates whether the value of the item should be persisted after submitting, and restored next time the form is rendered."
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 393,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The title displayed on the left side of the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 395,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The current value of the item."
					},
					"type": {
						"type": "reference",
						"id": 400,
						"name": "Value"
					}
				},
				{
					"id": 397,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 398,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The callback which will be triggered on the {@link FormItemProps.value} change for the item."
							},
							"parameters": [
								{
									"id": 399,
									"name": "newValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 400,
										"name": "Value"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						396,
						392,
						394,
						393,
						395
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						397
					]
				}
			],
			"typeParameter": [
				{
					"id": 400,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"type": {
						"type": "reference",
						"id": 378,
						"name": "FormValue"
					}
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 401,
					"name": "FormTextFieldProps"
				},
				{
					"type": "reference",
					"id": 411,
					"name": "FormTextAreaProps"
				},
				{
					"type": "reference",
					"id": 421,
					"name": "FormCheckboxProps"
				},
				{
					"type": "reference",
					"id": 431,
					"name": "FormDatePickerProps"
				},
				{
					"type": "reference",
					"id": 441,
					"name": "FormDropdownProps"
				},
				{
					"type": "reference",
					"id": 458,
					"name": "FormTagPickerProps"
				}
			]
		},
		{
			"id": 386,
			"name": "FormProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"children": [
				{
					"id": 388,
					"name": "actions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A reference to an {@link ActionPanel}."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 158,
										"name": "ActionPanelProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ActionsInterface.actions"
					}
				},
				{
					"id": 387,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The {@link FormItemElement} elements of the form."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 391,
										"typeArguments": [
											{
												"type": "reference",
												"id": 378,
												"name": "FormValue"
											}
										],
										"name": "FormItemProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 391,
											"typeArguments": [
												{
													"type": "reference",
													"id": 378,
													"name": "FormValue"
												}
											],
											"name": "FormItemProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							}
						]
					}
				},
				{
					"id": 390,
					"name": "isLoading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates whether a loading bar should be shown or hidden below the search bar",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "false\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "NavigationChildInterface.isLoading"
					}
				},
				{
					"id": 389,
					"name": "navigationTitle",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The main title for that view displayed in Raycast",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "Command title\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "NavigationChildInterface.navigationTitle"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						388,
						387,
						390,
						389
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "ActionsInterface"
				},
				{
					"type": "reference",
					"name": "NavigationChildInterface"
				}
			]
		},
		{
			"id": 440,
			"name": "FormSeparatorProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form.Separator} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			}
		},
		{
			"id": 469,
			"name": "FormTagPickerItemProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form.FormTagPicker.Item} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"children": [
				{
					"id": 472,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An icon to show in the token."
					},
					"type": {
						"type": "reference",
						"id": 792,
						"name": "ImageLike"
					}
				},
				{
					"id": 471,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The display title of the token."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 470,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Value of the tag picker item.\nMake sure to assign unique value for each item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						472,
						471,
						470
					]
				}
			]
		},
		{
			"id": 458,
			"name": "FormTagPickerProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form.TagPicker} React component.\nThe {@link FormTagPickerProps.value} here is the IDs ({@link FormTagPickerItemProps.id}) of the default selected items.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"children": [
				{
					"id": 459,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of tag picker's items."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 469,
										"name": "FormTagPickerItemProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 469,
											"name": "FormTagPickerItemProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							}
						]
					}
				},
				{
					"id": 465,
					"name": "defaultValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The default value of the item.\nKeep in mind that `defaultValue` will be configured once per component lifecycle. This means that if a user changes the value, `defaultValue` won't be configured on re-rendering.",
						"tags": [
							{
								"tag": "important",
								"text": "If you're using {@link FormItemProps.storeValue} and configured it as `true` then the stored value will be set."
							},
							{
								"tag": "important",
								"text": "If you configure {@link FormItemProps.value} at the same time with {@link FormItemProps.defaultValue}, the `value` will be set instead of `defaultValue`.\n"
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 396,
						"name": "FormItemProps.defaultValue"
					}
				},
				{
					"id": 461,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "ID of the form item.\nMake sure to assign each form item a unique id."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 392,
						"name": "FormItemProps.id"
					}
				},
				{
					"id": 460,
					"name": "placeholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Placeholder text shown in the token field."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 463,
					"name": "storeValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates whether the value of the item should be persisted after submitting, and restored next time the form is rendered."
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 394,
						"name": "FormItemProps.storeValue"
					}
				},
				{
					"id": 462,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The title displayed on the left side of the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 393,
						"name": "FormItemProps.title"
					}
				},
				{
					"id": 464,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The current value of the item."
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 395,
						"name": "FormItemProps.value"
					}
				},
				{
					"id": 466,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 467,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The callback which will be triggered on the {@link FormItemProps.value} change for the item."
							},
							"parameters": [
								{
									"id": 468,
									"name": "newValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 400,
										"name": "Value"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 398,
								"name": "FormItemProps.onChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 397,
						"name": "FormItemProps.onChange"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						459,
						465,
						461,
						460,
						463,
						462,
						464
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						466
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 391,
					"typeArguments": [
						{
							"type": "array",
							"elementType": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"name": "FormItemProps"
				}
			]
		},
		{
			"id": 411,
			"name": "FormTextAreaProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form.TextArea} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"children": [
				{
					"id": 417,
					"name": "defaultValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The default value of the item.\nKeep in mind that `defaultValue` will be configured once per component lifecycle. This means that if a user changes the value, `defaultValue` won't be configured on re-rendering.",
						"tags": [
							{
								"tag": "important",
								"text": "If you're using {@link FormItemProps.storeValue} and configured it as `true` then the stored value will be set."
							},
							{
								"tag": "important",
								"text": "If you configure {@link FormItemProps.value} at the same time with {@link FormItemProps.defaultValue}, the `value` will be set instead of `defaultValue`.\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 396,
						"name": "FormItemProps.defaultValue"
					}
				},
				{
					"id": 413,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "ID of the form item.\nMake sure to assign each form item a unique id."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 392,
						"name": "FormItemProps.id"
					}
				},
				{
					"id": 412,
					"name": "placeholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Placeholder text shown in the text field."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 415,
					"name": "storeValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates whether the value of the item should be persisted after submitting, and restored next time the form is rendered."
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 394,
						"name": "FormItemProps.storeValue"
					}
				},
				{
					"id": 414,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The title displayed on the left side of the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 393,
						"name": "FormItemProps.title"
					}
				},
				{
					"id": 416,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The current value of the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 395,
						"name": "FormItemProps.value"
					}
				},
				{
					"id": 418,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 419,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The callback which will be triggered on the {@link FormItemProps.value} change for the item."
							},
							"parameters": [
								{
									"id": 420,
									"name": "newValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 400,
										"name": "Value"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 398,
								"name": "FormItemProps.onChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 397,
						"name": "FormItemProps.onChange"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						417,
						413,
						412,
						415,
						414,
						416
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						418
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 391,
					"typeArguments": [
						{
							"type": "intrinsic",
							"name": "string"
						}
					],
					"name": "FormItemProps"
				}
			]
		},
		{
			"id": 401,
			"name": "FormTextFieldProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link Form.TextField} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"children": [
				{
					"id": 407,
					"name": "defaultValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The default value of the item.\nKeep in mind that `defaultValue` will be configured once per component lifecycle. This means that if a user changes the value, `defaultValue` won't be configured on re-rendering.",
						"tags": [
							{
								"tag": "important",
								"text": "If you're using {@link FormItemProps.storeValue} and configured it as `true` then the stored value will be set."
							},
							{
								"tag": "important",
								"text": "If you configure {@link FormItemProps.value} at the same time with {@link FormItemProps.defaultValue}, the `value` will be set instead of `defaultValue`.\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 396,
						"name": "FormItemProps.defaultValue"
					}
				},
				{
					"id": 403,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "ID of the form item.\nMake sure to assign each form item a unique id."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 392,
						"name": "FormItemProps.id"
					}
				},
				{
					"id": 402,
					"name": "placeholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Placeholder text shown in the text field."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 405,
					"name": "storeValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates whether the value of the item should be persisted after submitting, and restored next time the form is rendered."
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 394,
						"name": "FormItemProps.storeValue"
					}
				},
				{
					"id": 404,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The title displayed on the left side of the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 393,
						"name": "FormItemProps.title"
					}
				},
				{
					"id": 406,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The current value of the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 395,
						"name": "FormItemProps.value"
					}
				},
				{
					"id": 408,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 409,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The callback which will be triggered on the {@link FormItemProps.value} change for the item."
							},
							"parameters": [
								{
									"id": 410,
									"name": "newValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 400,
										"name": "Value"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 398,
								"name": "FormItemProps.onChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 397,
						"name": "FormItemProps.onChange"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						407,
						403,
						402,
						405,
						404,
						406
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						408
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 391,
					"typeArguments": [
						{
							"type": "intrinsic",
							"name": "string"
						}
					],
					"name": "FormItemProps"
				}
			]
		},
		{
			"id": 383,
			"name": "FormValues",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Values of items in the form.",
				"tags": [
					{
						"tag": "remarks",
						"text": "\nFor type-safe form values you can define your own interface. Use the ID's of the form items\nas property name. See the example for more details.\n"
					},
					{
						"tag": "example",
						"text": "\n```typescript\nimport { Form } from \"@raycast/api\";\n\ninterface Values {\n  todo: string;\n  due?: Date;\n}\n\nexport default function Command() {\n  function handleSubmit(values: Values) {\n    console.log(values);\n  }\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Form.TextField id=\"todo\" title=\"Todo\" />\n      <Form.DatePicker id=\"due\" title=\"Due Date\" />\n    </Form>\n  );\n};\n```\n"
					},
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"indexSignature": {
				"id": 384,
				"name": "__index",
				"kind": 8192,
				"kindString": "Index signature",
				"flags": {},
				"comment": {
					"shortText": "The form value of a given item."
				},
				"parameters": [
					{
						"id": 385,
						"name": "item",
						"kind": 32768,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				],
				"type": {
					"type": "intrinsic",
					"name": "any"
				}
			}
		},
		{
			"id": 793,
			"name": "Image",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Display different types of images, including network images or bundled assets.",
				"tags": [
					{
						"tag": "example",
						"text": "\n```typescript\n// Built-in icon\nconst icon = Icon.Eye\n\n// Built-in icon with tint color\nconst tintedIcon = { source: Icon.Bubble, tintColor: Color.Red }\n\n// Bundled asset with circular mask\nconst avatar = { source: \"avatar.png\", mask: ImageMask.Circle }\n\n// Theme-aware icon\nconst icon = { source: { light: \"icon-light.png\", dark: \"icon-dark.png\" }}\n```\n"
					},
					{
						"tag": "remark",
						"text": "\nApply image transforms to the source, such as a `mask` or a `tintColor`.\n"
					},
					{
						"tag": "subcategory",
						"text": "Icons & Images\n"
					}
				]
			},
			"children": [
				{
					"id": 795,
					"name": "mask",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A {@link ImageMask} to apply to the image."
					},
					"type": {
						"type": "reference",
						"id": 801,
						"name": "ImageMask"
					}
				},
				{
					"id": 794,
					"name": "source",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The source of the image."
					},
					"type": {
						"type": "reference",
						"id": 797,
						"name": "ImageSource"
					}
				},
				{
					"id": 796,
					"name": "tintColor",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A {@link ColorLike} to tint all the non-transparent pixels of the image."
					},
					"type": {
						"type": "reference",
						"id": 737,
						"name": "ColorLike"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						795,
						794,
						796
					]
				}
			]
		},
		{
			"id": 46,
			"name": "KeyboardShortcut",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "A keyboard shortcut is defined by one or more modifier keys (command, control, etc.) and a single key equivalent (a character or special key).\nSee {@link KeyModifier} and {@link KeyEquivalent} for supported values.",
				"tags": [
					{
						"tag": "example",
						"text": "\n```typescript\nimport { ActionPanel, Detail } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Detail markdown=\"Let's play some games 👾\" actions={\n      <ActionPanel title=\"Game controls\">\n        <ActionPanel.Item\n          title=\"Up\"\n          shortcut={{ modifiers: [\"opt\"], key: \"arrowUp\" }}\n          onAction={() => console.log(\"Go up\")}\n        />\n        <ActionPanel.Item\n          title=\"Down\"\n          shortcut={{ modifiers: [\"opt\"], key: \"arrowDown\" }}\n          onAction={() => console.log(\"Go down\")}\n        />\n        <ActionPanel.Item\n          title=\"Left\"\n          shortcut={{ modifiers: [\"opt\"], key: \"arrowLeft\" }}\n          onAction={() => console.log(\"Go left\")}\n        />\n        <ActionPanel.Item\n          title=\"Right\"\n          shortcut={{ modifiers: [\"opt\"], key: \"arrowRight\" }}\n          onAction={() => console.log(\"Go right\")}\n        />\n      </ActionPanel>}\n    />\n  );\n}\n```\n"
					}
				]
			},
			"children": [
				{
					"id": 48,
					"name": "key",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The key of the keyboard shortcut."
					},
					"type": {
						"type": "reference",
						"id": 51,
						"name": "KeyEquivalent"
					}
				},
				{
					"id": 47,
					"name": "modifiers",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The modifier keys of the keyboard shortcut."
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 50,
							"name": "KeyModifier"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						48,
						47
					]
				}
			]
		},
		{
			"id": 548,
			"name": "ListItemProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link List.Item} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "List\n"
					}
				]
			},
			"children": [
				{
					"id": 555,
					"name": "accessoryIcon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A optional icon displayed as accessory for the list item.\nSee {@link ImageLike} for the supported formats and types."
					},
					"type": {
						"type": "reference",
						"id": 792,
						"name": "ImageLike"
					}
				},
				{
					"id": 552,
					"name": "accessoryTitle",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An additional icon displayed for the item.\nSee {@link ImageLike} for the supported formats and types."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 556,
					"name": "actions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An {@link ActionPanel} that will be updated for the selected list item."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 158,
										"name": "ActionPanelProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							}
						]
					},
					"overwrites": {
						"type": "reference",
						"name": "ActionsInterface.actions"
					}
				},
				{
					"id": 554,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A optional icon displayed for the list item.\nSee {@link ImageLike} for the supported formats and types."
					},
					"type": {
						"type": "reference",
						"id": 792,
						"name": "ImageLike"
					}
				},
				{
					"id": 549,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "ID of the item.\nMake sure to assign each item a unique ID or a UUID will be auto generated."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 553,
					"name": "keywords",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An optional property used for providing additional indexable strings for search.\nWhen filtering the list in Raycast through the search bar, the keywords will be searched in addition to the title."
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 551,
					"name": "subtitle",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An optional subtitle displayed next to the main title."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 550,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The main title displayed for that item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						555,
						552,
						556,
						554,
						549,
						553,
						551,
						550
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "ActionsInterface"
				}
			]
		},
		{
			"id": 529,
			"name": "ListProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link List} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "List\n"
					}
				]
			},
			"children": [
				{
					"id": 540,
					"name": "actions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A reference to an {@link ActionPanel}."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 158,
										"name": "ActionPanelProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ActionsInterface.actions"
					}
				},
				{
					"id": 530,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "List sections or items. If {@link List.Item} elements are specified, a default section is automatically created."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 543,
										"name": "ListSectionProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 543,
											"name": "ListSectionProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 548,
										"name": "ListItemProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 548,
											"name": "ListItemProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							}
						]
					}
				},
				{
					"id": 542,
					"name": "isLoading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates whether a loading bar should be shown or hidden below the search bar",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "false\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "NavigationChildInterface.isLoading"
					}
				},
				{
					"id": 541,
					"name": "navigationTitle",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The main title for that view displayed in Raycast",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "Command title\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "NavigationChildInterface.navigationTitle"
					}
				},
				{
					"id": 534,
					"name": "searchBarPlaceholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Placeholder text that will be shown in the search bar.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "Search value...\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 535,
					"name": "selectedItemId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Selects the item with the specified id."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 536,
					"name": "throttle",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Defines whether the {@link ListProps.onSearchTextChange} will be triggered on every keyboard press or with a delay for throttling the events.\nRecommended to set to `true` when using custom filtering logic with asynchronous operations (e.g. network requests).",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "false\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 537,
					"name": "onSearchTextChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 538,
							"name": "onSearchTextChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback triggered when the search bar text changes.\nNote that built-in list filtering will be disabled when this callback is set."
							},
							"parameters": [
								{
									"id": 539,
									"name": "text",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 531,
					"name": "onSelectionChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 532,
							"name": "onSelectionChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback triggered when the item selection in the list changes."
							},
							"parameters": [
								{
									"id": 533,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						540,
						530,
						542,
						541,
						534,
						535,
						536
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						537,
						531
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "ActionsInterface"
				},
				{
					"type": "reference",
					"name": "NavigationChildInterface"
				}
			]
		},
		{
			"id": 543,
			"name": "ListSectionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link List.Section} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "List\n"
					}
				]
			},
			"children": [
				{
					"id": 544,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The {@link List.Item} elements of the section."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 548,
										"name": "ListItemProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 548,
											"name": "ListItemProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							}
						]
					}
				},
				{
					"id": 545,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "ID of the section.\nMake sure to assign each section a unique ID or a UUID will be auto generated."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 547,
					"name": "subtitle",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An optional subtitle displayed next to the title of the section."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 546,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Title displayed above the section."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						544,
						545,
						547,
						546
					]
				}
			]
		},
		{
			"id": 69,
			"name": "LocalStorageValues",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Values of local storage items.",
				"tags": [
					{
						"tag": "remarks",
						"text": "\nFor type-safe values you can define your own interface. Use the keys of the local storage items as property name.\n"
					}
				]
			},
			"indexSignature": {
				"id": 70,
				"name": "__index",
				"kind": 8192,
				"kindString": "Index signature",
				"flags": {},
				"comment": {
					"shortText": "The local storage value of a given key."
				},
				"parameters": [
					{
						"id": 71,
						"name": "key",
						"kind": 32768,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				],
				"type": {
					"type": "intrinsic",
					"name": "any"
				}
			}
		},
		{
			"id": 711,
			"name": "Navigation",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Return type of the {@link useNavigation} hook to perform push and pop actions.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Navigation\n"
					}
				]
			},
			"children": [
				{
					"id": 715,
					"name": "pop",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 716,
							"name": "pop",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Pop current view component from the navigation stack."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 712,
					"name": "push",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 713,
							"name": "push",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Push a new view component to the navigation stack."
							},
							"parameters": [
								{
									"id": 714,
									"name": "component",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The React component to push to the navigation stack.\n"
									},
									"type": {
										"type": "reference",
										"name": "ReactNode"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						715,
						712
					]
				}
			]
		},
		{
			"id": 573,
			"name": "OpenActionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link OpenAction} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Actions\n"
					}
				]
			},
			"children": [
				{
					"id": 575,
					"name": "application",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The application name to use for opening the file.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nIf no application is specified, the default application as determined by the system is used to open the\nspecified file. Note that you can use the application name, app identifier, or absolute path to the app.\n"
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"id": 32,
								"name": "Application"
							}
						]
					}
				},
				{
					"id": 577,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon displayed for the action.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "{@link Icon.Finder}\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 792,
						"name": "ImageLike"
					}
				},
				{
					"id": 578,
					"name": "shortcut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The keyboard shortcut for the action."
					},
					"type": {
						"type": "reference",
						"id": 46,
						"name": "KeyboardShortcut"
					}
				},
				{
					"id": 574,
					"name": "target",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The file, folder or URL to open."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 576,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The title for the action."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 579,
					"name": "onOpen",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 580,
							"name": "onOpen",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback when the file or folder was opened.",
								"tags": [
									{
										"tag": "remarks",
										"text": "\nThis is handy when you want to act on an opened file or folder, e.g. store a history of opened items.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 581,
									"name": "target",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						575,
						577,
						578,
						574,
						576
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						579
					]
				}
			]
		},
		{
			"id": 585,
			"name": "OpenInBrowserActionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link OpenInBrowserAction} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Actions\n"
					}
				]
			},
			"children": [
				{
					"id": 588,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon displayed for the action.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "{@link Icon.Globe}\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 792,
						"name": "ImageLike"
					}
				},
				{
					"id": 589,
					"name": "shortcut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The optional keyboard shortcut for the menu item"
					},
					"type": {
						"type": "reference",
						"id": 46,
						"name": "KeyboardShortcut"
					}
				},
				{
					"id": 587,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An optional title for the action."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 586,
					"name": "url",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The URL to open."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 590,
					"name": "onOpen",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 591,
							"name": "onOpen",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback when the URL was opened in the browser.",
								"tags": [
									{
										"tag": "remarks",
										"text": "\nThis is handy when you want to act on the opened link, e.g. store a history of visited links.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 592,
									"name": "url",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						588,
						589,
						587,
						586
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						590
					]
				}
			]
		},
		{
			"id": 596,
			"name": "OpenWithActionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link OpenWithAction} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Actions\n"
					}
				]
			},
			"children": [
				{
					"id": 599,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon displayed for the action.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "{@link Icon.Upload}\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 792,
						"name": "ImageLike"
					}
				},
				{
					"id": 597,
					"name": "path",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The path to open."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 600,
					"name": "shortcut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The keyboard shortcut for the action."
					},
					"type": {
						"type": "reference",
						"id": 46,
						"name": "KeyboardShortcut"
					}
				},
				{
					"id": 598,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The title for the action.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "Open With\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 601,
					"name": "onOpen",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 602,
							"name": "onOpen",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback when the file or folder was opened.",
								"tags": [
									{
										"tag": "remarks",
										"text": "\nThis is handy when you want to act on an opened file or folder, e.g. store a history of opened items.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 603,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						599,
						597,
						600,
						598
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						601
					]
				}
			]
		},
		{
			"id": 607,
			"name": "PasteActionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link PasteAction} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Actions\n"
					}
				]
			},
			"children": [
				{
					"id": 608,
					"name": "content",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The contents that will be written to the clipboard as string."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 610,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon displayed for the action.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "{@link Icon.Clipboard}\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 792,
						"name": "ImageLike"
					}
				},
				{
					"id": 611,
					"name": "shortcut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The keyboard shortcut for the action."
					},
					"type": {
						"type": "reference",
						"id": 46,
						"name": "KeyboardShortcut"
					}
				},
				{
					"id": 609,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An optional title for the action."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 612,
					"name": "onPaste",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 613,
							"name": "onPaste",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback when the content was pasted into the front-most application.",
								"tags": [
									{
										"tag": "remarks",
										"text": "\nThis is handy when you want to act on the pasted content, e.g. up-rank recently pasted content.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 614,
									"name": "content",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						608,
						610,
						611,
						609
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						612
					]
				}
			]
		},
		{
			"id": 678,
			"name": "Preference",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Holds data about a single preference item (entered in Raycast Preferences). Use the {@link getPreferenceValues}\nfunction or the global {@link preferences} object to retrieve values.",
				"tags": [
					{
						"tag": "remarks",
						"text": "\nThe object maps to a defined preference in the `package.json` manifest file.\n"
					}
				]
			},
			"children": [
				{
					"id": 688,
					"name": "data",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The data that is used for dropdowns.\nFor the dropdown items, add an array of objects with `title` and `value` properties, such as: `{\"title\": \"Foo\", \"value\": \"bar\"}`"
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "unknown"
						}
					}
				},
				{
					"id": 685,
					"name": "default",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The default value of the preference if there is no `value` specified.\nFor dropdowns, this references the `value` property of an object in the data array."
					},
					"type": {
						"type": "intrinsic",
						"name": "unknown"
					}
				},
				{
					"id": 683,
					"name": "description",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The description of the preference.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThe description is shown in the Raycast preferences as well as in the\nonboarding view for required preferences.\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 687,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A label that is used for checkboxes.\nYou can create checkbox groups by setting this property and leaving the title property empty for all checkboxes except the first."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 679,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The name of the preference."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 686,
					"name": "placeholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A placeholder that is used for text fields and passwords."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 681,
					"name": "required",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Specifies if the preference is required.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nIf the preference is required, an onboarding view is shown when the\nextension is opened for the first time.\n"
							},
							{
								"tag": "defaultvalue",
								"text": "false\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 682,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The title of the preference.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThe title is also shown in the Raycast preferences.\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 680,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The type of the preference."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "textfield"
							},
							{
								"type": "literal",
								"value": "password"
							},
							{
								"type": "literal",
								"value": "checkbox"
							},
							{
								"type": "literal",
								"value": "dropdown"
							}
						]
					}
				},
				{
					"id": 684,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The value of the preference."
					},
					"type": {
						"type": "intrinsic",
						"name": "unknown"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						688,
						685,
						683,
						687,
						679,
						686,
						681,
						682,
						680,
						684
					]
				}
			]
		},
		{
			"id": 690,
			"name": "PreferenceValues",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Values of preference items."
			},
			"indexSignature": {
				"id": 691,
				"name": "__index",
				"kind": 8192,
				"kindString": "Index signature",
				"flags": {},
				"parameters": [
					{
						"id": 692,
						"name": "name",
						"kind": 32768,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				],
				"type": {
					"type": "intrinsic",
					"name": "any"
				}
			}
		},
		{
			"id": 618,
			"name": "PushActionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link PushAction} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Actions\n"
					}
				]
			},
			"children": [
				{
					"id": 621,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon displayed for the action."
					},
					"type": {
						"type": "reference",
						"id": 792,
						"name": "ImageLike"
					}
				},
				{
					"id": 622,
					"name": "shortcut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The keyboard shortcut for the action."
					},
					"type": {
						"type": "reference",
						"id": 46,
						"name": "KeyboardShortcut"
					}
				},
				{
					"id": 620,
					"name": "target",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The target view that will be pushed to the navigation stack."
					},
					"type": {
						"type": "reference",
						"name": "ReactNode"
					}
				},
				{
					"id": 619,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The title displayed for the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 623,
					"name": "onPush",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 624,
							"name": "onPush",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback when the target view was pushed.",
								"tags": [
									{
										"tag": "remarks",
										"text": "\nThis is handy when you want to act on the pushed target view, e.g. uprank a selected list item.\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						621,
						622,
						620,
						619
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						623
					]
				}
			]
		},
		{
			"id": 628,
			"name": "ShowInFinderActionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link ShowInFinderAction} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Actions\n"
					}
				]
			},
			"children": [
				{
					"id": 631,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A optional icon displayed for the item. See {@link ImageLike} for the supported formats and types.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "{@link Icon.Finder}\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 792,
						"name": "ImageLike"
					}
				},
				{
					"id": 629,
					"name": "path",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The path to open."
					},
					"type": {
						"type": "reference",
						"name": "PathLike"
					}
				},
				{
					"id": 632,
					"name": "shortcut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The keyboard shortcut for the action."
					},
					"type": {
						"type": "reference",
						"id": 46,
						"name": "KeyboardShortcut"
					}
				},
				{
					"id": 630,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An optional title for the action.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "Show in Finder\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 633,
					"name": "onShow",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 634,
							"name": "onShow",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback when the file or folder was shown in the Finder.",
								"tags": [
									{
										"tag": "remarks",
										"text": "\nThis is handy when you want to act on revealed files or folders, e.g. up-rank recently opened items.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 635,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "PathLike"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						631,
						629,
						632,
						630
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						633
					]
				}
			]
		},
		{
			"id": 640,
			"name": "SubmitFormActionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link SubmitFormAction} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Actions\n"
					}
				]
			},
			"children": [
				{
					"id": 642,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon displayed for the action."
					},
					"type": {
						"type": "reference",
						"id": 792,
						"name": "ImageLike"
					}
				},
				{
					"id": 643,
					"name": "shortcut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The keyboard shortcut for the action."
					},
					"type": {
						"type": "reference",
						"id": 46,
						"name": "KeyboardShortcut"
					}
				},
				{
					"id": 641,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The title displayed for the item."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 644,
					"name": "onSubmit",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 645,
							"name": "onSubmit",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback that is triggered when the submit was submitted.\nUse the handler to perform custom validation logic and call other Raycast API methods.\nThe handler receives a the values object containing the user input."
							},
							"parameters": [
								{
									"id": 646,
									"name": "input",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 647,
										"name": "Values"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						642,
						643,
						641
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						644
					]
				}
			],
			"typeParameter": [
				{
					"id": 647,
					"name": "Values",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			]
		},
		{
			"id": 835,
			"name": "ToastOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "The options to create a {@link Toast}.",
				"tags": [
					{
						"tag": "example",
						"text": "\n```typescript\nimport { Toast, ToastOptions, ToastStyle } from \"@raycast/api\";\n\nexport default async () => {\n  const options: ToastOptions = {\n    style: ToastStyle.Success,\n    title: \"Finished cooking\",\n    message: \"Delicious pasta for lunch\",\n  };\n  const toast = new Toast(options);\n  await toast.show();\n};\n```\n"
					},
					{
						"tag": "subcategory",
						"text": "Toast\n"
					}
				]
			},
			"children": [
				{
					"id": 838,
					"name": "message",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An additional message for the toast. Useful to show more information, e.g. an identifier of a newly create asset"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 836,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The style of a toast."
					},
					"type": {
						"type": "reference",
						"id": 839,
						"name": "ToastStyle"
					}
				},
				{
					"id": 837,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The title of a toast. Displayed on the top."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						838,
						836,
						837
					]
				}
			]
		},
		{
			"id": 651,
			"name": "TrashActionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Props of the {@link TrashAction} React component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Actions\n"
					}
				]
			},
			"children": [
				{
					"id": 654,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A optional icon displayed for the action.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "{@link Icon.Trash}\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 792,
						"name": "ImageLike"
					}
				},
				{
					"id": 652,
					"name": "paths",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The item or items to move to the trash."
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "PathLike"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "PathLike"
								}
							}
						]
					}
				},
				{
					"id": 655,
					"name": "shortcut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The optional keyboard shortcut for the action."
					},
					"type": {
						"type": "reference",
						"id": 46,
						"name": "KeyboardShortcut"
					}
				},
				{
					"id": 653,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An optional title for the action.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "Move to Trash\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 656,
					"name": "onTrash",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 657,
							"name": "onTrash",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback when all items were moved to the trash.",
								"tags": [
									{
										"tag": "remarks",
										"text": "\nThis is handy when you want to act on a trashed item, e.g. update a list.\nThe callback returns the same `paths` as passed originally.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 658,
									"name": "paths",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "PathLike"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "PathLike"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						654,
						652,
						655,
						653
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						656
					]
				}
			]
		},
		{
			"id": 156,
			"name": "ActionPanelChildren",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "Supported children for the {@link ActionPanel} and {@link ActionPanel.Submenu} components.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Action Panel\n"
					}
				]
			},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 161,
								"name": "ActionPanelSectionProps"
							}
						],
						"name": "ReactElement"
					},
					{
						"type": "array",
						"elementType": {
							"type": "reference",
							"typeArguments": [
								{
									"type": "reference",
									"id": 161,
									"name": "ActionPanelSectionProps"
								}
							],
							"name": "ReactElement"
						}
					},
					{
						"type": "reference",
						"id": 157,
						"name": "ActionPanelSectionChildren"
					},
					{
						"type": "literal",
						"value": null
					}
				]
			}
		},
		{
			"id": 157,
			"name": "ActionPanelSectionChildren",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "Supported children for the {@link ActionPanel.Section} component.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Action Panel\n"
					}
				]
			},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 164,
								"name": "ActionPanelItemProps"
							}
						],
						"name": "ReactElement"
					},
					{
						"type": "array",
						"elementType": {
							"type": "reference",
							"typeArguments": [
								{
									"type": "reference",
									"id": 164,
									"name": "ActionPanelItemProps"
								}
							],
							"name": "ReactElement"
						}
					},
					{
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 171,
								"name": "ActionPanelSubmenuProps"
							}
						],
						"name": "ReactElement"
					},
					{
						"type": "array",
						"elementType": {
							"type": "reference",
							"typeArguments": [
								{
									"type": "reference",
									"id": 171,
									"name": "ActionPanelSubmenuProps"
								}
							],
							"name": "ReactElement"
						}
					},
					{
						"type": "literal",
						"value": null
					}
				]
			}
		},
		{
			"id": 737,
			"name": "ColorLike",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "Union type for the supported color types.",
				"tags": [
					{
						"tag": "remark",
						"text": "\nBesides the {@link Color}, you can use any of the following color formats:\n- HEX, e.g `#FF0000`\n- Short HEX, e.g. `#F00`\n- RGBA, e.g. `rgb(255, 0, 0)`\n- RGBA Percentage, e.g. `rgb(255, 0, 0, 1.0)`\n- HSL, e.g. `hsla(200, 20%, 33%, 0.2)`\n- Keywords, e.g. `red`\n\nColors different to the built-in ones (see {@link Color}) will be dynamically adjusted to fit the contrast.\n"
					},
					{
						"tag": "example",
						"text": "\n```typescript\nimport { Color, Icon, List } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List>\n      <List.Item title=\"Built-in color\" icon={{ source: Icon.Circle, tintColor: Color.Red }} />\n      <List.Item title=\"HEX\" icon={{ source: Icon.Circle, tintColor: \"#FF0000\" }} />\n      <List.Item title=\"Short HEX\" icon={{ source: Icon.Circle, tintColor: \"#F00\" }} />\n      <List.Item title=\"RGBA\" icon={{ source: Icon.Circle, tintColor: \"rgb(255, 0, 0)\" }} />\n      <List.Item title=\"RGBA Percentage\" icon={{ source: Icon.Circle, tintColor: \"rgb(255, 0, 0, 1.0)\" }} />\n      <List.Item title=\"HSL\" icon={{ source: Icon.Circle, tintColor: \"hsla(200, 20%, 33%, 0.2)\" }} />\n      <List.Item title=\"Keywords\" icon={{ source: Icon.Circle, tintColor: \"red\" }} />\n    </List>\n  );\n};\n```\n"
					},
					{
						"tag": "subcategory",
						"text": "Colors\n"
					}
				]
			},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"name": "DynamicColor"
					},
					{
						"type": "reference",
						"id": 726,
						"name": "Color"
					},
					{
						"type": "intrinsic",
						"name": "string"
					}
				]
			}
		},
		{
			"id": 378,
			"name": "FormValue",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "A possible form item value that will be used as an input for the submit callback of a form.",
				"tags": [
					{
						"tag": "subcategory",
						"text": "Form\n"
					}
				]
			},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "string"
					},
					{
						"type": "intrinsic",
						"name": "number"
					},
					{
						"type": "intrinsic",
						"name": "boolean"
					},
					{
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					{
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "number"
						}
					},
					{
						"type": "reference",
						"name": "Date"
					},
					{
						"type": "literal",
						"value": null
					}
				]
			}
		},
		{
			"id": 792,
			"name": "ImageLike",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "Union type for the supported image types.",
				"tags": [
					{
						"tag": "example",
						"text": "\n```typescript\nimport { Icon, ImageMask, List } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List>\n      <List.Item title=\"String\" icon=\"https://raycast.com/uploads/avatar.png\" />\n      <List.Item title=\"Icon\" icon={Icon.Circle} />\n      <List.Item title=\"FileIcon\" icon={{ fileIcon: __filename }} />\n      <List.Item title=\"Image\" icon={{ source: \"https://raycast.com/uploads/avatar.png\", mask: ImageMask.Circle }} />\n    </List>\n  );\n};\n```\n"
					},
					{
						"tag": "subcategory",
						"text": "Icons & Images\n"
					}
				]
			},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "string"
					},
					{
						"type": "reference",
						"id": 741,
						"name": "Icon"
					},
					{
						"type": "reference",
						"id": 790,
						"name": "FileIcon"
					},
					{
						"type": "reference",
						"id": 793,
						"name": "Image"
					}
				]
			}
		},
		{
			"id": 797,
			"name": "ImageSource",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "The source of an {@link Image}. Can be either a remote URL, a local file resource, a built-in {@link Icon} or\na single emoji.",
				"tags": [
					{
						"tag": "remarks",
						"text": "\nFor consistency, it's best to use the built-in {@link Icon} in lists, the Action Panel and other places. If a\nspecific icon isn't built-in, you can reference custom ones from the `assets` folder of the extension by file name,\ne.g. `my-icon.png`. Alternatively, you can reference an absolute HTTPS url that points to an image or use an emoji.\nYou can also specify different remote or local assets for light and dark theme.\n"
					},
					{
						"tag": "example",
						"text": "\n```typescript\nimport { Icon, List } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List>\n      <List.Item title=\"String\" icon={{ source: \"https://raycast.com/uploads/avatar.png\" }} />\n      <List.Item title=\"Icon\" icon={{ source: Icon.Circle }} />\n      <List.Item\n        title=\"Theme\"\n        icon={{\n          source: { light: \"https://raycast.com/uploads/avatar.png\", dark: \"https://raycast.com/uploads/avatar.png\" },\n        }}\n      />\n    </List>\n  );\n};\n```\n"
					},
					{
						"tag": "subcategory",
						"text": "Icons & Images\n"
					}
				]
			},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "string"
					},
					{
						"type": "reference",
						"id": 741,
						"name": "Icon"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 798,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 800,
									"name": "dark",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 799,
									"name": "light",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										800,
										799
									]
								}
							]
						}
					}
				]
			}
		},
		{
			"id": 51,
			"name": "KeyEquivalent",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "KeyEquivalent of a {@link KeyboardShortcut}"
			},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "a"
					},
					{
						"type": "literal",
						"value": "b"
					},
					{
						"type": "literal",
						"value": "c"
					},
					{
						"type": "literal",
						"value": "d"
					},
					{
						"type": "literal",
						"value": "e"
					},
					{
						"type": "literal",
						"value": "f"
					},
					{
						"type": "literal",
						"value": "g"
					},
					{
						"type": "literal",
						"value": "h"
					},
					{
						"type": "literal",
						"value": "i"
					},
					{
						"type": "literal",
						"value": "j"
					},
					{
						"type": "literal",
						"value": "k"
					},
					{
						"type": "literal",
						"value": "l"
					},
					{
						"type": "literal",
						"value": "m"
					},
					{
						"type": "literal",
						"value": "n"
					},
					{
						"type": "literal",
						"value": "o"
					},
					{
						"type": "literal",
						"value": "p"
					},
					{
						"type": "literal",
						"value": "q"
					},
					{
						"type": "literal",
						"value": "r"
					},
					{
						"type": "literal",
						"value": "s"
					},
					{
						"type": "literal",
						"value": "t"
					},
					{
						"type": "literal",
						"value": "u"
					},
					{
						"type": "literal",
						"value": "v"
					},
					{
						"type": "literal",
						"value": "w"
					},
					{
						"type": "literal",
						"value": "x"
					},
					{
						"type": "literal",
						"value": "y"
					},
					{
						"type": "literal",
						"value": "z"
					},
					{
						"type": "literal",
						"value": "0"
					},
					{
						"type": "literal",
						"value": "1"
					},
					{
						"type": "literal",
						"value": "2"
					},
					{
						"type": "literal",
						"value": "3"
					},
					{
						"type": "literal",
						"value": "4"
					},
					{
						"type": "literal",
						"value": "5"
					},
					{
						"type": "literal",
						"value": "6"
					},
					{
						"type": "literal",
						"value": "7"
					},
					{
						"type": "literal",
						"value": "8"
					},
					{
						"type": "literal",
						"value": "9"
					},
					{
						"type": "literal",
						"value": "."
					},
					{
						"type": "literal",
						"value": ","
					},
					{
						"type": "literal",
						"value": ";"
					},
					{
						"type": "literal",
						"value": "="
					},
					{
						"type": "literal",
						"value": "+"
					},
					{
						"type": "literal",
						"value": "-"
					},
					{
						"type": "literal",
						"value": "["
					},
					{
						"type": "literal",
						"value": "]"
					},
					{
						"type": "literal",
						"value": "{"
					},
					{
						"type": "literal",
						"value": "}"
					},
					{
						"type": "literal",
						"value": "«"
					},
					{
						"type": "literal",
						"value": "»"
					},
					{
						"type": "literal",
						"value": "("
					},
					{
						"type": "literal",
						"value": ")"
					},
					{
						"type": "literal",
						"value": "/"
					},
					{
						"type": "literal",
						"value": "\\"
					},
					{
						"type": "literal",
						"value": "'"
					},
					{
						"type": "literal",
						"value": "`"
					},
					{
						"type": "literal",
						"value": "§"
					},
					{
						"type": "literal",
						"value": "^"
					},
					{
						"type": "literal",
						"value": "@"
					},
					{
						"type": "literal",
						"value": "$"
					},
					{
						"type": "literal",
						"value": "return"
					},
					{
						"type": "literal",
						"value": "delete"
					},
					{
						"type": "literal",
						"value": "deleteForward"
					},
					{
						"type": "literal",
						"value": "tab"
					},
					{
						"type": "literal",
						"value": "arrowUp"
					},
					{
						"type": "literal",
						"value": "arrowDown"
					},
					{
						"type": "literal",
						"value": "arrowLeft"
					},
					{
						"type": "literal",
						"value": "arrowRight"
					},
					{
						"type": "literal",
						"value": "pageUp"
					},
					{
						"type": "literal",
						"value": "pageDown"
					},
					{
						"type": "literal",
						"value": "home"
					},
					{
						"type": "literal",
						"value": "end"
					},
					{
						"type": "literal",
						"value": "space"
					},
					{
						"type": "literal",
						"value": "escape"
					},
					{
						"type": "literal",
						"value": "enter"
					},
					{
						"type": "literal",
						"value": "backspace"
					}
				]
			}
		},
		{
			"id": 50,
			"name": "KeyModifier",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "Modifier of a {@link KeyboardShortcut}"
			},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "cmd"
					},
					{
						"type": "literal",
						"value": "ctrl"
					},
					{
						"type": "literal",
						"value": "opt"
					},
					{
						"type": "literal",
						"value": "shift"
					}
				]
			}
		},
		{
			"id": 68,
			"name": "LocalStorageValue",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "Supported storage value types.",
				"tags": [
					{
						"tag": "example",
						"text": "\n```typescript\nimport { setLocalStorageItem } from \"@raycast/api\";\n\nexport default async () => {\n  // String\n  await setLocalStorageItem(\"favorite-fruit\", \"cherry\");\n\n  // Number\n  await setLocalStorageItem(\"fruit-basket-count\", 3);\n\n  // Boolean\n  await setLocalStorageItem(\"fruit-eaten-today\", true);\n};\n```\n"
					}
				]
			},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "string"
					},
					{
						"type": "intrinsic",
						"name": "number"
					},
					{
						"type": "intrinsic",
						"name": "boolean"
					}
				]
			}
		},
		{
			"id": 677,
			"name": "Preferences",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "A record type holding the preferences (entered in Raycast Preferences) that have been passed to the command."
			},
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "intrinsic",
						"name": "string"
					},
					{
						"type": "reference",
						"id": 678,
						"name": "Preference"
					}
				],
				"name": "Record"
			}
		},
		{
			"id": 673,
			"name": "environment",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"comment": {
				"shortText": "Contains environment values such as the Raycast version, extension info, and paths.",
				"tags": [
					{
						"tag": "example",
						"text": "\n```typescript\nimport { environment } from \"@raycast/api\";\n\nconsole.log(`Raycast version: ${environment.raycastVersion}`);\nconsole.log(`Extension name: ${environment.extensionName}`);\nconsole.log(`Command name: ${environment.commandName}`);\nconsole.log(`Assets path: ${environment.assetsPath}`);\nconsole.log(`Support path: ${environment.supportPath}`);\nconsole.log(`Is development mode: ${environment.isDevelopment}`);\n```\n"
					}
				]
			},
			"type": {
				"type": "reference",
				"id": 666,
				"name": "Environment"
			},
			"defaultValue": "..."
		},
		{
			"id": 689,
			"name": "preferences",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"comment": {
				"shortText": "Contains the preference values that have been passed to the command."
			},
			"type": {
				"type": "reference",
				"id": 677,
				"name": "Preferences"
			},
			"defaultValue": "workerData.preferences"
		},
		{
			"id": 79,
			"name": "ActionPanel",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 80,
					"name": "ActionPanel",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Exposes a list of actions that can be performed by the user.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nOften items are context-aware, e.g. based on the selected list item. Actions can be grouped into semantic\nsection and can have keyboard shortcuts assigned.\n\nThe first and second action become the primary and secondary action. They get automatically the default keyboard shortcuts assigned.\nIn list and details, this is `↵` for the primary and `⌘` `↵` for the secondary action. In forms it's `⌘` `↵` for the primary and\n`⌘` `⇧` `↵` for the secondary.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, CopyToClipboardAction, List, OpenInBrowserAction } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List navigationTitle=\"Open Pull Requests\">\n      <List.Item\n        title=\"Docs: Update API Reference\"\n        subtitle=\"#1\"\n        actions={\n          <ActionPanel title=\"#1 in raycast/extensions\">\n            <OpenInBrowserAction url=\"https://github.com/raycast/extensions/pull/1\" />\n            <CopyToClipboardAction\n              title=\"Copy Pull Request URL\"\n              content=\"https://github.com/raycast/extensions/pull/1\"\n            />\n          </ActionPanel>\n        }\n      />\n    </List>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Action Panel\n"
							}
						]
					},
					"parameters": [
						{
							"id": 81,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 158,
								"name": "ActionPanelProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 158,
								"name": "ActionPanelProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 98,
			"name": "ActionPanelItem",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 99,
					"name": "ActionPanelItem",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A context-specific action that can be performed by the user.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nAssign keyboard shortcuts to items to make it easier for users to perform frequently used actions.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, CopyToClipboardAction, List, OpenInBrowserAction } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List navigationTitle=\"Open Pull Requests\">\n      <List.Item\n        title=\"Docs: Update API Reference\"\n        subtitle=\"#1\"\n        actions={\n          <ActionPanel title=\"#1 in raycast/extensions\">\n            <OpenInBrowserAction url=\"https://github.com/raycast/extensions/pull/1\" />\n            <CopyToClipboardAction title=\"Copy Pull Request Number\" content=\"#1\" />\n            <ActionPanel.Item title=\"Close Pull Request\" onAction={() => console.log(\"Close PR #1\")} />\n          </ActionPanel>\n        }\n      />\n    </List>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Action Panel\n"
							}
						]
					},
					"parameters": [
						{
							"id": 100,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 164,
								"name": "ActionPanelItemProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 164,
								"name": "ActionPanelItemProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 90,
			"name": "ActionPanelSection",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 91,
					"name": "ActionPanelSection",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A group of visually separated items.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nUse sections if the {@link ActionPanel} contains a lot of actions to help guide the user to related actions.\nFor example, create a section for all copy actions.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, CopyToClipboardAction, List, OpenInBrowserAction } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List navigationTitle=\"Open Pull Requests\">\n      <List.Item\n        title=\"Docs: Update API Reference\"\n        subtitle=\"#1\"\n        actions={\n          <ActionPanel title=\"#1 in raycast/extensions\">\n            <ActionPanel.Section title=\"Copy\">\n              <CopyToClipboardAction title=\"Copy Pull Request Number\" content=\"#1\" />\n              <CopyToClipboardAction\n                title=\"Copy Pull Request URL\"\n                content=\"https://github.com/raycast/extensions/pull/1\"\n              />\n              <CopyToClipboardAction title=\"Copy Pull Request Title\" content=\"Docs: Update API Reference\" />\n            </ActionPanel.Section>\n            <ActionPanel.Section title=\"Danger zone\">\n              <ActionPanel.Item title=\"Close Pull Request\" onAction={() => console.log(\"Close PR #1\")} />\n            </ActionPanel.Section>\n          </ActionPanel>\n        }\n      />\n    </List>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Action Panel\n"
							}
						]
					},
					"parameters": [
						{
							"id": 92,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 161,
								"name": "ActionPanelSectionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 161,
								"name": "ActionPanelSectionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 129,
			"name": "ActionPanelSubmenu",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 130,
					"name": "ActionPanelSubmenu",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "An action that shows more actions in a submenu.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThis is handy when an action needs to select from a range of options. For example, to add a label to a GitHub pull request\nor an assignee to a todo.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, Color, Icon, List } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List navigationTitle=\"Open Pull Requests\">\n      <List.Item\n        title=\"Docs: Update API Reference\"\n        subtitle=\"#1\"\n        actions={\n          <ActionPanel title=\"#1 in raycast/extensions\">\n            <ActionPanel.Submenu title=\"Add Label\">\n              <ActionPanel.Item\n                icon={{ source: Icon.Circle, tintColor: Color.Red }}\n                title=\"Bug\"\n                onAction={() => console.log(\"Add bug label\")}\n              />\n              <ActionPanel.Item\n                icon={{ source: Icon.Circle, tintColor: Color.Yellow }}\n                title=\"Enhancement\"\n                onAction={() => console.log(\"Add enhancement label\")}\n              />\n              <ActionPanel.Item\n                icon={{ source: Icon.Circle, tintColor: Color.Blue }}\n                title=\"Help Wanted\"\n                onAction={() => console.log(\"Add help wanted label\")}\n              />\n            </ActionPanel.Submenu>\n          </ActionPanel>\n        }\n      />\n    </List>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Action Panel\n"
							}
						]
					},
					"parameters": [
						{
							"id": 131,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 171,
								"name": "ActionPanelSubmenuProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 164,
								"name": "ActionPanelItemProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 559,
			"name": "CopyToClipboardAction",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 560,
					"name": "CopyToClipboardAction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Action that copies the content to the clipboard.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThe main window is closed and a HUD is shown after the content was copied to the clipboard.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, CopyToClipboardAction, Detail } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Detail\n      markdown=\"Press `⌘ + .` and share some love.\"\n      actions={\n        <ActionPanel>\n          <CopyToClipboardAction content=\"I ❤️ Raycast\" shortcut={{ modifiers: [\"cmd\"], key: \".\" }} />\n        </ActionPanel>\n      }\n    />\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Actions\n"
							}
						]
					},
					"parameters": [
						{
							"id": 561,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 562,
								"name": "CopyToClipboardActionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 562,
								"name": "CopyToClipboardActionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 177,
			"name": "Detail",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 178,
					"name": "Detail",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Renders a markdown (CommonMark) string.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nTypically used when navigating from a list or as standalone view.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { Detail } from \"@raycast/api\";\n\nexport default function Command() {\n  return <Detail markdown=\"**Hello** _World_!\" />;\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Detail\n"
							}
						]
					},
					"parameters": [
						{
							"id": 179,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 187,
								"name": "DetailProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 187,
								"name": "DetailProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 193,
			"name": "Form",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 194,
					"name": "Form",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Shows a list of form items such as {@link FormViewTextField}, {@link FormViewCheckbox} or {@link FormViewDropdown}.",
						"tags": [
							{
								"tag": "subcategory",
								"text": "Form\n"
							}
						]
					},
					"parameters": [
						{
							"id": 195,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 386,
								"name": "FormProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 386,
								"name": "FormProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 251,
			"name": "FormCheckbox",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 252,
					"name": "FormCheckbox",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A form item with a checkbox.",
						"tags": [
							{
								"tag": "example",
								"text": "\nUncontrolled checkbox\n\n```typescript\nimport { Form } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.Checkbox id=\"checkbox\" label=\"Are you happy?\" defaultValue={true} />\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "example",
								"text": "\nControlled checkbox\n\n```typescript\nimport { Form } from \"@raycast/api\";\nimport { useState } from \"react\";\n\nexport default function Command() {\n  const [checked, setChecked] = useState(true);\n\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.Checkbox id=\"checkbox\" label=\"Do you like orange juice?\" value={checked} onChange={setChecked} />\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Form\n"
							}
						]
					},
					"parameters": [
						{
							"id": 253,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 421,
								"name": "FormCheckboxProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 421,
								"name": "FormCheckboxProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 268,
			"name": "FormDatePicker",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 269,
					"name": "FormDatePicker",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A form item with a date picker.",
						"tags": [
							{
								"tag": "example",
								"text": "\nUncontrolled date picker\n\n```typescript\nimport { Form } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.DatePicker id=\"dateOfBirth\" title=\"Date of Birth\" defaultValue={new Date(1955, 1, 24)} />\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "example",
								"text": "\nControlled date picker\n\n```typescript\nimport { Form } from \"@raycast/api\";\nimport { useState } from \"react\";\n\nexport default function Command() {\n  const [date, setDate] = useState<Date>();\n\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.DatePicker id=\"launchDate\" title=\"Launch Date\" value={date} onChange={setDate} />\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Form\n"
							}
						]
					},
					"parameters": [
						{
							"id": 270,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 431,
								"name": "FormDatePickerProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 431,
								"name": "FormDatePickerProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 288,
			"name": "FormDropdown",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 289,
					"name": "FormDropdown",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A form item with a dropdown menu.",
						"tags": [
							{
								"tag": "example",
								"text": "\nUncontrolled dropdown\n\n```typescript\nimport { Form } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.Dropdown id=\"emoji\" title=\"Favorite Emoji\" defaultValue=\"lol\">\n        <Form.Dropdown.Item value=\"poop\" title=\"Pile of poop\" icon=\"💩\" />\n        <Form.Dropdown.Item value=\"rocket\" title=\"Rocket\" icon=\"🚀\" />\n        <Form.Dropdown.Item value=\"lol\" title=\"Rolling on the floor laughing face\" icon=\"🤣\" />\n      </Form.Dropdown>\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "example",
								"text": "\nControlled dropdown\n\n```typescript\nimport { Form } from \"@raycast/api\";\nimport { useState } from \"react\";\n\nexport default function Command() {\n  const [programmingLanguage, setProgrammingLanguage] = useState<string>(\"typescript\");\n\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.Dropdown\n        id=\"dropdown\"\n        title=\"Favorite Language\"\n        value={programmingLanguage}\n        onChange={setProgrammingLanguage}\n      >\n        <Form.Dropdown.Item value=\"cpp\" title=\"C++\" />\n        <Form.Dropdown.Item value=\"javascript\" title=\"JavaScript\" />\n        <Form.Dropdown.Item value=\"ruby\" title=\"Ruby\" />\n        <Form.Dropdown.Item value=\"python\" title=\"Python\" />\n        <Form.Dropdown.Item value=\"swift\" title=\"Swift\" />\n        <Form.Dropdown.Item value=\"typescript\" title=\"TypeScript\" />\n      </Form.Dropdown>\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Form\n"
							}
						]
					},
					"parameters": [
						{
							"id": 290,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 441,
								"name": "FormDropdownProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 441,
								"name": "FormDropdownProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 314,
			"name": "FormDropdownItem",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 315,
					"name": "FormDropdownItem",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Represents a context-specific action that can be selected in the user interface or triggered through an assigned keyboard shortcut on the respective view.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { Form, Icon } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.Dropdown id=\"icon\" title=\"Icon\">\n        <Form.Dropdown.Item value=\"circle\" title=\"Cirlce\" icon={Icon.Circle} />\n      </Form.Dropdown>\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Form\n"
							}
						]
					},
					"parameters": [
						{
							"id": 316,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 454,
								"name": "FormDropdownItemProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 454,
								"name": "FormDropdownItemProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 306,
			"name": "FormDropdownSection",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 307,
					"name": "FormDropdownSection",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Visually separated group of dropdown items.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nUse sections to group related menu items together.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { Form } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.Dropdown id=\"food\" title=\"Favorite Food\">\n        <Form.Dropdown.Section title=\"Fruits\">\n          <Form.Dropdown.Item value=\"apple\" title=\"Apple\" icon=\"🍎\" />\n          <Form.Dropdown.Item value=\"banana\" title=\"Banana\" icon=\"🍌\" />\n        </Form.Dropdown.Section>\n        <Form.Dropdown.Section title=\"Vegetables\">\n          <Form.Dropdown.Item value=\"broccoli\" title=\"Broccoli\" icon=\"🥦\" />\n          <Form.Dropdown.Item value=\"carrot\" title=\"Carrot\" icon=\"🥕\" />\n        </Form.Dropdown.Section>\n      </Form.Dropdown>\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Form\n"
							}
						]
					},
					"parameters": [
						{
							"id": 308,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 451,
								"name": "FormDropdownSectionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 451,
								"name": "FormDropdownSectionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 284,
			"name": "FormSeparator",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 285,
					"name": "FormSeparator",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A form item that shows a separator line.\nUse for grouping and visually separating form items.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { Form } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.TextField id=\"textfield\" />\n      <Form.Separator />\n      <Form.TextArea id=\"textarea\" />\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Form\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 440,
								"name": "FormSeparatorProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 337,
			"name": "FormTagPicker",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 338,
					"name": "FormTagPicker",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A form item with a tag picker that allows the user to select multiple items.",
						"tags": [
							{
								"tag": "example",
								"text": "\nUncontrolled tag picker\n\n```typescript\nimport { Form } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.TagPicker id=\"sports\" title=\"Favorite Sports\" defaultValue={[\"football\"]}>\n        <Form.TagPicker.Item value=\"basketball\" title=\"Basketball\" icon=\"🏀\" />\n        <Form.TagPicker.Item value=\"football\" title=\"Football\" icon=\"⚽️\" />\n        <Form.TagPicker.Item value=\"tennis\" title=\"Tennis\" icon=\"🎾\" />\n      </Form.TagPicker>\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "example",
								"text": "\nControlled tag picker\n\n```typescript\nimport { Form } from \"@raycast/api\";\nimport { useState } from \"react\";\n\nexport default function Command() {\n  const [countries, setCountries] = useState<string[]>([\"ger\", \"ned\", \"pol\"]);\n\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.TagPicker id=\"countries\" title=\"Visited Countries\" value={countries} onChange={setCountries}>\n        <Form.TagPicker.Item value=\"ger\" title=\"Germany\" icon=\"🇩🇪\" />\n        <Form.TagPicker.Item value=\"ind\" title=\"India\" icon=\"🇮🇳\" />\n        <Form.TagPicker.Item value=\"ned\" title=\"Netherlands\" icon=\"🇳🇱\" />\n        <Form.TagPicker.Item value=\"nor\" title=\"Norway\" icon=\"🇳🇴\" />\n        <Form.TagPicker.Item value=\"pol\" title=\"Poland\" icon=\"🇵🇱\" />\n        <Form.TagPicker.Item value=\"rus\" title=\"Russia\" icon=\"🇷🇺\" />\n        <Form.TagPicker.Item value=\"sco\" title=\"Scotland\" icon=\"🏴󠁧󠁢󠁳󠁣󠁴󠁿\" />\n      </Form.TagPicker>\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Form\n"
							}
						]
					},
					"parameters": [
						{
							"id": 339,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 458,
								"name": "FormTagPickerProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 458,
								"name": "FormTagPickerProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 355,
			"name": "FormTagPickerItem",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 356,
					"name": "FormTagPickerItem",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A tag picker item in a {@link FormTagPicker}.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { Color, Form, Icon } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.TagPicker id=\"color\" title=\"Color\">\n        <Form.TagPicker.Item value=\"ger\" title=\"Germany\" icon={{ source: Icon.Circle, tintColor: Color.Red }} />\n      </Form.TagPicker>\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Form\n"
							}
						]
					},
					"parameters": [
						{
							"id": 357,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 469,
								"name": "FormTagPickerItemProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 469,
								"name": "FormTagPickerItemProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 234,
			"name": "FormTextArea",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 235,
					"name": "FormTextArea",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A form item with a text area for input.\nThe item supports multiline text entry.",
						"tags": [
							{
								"tag": "example",
								"text": "\nUncontrolled text area\n\n```typescript\nimport { Form } from \"@raycast/api\";\n\nconst DESCRIPTION =\n  \"We spend too much time starring at loading indicators. The Raycast team is dedicated to make everybody interact faster with their computers.\";\n\nexport default function Command() {\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.TextArea id=\"description\" defaultValue={DESCRIPTION} />\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "example",
								"text": "\nControlled text area\n\n```typescript\nimport { Form } from \"@raycast/api\";\nimport { useState } from \"react\";\n\nexport default function Command() {\n  const [text, setText] = useState<string>();\n\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.TextArea id=\"textarea\" value={text} onChange={setText} />\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Form\n"
							}
						]
					},
					"parameters": [
						{
							"id": 236,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 411,
								"name": "FormTextAreaProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 411,
								"name": "FormTextAreaProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 217,
			"name": "FormTextField",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 218,
					"name": "FormTextField",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A form item with a text field for input.",
						"tags": [
							{
								"tag": "example",
								"text": "\nUncontrolled text field\n\n```typescript\nimport { Form } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.TextField id=\"name\" defaultValue=\"Steve\" />\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "example",
								"text": "\nControlled text field\n\n```typescript\nimport { Form } from \"@raycast/api\";\nimport { useState } from \"react\";\n\nexport default function Command() {\n  const [text, setText] = useState<string>();\n\n  return (\n    <Form onSubmit={(values) => console.log(values)}>\n      <Form.TextField id=\"textfield\" value={text} onChange={setText} />\n    </Form>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Form\n"
							}
						]
					},
					"parameters": [
						{
							"id": 219,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 401,
								"name": "FormTextFieldProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 401,
								"name": "FormTextFieldProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 473,
			"name": "List",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 474,
					"name": "List",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Displays {@link List.Section} or {@link List.Item}.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThe list uses built-in filtering by indexing the title of list items and additionally keywords.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { List } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List navigationTitle=\"Search Beers\" searchBarPlaceholder=\"Search your favorite beer\">\n      <List.Item title=\"Augustiner Helles\" />\n      <List.Item title=\"Camden Hells\" />\n      <List.Item title=\"Leffe Blonde\" />\n      <List.Item title=\"Sierra Nevada IPA\" />\n    </List>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "List\n"
							}
						]
					},
					"parameters": [
						{
							"id": 475,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 529,
								"name": "ListProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 529,
								"name": "ListProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 503,
			"name": "ListItem",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 504,
					"name": "ListItem",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A item in the {@link List}.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThis is one of the foundational UI components of Raycast. A list item represents a single entity. It can be a\nGitHub pull request, a file or anything else. Most likely you want to perform actions on this item, so make it clear\nto the user what this list item is about.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { Icon, List } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List>\n      <List.Item icon={Icon.Star} title=\"Augustiner Helles\" subtitle=\"0,5 Liter\" accessoryTitle=\"Germany\" />\n    </List>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "List\n"
							}
						]
					},
					"parameters": [
						{
							"id": 505,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 548,
								"name": "ListItemProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 548,
								"name": "ListItemProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 493,
			"name": "ListSection",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 494,
					"name": "ListSection",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A group of related {@link List.Item}.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nSections are a great way to structure your list. F.e. group GitHub issues with the same status and order them by priority.\nThis way the user can quickly access what is most relevant.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { List } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <List>\n      <List.Section title=\"Lager\">\n        <List.Item title=\"Camden Hells\" />\n      </List.Section>\n      <List.Section title=\"IPA\">\n        <List.Item title=\"Sierra Nevada IPA\" />\n      </List.Section>\n    </List>\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "List\n"
							}
						]
					},
					"parameters": [
						{
							"id": 495,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 543,
								"name": "ListSectionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 543,
								"name": "ListSectionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 570,
			"name": "OpenAction",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 571,
					"name": "OpenAction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "An action to open a file or folder with a specific application, just as if you had double-clicked the\nfile's icon.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThe main window is closed, after the file was opened.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, Detail, OpenAction } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Detail\n      markdown=\"Check out your extension code.\"\n      actions={\n        <ActionPanel>\n          <OpenAction title=\"Open Folder\" target={__dirname} />\n        </ActionPanel>\n      }\n    />\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Actions\n"
							}
						]
					},
					"parameters": [
						{
							"id": 572,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 573,
								"name": "OpenActionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 573,
								"name": "OpenActionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 582,
			"name": "OpenInBrowserAction",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 583,
					"name": "OpenInBrowserAction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Action that opens a URL in the default browser..",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThe main window is closed, after the URL was opened in the browser.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, Detail, OpenInBrowserAction } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Detail\n      markdown=\"Join the gang!\"\n      actions={\n        <ActionPanel>\n          <OpenInBrowserAction url=\"https://raycast.com/jobs\" />\n        </ActionPanel>\n      }\n    />\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Actions\n"
							}
						]
					},
					"parameters": [
						{
							"id": 584,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 585,
								"name": "OpenInBrowserActionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 585,
								"name": "OpenInBrowserActionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 593,
			"name": "OpenWithAction",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 594,
					"name": "OpenWithAction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "An action to open a file or folder with a specific application.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThe action opens a sub-menu with all applications that can open the file or folder.\nThe main window is closed after the file was opened in the specified application.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, Detail, OpenWithAction } from \"@raycast/api\";\nimport { homedir } from \"os\";\n\nconst DESKTOP_DIR = `${homedir()}/Desktop`;\n\nexport default function Command() {\n  return (\n    <Detail\n      markdown=\"What do you want to use to open your desktop with?\"\n      actions={\n        <ActionPanel>\n          <OpenWithAction path={DESKTOP_DIR} />\n        </ActionPanel>\n      }\n    />\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Actions\n"
							}
						]
					},
					"parameters": [
						{
							"id": 595,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 596,
								"name": "OpenWithActionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 596,
								"name": "OpenWithActionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 604,
			"name": "PasteAction",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 605,
					"name": "PasteAction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Action that pastes the content to the front-most applications.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThe main window is closed, after the content was pasted to the front-most application.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, Detail, PasteAction } from \"@raycast/api\";\n\nexport default function Command() {\n  return (\n    <Detail\n      markdown=\"Let us know what you think about the Raycast API?\"\n      actions={\n        <ActionPanel>\n          <PasteAction content=\"api@raycast.com\" />\n        </ActionPanel>\n      }\n    />\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Actions\n"
							}
						]
					},
					"parameters": [
						{
							"id": 606,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 607,
								"name": "PasteActionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 607,
								"name": "PasteActionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 615,
			"name": "PushAction",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 616,
					"name": "PushAction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Action that allows to push a new view to the navigation stack.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, Detail, PushAction } from \"@raycast/api\";\n\nfunction Ping() {\n  return (\n    <Detail\n      markdown=\"Ping\"\n      actions={\n        <ActionPanel>\n          <PushAction title=\"Push Pong\" target={<Pong />} />\n        </ActionPanel>\n      }\n    />\n  );\n}\n\nfunction Pong() {\n  return <Detail markdown=\"Pong\" />;\n}\n\nexport default function Command() {\n  return <Ping />;\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Actions\n"
							}
						]
					},
					"parameters": [
						{
							"id": 617,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 618,
								"name": "PushActionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 618,
								"name": "PushActionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 625,
			"name": "ShowInFinderAction",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 626,
					"name": "ShowInFinderAction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Action that shows a file or folder in the Finder.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThe main window is closed, after the file or folder was revealed in the Finder.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, Detail, ShowInFinderAction } from \"@raycast/api\";\nimport { homedir } from \"os\";\n\nconst DOWNLOADS_DIR = `${homedir()}/Downloads`;\n\nexport default function Command() {\n  return (\n    <Detail\n      markdown=\"Are your downloads pilling up again?\"\n      actions={\n        <ActionPanel>\n          <ShowInFinderAction path={DOWNLOADS_DIR} />\n        </ActionPanel>\n      }\n    />\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Actions\n"
							}
						]
					},
					"parameters": [
						{
							"id": 627,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 628,
								"name": "ShowInFinderActionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 628,
								"name": "ShowInFinderActionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 636,
			"name": "SubmitFormAction",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 637,
					"name": "SubmitFormAction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Action that allows to add a submit handler for capturing form values.",
						"tags": [
							{
								"tag": "subcategory",
								"text": "Actions\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 638,
							"name": "Values",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 383,
								"name": "FormValues"
							},
							"default": {
								"type": "reference",
								"id": 383,
								"name": "FormValues"
							}
						}
					],
					"parameters": [
						{
							"id": 639,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 640,
								"typeArguments": [
									{
										"type": "reference",
										"id": 638,
										"name": "Values"
									}
								],
								"name": "SubmitFormActionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 640,
								"typeArguments": [
									{
										"type": "reference",
										"id": 638,
										"name": "Values"
									}
								],
								"name": "SubmitFormActionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 648,
			"name": "TrashAction",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 649,
					"name": "TrashAction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Action that moves a file or folder to the Trash.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, Detail, TrashAction } from \"@raycast/api\";\nimport { homedir } from \"os\";\n\nconst FILE = `${homedir()}/Downloads/get-rid-of-me.txt`;\n\nexport default function Command() {\n  return (\n    <Detail\n      markdown=\"Some spring cleaning?\"\n      actions={\n        <ActionPanel>\n          <TrashAction paths={FILE} />\n        </ActionPanel>\n      }\n    />\n  );\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Actions\n"
							}
						]
					},
					"parameters": [
						{
							"id": 650,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 651,
								"name": "TrashActionProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 651,
								"name": "TrashActionProps"
							}
						],
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 52,
			"name": "allLocalStorageItems",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 53,
					"name": "allLocalStorageItems",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Retrieve all stored values in the local storage of an extension.",
						"returns": "A promise that resolves with an object containing all {@link LocalStorageValues}.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { allLocalStorageItems } from \"@raycast/api\";\n\ninterface Values {\n  todo: string;\n  priority: number;\n}\n\nexport default async () => {\n  const items: Values = await allLocalStorageItems();\n  console.log(`Local storage item count: ${Object.entries(items).length}`);\n};\n```\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 54,
							"name": "Values",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 69,
								"name": "LocalStorageValues"
							},
							"default": {
								"type": "reference",
								"id": 69,
								"name": "LocalStorageValues"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 54,
								"name": "Values"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 39,
			"name": "clearClipboard",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 40,
					"name": "clearClipboard",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Clears the current clipboard contents.",
						"returns": "A promise that resolves when the clipboard is cleared.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { clearClipboard } from \"@raycast/api\";\n\nexport default async () => {\n  await clearClipboard();\n};\n```\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 66,
			"name": "clearLocalStorage",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 67,
					"name": "clearLocalStorage",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Removes all stored values of an extension.",
						"returns": "A promise that resolves when all values were removed.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { clearLocalStorage } from \"@raycast/api\";\n\nexport default async () => {\n  await clearLocalStorage();\n};\n```\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 11,
			"name": "clearSearchBar",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 12,
					"name": "clearSearchBar",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Clear the text in the search bar.",
						"returns": "A promise that resolves when the search bar is cleared.\n",
						"tags": [
							{
								"tag": "subcategory",
								"text": "Window & Search Bar\n"
							}
						]
					},
					"parameters": [
						{
							"id": 13,
							"name": "options",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Can be used to force scrolling to the top. Defaults to scrolling to the top after the\nthe search bar was cleared."
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 14,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 15,
											"name": "forceScrollToTop",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												15
											]
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 1,
			"name": "closeMainWindow",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 2,
					"name": "closeMainWindow",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Closes the main Raycast window.",
						"returns": "A promise that resolves when the main window is closed.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { closeMainWindow } from \"@raycast/api\";\nimport { setTimeout } from \"timers/promises\";\n\nexport default async () => {\n  await setTimeout(1000);\n  await closeMainWindow({ clearRootSearch: true });\n};\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Window & Search Bar\n"
							}
						]
					},
					"parameters": [
						{
							"id": 3,
							"name": "options",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Can be used to clear the root search. Defaults to not clearing the root search after\nthe window was closed."
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 4,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 5,
											"name": "clearRootSearch",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												5
											]
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 36,
			"name": "copyTextToClipboard",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 37,
					"name": "copyTextToClipboard",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Copies text to the clipboard.",
						"returns": "A promise that resolves when the text got copied to the clipboard.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { copyTextToClipboard } from \"@raycast/api\";\n\nexport default async () => {\n  await copyTextToClipboard(\"https://raycast.com\");\n};\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 38,
							"name": "text",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The text to copy to the clipboard."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 22,
			"name": "getApplications",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 23,
					"name": "getApplications",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns all applications that can open the file.",
						"returns": "An array of {@link Application}.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { getApplications } from \"@raycast/api\";\n\nexport default async () => {\n  const installedApplications = await getApplications();\n  console.log(\"The following applications are installed on your Mac:\");\n  console.log(installedApplications.map((a) => a.name).join(\", \"));\n};\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 24,
							"name": "path",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The path of the file or folder to get the applications for. If no path is specified, all installed applications are returned."
							},
							"type": {
								"type": "reference",
								"name": "PathLike"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 32,
									"name": "Application"
								}
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 25,
			"name": "getDefaultApplication",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 26,
					"name": "getDefaultApplication",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the default application that the file would be opened with.",
						"returns": "The default {@link Application} that would open the file. Throws an error if no application was found.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { getDefaultApplication } from \"@raycast/api\";\n\nexport default async () => {\n  const defaultApplication = await getDefaultApplication(__filename);\n  console.log(`Default application for JavaScript is: ${defaultApplication.name}`);\n};\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 27,
							"name": "path",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The path of the file or folder to get the default application for."
							},
							"type": {
								"type": "reference",
								"name": "PathLike"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 32,
								"name": "Application"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 55,
			"name": "getLocalStorageItem",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 56,
					"name": "getLocalStorageItem",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Retrieve the stored value for the given key.",
						"returns": "A promise that resolves with the the stored value for the given key. If the key does not exist, `undefined` is returned.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { getLocalStorageItem } from \"@raycast/api\";\n\nexport default async () => {\n  const item: string = await getLocalStorageItem(\"favorite-fruit\");\n  console.log(item);\n};\n```\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 57,
							"name": "Value",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 68,
								"name": "LocalStorageValue"
							},
							"default": {
								"type": "reference",
								"id": 68,
								"name": "LocalStorageValue"
							}
						}
					],
					"parameters": [
						{
							"id": 58,
							"name": "key",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The key you want to retrieve the value of."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 57,
										"name": "Value"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 674,
			"name": "getPreferenceValues",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 675,
					"name": "getPreferenceValues",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A convenience function for type-safe access to the values of the {@link preferences} object.",
						"returns": "An object with the preference names as property key and the typed value as property value.\n",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nEach preference name is mapped to its value and the defined default values are used as fallback values.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { getPreferenceValues } from \"@raycast/api\";\n\ninterface Preferences {\n  name: string;\n  bodyWeight?: string;\n  bodyHeight?: string;\n}\n\nexport default async () => {\n  const preferences: Preferences = getPreferenceValues();\n  console.log(preferences);\n};\n```\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 676,
							"name": "Values",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 690,
								"name": "PreferenceValues"
							},
							"default": {
								"type": "reference",
								"id": 690,
								"name": "PreferenceValues"
							}
						}
					],
					"type": {
						"type": "reference",
						"id": 676,
						"name": "Values"
					}
				}
			]
		},
		{
			"id": 44,
			"name": "getSelectedText",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 45,
					"name": "getSelectedText",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Gets the selected text of the frontmost application.",
						"returns": "Returns a promise that resolves with the selected text.\n",
						"tags": [
							{
								"tag": "throws",
								"text": "An error when no text is selected in the frontmost application."
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { getSelectedText, pasteText, showToast, ToastStyle } from \"@raycast/api\";\n\nexport default async () => {\n  try {\n    const selectedText = await getSelectedText();\n    const transformedText = selectedText.toUpperCase();\n    await pasteText(transformedText);\n  } catch (error) {\n    await showToast(ToastStyle.Failure, \"Cannot transform text\", String(error));\n  }\n};\n```\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 41,
			"name": "pasteText",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 42,
					"name": "pasteText",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Pastes text to the current selection of the frontmost application.",
						"returns": "A promise that resolves when the text got pasted.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { pasteText } from \"@raycast/api\";\n\nexport default async () => {\n  await pasteText(\"I really like Raycast's API\");\n};\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 43,
							"name": "text",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The text to insert at the cursor."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 6,
			"name": "popToRoot",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 7,
					"name": "popToRoot",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Pops the navigation stack back to root search.",
						"returns": "A promise that resolves when Raycast popped to root.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { Detail, popToRoot } from \"@raycast/api\";\nimport { useEffect } from \"react\";\nimport { setTimeout } from \"timers\";\n\nexport default function Command() {\n  useEffect(() => {\n    setTimeout(() => {\n      popToRoot({ clearSearchBar: true });\n    }, 3000);\n  }, []);\n\n  return <Detail markdown=\"See you soon 👋\" />;\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Window & Search Bar\n"
							}
						]
					},
					"parameters": [
						{
							"id": 8,
							"name": "options",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Can be used to clear the search bar. Defaults to clearing the search bar after popped to root."
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 9,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 10,
											"name": "clearSearchBar",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												10
											]
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 843,
			"name": "randomId",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 844,
					"name": "randomId",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Generate secure URL-friendly unique ID.",
						"text": "By default, the ID will have 21 symbols to have a collision probability\nsimilar to UUID v4.\n",
						"returns": "A random string.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { pasteText, randomId } from \"@raycast/api\";\n\nexport default async () => {\n  const id = randomId();\n  await pasteText(id);\n};\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 845,
							"name": "size",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Size of the ID. The default size is 21."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 63,
			"name": "removeLocalStorageItem",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 64,
					"name": "removeLocalStorageItem",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Removes the stored value for the given key.",
						"returns": "A promise that resolves when the value was removed.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { removeLocalStorageItem } from \"@raycast/api\";\n\nexport default async () => {\n  await removeLocalStorageItem(\"favorite-fruit\");\n};\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 65,
							"name": "key",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The key you want to remove the value of."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 717,
			"name": "render",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 718,
					"name": "render",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Takes a React Component and renders it in Raycast for command types that show a `view`.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { Detail } from \"@raycast/api\"\nconst Command = () => <Detail markdown=\"Hello World\" />\nrender(<Command />)\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Rendering\n"
							}
						]
					},
					"parameters": [
						{
							"id": 719,
							"name": "nodeToRender",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ReactNode"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "void"
					}
				}
			]
		},
		{
			"id": 59,
			"name": "setLocalStorageItem",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 60,
					"name": "setLocalStorageItem",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Stores a value for the given key.",
						"returns": "A promise that resolves when the value was stored.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { setLocalStorageItem } from \"@raycast/api\";\n\nexport default async () => {\n  await setLocalStorageItem(\"favorite-fruit\", \"cherry\");\n};\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 61,
							"name": "key",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The key you want to create or update the value of."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 62,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The value you want to create or update for the given key."
							},
							"type": {
								"type": "reference",
								"id": 68,
								"name": "LocalStorageValue"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 809,
			"name": "showHUD",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 810,
					"name": "showHUD",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A HUD will automatically hide the main window and show a compact Toast at the bottom of the screen.",
						"returns": "A promise that resolves when the HUD is shown.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { showHUD } from \"@raycast/api\";\n\nexport default async () => {\n  await showHUD(\"Hey there 👋\");\n};\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Toast\n"
							}
						]
					},
					"parameters": [
						{
							"id": 811,
							"name": "title",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The title that will be displayed for the HUD."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 16,
			"name": "showInFinder",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 17,
					"name": "showInFinder",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Shows a file or directory in the Finder.",
						"returns": "A promise that resolves when item is revealed in the Finder.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { showInFinder } from \"@raycast/api\"\nimport { homedir } from \"os\"\nshowInFinder(homedir(), \"Downloads\")\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 18,
							"name": "path",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The path to show in the Finder."
							},
							"type": {
								"type": "reference",
								"name": "PathLike"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 804,
			"name": "showToast",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 805,
					"name": "showToast",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Creates and shows a Toast with the the given style, title, and message.",
						"returns": "A promise that resolves with the shown toast. The toast can be used to change or hide it.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { showToast, ToastStyle } from \"@raycast/api\";\n\nexport default async () => {\n  const success = false;\n\n  if (success) {\n    await showToast(ToastStyle.Success, \"Dinner is ready\", \"Pizza margherita\");\n  } else {\n    await showToast(ToastStyle.Failure, \"Dinner isn't ready\", \"Pizza dropped on the floor\");\n  }\n};\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Toast\n"
							}
						]
					},
					"parameters": [
						{
							"id": 806,
							"name": "style",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The visual style of the Toast."
							},
							"type": {
								"type": "reference",
								"id": 839,
								"name": "ToastStyle"
							}
						},
						{
							"id": 807,
							"name": "title",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The title that will be displayed in the Toast."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 808,
							"name": "message",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The message that will be displayed in the Toast."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 812,
								"name": "Toast"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 19,
			"name": "trash",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 20,
					"name": "trash",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Moves a file or director to the Trash.",
						"returns": "A promise that resolves when all files are moved to the trash.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nimport { trash } from \"@raycast/api\";\nimport { writeFile } from \"fs/promises\";\nimport { homedir } from \"os\";\n\nexport default async () => {\n  const file = `${homedir()}/Desktop/yolo.txt`;\n  await writeFile(file, \"I will be deleted soon!\");\n  await trash(file);\n};\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 21,
							"name": "path",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "PathLike"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "PathLike"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 693,
			"name": "useActionPanel",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 694,
					"name": "useActionPanel",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A hook that lets you update the global Action Panel.",
						"returns": "A {@link ActionPanelState} object with an {@link update} function.\nUse the function to update the global Action Panel.\n",
						"tags": [
							{
								"tag": "subcategory",
								"text": "Action Panel\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 695,
						"name": "ActionPanelState"
					}
				}
			]
		},
		{
			"id": 703,
			"name": "useId",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 704,
					"name": "useId",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Generates a memoized random ID.",
						"returns": "The an string ID that is either the `defaultId` if provided, or a randomly generated ID with\nthe `generateId` function.\n",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nThe generated ID is preserved across renders. It's used internally to generate fallback ID's\nfor {@link List.Section} or {@link List.Item}. The generated ID is saved as React `ref` and\nwon't change unless the React component is unmounted.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { Detail, useId } from \"@raycast/api\";\n\nexport default function Command() {\n  const id = useId();\n  console.log(id);\n  return <Detail key={id} markdown=\"I remember you 🧠\" />;\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Utilities\n"
							}
						]
					},
					"parameters": [
						{
							"id": 705,
							"name": "defaultId",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The ID that is returned by default."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 706,
							"name": "generateId",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A function that is used to generate a random ID. Uses {@link randomId} by default."
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 707,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 708,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							},
							"defaultValue": "randomId"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 709,
			"name": "useNavigation",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 710,
					"name": "useNavigation",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A hook that lets you push and pop view components in the navigation stack.",
						"returns": "A {@link Navigation} object with {@link Navigation.push} and {@link Navigation.pop} functions.\nUse the functions to alter the navigation stack.\n",
						"tags": [
							{
								"tag": "remarks",
								"text": "\nMost likely you won't use this hook too often. To push a new component, use the {@link PushAction}.\nWhen a user presses `ESC`, we automatically push to the previous component.\n"
							},
							{
								"tag": "example",
								"text": "\n```typescript\nimport { ActionPanel, Detail, useNavigation } from \"@raycast/api\";\n\nfunction Ping() {\n  const { push } = useNavigation();\n\n  return (\n    <Detail\n      markdown=\"Ping\"\n      actions={\n        <ActionPanel>\n          <ActionPanel.Item title=\"Push\" onAction={() => push(<Pong />)} />\n        </ActionPanel>\n      }\n    />\n  );\n}\n\nfunction Pong() {\n  const { pop } = useNavigation();\n\n  return (\n    <Detail\n      markdown=\"Pong\"\n      actions={\n        <ActionPanel>\n          <ActionPanel.Item title=\"Pop\" onAction={pop} />\n        </ActionPanel>\n      }\n    />\n  );\n}\n\nexport default function Command() {\n  return <Ping />;\n}\n```\n"
							},
							{
								"tag": "subcategory",
								"text": "Navigation\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 711,
						"name": "Navigation"
					}
				}
			]
		}
	],
	"groups": [
		{
			"title": "Namespaces",
			"kind": 4,
			"children": [
				82,
				101,
				93,
				132,
				180,
				196,
				254,
				271,
				291,
				317,
				309,
				286,
				340,
				358,
				237,
				220,
				77,
				476,
				506,
				496
			]
		},
		{
			"title": "Enumerations",
			"kind": 8,
			"children": [
				726,
				741,
				801,
				839
			]
		},
		{
			"title": "Classes",
			"kind": 128,
			"children": [
				812
			]
		},
		{
			"title": "Interfaces",
			"kind": 256,
			"children": [
				164,
				158,
				161,
				695,
				171,
				32,
				562,
				187,
				666,
				790,
				421,
				431,
				454,
				441,
				451,
				391,
				386,
				440,
				469,
				458,
				411,
				401,
				383,
				793,
				46,
				548,
				529,
				543,
				69,
				711,
				573,
				585,
				596,
				607,
				678,
				690,
				618,
				628,
				640,
				835,
				651
			]
		},
		{
			"title": "Type aliases",
			"kind": 4194304,
			"children": [
				156,
				157,
				737,
				378,
				792,
				797,
				51,
				50,
				68,
				677
			]
		},
		{
			"title": "Variables",
			"kind": 32,
			"children": [
				673,
				689
			]
		},
		{
			"title": "Functions",
			"kind": 64,
			"children": [
				79,
				98,
				90,
				129,
				559,
				177,
				193,
				251,
				268,
				288,
				314,
				306,
				284,
				337,
				355,
				234,
				217,
				473,
				503,
				493,
				570,
				582,
				593,
				604,
				615,
				625,
				636,
				648,
				52,
				39,
				66,
				11,
				1,
				36,
				22,
				25,
				55,
				674,
				44,
				41,
				6,
				843,
				63,
				717,
				59,
				809,
				16,
				804,
				19,
				693,
				703,
				709
			]
		}
	],
	"categories": [
		{
			"title": "User Interface",
			"children": [
				726,
				741,
				801,
				839,
				812,
				164,
				158,
				161,
				695,
				171,
				562,
				187,
				790,
				421,
				431,
				454,
				441,
				451,
				391,
				386,
				440,
				469,
				458,
				411,
				401,
				383,
				793,
				548,
				529,
				543,
				711,
				573,
				585,
				596,
				607,
				618,
				628,
				640,
				835,
				651,
				156,
				157,
				737,
				378,
				792,
				797,
				79,
				98,
				90,
				129,
				559,
				177,
				193,
				251,
				268,
				288,
				314,
				306,
				284,
				337,
				355,
				234,
				217,
				473,
				503,
				493,
				570,
				582,
				593,
				604,
				615,
				625,
				636,
				648,
				11,
				1,
				6,
				717,
				809,
				804,
				693,
				703,
				709
			]
		},
		{
			"title": "Keyboard",
			"children": [
				46,
				51,
				50
			]
		},
		{
			"title": "Clipboard",
			"children": [
				39,
				36,
				44,
				41
			]
		},
		{
			"title": "Storage",
			"children": [
				69,
				68,
				52,
				66,
				55,
				63,
				59
			]
		},
		{
			"title": "Environment",
			"children": [
				666,
				673
			]
		},
		{
			"title": "Other",
			"children": [
				82,
				101,
				93,
				132,
				180,
				196,
				254,
				271,
				291,
				317,
				309,
				286,
				340,
				358,
				237,
				220,
				77,
				476,
				506,
				496
			]
		},
		{
			"title": "Preferences",
			"children": [
				678,
				690,
				677,
				689,
				674
			]
		},
		{
			"title": "Utilities",
			"children": [
				32,
				22,
				25,
				843,
				16,
				19
			]
		}
	]
}