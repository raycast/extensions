{
  "openapi": "3.0.0",
  "info": {
    "title": "PlanetScale API",
    "description": "\n<p>PlanetScale API</p>\n&copy; 2024 PlanetScale, Inc.",
    "version": "v1",
    "x-copyright": "&copy; 2024 PlanetScale, Inc."
  },
  "paths": {
    "/organizations": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "operationId": "list-organizations",
        "summary": "List organizations",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "If provided, specifies the page offset of returned results",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "If provided, specifies the number of returned results",
            "schema": {
              "type": "number",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gets the organizations for the current user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The ID for the organization"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the organization"
                          },
                          "billing_email": {
                            "type": "string",
                            "description": "The billing email of the organization"
                          },
                          "created_at": {
                            "type": "string",
                            "description": "When the organization was created"
                          },
                          "updated_at": {
                            "type": "string",
                            "description": "When the organization was last updated"
                          },
                          "plan": {
                            "type": "string",
                            "description": "The billing plan of the organization"
                          },
                          "valid_billing_info": {
                            "type": "boolean",
                            "description": "Whether or not the organization's billing information is valid"
                          },
                          "sso": {
                            "type": "boolean",
                            "description": "Whether or not SSO is enabled on the organization"
                          },
                          "sso_directory": {
                            "type": "boolean",
                            "description": "Whether or not the organization uses a WorkOS directory"
                          },
                          "single_tenancy": {
                            "type": "boolean",
                            "description": "Whether or not the organization has single tenancy enabled"
                          },
                          "has_past_due_invoices": {
                            "type": "boolean",
                            "description": "Whether or not the organization has past due billing invoices"
                          },
                          "can_create_databases": {
                            "type": "boolean",
                            "description": "Whether or not more databases can be created in the organization"
                          },
                          "free_databases_remaining": {
                            "type": "number",
                            "description": "The number of remaining free databases that can be created in the organization"
                          },
                          "database_count": {
                            "type": "number",
                            "description": "The number of databases in the organization"
                          },
                          "sleeping_database_count": {
                            "type": "number",
                            "description": "The number of sleeping databases in the organization"
                          },
                          "sso_portal_url": {
                            "type": "string",
                            "description": "The URL of the organization's SSO portal"
                          },
                          "flags": {
                            "type": "object",
                            "properties": {
                              "example_flag": {
                                "type": "string",
                                "enum": [
                                  "full",
                                  "on"
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          "features": {
                            "type": "object",
                            "properties": {
                              "insights": {
                                "type": "boolean"
                              },
                              "sso": {
                                "type": "boolean"
                              },
                              "single_tenancy": {
                                "type": "boolean"
                              }
                            },
                            "additionalProperties": false
                          },
                          "idp_managed_roles": {
                            "type": "boolean",
                            "description": "Whether or not the IdP provider is be responsible for managing roles in PlanetScale"
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "id",
                          "name",
                          "created_at",
                          "updated_at",
                          "plan",
                          "valid_billing_info",
                          "sso",
                          "sso_directory",
                          "single_tenancy",
                          "has_past_due_invoices",
                          "can_create_databases",
                          "free_databases_remaining",
                          "database_count",
                          "sleeping_database_count",
                          "idp_managed_roles"
                        ]
                      }
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "When using a service token, returns the list of organizations the service token has access to. When using an OAuth token, returns the list of organizations the user has access to.\n### Authorization\nA   OAuth token must have at least one of the following   scopes in order to use this API endpoint:\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| User | `read_organizations` |"
      }
    },
    "/organizations/{name}": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "operationId": "get-an-organization",
        "summary": "Get an organization",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the organization",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an organization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID for the organization"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the organization"
                    },
                    "billing_email": {
                      "type": "string",
                      "description": "The billing email of the organization"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "When the organization was created"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "When the organization was last updated"
                    },
                    "plan": {
                      "type": "string",
                      "description": "The billing plan of the organization"
                    },
                    "valid_billing_info": {
                      "type": "boolean",
                      "description": "Whether or not the organization's billing information is valid"
                    },
                    "sso": {
                      "type": "boolean",
                      "description": "Whether or not SSO is enabled on the organization"
                    },
                    "sso_directory": {
                      "type": "boolean",
                      "description": "Whether or not the organization uses a WorkOS directory"
                    },
                    "single_tenancy": {
                      "type": "boolean",
                      "description": "Whether or not the organization has single tenancy enabled"
                    },
                    "has_past_due_invoices": {
                      "type": "boolean",
                      "description": "Whether or not the organization has past due billing invoices"
                    },
                    "can_create_databases": {
                      "type": "boolean",
                      "description": "Whether or not more databases can be created in the organization"
                    },
                    "free_databases_remaining": {
                      "type": "number",
                      "description": "The number of remaining free databases that can be created in the organization"
                    },
                    "database_count": {
                      "type": "number",
                      "description": "The number of databases in the organization"
                    },
                    "sleeping_database_count": {
                      "type": "number",
                      "description": "The number of sleeping databases in the organization"
                    },
                    "sso_portal_url": {
                      "type": "string",
                      "description": "The URL of the organization's SSO portal"
                    },
                    "flags": {
                      "type": "object",
                      "properties": {
                        "example_flag": {
                          "type": "string",
                          "enum": [
                            "full",
                            "on"
                          ]
                        }
                      },
                      "additionalProperties": false
                    },
                    "features": {
                      "type": "object",
                      "properties": {
                        "insights": {
                          "type": "boolean"
                        },
                        "sso": {
                          "type": "boolean"
                        },
                        "single_tenancy": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    },
                    "idp_managed_roles": {
                      "type": "boolean",
                      "description": "Whether or not the IdP provider is be responsible for managing roles in PlanetScale"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "name",
                    "created_at",
                    "updated_at",
                    "plan",
                    "valid_billing_info",
                    "sso",
                    "sso_directory",
                    "single_tenancy",
                    "has_past_due_invoices",
                    "can_create_databases",
                    "free_databases_remaining",
                    "database_count",
                    "sleeping_database_count",
                    "idp_managed_roles"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_organization`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| User | `read_organizations` |\n| Organization | `read_organization` |"
      },
      "patch": {
        "tags": [
          "Organizations"
        ],
        "operationId": "update-an-organization",
        "summary": "Update an organization",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the organization",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "billing_email": {
                    "type": "string",
                    "description": "The billing email for the organization"
                  },
                  "idp_managed_roles": {
                    "type": "boolean",
                    "description": "Whether or not the IdP provider is be responsible for managing roles in PlanetScale"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated organization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID for the organization"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the organization"
                    },
                    "billing_email": {
                      "type": "string",
                      "description": "The billing email of the organization"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "When the organization was created"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "When the organization was last updated"
                    },
                    "plan": {
                      "type": "string",
                      "description": "The billing plan of the organization"
                    },
                    "valid_billing_info": {
                      "type": "boolean",
                      "description": "Whether or not the organization's billing information is valid"
                    },
                    "sso": {
                      "type": "boolean",
                      "description": "Whether or not SSO is enabled on the organization"
                    },
                    "sso_directory": {
                      "type": "boolean",
                      "description": "Whether or not the organization uses a WorkOS directory"
                    },
                    "single_tenancy": {
                      "type": "boolean",
                      "description": "Whether or not the organization has single tenancy enabled"
                    },
                    "has_past_due_invoices": {
                      "type": "boolean",
                      "description": "Whether or not the organization has past due billing invoices"
                    },
                    "can_create_databases": {
                      "type": "boolean",
                      "description": "Whether or not more databases can be created in the organization"
                    },
                    "free_databases_remaining": {
                      "type": "number",
                      "description": "The number of remaining free databases that can be created in the organization"
                    },
                    "database_count": {
                      "type": "number",
                      "description": "The number of databases in the organization"
                    },
                    "sleeping_database_count": {
                      "type": "number",
                      "description": "The number of sleeping databases in the organization"
                    },
                    "sso_portal_url": {
                      "type": "string",
                      "description": "The URL of the organization's SSO portal"
                    },
                    "flags": {
                      "type": "object",
                      "properties": {
                        "example_flag": {
                          "type": "string",
                          "enum": [
                            "full",
                            "on"
                          ]
                        }
                      },
                      "additionalProperties": false
                    },
                    "features": {
                      "type": "object",
                      "properties": {
                        "insights": {
                          "type": "boolean"
                        },
                        "sso": {
                          "type": "boolean"
                        },
                        "single_tenancy": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    },
                    "idp_managed_roles": {
                      "type": "boolean",
                      "description": "Whether or not the IdP provider is be responsible for managing roles in PlanetScale"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "name",
                    "created_at",
                    "updated_at",
                    "plan",
                    "valid_billing_info",
                    "sso",
                    "sso_directory",
                    "single_tenancy",
                    "has_past_due_invoices",
                    "can_create_databases",
                    "free_databases_remaining",
                    "database_count",
                    "sleeping_database_count",
                    "idp_managed_roles"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "\n### Authorization\nA   OAuth token must have at least one of the following   scopes in order to use this API endpoint:\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `write_organization` |"
      }
    },
    "/organizations/{name}/regions": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "operationId": "list-regions-for-an-organization",
        "summary": "List regions for an organization",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the organization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "If provided, specifies the page offset of returned results",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "If provided, specifies the number of returned results",
            "schema": {
              "type": "number",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the organization's regions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The ID of the region"
                          },
                          "provider": {
                            "type": "string",
                            "description": "Provider for the region (ex. AWS)"
                          },
                          "enabled": {
                            "type": "boolean",
                            "description": "Whether or not the region is currently active"
                          },
                          "public_ip_addresses": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Public IP addresses for the region"
                          },
                          "display_name": {
                            "type": "string",
                            "description": "Name of the region"
                          },
                          "location": {
                            "type": "string",
                            "description": "Location of the region"
                          },
                          "slug": {
                            "type": "string",
                            "description": "The slug of the region"
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "id",
                          "provider",
                          "enabled",
                          "public_ip_addresses",
                          "display_name",
                          "location",
                          "slug"
                        ]
                      }
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_organization`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| User | `read_organizations` |\n| Organization | `read_organization` |"
      }
    },
    "/organizations/{organization}/databases": {
      "get": {
        "tags": [
          "Databases"
        ],
        "operationId": "list-databases",
        "summary": "List databases",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the database belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "If provided, specifies the page offset of returned results",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "If provided, specifies the number of returned results",
            "schema": {
              "type": "number",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieves the databases for an organization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The ID of the database"
                          },
                          "url": {
                            "type": "string",
                            "description": "The URL to the database API endpoint"
                          },
                          "branches_url": {
                            "type": "string",
                            "description": "The URL to retrieve this database's branches via the API"
                          },
                          "branches_count": {
                            "type": "number",
                            "description": "The total number of database branches"
                          },
                          "development_branches_count": {
                            "type": "number",
                            "description": "The total number of database development branches"
                          },
                          "production_branches_count": {
                            "type": "number",
                            "description": "The total number of database production branches"
                          },
                          "issues_count": {
                            "type": "number",
                            "description": "The total number of ongoing issues within a database"
                          },
                          "multiple_admins_required_for_deletion": {
                            "type": "boolean",
                            "description": "If the database requires multiple admins for deletion"
                          },
                          "ready": {
                            "type": "boolean",
                            "description": "If the database is ready to be used"
                          },
                          "at_development_branch_limit": {
                            "type": "boolean",
                            "description": "If the database has reached its development branch limit"
                          },
                          "at_backup_restore_branches_limit": {
                            "type": "boolean",
                            "description": "If the database has reached its backup restored branch limit"
                          },
                          "data_import": {
                            "type": "object",
                            "properties": {
                              "state": {
                                "type": "string"
                              },
                              "import_check_errors": {
                                "type": "string"
                              },
                              "started_at": {
                                "type": "string"
                              },
                              "finished_at": {
                                "type": "string"
                              },
                              "data_source": {
                                "type": "object",
                                "properties": {
                                  "hostname": {
                                    "type": "string"
                                  },
                                  "port": {
                                    "type": "string"
                                  },
                                  "database": {
                                    "type": "string"
                                  }
                                },
                                "additionalProperties": false,
                                "required": [
                                  "hostname",
                                  "port",
                                  "database"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "required": [
                              "state",
                              "import_check_errors",
                              "started_at",
                              "finished_at",
                              "data_source"
                            ]
                          },
                          "region": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The ID of the region"
                              },
                              "provider": {
                                "type": "string",
                                "description": "Provider for the region (ex. AWS)"
                              },
                              "enabled": {
                                "type": "boolean",
                                "description": "Whether or not the region is currently active"
                              },
                              "public_ip_addresses": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "description": "Public IP addresses for the region"
                              },
                              "display_name": {
                                "type": "string",
                                "description": "Name of the region"
                              },
                              "location": {
                                "type": "string",
                                "description": "Location of the region"
                              },
                              "slug": {
                                "type": "string",
                                "description": "The slug of the region"
                              }
                            },
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "provider",
                              "enabled",
                              "public_ip_addresses",
                              "display_name",
                              "location",
                              "slug"
                            ]
                          },
                          "html_url": {
                            "type": "string",
                            "description": "The URL to see this database's branches in the web UI"
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the database"
                          },
                          "state": {
                            "type": "string",
                            "description": "State of the database"
                          },
                          "sharded": {
                            "type": "boolean",
                            "description": "If the database is sharded"
                          },
                          "default_branch_shard_count": {
                            "type": "number",
                            "description": "Number of shards in the default branch"
                          },
                          "default_branch_read_only_regions_count": {
                            "type": "number",
                            "description": "Number of read only regions in the default branch"
                          },
                          "default_branch_table_count": {
                            "type": "number",
                            "description": "Number of tables in the default branch schema"
                          },
                          "default_branch": {
                            "type": "string",
                            "description": "The default branch for the database"
                          },
                          "require_approval_for_deploy": {
                            "type": "boolean",
                            "description": "Whether an approval is required to deploy schema changes to this database"
                          },
                          "allow_data_branching": {
                            "type": "boolean",
                            "description": "Whether seeding branches with data is enabled for all branches"
                          },
                          "automatic_migrations": {
                            "type": "boolean",
                            "description": "Whether to automatically manage Rails migrations during deploy requests"
                          },
                          "restrict_branch_region": {
                            "type": "boolean",
                            "description": "Whether to restrict branch creation to one region"
                          },
                          "insights_raw_queries": {
                            "type": "boolean",
                            "description": "Whether raw SQL queries are collected"
                          },
                          "plan": {
                            "type": "string",
                            "description": "The database plan"
                          },
                          "production_branch_web_console": {
                            "type": "boolean",
                            "description": "Whether web console is enabled for production branches"
                          },
                          "migration_table_name": {
                            "type": "string",
                            "description": "Table name to use for copying schema migration data"
                          },
                          "migration_framework": {
                            "type": "string",
                            "description": "Framework used for applying migrations"
                          },
                          "created_at": {
                            "type": "string"
                          },
                          "updated_at": {
                            "type": "string"
                          },
                          "schema_last_updated_at": {
                            "type": "string",
                            "description": "When the default branch schema was last changed."
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "id",
                          "url",
                          "branches_url",
                          "branches_count",
                          "development_branches_count",
                          "production_branches_count",
                          "issues_count",
                          "multiple_admins_required_for_deletion",
                          "ready",
                          "at_development_branch_limit",
                          "at_backup_restore_branches_limit",
                          "region",
                          "html_url",
                          "name",
                          "state",
                          "sharded",
                          "default_branch_shard_count",
                          "default_branch_read_only_regions_count",
                          "default_branch_table_count",
                          "default_branch",
                          "require_approval_for_deploy",
                          "allow_data_branching",
                          "restrict_branch_region",
                          "insights_raw_queries",
                          "plan",
                          "production_branch_web_console",
                          "created_at",
                          "updated_at"
                        ]
                      }
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_database`, `delete_database`, `write_database`, `read_branch`, `delete_branch`, `create_branch`, `delete_production_branch`, `connect_branch`, `connect_production_branch`, `delete_branch_password`, `delete_production_branch_password`, `read_deploy_request`, `create_deploy_request`, `approve_deploy_request`, `read_schema_recommendations`, `close_schema_recommendations`, `read_comment`, `create_comment`, `restore_backup`, `restore_production_branch_backup`, `read_backups`, `write_backups`, `delete_backups`, `delete_production_branch_backups`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_databases` |"
      },
      "post": {
        "tags": [
          "Databases"
        ],
        "operationId": "create-a-database",
        "summary": "Create a database",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the database belongs to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the database"
                  },
                  "region": {
                    "type": "string",
                    "description": "The region the database will be deployed in. If left blank, defaults to the organization's default region."
                  },
                  "plan": {
                    "type": "string",
                    "description": "The database billing plan. Options: 'hobby', 'scaler', or 'scaler_pro'."
                  },
                  "cluster_size": {
                    "type": "string",
                    "description": "The database cluster size. This is required for Scaler Pro databases. Options: PS_10, PS_20, PS_40, PS_80, PS_160, PS_320, PS_400, PS_640, PS_700, PS_900, PS_1280, PS_1400, PS_1800, PS_2100, PS_2560, PS_2700, PS_2800."
                  }
                },
                "additionalProperties": false,
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the created database",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the database"
                    },
                    "url": {
                      "type": "string",
                      "description": "The URL to the database API endpoint"
                    },
                    "branches_url": {
                      "type": "string",
                      "description": "The URL to retrieve this database's branches via the API"
                    },
                    "branches_count": {
                      "type": "number",
                      "description": "The total number of database branches"
                    },
                    "development_branches_count": {
                      "type": "number",
                      "description": "The total number of database development branches"
                    },
                    "production_branches_count": {
                      "type": "number",
                      "description": "The total number of database production branches"
                    },
                    "issues_count": {
                      "type": "number",
                      "description": "The total number of ongoing issues within a database"
                    },
                    "multiple_admins_required_for_deletion": {
                      "type": "boolean",
                      "description": "If the database requires multiple admins for deletion"
                    },
                    "ready": {
                      "type": "boolean",
                      "description": "If the database is ready to be used"
                    },
                    "at_development_branch_limit": {
                      "type": "boolean",
                      "description": "If the database has reached its development branch limit"
                    },
                    "at_backup_restore_branches_limit": {
                      "type": "boolean",
                      "description": "If the database has reached its backup restored branch limit"
                    },
                    "data_import": {
                      "type": "object",
                      "properties": {
                        "state": {
                          "type": "string"
                        },
                        "import_check_errors": {
                          "type": "string"
                        },
                        "started_at": {
                          "type": "string"
                        },
                        "finished_at": {
                          "type": "string"
                        },
                        "data_source": {
                          "type": "object",
                          "properties": {
                            "hostname": {
                              "type": "string"
                            },
                            "port": {
                              "type": "string"
                            },
                            "database": {
                              "type": "string"
                            }
                          },
                          "additionalProperties": false,
                          "required": [
                            "hostname",
                            "port",
                            "database"
                          ]
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "state",
                        "import_check_errors",
                        "started_at",
                        "finished_at",
                        "data_source"
                      ]
                    },
                    "region": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the region"
                        },
                        "provider": {
                          "type": "string",
                          "description": "Provider for the region (ex. AWS)"
                        },
                        "enabled": {
                          "type": "boolean",
                          "description": "Whether or not the region is currently active"
                        },
                        "public_ip_addresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Public IP addresses for the region"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "Name of the region"
                        },
                        "location": {
                          "type": "string",
                          "description": "Location of the region"
                        },
                        "slug": {
                          "type": "string",
                          "description": "The slug of the region"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "provider",
                        "enabled",
                        "public_ip_addresses",
                        "display_name",
                        "location",
                        "slug"
                      ]
                    },
                    "html_url": {
                      "type": "string",
                      "description": "The URL to see this database's branches in the web UI"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the database"
                    },
                    "state": {
                      "type": "string",
                      "description": "State of the database"
                    },
                    "sharded": {
                      "type": "boolean",
                      "description": "If the database is sharded"
                    },
                    "default_branch_shard_count": {
                      "type": "number",
                      "description": "Number of shards in the default branch"
                    },
                    "default_branch_read_only_regions_count": {
                      "type": "number",
                      "description": "Number of read only regions in the default branch"
                    },
                    "default_branch_table_count": {
                      "type": "number",
                      "description": "Number of tables in the default branch schema"
                    },
                    "default_branch": {
                      "type": "string",
                      "description": "The default branch for the database"
                    },
                    "require_approval_for_deploy": {
                      "type": "boolean",
                      "description": "Whether an approval is required to deploy schema changes to this database"
                    },
                    "allow_data_branching": {
                      "type": "boolean",
                      "description": "Whether seeding branches with data is enabled for all branches"
                    },
                    "automatic_migrations": {
                      "type": "boolean",
                      "description": "Whether to automatically manage Rails migrations during deploy requests"
                    },
                    "restrict_branch_region": {
                      "type": "boolean",
                      "description": "Whether to restrict branch creation to one region"
                    },
                    "insights_raw_queries": {
                      "type": "boolean",
                      "description": "Whether raw SQL queries are collected"
                    },
                    "plan": {
                      "type": "string",
                      "description": "The database plan"
                    },
                    "production_branch_web_console": {
                      "type": "boolean",
                      "description": "Whether web console is enabled for production branches"
                    },
                    "migration_table_name": {
                      "type": "string",
                      "description": "Table name to use for copying schema migration data"
                    },
                    "migration_framework": {
                      "type": "string",
                      "description": "Framework used for applying migrations"
                    },
                    "created_at": {
                      "type": "string"
                    },
                    "updated_at": {
                      "type": "string"
                    },
                    "schema_last_updated_at": {
                      "type": "string",
                      "description": "When the default branch schema was last changed."
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "url",
                    "branches_url",
                    "branches_count",
                    "development_branches_count",
                    "production_branches_count",
                    "issues_count",
                    "multiple_admins_required_for_deletion",
                    "ready",
                    "at_development_branch_limit",
                    "at_backup_restore_branches_limit",
                    "region",
                    "html_url",
                    "name",
                    "state",
                    "sharded",
                    "default_branch_shard_count",
                    "default_branch_read_only_regions_count",
                    "default_branch_table_count",
                    "default_branch",
                    "require_approval_for_deploy",
                    "allow_data_branching",
                    "restrict_branch_region",
                    "insights_raw_queries",
                    "plan",
                    "production_branch_web_console",
                    "created_at",
                    "updated_at"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `create_databases`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `create_databases` |"
      }
    },
    "/organizations/{organization}/databases/{database}/branches": {
      "get": {
        "tags": [
          "Database branches"
        ],
        "operationId": "list-branches",
        "summary": "List branches",
        "parameters": [
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the database the branch belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the branch belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "If provided, specifies the page offset of returned results",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "If provided, specifies the number of returned results",
            "schema": {
              "type": "number",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns database branches",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The ID of the branch"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the branch"
                          },
                          "created_at": {
                            "type": "string",
                            "description": "When the branch was created"
                          },
                          "updated_at": {
                            "type": "string",
                            "description": "When the branch was last updated"
                          },
                          "restore_checklist_completed_at": {
                            "type": "string",
                            "description": "When a user last marked a backup restore checklist as completed"
                          },
                          "access_host_url": {
                            "type": "string",
                            "description": "The access host URL for the branch. This is a legacy field, use `mysql_edge_address`"
                          },
                          "schema_last_updated_at": {
                            "type": "string",
                            "description": "When the schema for the branch was last updated"
                          },
                          "mysql_address": {
                            "type": "string",
                            "description": "The MySQL address for the branch"
                          },
                          "mysql_edge_address": {
                            "type": "string",
                            "description": "The address of the MySQL provider for the branch"
                          },
                          "initial_restore_id": {
                            "type": "string",
                            "description": "The ID of the backup from which the branch was restored"
                          },
                          "ready": {
                            "type": "boolean",
                            "description": "Whether or not the branch is ready to serve queries"
                          },
                          "production": {
                            "type": "boolean",
                            "description": "Whether or not the branch is a production branch"
                          },
                          "sharded": {
                            "type": "boolean",
                            "description": "Whether or not the branch is sharded"
                          },
                          "shard_count": {
                            "type": "number",
                            "description": "The number of shards in the branch"
                          },
                          "actor": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The ID of the actor"
                              },
                              "display_name": {
                                "type": "string",
                                "description": "The name of the actor"
                              },
                              "avatar_url": {
                                "type": "string",
                                "description": "The URL of the actor's avatar"
                              }
                            },
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "display_name",
                              "avatar_url"
                            ]
                          },
                          "restored_from_branch": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The ID for the resource"
                              },
                              "name": {
                                "type": "string",
                                "description": "The name for the resource"
                              },
                              "created_at": {
                                "type": "string",
                                "description": "When the resource was created"
                              },
                              "updated_at": {
                                "type": "string",
                                "description": "When the resource was last updated"
                              },
                              "deleted_at": {
                                "type": "string",
                                "description": "When the resource was deleted, if deleted"
                              }
                            },
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "name",
                              "created_at",
                              "updated_at",
                              "deleted_at"
                            ]
                          },
                          "html_url": {
                            "type": "string",
                            "description": "Planetscale app URL for the branch"
                          },
                          "region": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The ID of the region"
                              },
                              "provider": {
                                "type": "string",
                                "description": "Provider for the region (ex. AWS)"
                              },
                              "enabled": {
                                "type": "boolean",
                                "description": "Whether or not the region is currently active"
                              },
                              "public_ip_addresses": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "description": "Public IP addresses for the region"
                              },
                              "display_name": {
                                "type": "string",
                                "description": "Name of the region"
                              },
                              "location": {
                                "type": "string",
                                "description": "Location of the region"
                              },
                              "slug": {
                                "type": "string",
                                "description": "The slug of the region"
                              }
                            },
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "provider",
                              "enabled",
                              "public_ip_addresses",
                              "display_name",
                              "location",
                              "slug"
                            ]
                          },
                          "parent_branch": {
                            "type": "string",
                            "description": "The name of the parent branch from which the branch was created"
                          },
                          "cluster_rate_name": {
                            "type": "string",
                            "description": "The SKU representing the branch's cluster size"
                          },
                          "safe_migrations": {
                            "type": "boolean",
                            "description": "Whether or not the branch has safe migrations enabled"
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "id",
                          "name",
                          "created_at",
                          "updated_at",
                          "schema_last_updated_at",
                          "mysql_address",
                          "mysql_edge_address",
                          "ready",
                          "production",
                          "sharded",
                          "html_url",
                          "cluster_rate_name",
                          "safe_migrations"
                        ]
                      }
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_branches` |\n| Database | `read_branches` |\n| Branch | `read_branch` |"
      },
      "post": {
        "tags": [
          "Database branches"
        ],
        "operationId": "create-a-branch",
        "summary": "Create a branch",
        "parameters": [
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the database the branch belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the branch belongs to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the branch"
                  },
                  "parent_branch": {
                    "type": "string",
                    "description": "Parent branch"
                  },
                  "backup_id": {
                    "type": "string",
                    "description": "If provided, restores the backup's schema and data to the new branch. Must have `restore_production_branch_backup(s)` or `restore_backup(s)` access to do this."
                  }
                },
                "additionalProperties": false,
                "required": [
                  "name",
                  "parent_branch"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the created branch",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the branch"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the branch"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "When the branch was created"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "When the branch was last updated"
                    },
                    "restore_checklist_completed_at": {
                      "type": "string",
                      "description": "When a user last marked a backup restore checklist as completed"
                    },
                    "access_host_url": {
                      "type": "string",
                      "description": "The access host URL for the branch. This is a legacy field, use `mysql_edge_address`"
                    },
                    "schema_last_updated_at": {
                      "type": "string",
                      "description": "When the schema for the branch was last updated"
                    },
                    "mysql_address": {
                      "type": "string",
                      "description": "The MySQL address for the branch"
                    },
                    "mysql_edge_address": {
                      "type": "string",
                      "description": "The address of the MySQL provider for the branch"
                    },
                    "initial_restore_id": {
                      "type": "string",
                      "description": "The ID of the backup from which the branch was restored"
                    },
                    "ready": {
                      "type": "boolean",
                      "description": "Whether or not the branch is ready to serve queries"
                    },
                    "production": {
                      "type": "boolean",
                      "description": "Whether or not the branch is a production branch"
                    },
                    "sharded": {
                      "type": "boolean",
                      "description": "Whether or not the branch is sharded"
                    },
                    "shard_count": {
                      "type": "number",
                      "description": "The number of shards in the branch"
                    },
                    "actor": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "restored_from_branch": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID for the resource"
                        },
                        "name": {
                          "type": "string",
                          "description": "The name for the resource"
                        },
                        "created_at": {
                          "type": "string",
                          "description": "When the resource was created"
                        },
                        "updated_at": {
                          "type": "string",
                          "description": "When the resource was last updated"
                        },
                        "deleted_at": {
                          "type": "string",
                          "description": "When the resource was deleted, if deleted"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "name",
                        "created_at",
                        "updated_at",
                        "deleted_at"
                      ]
                    },
                    "html_url": {
                      "type": "string",
                      "description": "Planetscale app URL for the branch"
                    },
                    "region": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the region"
                        },
                        "provider": {
                          "type": "string",
                          "description": "Provider for the region (ex. AWS)"
                        },
                        "enabled": {
                          "type": "boolean",
                          "description": "Whether or not the region is currently active"
                        },
                        "public_ip_addresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Public IP addresses for the region"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "Name of the region"
                        },
                        "location": {
                          "type": "string",
                          "description": "Location of the region"
                        },
                        "slug": {
                          "type": "string",
                          "description": "The slug of the region"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "provider",
                        "enabled",
                        "public_ip_addresses",
                        "display_name",
                        "location",
                        "slug"
                      ]
                    },
                    "parent_branch": {
                      "type": "string",
                      "description": "The name of the parent branch from which the branch was created"
                    },
                    "cluster_rate_name": {
                      "type": "string",
                      "description": "The SKU representing the branch's cluster size"
                    },
                    "safe_migrations": {
                      "type": "boolean",
                      "description": "Whether or not the branch has safe migrations enabled"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "name",
                    "created_at",
                    "updated_at",
                    "schema_last_updated_at",
                    "mysql_address",
                    "mysql_edge_address",
                    "ready",
                    "production",
                    "sharded",
                    "html_url",
                    "cluster_rate_name",
                    "safe_migrations"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `create_branch`, `restore_production_branch_backup`, `restore_backup`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `write_branches`, `restore_production_branch_backups`, `restore_backups` |\n| Database | `write_branches`, `restore_production_branch_backups`, `restore_backups` |\n| Branch | `restore_backups` |"
      }
    },
    "/organizations/{organization}/databases/{database}/branches/{branch}/backups": {
      "get": {
        "tags": [
          "Backups"
        ],
        "operationId": "list-backups",
        "summary": "List backups",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "description": "The name of the branch",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the database the branch belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the branch belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "If provided, specifies the page offset of returned results",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "If provided, specifies the number of returned results",
            "schema": {
              "type": "number",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns database branch backups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The ID of the backup"
                          },
                          "actor": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The ID of the actor"
                              },
                              "display_name": {
                                "type": "string",
                                "description": "The name of the actor"
                              },
                              "avatar_url": {
                                "type": "string",
                                "description": "The URL of the actor's avatar"
                              }
                            },
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "display_name",
                              "avatar_url"
                            ]
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the backup"
                          },
                          "state": {
                            "type": "string",
                            "enum": [
                              "pending",
                              "running",
                              "success",
                              "failed",
                              "canceled",
                              "ignored"
                            ],
                            "description": "The current state of the backup"
                          },
                          "size": {
                            "type": "number",
                            "description": "The size of the backup"
                          },
                          "estimated_storage_cost": {
                            "type": "number",
                            "description": "The estimated storage cost of the backup"
                          },
                          "created_at": {
                            "type": "string",
                            "description": "When the backup was created"
                          },
                          "updated_at": {
                            "type": "string",
                            "description": "When the backup was last updated"
                          },
                          "required": {
                            "type": "boolean",
                            "description": "Whether or not the backup policy is required"
                          },
                          "restored_branches": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Branches that have been restored with this backup"
                          },
                          "backup_policy": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The ID of the backup policy"
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the backup policy"
                              },
                              "target": {
                                "type": "string",
                                "enum": [
                                  "production",
                                  "development",
                                  "branch"
                                ],
                                "description": "Whether the backup policy is for a production or development database, or for a database branch"
                              },
                              "retention_value": {
                                "type": "number",
                                "description": "A number value for the retention period of the backup policy"
                              },
                              "retention_unit": {
                                "type": "string",
                                "description": "The unit for the retention period of the backup policy"
                              },
                              "frequency_value": {
                                "type": "number",
                                "description": "A number value for the frequency of the backup policy"
                              },
                              "frequency_unit": {
                                "type": "string",
                                "description": "The unit for the frequency of the backup policy"
                              },
                              "schedule_day": {
                                "type": "string",
                                "enum": [
                                  "0..6"
                                ],
                                "description": "Day of the week that the backup is scheduled"
                              },
                              "schedule_week": {
                                "type": "string",
                                "enum": [
                                  "0..3"
                                ],
                                "description": "Week of the month that the backup is scheduled"
                              },
                              "created_at": {
                                "type": "string",
                                "description": "When the backup policy was created"
                              },
                              "updated_at": {
                                "type": "string",
                                "description": "When the backup policy was last updated"
                              },
                              "last_ran_at": {
                                "type": "string",
                                "description": "When the backup was last run"
                              },
                              "next_run_at": {
                                "type": "string",
                                "description": "When the backup will next run"
                              }
                            },
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "name",
                              "target",
                              "retention_value",
                              "retention_unit",
                              "frequency_value",
                              "frequency_unit",
                              "schedule_day",
                              "schedule_week",
                              "created_at",
                              "updated_at",
                              "last_ran_at",
                              "next_run_at"
                            ]
                          },
                          "schema_snapshot": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The ID of the schema snapshot"
                              },
                              "url": {
                                "type": "string",
                                "description": "The URL to the schema snapshot in the PlanetScale app"
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the schema snapshot"
                              },
                              "created_at": {
                                "type": "string",
                                "description": "When the schema snapshot was created"
                              },
                              "updated_at": {
                                "type": "string",
                                "description": "When the schema snapshot was last updated"
                              }
                            },
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "url",
                              "name",
                              "created_at",
                              "updated_at"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "id",
                          "name",
                          "state",
                          "size",
                          "estimated_storage_cost",
                          "created_at",
                          "updated_at",
                          "required",
                          "schema_snapshot"
                        ]
                      }
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_backups`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_backups` |\n| Database | `read_backups` |\n| Branch | `read_backups` |"
      },
      "post": {
        "tags": [
          "Backups"
        ],
        "operationId": "create-a-backup",
        "summary": "Create a backup",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "description": "The name of the branch",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the database the branch belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the branch belongs to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name for the backup"
                  },
                  "retention_unit": {
                    "type": "string",
                    "enum": [
                      "hour",
                      "day",
                      "week",
                      "month",
                      "year"
                    ],
                    "description": "Unit for the retention period of the backup"
                  },
                  "retention_value": {
                    "type": "number",
                    "description": "Value between `1`` and `1000`` for the retention period of the backup (i.e retention_value `6`` and retention_unit `hour` means 6 hours)"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the created database branch backup",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the backup"
                    },
                    "actor": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the backup"
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "running",
                        "success",
                        "failed",
                        "canceled",
                        "ignored"
                      ],
                      "description": "The current state of the backup"
                    },
                    "size": {
                      "type": "number",
                      "description": "The size of the backup"
                    },
                    "estimated_storage_cost": {
                      "type": "number",
                      "description": "The estimated storage cost of the backup"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "When the backup was created"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "When the backup was last updated"
                    },
                    "required": {
                      "type": "boolean",
                      "description": "Whether or not the backup policy is required"
                    },
                    "restored_branches": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Branches that have been restored with this backup"
                    },
                    "backup_policy": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the backup policy"
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the backup policy"
                        },
                        "target": {
                          "type": "string",
                          "enum": [
                            "production",
                            "development",
                            "branch"
                          ],
                          "description": "Whether the backup policy is for a production or development database, or for a database branch"
                        },
                        "retention_value": {
                          "type": "number",
                          "description": "A number value for the retention period of the backup policy"
                        },
                        "retention_unit": {
                          "type": "string",
                          "description": "The unit for the retention period of the backup policy"
                        },
                        "frequency_value": {
                          "type": "number",
                          "description": "A number value for the frequency of the backup policy"
                        },
                        "frequency_unit": {
                          "type": "string",
                          "description": "The unit for the frequency of the backup policy"
                        },
                        "schedule_day": {
                          "type": "string",
                          "enum": [
                            "0..6"
                          ],
                          "description": "Day of the week that the backup is scheduled"
                        },
                        "schedule_week": {
                          "type": "string",
                          "enum": [
                            "0..3"
                          ],
                          "description": "Week of the month that the backup is scheduled"
                        },
                        "created_at": {
                          "type": "string",
                          "description": "When the backup policy was created"
                        },
                        "updated_at": {
                          "type": "string",
                          "description": "When the backup policy was last updated"
                        },
                        "last_ran_at": {
                          "type": "string",
                          "description": "When the backup was last run"
                        },
                        "next_run_at": {
                          "type": "string",
                          "description": "When the backup will next run"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "name",
                        "target",
                        "retention_value",
                        "retention_unit",
                        "frequency_value",
                        "frequency_unit",
                        "schedule_day",
                        "schedule_week",
                        "created_at",
                        "updated_at",
                        "last_ran_at",
                        "next_run_at"
                      ]
                    },
                    "schema_snapshot": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the schema snapshot"
                        },
                        "url": {
                          "type": "string",
                          "description": "The URL to the schema snapshot in the PlanetScale app"
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the schema snapshot"
                        },
                        "created_at": {
                          "type": "string",
                          "description": "When the schema snapshot was created"
                        },
                        "updated_at": {
                          "type": "string",
                          "description": "When the schema snapshot was last updated"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "url",
                        "name",
                        "created_at",
                        "updated_at"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "name",
                    "state",
                    "size",
                    "estimated_storage_cost",
                    "created_at",
                    "updated_at",
                    "required",
                    "schema_snapshot"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `write_backups`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `write_backups` |\n| Database | `write_backups` |\n| Branch | `write_backups` |"
      }
    },
    "/organizations/{organization}/databases/{database}/branches/{branch}/backups/{id}": {
      "get": {
        "tags": [
          "Backups"
        ],
        "operationId": "get-a-backup",
        "summary": "Get a backup",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "description": "The name of the branch",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the database the branch belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the branch belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID for the backup",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a database branch backup",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the backup"
                    },
                    "actor": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the backup"
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "running",
                        "success",
                        "failed",
                        "canceled",
                        "ignored"
                      ],
                      "description": "The current state of the backup"
                    },
                    "size": {
                      "type": "number",
                      "description": "The size of the backup"
                    },
                    "estimated_storage_cost": {
                      "type": "number",
                      "description": "The estimated storage cost of the backup"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "When the backup was created"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "When the backup was last updated"
                    },
                    "required": {
                      "type": "boolean",
                      "description": "Whether or not the backup policy is required"
                    },
                    "restored_branches": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Branches that have been restored with this backup"
                    },
                    "backup_policy": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the backup policy"
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the backup policy"
                        },
                        "target": {
                          "type": "string",
                          "enum": [
                            "production",
                            "development",
                            "branch"
                          ],
                          "description": "Whether the backup policy is for a production or development database, or for a database branch"
                        },
                        "retention_value": {
                          "type": "number",
                          "description": "A number value for the retention period of the backup policy"
                        },
                        "retention_unit": {
                          "type": "string",
                          "description": "The unit for the retention period of the backup policy"
                        },
                        "frequency_value": {
                          "type": "number",
                          "description": "A number value for the frequency of the backup policy"
                        },
                        "frequency_unit": {
                          "type": "string",
                          "description": "The unit for the frequency of the backup policy"
                        },
                        "schedule_day": {
                          "type": "string",
                          "enum": [
                            "0..6"
                          ],
                          "description": "Day of the week that the backup is scheduled"
                        },
                        "schedule_week": {
                          "type": "string",
                          "enum": [
                            "0..3"
                          ],
                          "description": "Week of the month that the backup is scheduled"
                        },
                        "created_at": {
                          "type": "string",
                          "description": "When the backup policy was created"
                        },
                        "updated_at": {
                          "type": "string",
                          "description": "When the backup policy was last updated"
                        },
                        "last_ran_at": {
                          "type": "string",
                          "description": "When the backup was last run"
                        },
                        "next_run_at": {
                          "type": "string",
                          "description": "When the backup will next run"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "name",
                        "target",
                        "retention_value",
                        "retention_unit",
                        "frequency_value",
                        "frequency_unit",
                        "schedule_day",
                        "schedule_week",
                        "created_at",
                        "updated_at",
                        "last_ran_at",
                        "next_run_at"
                      ]
                    },
                    "schema_snapshot": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the schema snapshot"
                        },
                        "url": {
                          "type": "string",
                          "description": "The URL to the schema snapshot in the PlanetScale app"
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the schema snapshot"
                        },
                        "created_at": {
                          "type": "string",
                          "description": "When the schema snapshot was created"
                        },
                        "updated_at": {
                          "type": "string",
                          "description": "When the schema snapshot was last updated"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "url",
                        "name",
                        "created_at",
                        "updated_at"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "name",
                    "state",
                    "size",
                    "estimated_storage_cost",
                    "created_at",
                    "updated_at",
                    "required",
                    "schema_snapshot"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_backups`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_backups` |\n| Database | `read_backups` |\n| Branch | `read_backups` |"
      },
      "delete": {
        "tags": [
          "Backups"
        ],
        "operationId": "delete-a-backup",
        "summary": "Delete a backup",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "description": "The name of the branch",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the database the branch belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the branch belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the backup",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a backup"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `delete_backups`, `delete_production_branch_backups`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `delete_backups`, `delete_production_branch_backups` |\n| Database | `delete_backups`, `delete_production_branch_backups` |\n| Branch | `delete_backups` |"
      }
    },
    "/organizations/{organization}/databases/{database}/branches/{branch}/passwords": {
      "get": {
        "tags": [
          "Database branch passwords"
        ],
        "operationId": "list-passwords",
        "summary": "List passwords",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "description": "The name of the branch the password belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the database the password belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the password belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "read_only_region_id",
            "in": "query",
            "description": "A read-only region of the database branch. If present, the password results will be filtered to only those in the region",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "If provided, specifies the page offset of returned results",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "If provided, specifies the number of returned results",
            "schema": {
              "type": "number",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gets the passwords for the database branch",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The ID for the password"
                          },
                          "name": {
                            "type": "string",
                            "description": "The display name for the password"
                          },
                          "role": {
                            "type": "string",
                            "description": "The role for the password"
                          },
                          "created_at": {
                            "type": "string",
                            "description": "When the password was created"
                          },
                          "deleted_at": {
                            "type": "string",
                            "description": "When the password was deleted"
                          },
                          "expires_at": {
                            "type": "string",
                            "description": "When the password will expire"
                          },
                          "ttl_seconds": {
                            "type": "number",
                            "description": "Time to live (in seconds) for the password. The password will be invalid when TTL has passed"
                          },
                          "access_host_url": {
                            "type": "string",
                            "description": "The host URL for the password"
                          },
                          "actor": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The ID of the actor"
                              },
                              "display_name": {
                                "type": "string",
                                "description": "The name of the actor"
                              },
                              "avatar_url": {
                                "type": "string",
                                "description": "The URL of the actor's avatar"
                              }
                            },
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "display_name",
                              "avatar_url"
                            ]
                          },
                          "region": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The ID of the region"
                              },
                              "provider": {
                                "type": "string",
                                "description": "Provider for the region (ex. AWS)"
                              },
                              "enabled": {
                                "type": "boolean",
                                "description": "Whether or not the region is currently active"
                              },
                              "public_ip_addresses": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "description": "Public IP addresses for the region"
                              },
                              "display_name": {
                                "type": "string",
                                "description": "Name of the region"
                              },
                              "location": {
                                "type": "string",
                                "description": "Location of the region"
                              },
                              "slug": {
                                "type": "string",
                                "description": "The slug of the region"
                              }
                            },
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "provider",
                              "enabled",
                              "public_ip_addresses",
                              "display_name",
                              "location",
                              "slug"
                            ]
                          },
                          "username": {
                            "type": "string",
                            "description": "The username for the password"
                          },
                          "renewable": {
                            "type": "boolean",
                            "description": "Whether or not the password can be renewed"
                          },
                          "database_branch": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name for the database branch"
                              },
                              "id": {
                                "type": "string",
                                "description": "The ID for the database branch"
                              },
                              "production": {
                                "type": "boolean",
                                "description": "Whether or not the database branch is a production database branch"
                              },
                              "access_host_url": {
                                "type": "string",
                                "description": "The host URL for the password"
                              },
                              "mysql_edge_address": {
                                "type": "string",
                                "description": "The address of the MySQL provider for the branch"
                              }
                            },
                            "additionalProperties": false,
                            "required": [
                              "name",
                              "id",
                              "production",
                              "access_host_url",
                              "mysql_edge_address"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "id",
                          "name",
                          "role",
                          "created_at",
                          "ttl_seconds",
                          "access_host_url",
                          "renewable",
                          "database_branch"
                        ]
                      }
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `manage_passwords`, `manage_production_branch_passwords` |\n| Database | `manage_passwords`, `manage_production_branch_passwords` |\n| Branch | `manage_passwords` |"
      },
      "post": {
        "tags": [
          "Database branch passwords"
        ],
        "operationId": "create-a-password",
        "summary": "Create a password",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "description": "The name of the branch the password belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the database the password belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the password belongs to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Optional name of the password"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "reader",
                      "writer",
                      "admin",
                      "readwriter"
                    ],
                    "description": "The database role of the password (i.e. admin)"
                  },
                  "ttl": {
                    "type": "number",
                    "description": "Time to live (in seconds) for the password. The password will be invalid when TTL has passed"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Creates a password",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID for the password"
                    },
                    "name": {
                      "type": "string",
                      "description": "The display name for the password"
                    },
                    "role": {
                      "type": "string",
                      "description": "The role for the password"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "When the password was created"
                    },
                    "deleted_at": {
                      "type": "string",
                      "description": "When the password was deleted"
                    },
                    "expires_at": {
                      "type": "string",
                      "description": "When the password will expire"
                    },
                    "ttl_seconds": {
                      "type": "number",
                      "description": "Time to live (in seconds) for the password. The password will be invalid when TTL has passed"
                    },
                    "access_host_url": {
                      "type": "string",
                      "description": "The host URL for the password"
                    },
                    "actor": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "region": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the region"
                        },
                        "provider": {
                          "type": "string",
                          "description": "Provider for the region (ex. AWS)"
                        },
                        "enabled": {
                          "type": "boolean",
                          "description": "Whether or not the region is currently active"
                        },
                        "public_ip_addresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Public IP addresses for the region"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "Name of the region"
                        },
                        "location": {
                          "type": "string",
                          "description": "Location of the region"
                        },
                        "slug": {
                          "type": "string",
                          "description": "The slug of the region"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "provider",
                        "enabled",
                        "public_ip_addresses",
                        "display_name",
                        "location",
                        "slug"
                      ]
                    },
                    "username": {
                      "type": "string",
                      "description": "The username for the password"
                    },
                    "renewable": {
                      "type": "boolean",
                      "description": "Whether or not the password can be renewed"
                    },
                    "database_branch": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name for the database branch"
                        },
                        "id": {
                          "type": "string",
                          "description": "The ID for the database branch"
                        },
                        "production": {
                          "type": "boolean",
                          "description": "Whether or not the database branch is a production database branch"
                        },
                        "access_host_url": {
                          "type": "string",
                          "description": "The host URL for the password"
                        },
                        "mysql_edge_address": {
                          "type": "string",
                          "description": "The address of the MySQL provider for the branch"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "name",
                        "id",
                        "production",
                        "access_host_url",
                        "mysql_edge_address"
                      ]
                    },
                    "plain_text": {
                      "type": "string",
                      "description": "The plain text password"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "name",
                    "role",
                    "created_at",
                    "ttl_seconds",
                    "access_host_url",
                    "renewable",
                    "database_branch",
                    "plain_text"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Content"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `connect_production_branch`, `create_branch_password`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `manage_passwords`, `manage_production_branch_passwords` |\n| Database | `manage_passwords`, `manage_production_branch_passwords` |\n| Branch | `manage_passwords` |"
      }
    },
    "/organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}": {
      "get": {
        "tags": [
          "Database branch passwords"
        ],
        "operationId": "get-a-password",
        "summary": "Get a password",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the password",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "description": "The name of the branch the password belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the database the password belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the password belongs to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gets the password",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID for the password"
                    },
                    "name": {
                      "type": "string",
                      "description": "The display name for the password"
                    },
                    "role": {
                      "type": "string",
                      "description": "The role for the password"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "When the password was created"
                    },
                    "deleted_at": {
                      "type": "string",
                      "description": "When the password was deleted"
                    },
                    "expires_at": {
                      "type": "string",
                      "description": "When the password will expire"
                    },
                    "ttl_seconds": {
                      "type": "number",
                      "description": "Time to live (in seconds) for the password. The password will be invalid when TTL has passed"
                    },
                    "access_host_url": {
                      "type": "string",
                      "description": "The host URL for the password"
                    },
                    "actor": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "region": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the region"
                        },
                        "provider": {
                          "type": "string",
                          "description": "Provider for the region (ex. AWS)"
                        },
                        "enabled": {
                          "type": "boolean",
                          "description": "Whether or not the region is currently active"
                        },
                        "public_ip_addresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Public IP addresses for the region"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "Name of the region"
                        },
                        "location": {
                          "type": "string",
                          "description": "Location of the region"
                        },
                        "slug": {
                          "type": "string",
                          "description": "The slug of the region"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "provider",
                        "enabled",
                        "public_ip_addresses",
                        "display_name",
                        "location",
                        "slug"
                      ]
                    },
                    "username": {
                      "type": "string",
                      "description": "The username for the password"
                    },
                    "renewable": {
                      "type": "boolean",
                      "description": "Whether or not the password can be renewed"
                    },
                    "database_branch": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name for the database branch"
                        },
                        "id": {
                          "type": "string",
                          "description": "The ID for the database branch"
                        },
                        "production": {
                          "type": "boolean",
                          "description": "Whether or not the database branch is a production database branch"
                        },
                        "access_host_url": {
                          "type": "string",
                          "description": "The host URL for the password"
                        },
                        "mysql_edge_address": {
                          "type": "string",
                          "description": "The address of the MySQL provider for the branch"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "name",
                        "id",
                        "production",
                        "access_host_url",
                        "mysql_edge_address"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "name",
                    "role",
                    "created_at",
                    "ttl_seconds",
                    "access_host_url",
                    "renewable",
                    "database_branch"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `manage_passwords`, `manage_production_branch_passwords` |\n| Database | `manage_passwords`, `manage_production_branch_passwords` |\n| Branch | `manage_passwords` |"
      },
      "patch": {
        "tags": [
          "Database branch passwords"
        ],
        "operationId": "update-a-password",
        "summary": "Update a password",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the password",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "description": "The name of the branch the password belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the database the password belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the password belongs to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name for the password"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updates a password",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID for the password"
                    },
                    "name": {
                      "type": "string",
                      "description": "The display name for the password"
                    },
                    "role": {
                      "type": "string",
                      "description": "The role for the password"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "When the password was created"
                    },
                    "deleted_at": {
                      "type": "string",
                      "description": "When the password was deleted"
                    },
                    "expires_at": {
                      "type": "string",
                      "description": "When the password will expire"
                    },
                    "ttl_seconds": {
                      "type": "number",
                      "description": "Time to live (in seconds) for the password. The password will be invalid when TTL has passed"
                    },
                    "access_host_url": {
                      "type": "string",
                      "description": "The host URL for the password"
                    },
                    "actor": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "region": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the region"
                        },
                        "provider": {
                          "type": "string",
                          "description": "Provider for the region (ex. AWS)"
                        },
                        "enabled": {
                          "type": "boolean",
                          "description": "Whether or not the region is currently active"
                        },
                        "public_ip_addresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Public IP addresses for the region"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "Name of the region"
                        },
                        "location": {
                          "type": "string",
                          "description": "Location of the region"
                        },
                        "slug": {
                          "type": "string",
                          "description": "The slug of the region"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "provider",
                        "enabled",
                        "public_ip_addresses",
                        "display_name",
                        "location",
                        "slug"
                      ]
                    },
                    "username": {
                      "type": "string",
                      "description": "The username for the password"
                    },
                    "renewable": {
                      "type": "boolean",
                      "description": "Whether or not the password can be renewed"
                    },
                    "database_branch": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name for the database branch"
                        },
                        "id": {
                          "type": "string",
                          "description": "The ID for the database branch"
                        },
                        "production": {
                          "type": "boolean",
                          "description": "Whether or not the database branch is a production database branch"
                        },
                        "access_host_url": {
                          "type": "string",
                          "description": "The host URL for the password"
                        },
                        "mysql_edge_address": {
                          "type": "string",
                          "description": "The address of the MySQL provider for the branch"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "name",
                        "id",
                        "production",
                        "access_host_url",
                        "mysql_edge_address"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "name",
                    "role",
                    "created_at",
                    "ttl_seconds",
                    "access_host_url",
                    "renewable",
                    "database_branch"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `connect_production_branch`, `create_branch_password`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `manage_passwords`, `manage_production_branch_passwords` |\n| Database | `manage_passwords`, `manage_production_branch_passwords` |\n| Branch | `manage_passwords` |"
      },
      "delete": {
        "tags": [
          "Database branch passwords"
        ],
        "operationId": "delete-a-password",
        "summary": "Delete a password",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the password",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "description": "The name of the branch the password belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the database the password belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the password belongs to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deletes the password"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `delete_production_branch_password`, `delete_branch_password`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `manage_passwords`, `manage_production_branch_passwords` |\n| Database | `manage_passwords`, `manage_production_branch_passwords` |\n| Branch | `manage_passwords` |"
      }
    },
    "/organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}/renew": {
      "post": {
        "tags": [
          "Database branch passwords"
        ],
        "operationId": "renew-a-password",
        "summary": "Renew a password",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the password",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "description": "The name of the branch the password belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the database the password belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the password belongs to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updates a password",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID for the password"
                    },
                    "name": {
                      "type": "string",
                      "description": "The display name for the password"
                    },
                    "role": {
                      "type": "string",
                      "description": "The role for the password"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "When the password was created"
                    },
                    "deleted_at": {
                      "type": "string",
                      "description": "When the password was deleted"
                    },
                    "expires_at": {
                      "type": "string",
                      "description": "When the password will expire"
                    },
                    "ttl_seconds": {
                      "type": "number",
                      "description": "Time to live (in seconds) for the password. The password will be invalid when TTL has passed"
                    },
                    "access_host_url": {
                      "type": "string",
                      "description": "The host URL for the password"
                    },
                    "actor": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "region": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the region"
                        },
                        "provider": {
                          "type": "string",
                          "description": "Provider for the region (ex. AWS)"
                        },
                        "enabled": {
                          "type": "boolean",
                          "description": "Whether or not the region is currently active"
                        },
                        "public_ip_addresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Public IP addresses for the region"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "Name of the region"
                        },
                        "location": {
                          "type": "string",
                          "description": "Location of the region"
                        },
                        "slug": {
                          "type": "string",
                          "description": "The slug of the region"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "provider",
                        "enabled",
                        "public_ip_addresses",
                        "display_name",
                        "location",
                        "slug"
                      ]
                    },
                    "username": {
                      "type": "string",
                      "description": "The username for the password"
                    },
                    "renewable": {
                      "type": "boolean",
                      "description": "Whether or not the password can be renewed"
                    },
                    "database_branch": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name for the database branch"
                        },
                        "id": {
                          "type": "string",
                          "description": "The ID for the database branch"
                        },
                        "production": {
                          "type": "boolean",
                          "description": "Whether or not the database branch is a production database branch"
                        },
                        "access_host_url": {
                          "type": "string",
                          "description": "The host URL for the password"
                        },
                        "mysql_edge_address": {
                          "type": "string",
                          "description": "The address of the MySQL provider for the branch"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "name",
                        "id",
                        "production",
                        "access_host_url",
                        "mysql_edge_address"
                      ]
                    },
                    "plain_text": {
                      "type": "string",
                      "description": "The plain text password"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "name",
                    "role",
                    "created_at",
                    "ttl_seconds",
                    "access_host_url",
                    "renewable",
                    "database_branch",
                    "plain_text"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `connect_production_branch`, `create_branch_password`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `manage_passwords`, `manage_production_branch_passwords` |\n| Database | `manage_passwords`, `manage_production_branch_passwords` |\n| Branch | `manage_passwords` |"
      }
    },
    "/organizations/{organization}/databases/{database}/branches/{name}": {
      "get": {
        "tags": [
          "Database branches"
        ],
        "operationId": "get-a-branch",
        "summary": "Get a branch",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the branch",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the database the branch belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the branch belongs to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns information about a branch",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the branch"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the branch"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "When the branch was created"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "When the branch was last updated"
                    },
                    "restore_checklist_completed_at": {
                      "type": "string",
                      "description": "When a user last marked a backup restore checklist as completed"
                    },
                    "access_host_url": {
                      "type": "string",
                      "description": "The access host URL for the branch. This is a legacy field, use `mysql_edge_address`"
                    },
                    "schema_last_updated_at": {
                      "type": "string",
                      "description": "When the schema for the branch was last updated"
                    },
                    "mysql_address": {
                      "type": "string",
                      "description": "The MySQL address for the branch"
                    },
                    "mysql_edge_address": {
                      "type": "string",
                      "description": "The address of the MySQL provider for the branch"
                    },
                    "initial_restore_id": {
                      "type": "string",
                      "description": "The ID of the backup from which the branch was restored"
                    },
                    "ready": {
                      "type": "boolean",
                      "description": "Whether or not the branch is ready to serve queries"
                    },
                    "production": {
                      "type": "boolean",
                      "description": "Whether or not the branch is a production branch"
                    },
                    "sharded": {
                      "type": "boolean",
                      "description": "Whether or not the branch is sharded"
                    },
                    "shard_count": {
                      "type": "number",
                      "description": "The number of shards in the branch"
                    },
                    "actor": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "restored_from_branch": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID for the resource"
                        },
                        "name": {
                          "type": "string",
                          "description": "The name for the resource"
                        },
                        "created_at": {
                          "type": "string",
                          "description": "When the resource was created"
                        },
                        "updated_at": {
                          "type": "string",
                          "description": "When the resource was last updated"
                        },
                        "deleted_at": {
                          "type": "string",
                          "description": "When the resource was deleted, if deleted"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "name",
                        "created_at",
                        "updated_at",
                        "deleted_at"
                      ]
                    },
                    "html_url": {
                      "type": "string",
                      "description": "Planetscale app URL for the branch"
                    },
                    "region": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the region"
                        },
                        "provider": {
                          "type": "string",
                          "description": "Provider for the region (ex. AWS)"
                        },
                        "enabled": {
                          "type": "boolean",
                          "description": "Whether or not the region is currently active"
                        },
                        "public_ip_addresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Public IP addresses for the region"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "Name of the region"
                        },
                        "location": {
                          "type": "string",
                          "description": "Location of the region"
                        },
                        "slug": {
                          "type": "string",
                          "description": "The slug of the region"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "provider",
                        "enabled",
                        "public_ip_addresses",
                        "display_name",
                        "location",
                        "slug"
                      ]
                    },
                    "parent_branch": {
                      "type": "string",
                      "description": "The name of the parent branch from which the branch was created"
                    },
                    "cluster_rate_name": {
                      "type": "string",
                      "description": "The SKU representing the branch's cluster size"
                    },
                    "safe_migrations": {
                      "type": "boolean",
                      "description": "Whether or not the branch has safe migrations enabled"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "name",
                    "created_at",
                    "updated_at",
                    "schema_last_updated_at",
                    "mysql_address",
                    "mysql_edge_address",
                    "ready",
                    "production",
                    "sharded",
                    "html_url",
                    "cluster_rate_name",
                    "safe_migrations"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_branches` |\n| Database | `read_branches` |\n| Branch | `read_branch` |"
      },
      "delete": {
        "tags": [
          "Database branches"
        ],
        "operationId": "delete-a-branch",
        "summary": "Delete a branch",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the branch",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the database the branch belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the branch belongs to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a branch"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `delete_branch`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `delete_branches`, `delete_production_branches` |\n| Database | `delete_branches`, `delete_production_branches` |\n| Branch | `delete_branch` |"
      }
    },
    "/organizations/{organization}/databases/{database}/branches/{name}/demote": {
      "post": {
        "tags": [
          "Database branches"
        ],
        "operationId": "demote-a-branch",
        "summary": "Demote a branch",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the branch",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the database the branch belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the branch belongs to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a development branch",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the branch"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the branch"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "When the branch was created"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "When the branch was last updated"
                    },
                    "restore_checklist_completed_at": {
                      "type": "string",
                      "description": "When a user last marked a backup restore checklist as completed"
                    },
                    "access_host_url": {
                      "type": "string",
                      "description": "The access host URL for the branch. This is a legacy field, use `mysql_edge_address`"
                    },
                    "schema_last_updated_at": {
                      "type": "string",
                      "description": "When the schema for the branch was last updated"
                    },
                    "mysql_address": {
                      "type": "string",
                      "description": "The MySQL address for the branch"
                    },
                    "mysql_edge_address": {
                      "type": "string",
                      "description": "The address of the MySQL provider for the branch"
                    },
                    "initial_restore_id": {
                      "type": "string",
                      "description": "The ID of the backup from which the branch was restored"
                    },
                    "ready": {
                      "type": "boolean",
                      "description": "Whether or not the branch is ready to serve queries"
                    },
                    "production": {
                      "type": "boolean",
                      "description": "Whether or not the branch is a production branch"
                    },
                    "sharded": {
                      "type": "boolean",
                      "description": "Whether or not the branch is sharded"
                    },
                    "shard_count": {
                      "type": "number",
                      "description": "The number of shards in the branch"
                    },
                    "actor": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "restored_from_branch": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID for the resource"
                        },
                        "name": {
                          "type": "string",
                          "description": "The name for the resource"
                        },
                        "created_at": {
                          "type": "string",
                          "description": "When the resource was created"
                        },
                        "updated_at": {
                          "type": "string",
                          "description": "When the resource was last updated"
                        },
                        "deleted_at": {
                          "type": "string",
                          "description": "When the resource was deleted, if deleted"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "name",
                        "created_at",
                        "updated_at",
                        "deleted_at"
                      ]
                    },
                    "html_url": {
                      "type": "string",
                      "description": "Planetscale app URL for the branch"
                    },
                    "region": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the region"
                        },
                        "provider": {
                          "type": "string",
                          "description": "Provider for the region (ex. AWS)"
                        },
                        "enabled": {
                          "type": "boolean",
                          "description": "Whether or not the region is currently active"
                        },
                        "public_ip_addresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Public IP addresses for the region"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "Name of the region"
                        },
                        "location": {
                          "type": "string",
                          "description": "Location of the region"
                        },
                        "slug": {
                          "type": "string",
                          "description": "The slug of the region"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "provider",
                        "enabled",
                        "public_ip_addresses",
                        "display_name",
                        "location",
                        "slug"
                      ]
                    },
                    "parent_branch": {
                      "type": "string",
                      "description": "The name of the parent branch from which the branch was created"
                    },
                    "cluster_rate_name": {
                      "type": "string",
                      "description": "The SKU representing the branch's cluster size"
                    },
                    "safe_migrations": {
                      "type": "boolean",
                      "description": "Whether or not the branch has safe migrations enabled"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "name",
                    "created_at",
                    "updated_at",
                    "schema_last_updated_at",
                    "mysql_address",
                    "mysql_edge_address",
                    "ready",
                    "production",
                    "sharded",
                    "html_url",
                    "cluster_rate_name",
                    "safe_migrations"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Demotes a branch from production to development\n### Authorization\nA   OAuth token must have at least one of the following   scopes in order to use this API endpoint:\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `demote_branches` |\n| Database | `demote_branches` |"
      }
    },
    "/organizations/{organization}/databases/{database}/branches/{name}/promote": {
      "post": {
        "tags": [
          "Database branches"
        ],
        "operationId": "promote-a-branch",
        "summary": "Promote a branch",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the branch",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the database the branch belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the branch belongs to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a production branch",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the branch"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the branch"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "When the branch was created"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "When the branch was last updated"
                    },
                    "restore_checklist_completed_at": {
                      "type": "string",
                      "description": "When a user last marked a backup restore checklist as completed"
                    },
                    "access_host_url": {
                      "type": "string",
                      "description": "The access host URL for the branch. This is a legacy field, use `mysql_edge_address`"
                    },
                    "schema_last_updated_at": {
                      "type": "string",
                      "description": "When the schema for the branch was last updated"
                    },
                    "mysql_address": {
                      "type": "string",
                      "description": "The MySQL address for the branch"
                    },
                    "mysql_edge_address": {
                      "type": "string",
                      "description": "The address of the MySQL provider for the branch"
                    },
                    "initial_restore_id": {
                      "type": "string",
                      "description": "The ID of the backup from which the branch was restored"
                    },
                    "ready": {
                      "type": "boolean",
                      "description": "Whether or not the branch is ready to serve queries"
                    },
                    "production": {
                      "type": "boolean",
                      "description": "Whether or not the branch is a production branch"
                    },
                    "sharded": {
                      "type": "boolean",
                      "description": "Whether or not the branch is sharded"
                    },
                    "shard_count": {
                      "type": "number",
                      "description": "The number of shards in the branch"
                    },
                    "actor": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "restored_from_branch": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID for the resource"
                        },
                        "name": {
                          "type": "string",
                          "description": "The name for the resource"
                        },
                        "created_at": {
                          "type": "string",
                          "description": "When the resource was created"
                        },
                        "updated_at": {
                          "type": "string",
                          "description": "When the resource was last updated"
                        },
                        "deleted_at": {
                          "type": "string",
                          "description": "When the resource was deleted, if deleted"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "name",
                        "created_at",
                        "updated_at",
                        "deleted_at"
                      ]
                    },
                    "html_url": {
                      "type": "string",
                      "description": "Planetscale app URL for the branch"
                    },
                    "region": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the region"
                        },
                        "provider": {
                          "type": "string",
                          "description": "Provider for the region (ex. AWS)"
                        },
                        "enabled": {
                          "type": "boolean",
                          "description": "Whether or not the region is currently active"
                        },
                        "public_ip_addresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Public IP addresses for the region"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "Name of the region"
                        },
                        "location": {
                          "type": "string",
                          "description": "Location of the region"
                        },
                        "slug": {
                          "type": "string",
                          "description": "The slug of the region"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "provider",
                        "enabled",
                        "public_ip_addresses",
                        "display_name",
                        "location",
                        "slug"
                      ]
                    },
                    "parent_branch": {
                      "type": "string",
                      "description": "The name of the parent branch from which the branch was created"
                    },
                    "cluster_rate_name": {
                      "type": "string",
                      "description": "The SKU representing the branch's cluster size"
                    },
                    "safe_migrations": {
                      "type": "boolean",
                      "description": "Whether or not the branch has safe migrations enabled"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "name",
                    "created_at",
                    "updated_at",
                    "schema_last_updated_at",
                    "mysql_address",
                    "mysql_edge_address",
                    "ready",
                    "production",
                    "sharded",
                    "html_url",
                    "cluster_rate_name",
                    "safe_migrations"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Promotes a branch from development to production\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `connect_production_branch`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `promote_branches` |\n| Database | `promote_branches` |"
      }
    },
    "/organizations/{organization}/databases/{database}/branches/{name}/safe-migrations": {
      "post": {
        "tags": [
          "Database branches"
        ],
        "operationId": "enable-safe-migrations-for-a-branch",
        "summary": "Enable safe migrations for a branch",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the branch",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the database the branch belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the branch belongs to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the branch with safe migrations enabled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the branch"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the branch"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "When the branch was created"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "When the branch was last updated"
                    },
                    "restore_checklist_completed_at": {
                      "type": "string",
                      "description": "When a user last marked a backup restore checklist as completed"
                    },
                    "access_host_url": {
                      "type": "string",
                      "description": "The access host URL for the branch. This is a legacy field, use `mysql_edge_address`"
                    },
                    "schema_last_updated_at": {
                      "type": "string",
                      "description": "When the schema for the branch was last updated"
                    },
                    "mysql_address": {
                      "type": "string",
                      "description": "The MySQL address for the branch"
                    },
                    "mysql_edge_address": {
                      "type": "string",
                      "description": "The address of the MySQL provider for the branch"
                    },
                    "initial_restore_id": {
                      "type": "string",
                      "description": "The ID of the backup from which the branch was restored"
                    },
                    "ready": {
                      "type": "boolean",
                      "description": "Whether or not the branch is ready to serve queries"
                    },
                    "production": {
                      "type": "boolean",
                      "description": "Whether or not the branch is a production branch"
                    },
                    "sharded": {
                      "type": "boolean",
                      "description": "Whether or not the branch is sharded"
                    },
                    "shard_count": {
                      "type": "number",
                      "description": "The number of shards in the branch"
                    },
                    "actor": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "restored_from_branch": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID for the resource"
                        },
                        "name": {
                          "type": "string",
                          "description": "The name for the resource"
                        },
                        "created_at": {
                          "type": "string",
                          "description": "When the resource was created"
                        },
                        "updated_at": {
                          "type": "string",
                          "description": "When the resource was last updated"
                        },
                        "deleted_at": {
                          "type": "string",
                          "description": "When the resource was deleted, if deleted"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "name",
                        "created_at",
                        "updated_at",
                        "deleted_at"
                      ]
                    },
                    "html_url": {
                      "type": "string",
                      "description": "Planetscale app URL for the branch"
                    },
                    "region": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the region"
                        },
                        "provider": {
                          "type": "string",
                          "description": "Provider for the region (ex. AWS)"
                        },
                        "enabled": {
                          "type": "boolean",
                          "description": "Whether or not the region is currently active"
                        },
                        "public_ip_addresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Public IP addresses for the region"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "Name of the region"
                        },
                        "location": {
                          "type": "string",
                          "description": "Location of the region"
                        },
                        "slug": {
                          "type": "string",
                          "description": "The slug of the region"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "provider",
                        "enabled",
                        "public_ip_addresses",
                        "display_name",
                        "location",
                        "slug"
                      ]
                    },
                    "parent_branch": {
                      "type": "string",
                      "description": "The name of the parent branch from which the branch was created"
                    },
                    "cluster_rate_name": {
                      "type": "string",
                      "description": "The SKU representing the branch's cluster size"
                    },
                    "safe_migrations": {
                      "type": "boolean",
                      "description": "Whether or not the branch has safe migrations enabled"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "name",
                    "created_at",
                    "updated_at",
                    "schema_last_updated_at",
                    "mysql_address",
                    "mysql_edge_address",
                    "ready",
                    "production",
                    "sharded",
                    "html_url",
                    "cluster_rate_name",
                    "safe_migrations"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "\n"
      },
      "delete": {
        "tags": [
          "Database branches"
        ],
        "operationId": "disable-safe-migrations-for-a-branch",
        "summary": "Disable safe migrations for a branch",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the branch",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the database the branch belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the branch belongs to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the branch with safe migrations disabled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the branch"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the branch"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "When the branch was created"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "When the branch was last updated"
                    },
                    "restore_checklist_completed_at": {
                      "type": "string",
                      "description": "When a user last marked a backup restore checklist as completed"
                    },
                    "access_host_url": {
                      "type": "string",
                      "description": "The access host URL for the branch. This is a legacy field, use `mysql_edge_address`"
                    },
                    "schema_last_updated_at": {
                      "type": "string",
                      "description": "When the schema for the branch was last updated"
                    },
                    "mysql_address": {
                      "type": "string",
                      "description": "The MySQL address for the branch"
                    },
                    "mysql_edge_address": {
                      "type": "string",
                      "description": "The address of the MySQL provider for the branch"
                    },
                    "initial_restore_id": {
                      "type": "string",
                      "description": "The ID of the backup from which the branch was restored"
                    },
                    "ready": {
                      "type": "boolean",
                      "description": "Whether or not the branch is ready to serve queries"
                    },
                    "production": {
                      "type": "boolean",
                      "description": "Whether or not the branch is a production branch"
                    },
                    "sharded": {
                      "type": "boolean",
                      "description": "Whether or not the branch is sharded"
                    },
                    "shard_count": {
                      "type": "number",
                      "description": "The number of shards in the branch"
                    },
                    "actor": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "restored_from_branch": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID for the resource"
                        },
                        "name": {
                          "type": "string",
                          "description": "The name for the resource"
                        },
                        "created_at": {
                          "type": "string",
                          "description": "When the resource was created"
                        },
                        "updated_at": {
                          "type": "string",
                          "description": "When the resource was last updated"
                        },
                        "deleted_at": {
                          "type": "string",
                          "description": "When the resource was deleted, if deleted"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "name",
                        "created_at",
                        "updated_at",
                        "deleted_at"
                      ]
                    },
                    "html_url": {
                      "type": "string",
                      "description": "Planetscale app URL for the branch"
                    },
                    "region": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the region"
                        },
                        "provider": {
                          "type": "string",
                          "description": "Provider for the region (ex. AWS)"
                        },
                        "enabled": {
                          "type": "boolean",
                          "description": "Whether or not the region is currently active"
                        },
                        "public_ip_addresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Public IP addresses for the region"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "Name of the region"
                        },
                        "location": {
                          "type": "string",
                          "description": "Location of the region"
                        },
                        "slug": {
                          "type": "string",
                          "description": "The slug of the region"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "provider",
                        "enabled",
                        "public_ip_addresses",
                        "display_name",
                        "location",
                        "slug"
                      ]
                    },
                    "parent_branch": {
                      "type": "string",
                      "description": "The name of the parent branch from which the branch was created"
                    },
                    "cluster_rate_name": {
                      "type": "string",
                      "description": "The SKU representing the branch's cluster size"
                    },
                    "safe_migrations": {
                      "type": "boolean",
                      "description": "Whether or not the branch has safe migrations enabled"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "name",
                    "created_at",
                    "updated_at",
                    "schema_last_updated_at",
                    "mysql_address",
                    "mysql_edge_address",
                    "ready",
                    "production",
                    "sharded",
                    "html_url",
                    "cluster_rate_name",
                    "safe_migrations"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "\n"
      }
    },
    "/organizations/{organization}/databases/{database}/branches/{name}/schema": {
      "get": {
        "tags": [
          "Database branches"
        ],
        "operationId": "get-a-branch-schema",
        "summary": "Get a branch schema",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the branch",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the database the branch belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the branch belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "keyspace",
            "in": "query",
            "description": "If provided, the schema for this keyspace is returned",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gets the schema for the branch",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the table"
                          },
                          "html": {
                            "type": "string",
                            "description": "Syntax highlighted HTML for the table's schema"
                          },
                          "raw": {
                            "type": "string",
                            "description": "The table's schema"
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "name",
                          "html",
                          "raw"
                        ]
                      }
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_branches` |\n| Database | `read_branches` |\n| Branch | `read_branch` |"
      }
    },
    "/organizations/{organization}/databases/{database}/branches/{name}/schema/lint": {
      "get": {
        "tags": [
          "Database branches"
        ],
        "operationId": "lint-a-branch-schema",
        "summary": "Lint a branch schema",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the branch",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the database the branch belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the branch belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "If provided, specifies the page offset of returned results",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "If provided, specifies the number of returned results",
            "schema": {
              "type": "number",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of schema errors for a branch",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "lint_error": {
                            "type": "string",
                            "description": "Code representing"
                          },
                          "subject_type": {
                            "type": "string",
                            "enum": [
                              "table",
                              "vschema",
                              "routing_rules"
                            ],
                            "description": "The subject for the errors"
                          },
                          "keyspace_name": {
                            "type": "string",
                            "description": "The keyspace of the schema with the error"
                          },
                          "table_name": {
                            "type": "string",
                            "description": "The table with the error"
                          },
                          "error_description": {
                            "type": "string",
                            "description": "A description for the error that occurred"
                          },
                          "docs_url": {
                            "type": "string",
                            "description": "A link to the documentation related to the error"
                          },
                          "column_name": {
                            "type": "string",
                            "description": "The column in a table relevant to the error"
                          },
                          "foreign_key_column_names": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "A list of invalid foreign key columns in a table"
                          },
                          "auto_increment_column_names": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "A list of invalid auto-incremented columns"
                          },
                          "charset_name": {
                            "type": "string",
                            "description": "The charset of the schema"
                          },
                          "engine_name": {
                            "type": "string",
                            "description": "The engine of the schema"
                          },
                          "vindex_name": {
                            "type": "string",
                            "description": "The name of the vindex for the schema"
                          },
                          "json_path": {
                            "type": "string",
                            "description": "The path for an invalid JSON column"
                          },
                          "check_constraint_name": {
                            "type": "string",
                            "description": "The name of the invalid check constraint"
                          },
                          "enum_value": {
                            "type": "string",
                            "description": "The name of the invalid enum value"
                          },
                          "partitioning_type": {
                            "type": "string",
                            "description": "The name of the invalid partitioning type"
                          },
                          "partition_name": {
                            "type": "string",
                            "description": "The name of the invalid partition in the schema"
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "lint_error",
                          "subject_type",
                          "keyspace_name",
                          "table_name",
                          "error_description",
                          "docs_url",
                          "column_name",
                          "foreign_key_column_names",
                          "auto_increment_column_names",
                          "charset_name",
                          "engine_name",
                          "vindex_name",
                          "json_path",
                          "check_constraint_name",
                          "enum_value",
                          "partitioning_type",
                          "partition_name"
                        ]
                      }
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_branches` |\n| Database | `read_branches` |\n| Branch | `read_branch` |"
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-queue": {
      "get": {
        "tags": [
          "Deploy requests"
        ],
        "operationId": "get-the-deploy-queue",
        "summary": "Get the deploy queue",
        "parameters": [
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the deploy request's database",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the deploy request's organization",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the deploy queue for a database",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The ID for a deployment"
                          },
                          "auto_cutover": {
                            "type": "boolean",
                            "description": "Whether or not to automatically cutover once deployment is finished"
                          },
                          "created_at": {
                            "type": "string",
                            "description": "When the deployment was created"
                          },
                          "cutover_at": {
                            "type": "string",
                            "description": "When the cutover for the deployment was initiated"
                          },
                          "cutover_expiring": {
                            "type": "boolean",
                            "description": "Whether or not the deployment cutover will expire soon and be cancelled"
                          },
                          "deploy_check_errors": {
                            "type": "string",
                            "description": "Deploy check errors for the deployment"
                          },
                          "finished_at": {
                            "type": "string",
                            "description": "When the deployment was finished"
                          },
                          "queued_at": {
                            "type": "string",
                            "description": "When the deployment was queued"
                          },
                          "ready_to_cutover_at": {
                            "type": "string",
                            "description": "When the deployment was ready for cutover"
                          },
                          "started_at": {
                            "type": "string",
                            "description": "When the deployment was started"
                          },
                          "state": {
                            "type": "string",
                            "enum": [
                              "pending",
                              "ready",
                              "no_changes",
                              "queued",
                              "submitting",
                              "in_progress",
                              "pending_cutover",
                              "in_progress_vschema",
                              "in_progress_cancel",
                              "in_progress_cutover",
                              "complete",
                              "complete_cancel",
                              "complete_error",
                              "complete_pending_revert",
                              "in_progress_revert",
                              "complete_revert",
                              "complete_revert_error",
                              "cancelled",
                              "error"
                            ],
                            "description": "The state the deployment is in"
                          },
                          "submitted_at": {
                            "type": "string",
                            "description": "When the deployment was submitted"
                          },
                          "updated_at": {
                            "type": "string",
                            "description": "When the deployment was last updated"
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "id",
                          "auto_cutover",
                          "created_at",
                          "cutover_expiring",
                          "state",
                          "submitted_at",
                          "updated_at"
                        ]
                      }
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ]
                }
              }
            }
          }
        },
        "description": "The deploy queue returns the current list of deploy requests in the order they will be deployed.\n"
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests": {
      "get": {
        "tags": [
          "Deploy requests"
        ],
        "operationId": "list-deploy-requests",
        "summary": "List deploy requests",
        "parameters": [
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the deploy request's database",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the deploy request's organization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "If provided, specifies the page offset of returned results",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "If provided, specifies the number of returned results",
            "schema": {
              "type": "number",
              "default": 25
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Filter by state of the deploy request (open, closed, deployed)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Filter by the name of the branch the deploy request is created from",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "into_branch",
            "in": "query",
            "description": "Filter by the name of the branch the deploy request will be merged into",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of deploy requests for a database",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "number": {
                            "type": "number",
                            "description": "The number of the deploy request"
                          },
                          "id": {
                            "type": "string",
                            "description": "The ID of the deploy request"
                          },
                          "actor": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The ID of the actor"
                              },
                              "display_name": {
                                "type": "string",
                                "description": "The name of the actor"
                              },
                              "avatar_url": {
                                "type": "string",
                                "description": "The URL of the actor's avatar"
                              }
                            },
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "display_name",
                              "avatar_url"
                            ]
                          },
                          "closed_by": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The ID of the actor"
                              },
                              "display_name": {
                                "type": "string",
                                "description": "The name of the actor"
                              },
                              "avatar_url": {
                                "type": "string",
                                "description": "The URL of the actor's avatar"
                              }
                            },
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "display_name",
                              "avatar_url"
                            ]
                          },
                          "branch": {
                            "type": "string",
                            "description": "The name of the branch the deploy request was created from"
                          },
                          "branch_id": {
                            "type": "string",
                            "description": "The id of the branch the deploy request was created from"
                          },
                          "branch_deleted": {
                            "type": "boolean",
                            "description": "Whether or not the deploy request branch was deleted"
                          },
                          "branch_deleted_by": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The ID of the actor"
                              },
                              "display_name": {
                                "type": "string",
                                "description": "The name of the actor"
                              },
                              "avatar_url": {
                                "type": "string",
                                "description": "The URL of the actor's avatar"
                              }
                            },
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "display_name",
                              "avatar_url"
                            ]
                          },
                          "branch_deleted_at": {
                            "type": "string",
                            "description": "When the deploy request branch was deleted"
                          },
                          "into_branch": {
                            "type": "string",
                            "description": "The name of the branch the deploy request will be merged into"
                          },
                          "into_branch_sharded": {
                            "type": "boolean",
                            "description": "Whether or not the branch the deploy request will be merged into is sharded"
                          },
                          "into_branch_shard_count": {
                            "type": "number",
                            "description": "The number of shards the branch the deploy request will be merged into has"
                          },
                          "approved": {
                            "type": "boolean",
                            "description": "Whether or not the deploy request is approved"
                          },
                          "state": {
                            "type": "string",
                            "enum": [
                              "open",
                              "closed"
                            ],
                            "description": "Whether the deploy request is open or closed"
                          },
                          "deployment_state": {
                            "type": "string",
                            "enum": [
                              "pending",
                              "ready",
                              "no_changes",
                              "queued",
                              "submitting",
                              "in_progress",
                              "pending_cutover",
                              "in_progress_vschema",
                              "in_progress_cancel",
                              "in_progress_cutover",
                              "complete",
                              "complete_cancel",
                              "complete_error",
                              "complete_pending_revert",
                              "in_progress_revert",
                              "complete_revert",
                              "complete_revert_error",
                              "cancelled",
                              "error"
                            ],
                            "description": "The deployment state of the deploy request"
                          },
                          "html_url": {
                            "type": "string",
                            "description": "The PlanetScale app address for the deploy request"
                          },
                          "notes": {
                            "type": "string",
                            "description": "Notes on the deploy request"
                          },
                          "html_body": {
                            "type": "string",
                            "description": "The HTML body of the deploy request"
                          },
                          "created_at": {
                            "type": "string",
                            "description": "When the deploy request was created"
                          },
                          "updated_at": {
                            "type": "string",
                            "description": "When the deploy request was last updated"
                          },
                          "closed_at": {
                            "type": "string",
                            "description": "When the deploy request was closed"
                          },
                          "deployed_at": {
                            "type": "string",
                            "description": "When the deploy request was deployed"
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "number",
                          "id",
                          "actor",
                          "closed_by",
                          "branch",
                          "branch_id",
                          "branch_deleted",
                          "branch_deleted_by",
                          "branch_deleted_at",
                          "into_branch",
                          "into_branch_sharded",
                          "into_branch_shard_count",
                          "approved",
                          "state",
                          "deployment_state",
                          "html_url",
                          "notes",
                          "html_body",
                          "created_at",
                          "updated_at",
                          "closed_at",
                          "deployed_at"
                        ]
                      }
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ]
                }
              }
            }
          }
        },
        "description": "List deploy requests for a database\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_deploy_requests` |\n| Database | `read_deploy_requests` |"
      },
      "post": {
        "tags": [
          "Deploy requests"
        ],
        "operationId": "create-a-deploy-request",
        "summary": "Create a deploy request",
        "parameters": [
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the deploy request's database",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the deploy request's organization",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "branch": {
                    "type": "string",
                    "description": "The name of the branch the deploy request is created from"
                  },
                  "into_branch": {
                    "type": "string",
                    "description": "The name of the branch the deploy request will be merged into"
                  },
                  "notes": {
                    "type": "string",
                    "description": "Notes about the deploy request"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the created deploy request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "number": {
                      "type": "number",
                      "description": "The number of the deploy request"
                    },
                    "id": {
                      "type": "string",
                      "description": "The ID of the deploy request"
                    },
                    "actor": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "closed_by": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "branch": {
                      "type": "string",
                      "description": "The name of the branch the deploy request was created from"
                    },
                    "branch_id": {
                      "type": "string",
                      "description": "The id of the branch the deploy request was created from"
                    },
                    "branch_deleted": {
                      "type": "boolean",
                      "description": "Whether or not the deploy request branch was deleted"
                    },
                    "branch_deleted_by": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "branch_deleted_at": {
                      "type": "string",
                      "description": "When the deploy request branch was deleted"
                    },
                    "into_branch": {
                      "type": "string",
                      "description": "The name of the branch the deploy request will be merged into"
                    },
                    "into_branch_sharded": {
                      "type": "boolean",
                      "description": "Whether or not the branch the deploy request will be merged into is sharded"
                    },
                    "into_branch_shard_count": {
                      "type": "number",
                      "description": "The number of shards the branch the deploy request will be merged into has"
                    },
                    "approved": {
                      "type": "boolean",
                      "description": "Whether or not the deploy request is approved"
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "open",
                        "closed"
                      ],
                      "description": "Whether the deploy request is open or closed"
                    },
                    "deployment_state": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "ready",
                        "no_changes",
                        "queued",
                        "submitting",
                        "in_progress",
                        "pending_cutover",
                        "in_progress_vschema",
                        "in_progress_cancel",
                        "in_progress_cutover",
                        "complete",
                        "complete_cancel",
                        "complete_error",
                        "complete_pending_revert",
                        "in_progress_revert",
                        "complete_revert",
                        "complete_revert_error",
                        "cancelled",
                        "error"
                      ],
                      "description": "The deployment state of the deploy request"
                    },
                    "html_url": {
                      "type": "string",
                      "description": "The PlanetScale app address for the deploy request"
                    },
                    "notes": {
                      "type": "string",
                      "description": "Notes on the deploy request"
                    },
                    "html_body": {
                      "type": "string",
                      "description": "The HTML body of the deploy request"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "When the deploy request was created"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "When the deploy request was last updated"
                    },
                    "closed_at": {
                      "type": "string",
                      "description": "When the deploy request was closed"
                    },
                    "deployed_at": {
                      "type": "string",
                      "description": "When the deploy request was deployed"
                    },
                    "deployment": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID for a deployment"
                        },
                        "auto_cutover": {
                          "type": "boolean",
                          "description": "Whether or not to automatically cutover once deployment is finished"
                        },
                        "created_at": {
                          "type": "string",
                          "description": "When the deployment was created"
                        },
                        "cutover_at": {
                          "type": "string",
                          "description": "When the cutover for the deployment was initiated"
                        },
                        "cutover_expiring": {
                          "type": "boolean",
                          "description": "Whether or not the deployment cutover will expire soon and be cancelled"
                        },
                        "deploy_check_errors": {
                          "type": "string",
                          "description": "Deploy check errors for the deployment"
                        },
                        "finished_at": {
                          "type": "string",
                          "description": "When the deployment was finished"
                        },
                        "queued_at": {
                          "type": "string",
                          "description": "When the deployment was queued"
                        },
                        "ready_to_cutover_at": {
                          "type": "string",
                          "description": "When the deployment was ready for cutover"
                        },
                        "started_at": {
                          "type": "string",
                          "description": "When the deployment was started"
                        },
                        "state": {
                          "type": "string",
                          "enum": [
                            "pending",
                            "ready",
                            "no_changes",
                            "queued",
                            "submitting",
                            "in_progress",
                            "pending_cutover",
                            "in_progress_vschema",
                            "in_progress_cancel",
                            "in_progress_cutover",
                            "complete",
                            "complete_cancel",
                            "complete_error",
                            "complete_pending_revert",
                            "in_progress_revert",
                            "complete_revert",
                            "complete_revert_error",
                            "cancelled",
                            "error"
                          ],
                          "description": "The state the deployment is in"
                        },
                        "submitted_at": {
                          "type": "string",
                          "description": "When the deployment was submitted"
                        },
                        "updated_at": {
                          "type": "string",
                          "description": "When the deployment was last updated"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "auto_cutover",
                        "created_at",
                        "cutover_expiring",
                        "state",
                        "submitted_at",
                        "updated_at"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "number",
                    "id",
                    "actor",
                    "closed_by",
                    "branch",
                    "branch_id",
                    "branch_deleted",
                    "branch_deleted_by",
                    "branch_deleted_at",
                    "into_branch",
                    "into_branch_sharded",
                    "into_branch_shard_count",
                    "approved",
                    "state",
                    "deployment_state",
                    "html_url",
                    "notes",
                    "html_body",
                    "created_at",
                    "updated_at",
                    "closed_at",
                    "deployed_at",
                    "deployment"
                  ]
                }
              }
            }
          }
        },
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`, `create_deploy_requests`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `write_deploy_requests` |\n| Database | `write_deploy_requests` |"
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests/{number}": {
      "get": {
        "tags": [
          "Deploy requests"
        ],
        "operationId": "get-a-deploy-request",
        "summary": "Get a deploy request",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "description": "The number of the deploy request",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the deploy request's database",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the deploy request's organization",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns information about a deploy request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "number": {
                      "type": "number",
                      "description": "The number of the deploy request"
                    },
                    "id": {
                      "type": "string",
                      "description": "The ID of the deploy request"
                    },
                    "actor": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "closed_by": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "branch": {
                      "type": "string",
                      "description": "The name of the branch the deploy request was created from"
                    },
                    "branch_id": {
                      "type": "string",
                      "description": "The id of the branch the deploy request was created from"
                    },
                    "branch_deleted": {
                      "type": "boolean",
                      "description": "Whether or not the deploy request branch was deleted"
                    },
                    "branch_deleted_by": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "branch_deleted_at": {
                      "type": "string",
                      "description": "When the deploy request branch was deleted"
                    },
                    "into_branch": {
                      "type": "string",
                      "description": "The name of the branch the deploy request will be merged into"
                    },
                    "into_branch_sharded": {
                      "type": "boolean",
                      "description": "Whether or not the branch the deploy request will be merged into is sharded"
                    },
                    "into_branch_shard_count": {
                      "type": "number",
                      "description": "The number of shards the branch the deploy request will be merged into has"
                    },
                    "approved": {
                      "type": "boolean",
                      "description": "Whether or not the deploy request is approved"
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "open",
                        "closed"
                      ],
                      "description": "Whether the deploy request is open or closed"
                    },
                    "deployment_state": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "ready",
                        "no_changes",
                        "queued",
                        "submitting",
                        "in_progress",
                        "pending_cutover",
                        "in_progress_vschema",
                        "in_progress_cancel",
                        "in_progress_cutover",
                        "complete",
                        "complete_cancel",
                        "complete_error",
                        "complete_pending_revert",
                        "in_progress_revert",
                        "complete_revert",
                        "complete_revert_error",
                        "cancelled",
                        "error"
                      ],
                      "description": "The deployment state of the deploy request"
                    },
                    "html_url": {
                      "type": "string",
                      "description": "The PlanetScale app address for the deploy request"
                    },
                    "notes": {
                      "type": "string",
                      "description": "Notes on the deploy request"
                    },
                    "html_body": {
                      "type": "string",
                      "description": "The HTML body of the deploy request"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "When the deploy request was created"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "When the deploy request was last updated"
                    },
                    "closed_at": {
                      "type": "string",
                      "description": "When the deploy request was closed"
                    },
                    "deployed_at": {
                      "type": "string",
                      "description": "When the deploy request was deployed"
                    },
                    "deployment": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID for a deployment"
                        },
                        "auto_cutover": {
                          "type": "boolean",
                          "description": "Whether or not to automatically cutover once deployment is finished"
                        },
                        "created_at": {
                          "type": "string",
                          "description": "When the deployment was created"
                        },
                        "cutover_at": {
                          "type": "string",
                          "description": "When the cutover for the deployment was initiated"
                        },
                        "cutover_expiring": {
                          "type": "boolean",
                          "description": "Whether or not the deployment cutover will expire soon and be cancelled"
                        },
                        "deploy_check_errors": {
                          "type": "string",
                          "description": "Deploy check errors for the deployment"
                        },
                        "finished_at": {
                          "type": "string",
                          "description": "When the deployment was finished"
                        },
                        "queued_at": {
                          "type": "string",
                          "description": "When the deployment was queued"
                        },
                        "ready_to_cutover_at": {
                          "type": "string",
                          "description": "When the deployment was ready for cutover"
                        },
                        "started_at": {
                          "type": "string",
                          "description": "When the deployment was started"
                        },
                        "state": {
                          "type": "string",
                          "enum": [
                            "pending",
                            "ready",
                            "no_changes",
                            "queued",
                            "submitting",
                            "in_progress",
                            "pending_cutover",
                            "in_progress_vschema",
                            "in_progress_cancel",
                            "in_progress_cutover",
                            "complete",
                            "complete_cancel",
                            "complete_error",
                            "complete_pending_revert",
                            "in_progress_revert",
                            "complete_revert",
                            "complete_revert_error",
                            "cancelled",
                            "error"
                          ],
                          "description": "The state the deployment is in"
                        },
                        "submitted_at": {
                          "type": "string",
                          "description": "When the deployment was submitted"
                        },
                        "updated_at": {
                          "type": "string",
                          "description": "When the deployment was last updated"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "auto_cutover",
                        "created_at",
                        "cutover_expiring",
                        "state",
                        "submitted_at",
                        "updated_at"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "number",
                    "id",
                    "actor",
                    "closed_by",
                    "branch",
                    "branch_id",
                    "branch_deleted",
                    "branch_deleted_by",
                    "branch_deleted_at",
                    "into_branch",
                    "into_branch_sharded",
                    "into_branch_shard_count",
                    "approved",
                    "state",
                    "deployment_state",
                    "html_url",
                    "notes",
                    "html_body",
                    "created_at",
                    "updated_at",
                    "closed_at",
                    "deployed_at",
                    "deployment"
                  ]
                }
              }
            }
          }
        },
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_deploy_requests` |\n| Database | `read_deploy_requests` |"
      },
      "patch": {
        "tags": [
          "Deploy requests"
        ],
        "operationId": "close-a-deploy-request",
        "summary": "Close a deploy request",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "description": "The number of the deploy request",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the deploy request's database",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the deploy request's organization",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "state": {
                    "type": "string",
                    "enum": [
                      "closed"
                    ],
                    "description": "The deploy request will be updated to this state"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated deploy request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "number": {
                      "type": "number",
                      "description": "The number of the deploy request"
                    },
                    "id": {
                      "type": "string",
                      "description": "The ID of the deploy request"
                    },
                    "actor": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "closed_by": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "branch": {
                      "type": "string",
                      "description": "The name of the branch the deploy request was created from"
                    },
                    "branch_id": {
                      "type": "string",
                      "description": "The id of the branch the deploy request was created from"
                    },
                    "branch_deleted": {
                      "type": "boolean",
                      "description": "Whether or not the deploy request branch was deleted"
                    },
                    "branch_deleted_by": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "branch_deleted_at": {
                      "type": "string",
                      "description": "When the deploy request branch was deleted"
                    },
                    "into_branch": {
                      "type": "string",
                      "description": "The name of the branch the deploy request will be merged into"
                    },
                    "into_branch_sharded": {
                      "type": "boolean",
                      "description": "Whether or not the branch the deploy request will be merged into is sharded"
                    },
                    "into_branch_shard_count": {
                      "type": "number",
                      "description": "The number of shards the branch the deploy request will be merged into has"
                    },
                    "approved": {
                      "type": "boolean",
                      "description": "Whether or not the deploy request is approved"
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "open",
                        "closed"
                      ],
                      "description": "Whether the deploy request is open or closed"
                    },
                    "deployment_state": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "ready",
                        "no_changes",
                        "queued",
                        "submitting",
                        "in_progress",
                        "pending_cutover",
                        "in_progress_vschema",
                        "in_progress_cancel",
                        "in_progress_cutover",
                        "complete",
                        "complete_cancel",
                        "complete_error",
                        "complete_pending_revert",
                        "in_progress_revert",
                        "complete_revert",
                        "complete_revert_error",
                        "cancelled",
                        "error"
                      ],
                      "description": "The deployment state of the deploy request"
                    },
                    "html_url": {
                      "type": "string",
                      "description": "The PlanetScale app address for the deploy request"
                    },
                    "notes": {
                      "type": "string",
                      "description": "Notes on the deploy request"
                    },
                    "html_body": {
                      "type": "string",
                      "description": "The HTML body of the deploy request"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "When the deploy request was created"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "When the deploy request was last updated"
                    },
                    "closed_at": {
                      "type": "string",
                      "description": "When the deploy request was closed"
                    },
                    "deployed_at": {
                      "type": "string",
                      "description": "When the deploy request was deployed"
                    },
                    "deployment": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID for a deployment"
                        },
                        "auto_cutover": {
                          "type": "boolean",
                          "description": "Whether or not to automatically cutover once deployment is finished"
                        },
                        "created_at": {
                          "type": "string",
                          "description": "When the deployment was created"
                        },
                        "cutover_at": {
                          "type": "string",
                          "description": "When the cutover for the deployment was initiated"
                        },
                        "cutover_expiring": {
                          "type": "boolean",
                          "description": "Whether or not the deployment cutover will expire soon and be cancelled"
                        },
                        "deploy_check_errors": {
                          "type": "string",
                          "description": "Deploy check errors for the deployment"
                        },
                        "finished_at": {
                          "type": "string",
                          "description": "When the deployment was finished"
                        },
                        "queued_at": {
                          "type": "string",
                          "description": "When the deployment was queued"
                        },
                        "ready_to_cutover_at": {
                          "type": "string",
                          "description": "When the deployment was ready for cutover"
                        },
                        "started_at": {
                          "type": "string",
                          "description": "When the deployment was started"
                        },
                        "state": {
                          "type": "string",
                          "enum": [
                            "pending",
                            "ready",
                            "no_changes",
                            "queued",
                            "submitting",
                            "in_progress",
                            "pending_cutover",
                            "in_progress_vschema",
                            "in_progress_cancel",
                            "in_progress_cutover",
                            "complete",
                            "complete_cancel",
                            "complete_error",
                            "complete_pending_revert",
                            "in_progress_revert",
                            "complete_revert",
                            "complete_revert_error",
                            "cancelled",
                            "error"
                          ],
                          "description": "The state the deployment is in"
                        },
                        "submitted_at": {
                          "type": "string",
                          "description": "When the deployment was submitted"
                        },
                        "updated_at": {
                          "type": "string",
                          "description": "When the deployment was last updated"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "auto_cutover",
                        "created_at",
                        "cutover_expiring",
                        "state",
                        "submitted_at",
                        "updated_at"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "number",
                    "id",
                    "actor",
                    "closed_by",
                    "branch",
                    "branch_id",
                    "branch_deleted",
                    "branch_deleted_by",
                    "branch_deleted_at",
                    "into_branch",
                    "into_branch_sharded",
                    "into_branch_shard_count",
                    "approved",
                    "state",
                    "deployment_state",
                    "html_url",
                    "notes",
                    "html_body",
                    "created_at",
                    "updated_at",
                    "closed_at",
                    "deployed_at",
                    "deployment"
                  ]
                }
              }
            }
          }
        },
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `write_deploy_requests` |\n| Database | `write_deploy_requests` |"
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests/{number}/apply-deploy": {
      "post": {
        "tags": [
          "Deploy requests"
        ],
        "operationId": "complete-a-gated-deploy-request",
        "summary": "Complete a gated deploy request",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "description": "The number of the deploy request",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the deploy request's database",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the deploy request's organization",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the deploy request whose deployment has been completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "number": {
                      "type": "number",
                      "description": "The number of the deploy request"
                    },
                    "id": {
                      "type": "string",
                      "description": "The ID of the deploy request"
                    },
                    "actor": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "closed_by": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "branch": {
                      "type": "string",
                      "description": "The name of the branch the deploy request was created from"
                    },
                    "branch_id": {
                      "type": "string",
                      "description": "The id of the branch the deploy request was created from"
                    },
                    "branch_deleted": {
                      "type": "boolean",
                      "description": "Whether or not the deploy request branch was deleted"
                    },
                    "branch_deleted_by": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "branch_deleted_at": {
                      "type": "string",
                      "description": "When the deploy request branch was deleted"
                    },
                    "into_branch": {
                      "type": "string",
                      "description": "The name of the branch the deploy request will be merged into"
                    },
                    "into_branch_sharded": {
                      "type": "boolean",
                      "description": "Whether or not the branch the deploy request will be merged into is sharded"
                    },
                    "into_branch_shard_count": {
                      "type": "number",
                      "description": "The number of shards the branch the deploy request will be merged into has"
                    },
                    "approved": {
                      "type": "boolean",
                      "description": "Whether or not the deploy request is approved"
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "open",
                        "closed"
                      ],
                      "description": "Whether the deploy request is open or closed"
                    },
                    "deployment_state": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "ready",
                        "no_changes",
                        "queued",
                        "submitting",
                        "in_progress",
                        "pending_cutover",
                        "in_progress_vschema",
                        "in_progress_cancel",
                        "in_progress_cutover",
                        "complete",
                        "complete_cancel",
                        "complete_error",
                        "complete_pending_revert",
                        "in_progress_revert",
                        "complete_revert",
                        "complete_revert_error",
                        "cancelled",
                        "error"
                      ],
                      "description": "The deployment state of the deploy request"
                    },
                    "html_url": {
                      "type": "string",
                      "description": "The PlanetScale app address for the deploy request"
                    },
                    "notes": {
                      "type": "string",
                      "description": "Notes on the deploy request"
                    },
                    "html_body": {
                      "type": "string",
                      "description": "The HTML body of the deploy request"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "When the deploy request was created"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "When the deploy request was last updated"
                    },
                    "closed_at": {
                      "type": "string",
                      "description": "When the deploy request was closed"
                    },
                    "deployed_at": {
                      "type": "string",
                      "description": "When the deploy request was deployed"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "number",
                    "id",
                    "actor",
                    "closed_by",
                    "branch",
                    "branch_id",
                    "branch_deleted",
                    "branch_deleted_by",
                    "branch_deleted_at",
                    "into_branch",
                    "into_branch_sharded",
                    "into_branch_shard_count",
                    "approved",
                    "state",
                    "deployment_state",
                    "html_url",
                    "notes",
                    "html_body",
                    "created_at",
                    "updated_at",
                    "closed_at",
                    "deployed_at"
                  ]
                }
              }
            }
          }
        },
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`, `create_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `deploy_deploy_requests` |\n| Database | `deploy_deploy_requests` |"
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests/{number}/auto-apply": {
      "put": {
        "tags": [
          "Deploy requests"
        ],
        "operationId": "update-auto-apply-for-deploy-request",
        "summary": "Update auto-apply for deploy request",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "description": "The number of the deploy request",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the deploy request's database",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the deploy request's organization",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "enable": {
                    "type": "boolean",
                    "description": "Whether or not to enable auto-apply for the deploy request"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the deploy request whose auto-apply setting was updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "number": {
                      "type": "number",
                      "description": "The number of the deploy request"
                    },
                    "id": {
                      "type": "string",
                      "description": "The ID of the deploy request"
                    },
                    "actor": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "closed_by": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "branch": {
                      "type": "string",
                      "description": "The name of the branch the deploy request was created from"
                    },
                    "branch_id": {
                      "type": "string",
                      "description": "The id of the branch the deploy request was created from"
                    },
                    "branch_deleted": {
                      "type": "boolean",
                      "description": "Whether or not the deploy request branch was deleted"
                    },
                    "branch_deleted_by": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "branch_deleted_at": {
                      "type": "string",
                      "description": "When the deploy request branch was deleted"
                    },
                    "into_branch": {
                      "type": "string",
                      "description": "The name of the branch the deploy request will be merged into"
                    },
                    "into_branch_sharded": {
                      "type": "boolean",
                      "description": "Whether or not the branch the deploy request will be merged into is sharded"
                    },
                    "into_branch_shard_count": {
                      "type": "number",
                      "description": "The number of shards the branch the deploy request will be merged into has"
                    },
                    "approved": {
                      "type": "boolean",
                      "description": "Whether or not the deploy request is approved"
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "open",
                        "closed"
                      ],
                      "description": "Whether the deploy request is open or closed"
                    },
                    "deployment_state": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "ready",
                        "no_changes",
                        "queued",
                        "submitting",
                        "in_progress",
                        "pending_cutover",
                        "in_progress_vschema",
                        "in_progress_cancel",
                        "in_progress_cutover",
                        "complete",
                        "complete_cancel",
                        "complete_error",
                        "complete_pending_revert",
                        "in_progress_revert",
                        "complete_revert",
                        "complete_revert_error",
                        "cancelled",
                        "error"
                      ],
                      "description": "The deployment state of the deploy request"
                    },
                    "html_url": {
                      "type": "string",
                      "description": "The PlanetScale app address for the deploy request"
                    },
                    "notes": {
                      "type": "string",
                      "description": "Notes on the deploy request"
                    },
                    "html_body": {
                      "type": "string",
                      "description": "The HTML body of the deploy request"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "When the deploy request was created"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "When the deploy request was last updated"
                    },
                    "closed_at": {
                      "type": "string",
                      "description": "When the deploy request was closed"
                    },
                    "deployed_at": {
                      "type": "string",
                      "description": "When the deploy request was deployed"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "number",
                    "id",
                    "actor",
                    "closed_by",
                    "branch",
                    "branch_id",
                    "branch_deleted",
                    "branch_deleted_by",
                    "branch_deleted_at",
                    "into_branch",
                    "into_branch_sharded",
                    "into_branch_shard_count",
                    "approved",
                    "state",
                    "deployment_state",
                    "html_url",
                    "notes",
                    "html_body",
                    "created_at",
                    "updated_at",
                    "closed_at",
                    "deployed_at"
                  ]
                }
              }
            }
          }
        },
        "description": "Enables or disabled the auto-apply setting for a deploy request\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`, `create_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `deploy_deploy_requests` |\n| Database | `deploy_deploy_requests` |"
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests/{number}/cancel": {
      "post": {
        "tags": [
          "Deploy requests"
        ],
        "operationId": "cancel-a-queued-deploy-request",
        "summary": "Cancel a queued deploy request",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "description": "The number of the deploy request",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the deploy request's database",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the deploy request's organization",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the deploy request whose deployment was canceled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "number": {
                      "type": "number",
                      "description": "The number of the deploy request"
                    },
                    "id": {
                      "type": "string",
                      "description": "The ID of the deploy request"
                    },
                    "actor": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "closed_by": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "branch": {
                      "type": "string",
                      "description": "The name of the branch the deploy request was created from"
                    },
                    "branch_id": {
                      "type": "string",
                      "description": "The id of the branch the deploy request was created from"
                    },
                    "branch_deleted": {
                      "type": "boolean",
                      "description": "Whether or not the deploy request branch was deleted"
                    },
                    "branch_deleted_by": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "branch_deleted_at": {
                      "type": "string",
                      "description": "When the deploy request branch was deleted"
                    },
                    "into_branch": {
                      "type": "string",
                      "description": "The name of the branch the deploy request will be merged into"
                    },
                    "into_branch_sharded": {
                      "type": "boolean",
                      "description": "Whether or not the branch the deploy request will be merged into is sharded"
                    },
                    "into_branch_shard_count": {
                      "type": "number",
                      "description": "The number of shards the branch the deploy request will be merged into has"
                    },
                    "approved": {
                      "type": "boolean",
                      "description": "Whether or not the deploy request is approved"
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "open",
                        "closed"
                      ],
                      "description": "Whether the deploy request is open or closed"
                    },
                    "deployment_state": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "ready",
                        "no_changes",
                        "queued",
                        "submitting",
                        "in_progress",
                        "pending_cutover",
                        "in_progress_vschema",
                        "in_progress_cancel",
                        "in_progress_cutover",
                        "complete",
                        "complete_cancel",
                        "complete_error",
                        "complete_pending_revert",
                        "in_progress_revert",
                        "complete_revert",
                        "complete_revert_error",
                        "cancelled",
                        "error"
                      ],
                      "description": "The deployment state of the deploy request"
                    },
                    "html_url": {
                      "type": "string",
                      "description": "The PlanetScale app address for the deploy request"
                    },
                    "notes": {
                      "type": "string",
                      "description": "Notes on the deploy request"
                    },
                    "html_body": {
                      "type": "string",
                      "description": "The HTML body of the deploy request"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "When the deploy request was created"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "When the deploy request was last updated"
                    },
                    "closed_at": {
                      "type": "string",
                      "description": "When the deploy request was closed"
                    },
                    "deployed_at": {
                      "type": "string",
                      "description": "When the deploy request was deployed"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "number",
                    "id",
                    "actor",
                    "closed_by",
                    "branch",
                    "branch_id",
                    "branch_deleted",
                    "branch_deleted_by",
                    "branch_deleted_at",
                    "into_branch",
                    "into_branch_sharded",
                    "into_branch_shard_count",
                    "approved",
                    "state",
                    "deployment_state",
                    "html_url",
                    "notes",
                    "html_body",
                    "created_at",
                    "updated_at",
                    "closed_at",
                    "deployed_at"
                  ]
                }
              }
            }
          }
        },
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`, `create_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `deploy_deploy_requests` |\n| Database | `deploy_deploy_requests` |"
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests/{number}/complete-deploy": {
      "post": {
        "tags": [
          "Deploy requests"
        ],
        "operationId": "complete-an-errored-deploy",
        "summary": "Complete an errored deploy",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "description": "The number of the deploy request",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the deploy request's database",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the deploy request's organization",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the completed deploy request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "number": {
                      "type": "number",
                      "description": "The number of the deploy request"
                    },
                    "id": {
                      "type": "string",
                      "description": "The ID of the deploy request"
                    },
                    "actor": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "closed_by": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "branch": {
                      "type": "string",
                      "description": "The name of the branch the deploy request was created from"
                    },
                    "branch_id": {
                      "type": "string",
                      "description": "The id of the branch the deploy request was created from"
                    },
                    "branch_deleted": {
                      "type": "boolean",
                      "description": "Whether or not the deploy request branch was deleted"
                    },
                    "branch_deleted_by": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "branch_deleted_at": {
                      "type": "string",
                      "description": "When the deploy request branch was deleted"
                    },
                    "into_branch": {
                      "type": "string",
                      "description": "The name of the branch the deploy request will be merged into"
                    },
                    "into_branch_sharded": {
                      "type": "boolean",
                      "description": "Whether or not the branch the deploy request will be merged into is sharded"
                    },
                    "into_branch_shard_count": {
                      "type": "number",
                      "description": "The number of shards the branch the deploy request will be merged into has"
                    },
                    "approved": {
                      "type": "boolean",
                      "description": "Whether or not the deploy request is approved"
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "open",
                        "closed"
                      ],
                      "description": "Whether the deploy request is open or closed"
                    },
                    "deployment_state": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "ready",
                        "no_changes",
                        "queued",
                        "submitting",
                        "in_progress",
                        "pending_cutover",
                        "in_progress_vschema",
                        "in_progress_cancel",
                        "in_progress_cutover",
                        "complete",
                        "complete_cancel",
                        "complete_error",
                        "complete_pending_revert",
                        "in_progress_revert",
                        "complete_revert",
                        "complete_revert_error",
                        "cancelled",
                        "error"
                      ],
                      "description": "The deployment state of the deploy request"
                    },
                    "html_url": {
                      "type": "string",
                      "description": "The PlanetScale app address for the deploy request"
                    },
                    "notes": {
                      "type": "string",
                      "description": "Notes on the deploy request"
                    },
                    "html_body": {
                      "type": "string",
                      "description": "The HTML body of the deploy request"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "When the deploy request was created"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "When the deploy request was last updated"
                    },
                    "closed_at": {
                      "type": "string",
                      "description": "When the deploy request was closed"
                    },
                    "deployed_at": {
                      "type": "string",
                      "description": "When the deploy request was deployed"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "number",
                    "id",
                    "actor",
                    "closed_by",
                    "branch",
                    "branch_id",
                    "branch_deleted",
                    "branch_deleted_by",
                    "branch_deleted_at",
                    "into_branch",
                    "into_branch_sharded",
                    "into_branch_shard_count",
                    "approved",
                    "state",
                    "deployment_state",
                    "html_url",
                    "notes",
                    "html_body",
                    "created_at",
                    "updated_at",
                    "closed_at",
                    "deployed_at"
                  ]
                }
              }
            }
          }
        },
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`, `create_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `deploy_deploy_requests` |\n| Database | `deploy_deploy_requests` |"
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests/{number}/deploy": {
      "post": {
        "tags": [
          "Deploy requests"
        ],
        "operationId": "queue-a-deploy-request",
        "summary": "Queue a deploy request",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "description": "The number of the deploy request",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the database the deploy request belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the deploy request belongs to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the deployed deploy request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "number": {
                      "type": "number",
                      "description": "The number of the deploy request"
                    },
                    "id": {
                      "type": "string",
                      "description": "The ID of the deploy request"
                    },
                    "actor": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "closed_by": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "branch": {
                      "type": "string",
                      "description": "The name of the branch the deploy request was created from"
                    },
                    "branch_id": {
                      "type": "string",
                      "description": "The id of the branch the deploy request was created from"
                    },
                    "branch_deleted": {
                      "type": "boolean",
                      "description": "Whether or not the deploy request branch was deleted"
                    },
                    "branch_deleted_by": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "branch_deleted_at": {
                      "type": "string",
                      "description": "When the deploy request branch was deleted"
                    },
                    "into_branch": {
                      "type": "string",
                      "description": "The name of the branch the deploy request will be merged into"
                    },
                    "into_branch_sharded": {
                      "type": "boolean",
                      "description": "Whether or not the branch the deploy request will be merged into is sharded"
                    },
                    "into_branch_shard_count": {
                      "type": "number",
                      "description": "The number of shards the branch the deploy request will be merged into has"
                    },
                    "approved": {
                      "type": "boolean",
                      "description": "Whether or not the deploy request is approved"
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "open",
                        "closed"
                      ],
                      "description": "Whether the deploy request is open or closed"
                    },
                    "deployment_state": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "ready",
                        "no_changes",
                        "queued",
                        "submitting",
                        "in_progress",
                        "pending_cutover",
                        "in_progress_vschema",
                        "in_progress_cancel",
                        "in_progress_cutover",
                        "complete",
                        "complete_cancel",
                        "complete_error",
                        "complete_pending_revert",
                        "in_progress_revert",
                        "complete_revert",
                        "complete_revert_error",
                        "cancelled",
                        "error"
                      ],
                      "description": "The deployment state of the deploy request"
                    },
                    "html_url": {
                      "type": "string",
                      "description": "The PlanetScale app address for the deploy request"
                    },
                    "notes": {
                      "type": "string",
                      "description": "Notes on the deploy request"
                    },
                    "html_body": {
                      "type": "string",
                      "description": "The HTML body of the deploy request"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "When the deploy request was created"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "When the deploy request was last updated"
                    },
                    "closed_at": {
                      "type": "string",
                      "description": "When the deploy request was closed"
                    },
                    "deployed_at": {
                      "type": "string",
                      "description": "When the deploy request was deployed"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "number",
                    "id",
                    "actor",
                    "closed_by",
                    "branch",
                    "branch_id",
                    "branch_deleted",
                    "branch_deleted_by",
                    "branch_deleted_at",
                    "into_branch",
                    "into_branch_sharded",
                    "into_branch_shard_count",
                    "approved",
                    "state",
                    "deployment_state",
                    "html_url",
                    "notes",
                    "html_body",
                    "created_at",
                    "updated_at",
                    "closed_at",
                    "deployed_at"
                  ]
                }
              }
            }
          }
        },
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`, `create_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `deploy_deploy_requests` |\n| Database | `deploy_deploy_requests` |"
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests/{number}/deployment": {
      "get": {
        "tags": [
          "Deploy requests"
        ],
        "operationId": "get-a-deployment",
        "summary": "Get a deployment",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "description": "The number of the deploy request",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the deploy request's database",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the deploy request's organization",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the deployment for a deploy request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID for a deployment"
                    },
                    "auto_cutover": {
                      "type": "boolean",
                      "description": "Whether or not to automatically cutover once deployment is finished"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "When the deployment was created"
                    },
                    "cutover_at": {
                      "type": "string",
                      "description": "When the cutover for the deployment was initiated"
                    },
                    "cutover_expiring": {
                      "type": "boolean",
                      "description": "Whether or not the deployment cutover will expire soon and be cancelled"
                    },
                    "deploy_check_errors": {
                      "type": "string",
                      "description": "Deploy check errors for the deployment"
                    },
                    "finished_at": {
                      "type": "string",
                      "description": "When the deployment was finished"
                    },
                    "queued_at": {
                      "type": "string",
                      "description": "When the deployment was queued"
                    },
                    "ready_to_cutover_at": {
                      "type": "string",
                      "description": "When the deployment was ready for cutover"
                    },
                    "started_at": {
                      "type": "string",
                      "description": "When the deployment was started"
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "ready",
                        "no_changes",
                        "queued",
                        "submitting",
                        "in_progress",
                        "pending_cutover",
                        "in_progress_vschema",
                        "in_progress_cancel",
                        "in_progress_cutover",
                        "complete",
                        "complete_cancel",
                        "complete_error",
                        "complete_pending_revert",
                        "in_progress_revert",
                        "complete_revert",
                        "complete_revert_error",
                        "cancelled",
                        "error"
                      ],
                      "description": "The state the deployment is in"
                    },
                    "submitted_at": {
                      "type": "string",
                      "description": "When the deployment was submitted"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "When the deployment was last updated"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "auto_cutover",
                    "created_at",
                    "cutover_expiring",
                    "state",
                    "submitted_at",
                    "updated_at"
                  ]
                }
              }
            }
          }
        },
        "description": "Get the deployment for a deploy request\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_deploy_requests` |\n| Database | `read_deploy_requests` |"
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests/{number}/operations": {
      "get": {
        "tags": [
          "Deploy requests"
        ],
        "operationId": "list-deploy-operations",
        "summary": "List deploy operations",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "description": "The number of the deploy request",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the database the deploy request belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the deploy request belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "If provided, specifies the page offset of returned results",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "If provided, specifies the number of returned results",
            "schema": {
              "type": "number",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of deploy operations for the deploy request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The ID for the deploy operation"
                          },
                          "state": {
                            "type": "string",
                            "enum": [
                              "pending",
                              "queued",
                              "in_progress",
                              "complete",
                              "cancelled",
                              "error"
                            ],
                            "description": "The state of the deploy operation"
                          },
                          "keyspace_name": {
                            "type": "string",
                            "description": "The keyspace modified by the deploy operation"
                          },
                          "table_name": {
                            "type": "string",
                            "description": "The name of the table modifed by the deploy operation"
                          },
                          "operation_name": {
                            "type": "string",
                            "description": "The operation name of the deploy operation"
                          },
                          "eta_seconds": {
                            "type": "number",
                            "description": "The estimated seconds until completion for the deploy operation"
                          },
                          "progress_percentage": {
                            "type": "number",
                            "description": "The percent completion for the deploy operation"
                          },
                          "deploy_error_docs_url": {
                            "type": "string",
                            "description": "A link to documentation explaining the deploy error, if present"
                          },
                          "ddl_statement": {
                            "type": "string",
                            "description": "The DDL statement for the deploy operation"
                          },
                          "syntax_highlighted_ddl": {
                            "type": "string",
                            "description": "A syntax-highlighted DDL statement for the deploy operation"
                          },
                          "created_at": {
                            "type": "string",
                            "description": "When the deploy operation was created"
                          },
                          "updated_at": {
                            "type": "string",
                            "description": "When the deploy operation was last updated"
                          },
                          "can_drop_data": {
                            "type": "boolean",
                            "description": "Whether or not the deploy operation is capable of dropping data"
                          },
                          "table_recently_used": {
                            "type": "boolean",
                            "description": "Whether or not the table modified by the deploy operation was recently used"
                          },
                          "table_recently_used_at": {
                            "type": "string",
                            "description": "When the table modified by the deploy operation was last used"
                          },
                          "deploy_errors": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Deploy errors for the deploy operation"
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "id",
                          "state",
                          "keyspace_name",
                          "table_name",
                          "operation_name",
                          "eta_seconds",
                          "progress_percentage",
                          "deploy_error_docs_url",
                          "ddl_statement",
                          "syntax_highlighted_ddl",
                          "created_at",
                          "updated_at",
                          "can_drop_data",
                          "table_recently_used",
                          "table_recently_used_at",
                          "deploy_errors"
                        ]
                      }
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ]
                }
              }
            }
          }
        },
        "description": "List deploy operations for a deploy request\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_deploy_requests` |\n| Database | `read_deploy_requests` |"
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests/{number}/revert": {
      "post": {
        "tags": [
          "Deploy requests"
        ],
        "operationId": "complete-a-revert",
        "summary": "Complete a revert",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "description": "The number of the deploy request",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the deploy request's database",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the deploy request's organization",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the deploy request that was reverted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "number": {
                      "type": "number",
                      "description": "The number of the deploy request"
                    },
                    "id": {
                      "type": "string",
                      "description": "The ID of the deploy request"
                    },
                    "actor": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "closed_by": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "branch": {
                      "type": "string",
                      "description": "The name of the branch the deploy request was created from"
                    },
                    "branch_id": {
                      "type": "string",
                      "description": "The id of the branch the deploy request was created from"
                    },
                    "branch_deleted": {
                      "type": "boolean",
                      "description": "Whether or not the deploy request branch was deleted"
                    },
                    "branch_deleted_by": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "branch_deleted_at": {
                      "type": "string",
                      "description": "When the deploy request branch was deleted"
                    },
                    "into_branch": {
                      "type": "string",
                      "description": "The name of the branch the deploy request will be merged into"
                    },
                    "into_branch_sharded": {
                      "type": "boolean",
                      "description": "Whether or not the branch the deploy request will be merged into is sharded"
                    },
                    "into_branch_shard_count": {
                      "type": "number",
                      "description": "The number of shards the branch the deploy request will be merged into has"
                    },
                    "approved": {
                      "type": "boolean",
                      "description": "Whether or not the deploy request is approved"
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "open",
                        "closed"
                      ],
                      "description": "Whether the deploy request is open or closed"
                    },
                    "deployment_state": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "ready",
                        "no_changes",
                        "queued",
                        "submitting",
                        "in_progress",
                        "pending_cutover",
                        "in_progress_vschema",
                        "in_progress_cancel",
                        "in_progress_cutover",
                        "complete",
                        "complete_cancel",
                        "complete_error",
                        "complete_pending_revert",
                        "in_progress_revert",
                        "complete_revert",
                        "complete_revert_error",
                        "cancelled",
                        "error"
                      ],
                      "description": "The deployment state of the deploy request"
                    },
                    "html_url": {
                      "type": "string",
                      "description": "The PlanetScale app address for the deploy request"
                    },
                    "notes": {
                      "type": "string",
                      "description": "Notes on the deploy request"
                    },
                    "html_body": {
                      "type": "string",
                      "description": "The HTML body of the deploy request"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "When the deploy request was created"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "When the deploy request was last updated"
                    },
                    "closed_at": {
                      "type": "string",
                      "description": "When the deploy request was closed"
                    },
                    "deployed_at": {
                      "type": "string",
                      "description": "When the deploy request was deployed"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "number",
                    "id",
                    "actor",
                    "closed_by",
                    "branch",
                    "branch_id",
                    "branch_deleted",
                    "branch_deleted_by",
                    "branch_deleted_at",
                    "into_branch",
                    "into_branch_sharded",
                    "into_branch_shard_count",
                    "approved",
                    "state",
                    "deployment_state",
                    "html_url",
                    "notes",
                    "html_body",
                    "created_at",
                    "updated_at",
                    "closed_at",
                    "deployed_at"
                  ]
                }
              }
            }
          }
        },
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`, `create_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `deploy_deploy_requests` |\n| Database | `deploy_deploy_requests` |"
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests/{number}/reviews": {
      "get": {
        "tags": [
          "Deploy requests"
        ],
        "operationId": "list-deploy-request-reviews",
        "summary": "List deploy request reviews",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "description": "The number of the deploy request",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the database the deploy request belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the deploy request belongs to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of deploy request reviews",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The id of the review"
                          },
                          "actor": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The ID of the actor"
                              },
                              "display_name": {
                                "type": "string",
                                "description": "The name of the actor"
                              },
                              "avatar_url": {
                                "type": "string",
                                "description": "The URL of the actor's avatar"
                              }
                            },
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "display_name",
                              "avatar_url"
                            ]
                          },
                          "body": {
                            "type": "string",
                            "description": "The text body of the review"
                          },
                          "html_body": {
                            "type": "string",
                            "description": "The HTML body of the review"
                          },
                          "state": {
                            "type": "string",
                            "enum": [
                              "commented",
                              "approved"
                            ],
                            "description": "Whether the review is a comment or approval"
                          },
                          "created_at": {
                            "type": "string",
                            "description": "When the review was created"
                          },
                          "updated_at": {
                            "type": "string",
                            "description": "When the review was last updated"
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "id",
                          "actor",
                          "body",
                          "html_body",
                          "state",
                          "created_at",
                          "updated_at"
                        ]
                      }
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ]
                }
              }
            }
          }
        },
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_deploy_requests` |\n| Database | `read_deploy_requests` |"
      },
      "post": {
        "tags": [
          "Deploy requests"
        ],
        "operationId": "review-a-deploy-request",
        "summary": "Review a deploy request",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "description": "The number of the deploy request",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the database the deploy request belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the deploy request belongs to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "state": {
                    "type": "string",
                    "enum": [
                      "commented",
                      "approved"
                    ],
                    "description": "Whether the review is a comment or approval. Service tokens must have corresponding access (either `approve_deploy_request` or `review_deploy_request`)"
                  },
                  "body": {
                    "type": "string",
                    "description": "Deploy request review comments"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the created deploy request review",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The id of the review"
                    },
                    "actor": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "body": {
                      "type": "string",
                      "description": "The text body of the review"
                    },
                    "html_body": {
                      "type": "string",
                      "description": "The HTML body of the review"
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "commented",
                        "approved"
                      ],
                      "description": "Whether the review is a comment or approval"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "When the review was created"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "When the review was last updated"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "actor",
                    "body",
                    "html_body",
                    "state",
                    "created_at",
                    "updated_at"
                  ]
                }
              }
            }
          }
        },
        "description": "Review a deploy request by either approving or commenting on the deploy request\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `approve_deploy_request`, `review_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `approve_deploy_requests` |\n| Database | `approve_deploy_requests` |"
      }
    },
    "/organizations/{organization}/databases/{database}/deploy-requests/{number}/skip-revert": {
      "post": {
        "tags": [
          "Deploy requests"
        ],
        "operationId": "skip-revert-period",
        "summary": "Skip revert period",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "description": "The number of the deploy request",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "database",
            "in": "path",
            "required": true,
            "description": "The name of the deploy request's database",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the deploy request's organization",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the deploy request whose deploy revert was skipped",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "number": {
                      "type": "number",
                      "description": "The number of the deploy request"
                    },
                    "id": {
                      "type": "string",
                      "description": "The ID of the deploy request"
                    },
                    "actor": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "closed_by": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "branch": {
                      "type": "string",
                      "description": "The name of the branch the deploy request was created from"
                    },
                    "branch_id": {
                      "type": "string",
                      "description": "The id of the branch the deploy request was created from"
                    },
                    "branch_deleted": {
                      "type": "boolean",
                      "description": "Whether or not the deploy request branch was deleted"
                    },
                    "branch_deleted_by": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the actor"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name of the actor"
                        },
                        "avatar_url": {
                          "type": "string",
                          "description": "The URL of the actor's avatar"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "display_name",
                        "avatar_url"
                      ]
                    },
                    "branch_deleted_at": {
                      "type": "string",
                      "description": "When the deploy request branch was deleted"
                    },
                    "into_branch": {
                      "type": "string",
                      "description": "The name of the branch the deploy request will be merged into"
                    },
                    "into_branch_sharded": {
                      "type": "boolean",
                      "description": "Whether or not the branch the deploy request will be merged into is sharded"
                    },
                    "into_branch_shard_count": {
                      "type": "number",
                      "description": "The number of shards the branch the deploy request will be merged into has"
                    },
                    "approved": {
                      "type": "boolean",
                      "description": "Whether or not the deploy request is approved"
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "open",
                        "closed"
                      ],
                      "description": "Whether the deploy request is open or closed"
                    },
                    "deployment_state": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "ready",
                        "no_changes",
                        "queued",
                        "submitting",
                        "in_progress",
                        "pending_cutover",
                        "in_progress_vschema",
                        "in_progress_cancel",
                        "in_progress_cutover",
                        "complete",
                        "complete_cancel",
                        "complete_error",
                        "complete_pending_revert",
                        "in_progress_revert",
                        "complete_revert",
                        "complete_revert_error",
                        "cancelled",
                        "error"
                      ],
                      "description": "The deployment state of the deploy request"
                    },
                    "html_url": {
                      "type": "string",
                      "description": "The PlanetScale app address for the deploy request"
                    },
                    "notes": {
                      "type": "string",
                      "description": "Notes on the deploy request"
                    },
                    "html_body": {
                      "type": "string",
                      "description": "The HTML body of the deploy request"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "When the deploy request was created"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "When the deploy request was last updated"
                    },
                    "closed_at": {
                      "type": "string",
                      "description": "When the deploy request was closed"
                    },
                    "deployed_at": {
                      "type": "string",
                      "description": "When the deploy request was deployed"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "number",
                    "id",
                    "actor",
                    "closed_by",
                    "branch",
                    "branch_id",
                    "branch_deleted",
                    "branch_deleted_by",
                    "branch_deleted_at",
                    "into_branch",
                    "into_branch_sharded",
                    "into_branch_shard_count",
                    "approved",
                    "state",
                    "deployment_state",
                    "html_url",
                    "notes",
                    "html_body",
                    "created_at",
                    "updated_at",
                    "closed_at",
                    "deployed_at"
                  ]
                }
              }
            }
          }
        },
        "description": "Skips the revert period for a deploy request\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_deploy_request`, `create_deploy_request`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `deploy_deploy_requests` |\n| Database | `deploy_deploy_requests` |"
      }
    },
    "/organizations/{organization}/databases/{name}": {
      "get": {
        "tags": [
          "Databases"
        ],
        "operationId": "get-a-database",
        "summary": "Get a database",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the database",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the database belongs to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a database",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the database"
                    },
                    "url": {
                      "type": "string",
                      "description": "The URL to the database API endpoint"
                    },
                    "branches_url": {
                      "type": "string",
                      "description": "The URL to retrieve this database's branches via the API"
                    },
                    "branches_count": {
                      "type": "number",
                      "description": "The total number of database branches"
                    },
                    "development_branches_count": {
                      "type": "number",
                      "description": "The total number of database development branches"
                    },
                    "production_branches_count": {
                      "type": "number",
                      "description": "The total number of database production branches"
                    },
                    "issues_count": {
                      "type": "number",
                      "description": "The total number of ongoing issues within a database"
                    },
                    "multiple_admins_required_for_deletion": {
                      "type": "boolean",
                      "description": "If the database requires multiple admins for deletion"
                    },
                    "ready": {
                      "type": "boolean",
                      "description": "If the database is ready to be used"
                    },
                    "at_development_branch_limit": {
                      "type": "boolean",
                      "description": "If the database has reached its development branch limit"
                    },
                    "at_backup_restore_branches_limit": {
                      "type": "boolean",
                      "description": "If the database has reached its backup restored branch limit"
                    },
                    "data_import": {
                      "type": "object",
                      "properties": {
                        "state": {
                          "type": "string"
                        },
                        "import_check_errors": {
                          "type": "string"
                        },
                        "started_at": {
                          "type": "string"
                        },
                        "finished_at": {
                          "type": "string"
                        },
                        "data_source": {
                          "type": "object",
                          "properties": {
                            "hostname": {
                              "type": "string"
                            },
                            "port": {
                              "type": "string"
                            },
                            "database": {
                              "type": "string"
                            }
                          },
                          "additionalProperties": false,
                          "required": [
                            "hostname",
                            "port",
                            "database"
                          ]
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "state",
                        "import_check_errors",
                        "started_at",
                        "finished_at",
                        "data_source"
                      ]
                    },
                    "region": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the region"
                        },
                        "provider": {
                          "type": "string",
                          "description": "Provider for the region (ex. AWS)"
                        },
                        "enabled": {
                          "type": "boolean",
                          "description": "Whether or not the region is currently active"
                        },
                        "public_ip_addresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Public IP addresses for the region"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "Name of the region"
                        },
                        "location": {
                          "type": "string",
                          "description": "Location of the region"
                        },
                        "slug": {
                          "type": "string",
                          "description": "The slug of the region"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "provider",
                        "enabled",
                        "public_ip_addresses",
                        "display_name",
                        "location",
                        "slug"
                      ]
                    },
                    "html_url": {
                      "type": "string",
                      "description": "The URL to see this database's branches in the web UI"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the database"
                    },
                    "state": {
                      "type": "string",
                      "description": "State of the database"
                    },
                    "sharded": {
                      "type": "boolean",
                      "description": "If the database is sharded"
                    },
                    "default_branch_shard_count": {
                      "type": "number",
                      "description": "Number of shards in the default branch"
                    },
                    "default_branch_read_only_regions_count": {
                      "type": "number",
                      "description": "Number of read only regions in the default branch"
                    },
                    "default_branch_table_count": {
                      "type": "number",
                      "description": "Number of tables in the default branch schema"
                    },
                    "default_branch": {
                      "type": "string",
                      "description": "The default branch for the database"
                    },
                    "require_approval_for_deploy": {
                      "type": "boolean",
                      "description": "Whether an approval is required to deploy schema changes to this database"
                    },
                    "allow_data_branching": {
                      "type": "boolean",
                      "description": "Whether seeding branches with data is enabled for all branches"
                    },
                    "automatic_migrations": {
                      "type": "boolean",
                      "description": "Whether to automatically manage Rails migrations during deploy requests"
                    },
                    "restrict_branch_region": {
                      "type": "boolean",
                      "description": "Whether to restrict branch creation to one region"
                    },
                    "insights_raw_queries": {
                      "type": "boolean",
                      "description": "Whether raw SQL queries are collected"
                    },
                    "plan": {
                      "type": "string",
                      "description": "The database plan"
                    },
                    "production_branch_web_console": {
                      "type": "boolean",
                      "description": "Whether web console is enabled for production branches"
                    },
                    "migration_table_name": {
                      "type": "string",
                      "description": "Table name to use for copying schema migration data"
                    },
                    "migration_framework": {
                      "type": "string",
                      "description": "Framework used for applying migrations"
                    },
                    "created_at": {
                      "type": "string"
                    },
                    "updated_at": {
                      "type": "string"
                    },
                    "schema_last_updated_at": {
                      "type": "string",
                      "description": "When the default branch schema was last changed."
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "url",
                    "branches_url",
                    "branches_count",
                    "development_branches_count",
                    "production_branches_count",
                    "issues_count",
                    "multiple_admins_required_for_deletion",
                    "ready",
                    "at_development_branch_limit",
                    "at_backup_restore_branches_limit",
                    "region",
                    "html_url",
                    "name",
                    "state",
                    "sharded",
                    "default_branch_shard_count",
                    "default_branch_read_only_regions_count",
                    "default_branch_table_count",
                    "default_branch",
                    "require_approval_for_deploy",
                    "allow_data_branching",
                    "restrict_branch_region",
                    "insights_raw_queries",
                    "plan",
                    "production_branch_web_console",
                    "created_at",
                    "updated_at"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_database`, `delete_database`, `write_database`, `read_branch`, `delete_branch`, `create_branch`, `delete_production_branch`, `connect_branch`, `connect_production_branch`, `delete_branch_password`, `delete_production_branch_password`, `read_deploy_request`, `create_deploy_request`, `approve_deploy_request`, `read_schema_recommendations`, `close_schema_recommendations`, `read_comment`, `create_comment`, `restore_backup`, `restore_production_branch_backup`, `read_backups`, `write_backups`, `delete_backups`, `delete_production_branch_backups`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_databases` |\n| Database | `read_database` |"
      },
      "patch": {
        "tags": [
          "Databases"
        ],
        "operationId": "update-database-settings",
        "summary": "Update database settings",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the database",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the database belongs to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "automatic_migrations": {
                    "type": "boolean",
                    "description": "Whether or not to copy migration data to new branches and in deploy requests."
                  },
                  "migration_framework": {
                    "type": "string",
                    "description": "A migration framework to use on the database"
                  },
                  "migration_table_name": {
                    "type": "string",
                    "description": "Name of table to use as migration table for the database"
                  },
                  "require_approval_for_deploy": {
                    "type": "boolean",
                    "description": "Whether or not deploy requests must be approved by a database administrator other than the request creator"
                  },
                  "restrict_branch_region": {
                    "type": "boolean",
                    "description": "Whether or not to limit branch creation to the AWS us-east-1 region."
                  },
                  "allow_data_branching": {
                    "type": "boolean",
                    "description": "Whether or not data branching is allowed on the database"
                  },
                  "insights_raw_queries": {
                    "type": "boolean",
                    "description": "Whether or not full queries should be collected from the database"
                  },
                  "production_branch_web_console": {
                    "type": "boolean",
                    "description": "Whether or not the web console can be used on the production branch of the database"
                  },
                  "default_branch": {
                    "type": "string",
                    "description": "The default branch of the database"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated database",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the database"
                    },
                    "url": {
                      "type": "string",
                      "description": "The URL to the database API endpoint"
                    },
                    "branches_url": {
                      "type": "string",
                      "description": "The URL to retrieve this database's branches via the API"
                    },
                    "branches_count": {
                      "type": "number",
                      "description": "The total number of database branches"
                    },
                    "development_branches_count": {
                      "type": "number",
                      "description": "The total number of database development branches"
                    },
                    "production_branches_count": {
                      "type": "number",
                      "description": "The total number of database production branches"
                    },
                    "issues_count": {
                      "type": "number",
                      "description": "The total number of ongoing issues within a database"
                    },
                    "multiple_admins_required_for_deletion": {
                      "type": "boolean",
                      "description": "If the database requires multiple admins for deletion"
                    },
                    "ready": {
                      "type": "boolean",
                      "description": "If the database is ready to be used"
                    },
                    "at_development_branch_limit": {
                      "type": "boolean",
                      "description": "If the database has reached its development branch limit"
                    },
                    "at_backup_restore_branches_limit": {
                      "type": "boolean",
                      "description": "If the database has reached its backup restored branch limit"
                    },
                    "data_import": {
                      "type": "object",
                      "properties": {
                        "state": {
                          "type": "string"
                        },
                        "import_check_errors": {
                          "type": "string"
                        },
                        "started_at": {
                          "type": "string"
                        },
                        "finished_at": {
                          "type": "string"
                        },
                        "data_source": {
                          "type": "object",
                          "properties": {
                            "hostname": {
                              "type": "string"
                            },
                            "port": {
                              "type": "string"
                            },
                            "database": {
                              "type": "string"
                            }
                          },
                          "additionalProperties": false,
                          "required": [
                            "hostname",
                            "port",
                            "database"
                          ]
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "state",
                        "import_check_errors",
                        "started_at",
                        "finished_at",
                        "data_source"
                      ]
                    },
                    "region": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the region"
                        },
                        "provider": {
                          "type": "string",
                          "description": "Provider for the region (ex. AWS)"
                        },
                        "enabled": {
                          "type": "boolean",
                          "description": "Whether or not the region is currently active"
                        },
                        "public_ip_addresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Public IP addresses for the region"
                        },
                        "display_name": {
                          "type": "string",
                          "description": "Name of the region"
                        },
                        "location": {
                          "type": "string",
                          "description": "Location of the region"
                        },
                        "slug": {
                          "type": "string",
                          "description": "The slug of the region"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "provider",
                        "enabled",
                        "public_ip_addresses",
                        "display_name",
                        "location",
                        "slug"
                      ]
                    },
                    "html_url": {
                      "type": "string",
                      "description": "The URL to see this database's branches in the web UI"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the database"
                    },
                    "state": {
                      "type": "string",
                      "description": "State of the database"
                    },
                    "sharded": {
                      "type": "boolean",
                      "description": "If the database is sharded"
                    },
                    "default_branch_shard_count": {
                      "type": "number",
                      "description": "Number of shards in the default branch"
                    },
                    "default_branch_read_only_regions_count": {
                      "type": "number",
                      "description": "Number of read only regions in the default branch"
                    },
                    "default_branch_table_count": {
                      "type": "number",
                      "description": "Number of tables in the default branch schema"
                    },
                    "default_branch": {
                      "type": "string",
                      "description": "The default branch for the database"
                    },
                    "require_approval_for_deploy": {
                      "type": "boolean",
                      "description": "Whether an approval is required to deploy schema changes to this database"
                    },
                    "allow_data_branching": {
                      "type": "boolean",
                      "description": "Whether seeding branches with data is enabled for all branches"
                    },
                    "automatic_migrations": {
                      "type": "boolean",
                      "description": "Whether to automatically manage Rails migrations during deploy requests"
                    },
                    "restrict_branch_region": {
                      "type": "boolean",
                      "description": "Whether to restrict branch creation to one region"
                    },
                    "insights_raw_queries": {
                      "type": "boolean",
                      "description": "Whether raw SQL queries are collected"
                    },
                    "plan": {
                      "type": "string",
                      "description": "The database plan"
                    },
                    "production_branch_web_console": {
                      "type": "boolean",
                      "description": "Whether web console is enabled for production branches"
                    },
                    "migration_table_name": {
                      "type": "string",
                      "description": "Table name to use for copying schema migration data"
                    },
                    "migration_framework": {
                      "type": "string",
                      "description": "Framework used for applying migrations"
                    },
                    "created_at": {
                      "type": "string"
                    },
                    "updated_at": {
                      "type": "string"
                    },
                    "schema_last_updated_at": {
                      "type": "string",
                      "description": "When the default branch schema was last changed."
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "url",
                    "branches_url",
                    "branches_count",
                    "development_branches_count",
                    "production_branches_count",
                    "issues_count",
                    "multiple_admins_required_for_deletion",
                    "ready",
                    "at_development_branch_limit",
                    "at_backup_restore_branches_limit",
                    "region",
                    "html_url",
                    "name",
                    "state",
                    "sharded",
                    "default_branch_shard_count",
                    "default_branch_read_only_regions_count",
                    "default_branch_table_count",
                    "default_branch",
                    "require_approval_for_deploy",
                    "allow_data_branching",
                    "restrict_branch_region",
                    "insights_raw_queries",
                    "plan",
                    "production_branch_web_console",
                    "created_at",
                    "updated_at"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `write_database`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `write_databases` |\n| Database | `write_database` |"
      },
      "delete": {
        "tags": [
          "Databases"
        ],
        "operationId": "delete-a-database",
        "summary": "Delete a database",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the database",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the database belongs to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deletes a database"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `delete_database`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `delete_databases` |\n| Database | `delete_database` |"
      }
    },
    "/organizations/{organization}/databases/{name}/read-only-regions": {
      "get": {
        "tags": [
          "Databases"
        ],
        "operationId": "list-read-only-regions",
        "summary": "List read-only regions",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the database",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the database belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "If provided, specifies the page offset of returned results",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "If provided, specifies the number of returned results",
            "schema": {
              "type": "number",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of the database's read-only regions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The ID of the read-only region"
                          },
                          "created_at": {
                            "type": "string",
                            "description": "When the read-only region was created"
                          },
                          "display_name": {
                            "type": "string",
                            "description": "The name of the read-only region"
                          },
                          "ready_at": {
                            "type": "string",
                            "description": "When the read-only region was ready to serve queries"
                          },
                          "updated_at": {
                            "type": "string",
                            "description": "When the read-only region was last updated"
                          },
                          "ready": {
                            "type": "boolean",
                            "description": "Whether or not the read-only region is ready to serve queries"
                          },
                          "actor": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The ID of the actor"
                              },
                              "display_name": {
                                "type": "string",
                                "description": "The name of the actor"
                              },
                              "avatar_url": {
                                "type": "string",
                                "description": "The URL of the actor's avatar"
                              }
                            },
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "display_name",
                              "avatar_url"
                            ]
                          },
                          "region": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The ID of the region"
                              },
                              "provider": {
                                "type": "string",
                                "description": "Provider for the region (ex. AWS)"
                              },
                              "enabled": {
                                "type": "boolean",
                                "description": "Whether or not the region is currently active"
                              },
                              "public_ip_addresses": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "description": "Public IP addresses for the region"
                              },
                              "display_name": {
                                "type": "string",
                                "description": "Name of the region"
                              },
                              "location": {
                                "type": "string",
                                "description": "Location of the region"
                              },
                              "slug": {
                                "type": "string",
                                "description": "The slug of the region"
                              }
                            },
                            "additionalProperties": false,
                            "required": [
                              "id",
                              "provider",
                              "enabled",
                              "public_ip_addresses",
                              "display_name",
                              "location",
                              "slug"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "id",
                          "created_at",
                          "display_name",
                          "ready_at",
                          "updated_at",
                          "ready",
                          "actor",
                          "region"
                        ]
                      }
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "List read-only regions for the database's default branch\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_database`, `delete_database`, `write_database`, `read_branch`, `delete_branch`, `create_branch`, `delete_production_branch`, `connect_branch`, `connect_production_branch`, `delete_branch_password`, `delete_production_branch_password`, `read_deploy_request`, `create_deploy_request`, `approve_deploy_request`, `read_schema_recommendations`, `close_schema_recommendations`, `read_comment`, `create_comment`, `restore_backup`, `restore_production_branch_backup`, `read_backups`, `write_backups`, `delete_backups`, `delete_production_branch_backups`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_branches` |\n| Database | `read_branches` |"
      }
    },
    "/organizations/{organization}/databases/{name}/regions": {
      "get": {
        "tags": [
          "Databases"
        ],
        "operationId": "list-database-regions",
        "summary": "List database regions",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The name of the database",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the database belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "If provided, specifies the page offset of returned results",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "If provided, specifies the number of returned results",
            "schema": {
              "type": "number",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the available regions for a database",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The ID of the region"
                          },
                          "provider": {
                            "type": "string",
                            "description": "Provider for the region (ex. AWS)"
                          },
                          "enabled": {
                            "type": "boolean",
                            "description": "Whether or not the region is currently active"
                          },
                          "public_ip_addresses": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Public IP addresses for the region"
                          },
                          "display_name": {
                            "type": "string",
                            "description": "Name of the region"
                          },
                          "location": {
                            "type": "string",
                            "description": "Location of the region"
                          },
                          "slug": {
                            "type": "string",
                            "description": "The slug of the region"
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "id",
                          "provider",
                          "enabled",
                          "public_ip_addresses",
                          "display_name",
                          "location",
                          "slug"
                        ]
                      }
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "\n### Authorization\nA service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_database`, `delete_database`, `write_database`, `read_branch`, `delete_branch`, `create_branch`, `delete_production_branch`, `connect_branch`, `connect_production_branch`, `delete_branch_password`, `delete_production_branch_password`, `read_deploy_request`, `create_deploy_request`, `approve_deploy_request`, `read_schema_recommendations`, `close_schema_recommendations`, `read_comment`, `create_comment`, `restore_backup`, `restore_production_branch_backup`, `read_backups`, `write_backups`, `delete_backups`, `delete_production_branch_backups`\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| Organization | `read_databases` |\n| Database | `read_database` |"
      }
    },
    "/organizations/{organization}/oauth-applications": {
      "get": {
        "tags": [
          "OAuth applications"
        ],
        "operationId": "list-oauth-applications",
        "summary": "List OAuth applications",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the OAuth applications belong to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "If provided, specifies the page offset of returned results",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "If provided, specifies the number of returned results",
            "schema": {
              "type": "number",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of the organization's oauth applications",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The ID of the OAuth application"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the OAuth application"
                          },
                          "redirect_uri": {
                            "type": "string",
                            "description": "The redirect URI of the OAuth application"
                          },
                          "domain": {
                            "type": "string",
                            "description": "The domain of the OAuth application. Used for verification of a valid redirect uri"
                          },
                          "created_at": {
                            "type": "string",
                            "description": "When the OAuth application was created"
                          },
                          "updated_at": {
                            "type": "string",
                            "description": "When the OAuth application was last updated"
                          },
                          "scopes": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "The scopes that the OAuth application requires on a user's accout"
                          },
                          "avatar": {
                            "type": "string",
                            "description": "The image source for the OAuth application's avatar"
                          },
                          "client_id": {
                            "type": "string",
                            "description": "The OAuth application's unique client id"
                          },
                          "tokens": {
                            "type": "number",
                            "description": "The number of tokens issued by the OAuth application"
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "id",
                          "name",
                          "redirect_uri",
                          "domain",
                          "created_at",
                          "updated_at",
                          "scopes",
                          "client_id",
                          "tokens"
                        ]
                      }
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "\n### Authorization\nA service token   must have at least one of the following access   in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_oauth_applications`\n\n"
      }
    },
    "/organizations/{organization}/oauth-applications/{application_id}": {
      "get": {
        "tags": [
          "OAuth applications"
        ],
        "operationId": "get-an-oauth-application",
        "summary": "Get an OAuth application",
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "required": true,
            "description": "The ID of the OAuth application",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the OAuth application belongs to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns information abuot an OAuth application",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the OAuth application"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the OAuth application"
                    },
                    "redirect_uri": {
                      "type": "string",
                      "description": "The redirect URI of the OAuth application"
                    },
                    "domain": {
                      "type": "string",
                      "description": "The domain of the OAuth application. Used for verification of a valid redirect uri"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "When the OAuth application was created"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "When the OAuth application was last updated"
                    },
                    "scopes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "The scopes that the OAuth application requires on a user's accout"
                    },
                    "avatar": {
                      "type": "string",
                      "description": "The image source for the OAuth application's avatar"
                    },
                    "client_id": {
                      "type": "string",
                      "description": "The OAuth application's unique client id"
                    },
                    "tokens": {
                      "type": "number",
                      "description": "The number of tokens issued by the OAuth application"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "name",
                    "redirect_uri",
                    "domain",
                    "created_at",
                    "updated_at",
                    "scopes",
                    "client_id",
                    "tokens"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "\n### Authorization\nA service token   must have at least one of the following access   in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_oauth_applications`\n\n"
      }
    },
    "/organizations/{organization}/oauth-applications/{application_id}/tokens": {
      "get": {
        "tags": [
          "OAuth applications"
        ],
        "operationId": "list-oauth-tokens",
        "summary": "List OAuth tokens",
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "required": true,
            "description": "The ID of the OAuth application",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the OAuth application belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "If provided, specifies the page offset of returned results",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "If provided, specifies the number of returned results",
            "schema": {
              "type": "number",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of OAuth tokens issued on behalf of the OAuth application",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The ID of the service token"
                          },
                          "display_name": {
                            "type": "string",
                            "description": "The display name of the service token"
                          },
                          "avatar_url": {
                            "type": "string",
                            "description": "The image source for the avatar of the service token"
                          },
                          "created_at": {
                            "type": "string",
                            "description": "When the service token was created"
                          },
                          "updated_at": {
                            "type": "string",
                            "description": "When the service token was last updated"
                          },
                          "expires_at": {
                            "type": "string",
                            "description": "When the service token will expire"
                          },
                          "last_used_at": {
                            "type": "string",
                            "description": "When the service token was last used"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the service token"
                          },
                          "actor_id": {
                            "type": "string",
                            "description": "The ID of the actor on whose behalf the service token was created"
                          },
                          "actor_display_name": {
                            "type": "string",
                            "description": "The name of the actor on whose behalf the service token was created"
                          },
                          "actor_type": {
                            "type": "string",
                            "description": "The type of the actor on whose behalf the service token was created"
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "id",
                          "display_name",
                          "avatar_url",
                          "created_at",
                          "updated_at",
                          "expires_at",
                          "last_used_at",
                          "name",
                          "actor_id",
                          "actor_display_name",
                          "actor_type"
                        ]
                      }
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "List OAuth tokens created by an OAuth application\n### Authorization\nA service token   must have at least one of the following access   in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_oauth_tokens`\n\n"
      }
    },
    "/organizations/{organization}/oauth-applications/{application_id}/tokens/{token_id}": {
      "get": {
        "tags": [
          "OAuth applications"
        ],
        "operationId": "get-an-oauth-token",
        "summary": "Get an OAuth token",
        "parameters": [
          {
            "name": "token_id",
            "in": "path",
            "required": true,
            "description": "The ID of the OAuth application token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "application_id",
            "in": "path",
            "required": true,
            "description": "The ID of the OAuth application",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the OAuth application belongs to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an OAuth token that was issued on behalf of the OAuth application",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the service token"
                    },
                    "display_name": {
                      "type": "string",
                      "description": "The display name of the service token"
                    },
                    "avatar_url": {
                      "type": "string",
                      "description": "The image source for the avatar of the service token"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "When the service token was created"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "When the service token was last updated"
                    },
                    "expires_at": {
                      "type": "string",
                      "description": "When the service token will expire"
                    },
                    "last_used_at": {
                      "type": "string",
                      "description": "When the service token was last used"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the service token"
                    },
                    "actor_id": {
                      "type": "string",
                      "description": "The ID of the actor on whose behalf the service token was created"
                    },
                    "actor_display_name": {
                      "type": "string",
                      "description": "The name of the actor on whose behalf the service token was created"
                    },
                    "actor_type": {
                      "type": "string",
                      "description": "The type of the actor on whose behalf the service token was created"
                    },
                    "oauth_accesses_by_resource": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "type": "object",
                          "properties": {
                            "users": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "description": "Users the token has access to"
                            },
                            "accesses": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "description": "Accesses the token has on the resources"
                            }
                          },
                          "additionalProperties": false,
                          "required": [
                            "users",
                            "accesses"
                          ]
                        },
                        "organization": {
                          "type": "object",
                          "properties": {
                            "organizations": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "description": "Organizations the token has access to"
                            },
                            "accesses": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "description": "Accesses the token has on the resources"
                            }
                          },
                          "additionalProperties": false,
                          "required": [
                            "organizations",
                            "accesses"
                          ]
                        },
                        "database": {
                          "type": "object",
                          "properties": {
                            "databases": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "description": "Databases the token has access to"
                            },
                            "accesses": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "description": "Accesses the token has on the resources"
                            }
                          },
                          "additionalProperties": false,
                          "required": [
                            "databases",
                            "accesses"
                          ]
                        },
                        "branch": {
                          "type": "object",
                          "properties": {
                            "branches": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "description": "Branches the token has access to"
                            },
                            "accesses": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "description": "Accesses the token has on the resources"
                            }
                          },
                          "additionalProperties": false,
                          "required": [
                            "branches",
                            "accesses"
                          ]
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "user",
                        "organization",
                        "database",
                        "branch"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "display_name",
                    "avatar_url",
                    "created_at",
                    "updated_at",
                    "expires_at",
                    "last_used_at",
                    "name",
                    "actor_id",
                    "actor_display_name",
                    "actor_type",
                    "oauth_accesses_by_resource"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "\n### Authorization\nA service token   must have at least one of the following access   in order to use this API endpoint:\n\n**Service Token Accesses**\n `read_oauth_tokens`\n\n"
      },
      "delete": {
        "tags": [
          "OAuth applications"
        ],
        "operationId": "delete-an-oauth-token",
        "summary": "Delete an OAuth token",
        "parameters": [
          {
            "name": "token_id",
            "in": "path",
            "required": true,
            "description": "The ID of the OAuth application token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "application_id",
            "in": "path",
            "required": true,
            "description": "The ID of the OAuth application",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the OAuth application belongs to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deletes an OAuth application's OAuth token"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "\n### Authorization\nA service token   must have at least one of the following access   in order to use this API endpoint:\n\n**Service Token Accesses**\n `delete_oauth_tokens`\n\n"
      }
    },
    "/organizations/{organization}/oauth-applications/{id}/token": {
      "post": {
        "tags": [
          "OAuth tokens"
        ],
        "operationId": "create-or-renew-an-oauth-token",
        "summary": "Create or renew an OAuth token",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the OAuth application",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "required": true,
            "description": "The name of the organization the OAuth application belongs to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "client_id": {
                    "type": "string",
                    "description": "The OAuth application's client ID"
                  },
                  "client_secret": {
                    "type": "string",
                    "description": "The OAuth applicatin's client secret"
                  },
                  "grant_type": {
                    "type": "string",
                    "enum": [
                      "authorization_code",
                      "refresh_token"
                    ],
                    "description": "Whether an OAuth grant code or a refresh token is being exchanged for an OAuth token"
                  },
                  "code": {
                    "type": "string",
                    "description": "The OAuth grant code provided to your OAuth application's redirect URI. Required when grant_type is authorization_code"
                  },
                  "redirect_uri": {
                    "type": "string",
                    "description": "The OAuth application's redirect URI. Required when grant_type is authorization_code"
                  },
                  "refresh_token": {
                    "type": "string",
                    "description": "The refresh token from the original OAuth token grant. Required when grant_type is refresh_token"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "client_id",
                  "client_secret",
                  "grant_type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created OAuth token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "display_name": {
                      "type": "string",
                      "description": "The display name of the OAuth token"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the OAuth token"
                    },
                    "token": {
                      "type": "string",
                      "description": "The plain text OAuth token"
                    },
                    "plain_text_refresh_token": {
                      "type": "string",
                      "description": "The refresh token used to refresh this OAuth token"
                    },
                    "actor_id": {
                      "type": "string",
                      "description": "The ID of the actor on whose behalf the token was issued"
                    },
                    "actor_display_name": {
                      "type": "string",
                      "description": "The name of the actor on whose behalf the token was issued"
                    },
                    "service_token_accesses": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "The accesses issued to this OAuth token"
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Create an OAuth token from an authorization grant code, or refresh an OAuth token from a refresh token\n### Authorization\nA service token   must have at least one of the following access   in order to use this API endpoint:\n\n**Service Token Accesses**\n `write_oauth_tokens`\n\n"
      }
    },
    "/regions": {
      "get": {
        "tags": [
          "Regions"
        ],
        "operationId": "list-public-regions",
        "summary": "List public regions",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "If provided, specifies the page offset of returned results",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "If provided, specifies the number of returned results",
            "schema": {
              "type": "number",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the available public PlanetScale regions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The ID of the region"
                          },
                          "provider": {
                            "type": "string",
                            "description": "Provider for the region (ex. AWS)"
                          },
                          "public_ip_addresses": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Public IP addresses for the region"
                          },
                          "display_name": {
                            "type": "string",
                            "description": "Name of the region"
                          },
                          "location": {
                            "type": "string",
                            "description": "Location of the region"
                          },
                          "slug": {
                            "type": "string",
                            "description": "The slug of the region"
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "id",
                          "provider",
                          "public_ip_addresses",
                          "display_name",
                          "location",
                          "slug"
                        ]
                      }
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Endpoint is available without authentication.\n"
      }
    },
    "/user": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "get-current-user",
        "summary": "Get current user",
        "responses": {
          "200": {
            "description": "Returns the current user that is associated with this service token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the user"
                    },
                    "display_name": {
                      "type": "string",
                      "description": "The display name of the user"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the user"
                    },
                    "email": {
                      "type": "string",
                      "description": "The email of the user"
                    },
                    "avatar_url": {
                      "type": "string",
                      "description": "The URL source of the user's avatar"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "When the user was created"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "When the user was last updated"
                    },
                    "two_factor_auth_configured": {
                      "type": "boolean",
                      "description": "Whether or not the user has configured two factor authentication"
                    },
                    "default_organization_id": {
                      "type": "string",
                      "description": "The default organization for the user"
                    },
                    "sso": {
                      "type": "boolean",
                      "description": "Whether or not the user is managed by WorkOS"
                    },
                    "managed": {
                      "type": "boolean",
                      "description": "Whether or not the user is managed by an authentication provider"
                    },
                    "directory_managed": {
                      "type": "boolean",
                      "description": "Whether or not the user is managed by a WorkOS directory"
                    },
                    "email_verified": {
                      "type": "boolean",
                      "description": "Whether or not the user is verified by email"
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Get the user associated with this service token\n### Authorization\nA   OAuth token must have at least one of the following   scopes in order to use this API endpoint:\n\n**OAuth Scopes**\n\n | Resource | Scopes |\n| :------- | :---------- |\n| User | `read_user` |"
      }
    }
  },
  "tags": [
    {
      "name": "Backups",
      "description": "          API endpoints for managing database branch backups.\n"
    },
    {
      "name": "Database branch passwords",
      "description": "          API endpoints for managing database branch passwords.\n"
    },
    {
      "name": "Databases",
      "description": "          API endpoints for managing databases within an organization.\n"
    },
    {
      "name": "OAuth applications",
      "description": "          API endpoints for fetching OAuth applications.\n"
    },
    {
      "name": "OAuth tokens",
      "description": "          API endpoints for managing OAuth tokens.\n"
    },
    {
      "name": "Organizations",
      "description": "          API endpoints for managing organizations.\n"
    },
    {
      "name": "Users",
      "description": "          API endpoints for fetching user information.\n"
    },
    {
      "name": "Deploy requests",
      "description": "            API endpoints for managing database deploy requests.\n"
    },
    {
      "name": "Invoices",
      "description": "          API endpoints for fetching invoice information.\n"
    }
  ],
  "security": [
    {
      "ApiKeyHeader": [
        "Authorization"
      ]
    }
  ],
  "x-readme": {
    "explorer-enabled": false
  },
  "servers": [
    {
      "url": "https://api.planetscale.com/v1"
    }
  ],
  "components": {
    "securitySchemes": {
      "ApiKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    }
  }
}