import { Clipboard, getPreferenceValues, showToast, Toast } from "@raycast/api";
import { showFailureToast } from "@raycast/utils";
import { generateMermaidDiagram } from "../utils/diagram";
import { cleanupTempFile } from "../utils/files";
import { Preferences } from "../types";
import { promisify } from "util";
import { exec } from "child_process";
import fs from "fs";

const execPromise = promisify(exec);

/**
 * Define the input parameters required by the AI tool
 */
type MermaidToolInput = {
  /**
   * A complete and valid Mermaid syntax string that needs to be converted into an image.
   * This is usually generated by the AI at user request, or provided directly by the user.
   * For example: 'graph TD\\nA --> B' or 'sequenceDiagram\\nAlice->>Bob: Hi!'
   */
  mermaidSyntax: string;
};

/**
 * Copies an image to the clipboard based on the file format
 */
async function copyImageToClipboard(imagePath: string, format: string): Promise<void> {
  if (format === "svg") {
    const svgContent = fs.readFileSync(imagePath, "utf-8");
    await Clipboard.copy(svgContent);
  } else {
    // For PNG format
    await execPromise(`osascript -e 'set the clipboard to (read (POSIX file "${imagePath}") as TIFF picture)'`);
  }
}

/**
 * @raycast AI Tool
 * @name generateMermaidImageTool
 * @description **Receives a Mermaid syntax string**, uses this syntax to generate a chart image (the format is based on user preferences), and copies the **generated image** to the system clipboard. This tool is used to complete the final steps of a user's request to "generate/draw a chart and copy an image". The AI should generate the Mermaid grammar first, then call this tool passing in that grammar.
 * @param {MermaidToolInput} input - The object containing the `mermaidSyntax` field.
 * @returns {Promise<string>} - A message string describing the result of the operation (successful generation and copying of the image, or an error).
 */
export default async function generateMermaidImageTool(input: MermaidToolInput): Promise<string> {
  const { mermaidSyntax } = input;

  // Input validation
  if (!mermaidSyntax?.trim()) {
    console.error("AI Tool called with invalid syntax:", mermaidSyntax);
    return "Mermaid syntax was not provided or is empty. Cannot generate diagram.";
  }

  console.log("AI Tool 'generateMermaidImageTool' called with syntax:", mermaidSyntax);
  const preferences = getPreferenceValues<Preferences>();
  const tempFileRef = { current: null as string | null };
  let outputImagePath: string | null = null;

  try {
    // Create a single toast that we'll update throughout the process
    const toast = await showToast({
      style: Toast.Style.Animated,
      title: "Generating diagram...",
    });

    // Generate the diagram
    outputImagePath = await generateMermaidDiagram(mermaidSyntax, tempFileRef);

    // Update toast to show progress
    toast.title = "Copying image to clipboard...";

    // Copy to clipboard
    await copyImageToClipboard(outputImagePath, preferences.outputFormat);

    // Update toast to show success
    toast.style = Toast.Style.Success;
    toast.title = "Diagram copied to clipboard";

    return "The Mermaid diagram was successfully generated and copied to your clipboard.";
  } catch (error) {
    console.error("AI tool execution failed:", error);
    const errorMessage = error instanceof Error ? error.message : String(error);

    await showFailureToast(error, {
      title: "Failed to generate diagram",
      message: errorMessage,
    });

    return `Diagram generation failed: ${errorMessage}. Please check if the Mermaid syntax is correct.`;
  } finally {
    // Clean up temporary files
    if (outputImagePath) {
      cleanupTempFile(outputImagePath);
      console.log("Cleaned image file:", outputImagePath);
    }

    if (tempFileRef.current) {
      cleanupTempFile(tempFileRef.current);
      console.log("Cleaned temporary file:", tempFileRef.current);
    }
  }
}
