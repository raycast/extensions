fragment IssueFields on Issue {
  id
  url
  title
  number
  closed
  state
  stateReason
  updatedAt
  author {
    ...AuthorFields
  }
  linkedBranches(first: 50) {
    totalCount
    nodes {
      ... on LinkedBranch {
        id
        ref {
          id
          name
        }
      }
    }
  }
  milestone {
    id
    title
  }
  repository {
    ...ShortRepositoryFields
  }
  comments(first: 0) {
    totalCount
  }
  assignees(first: 50) {
    totalCount
    nodes {
      ... on User {
        ...UserFields
      }
    }
  }
}

query repositoryCollaboratorsForIssues($owner: String!, $name: String!, $issueNumber: Int!) {
  repository(owner: $owner, name: $name) {
    collaborators(first: 25) {
      totalCount
      nodes {
        ... on User {
          ...UserFields
        }
      }
    }
    issue(number: $issueNumber) {
      assignees(first: 25) {
        totalCount
        nodes {
          id
        }
      }
    }
  }
}

query repositoryProjectsForIssues($owner: String!, $name: String!, $issueNumber: Int!) {
  repository(owner: $owner, name: $name) {
    projectsV2(first: 50, orderBy: { field: TITLE, direction: ASC }) {
      totalCount
      nodes {
        id
        title
        number
      }
    }
    issue(number: $issueNumber) {
      projectsV2(first: 50) {
        totalCount
        nodes {
          id
        }
      }
    }
  }
}

fragment IssueDetailFields on Issue {
  id
  url
  title
  body
  number
  closed
  state
  stateReason
  updatedAt
  author {
    ...AuthorFields
  }
  labels(first: 50, orderBy: { field: NAME, direction: ASC }) {
    totalCount
    nodes {
      id
      name
      color
      isDefault
    }
  }
  linkedBranches(first: 50) {
    totalCount
    nodes {
      ... on LinkedBranch {
        id
        ref {
          name
        }
      }
    }
  }
  milestone {
    id
    title
  }
  repository {
    ...ShortRepositoryFields
  }
  assignees(first: 50) {
    totalCount
    nodes {
      ... on User {
        ...UserFields
      }
    }
  }
  projectsV2(first: 25) {
    totalCount
    nodes {
      id
      title
    }
  }
}

query issueDetails($nodeId: ID!) {
  node(id: $nodeId) {
    ...IssueDetailFields
  }
}

query searchIssues($query: String!, $numberOfItems: Int!) {
  search(query: $query, type: ISSUE, first: $numberOfItems) {
    nodes {
      ...IssueFields
    }
  }
}

mutation closeIssue($nodeId: ID!, $stateReason: IssueClosedStateReason!) {
  closeIssue(input: { issueId: $nodeId, stateReason: $stateReason }) {
    issue {
      id
    }
  }
}

mutation reopenIssue($nodeId: ID!) {
  reopenIssue(input: { issueId: $nodeId }) {
    issue {
      id
    }
  }
}

mutation changeIssueAssignees($issueId: ID!, $assigneeIds: [ID!]) {
  updateIssue(input: { id: $issueId, assigneeIds: $assigneeIds }) {
    clientMutationId # Placeholder
  }
}

mutation changeIssueMilestone($issueId: ID!, $milestoneId: ID) {
  updateIssue(input: { id: $issueId, milestoneId: $milestoneId }) {
    clientMutationId # Placeholder
  }
}

mutation addIssueToProject($issueId: ID!, $projectId: ID!) {
  addProjectV2ItemById(input: { projectId: $projectId, contentId: $issueId }) {
    clientMutationId # Placeholder
  }
}

mutation createIssue(
  $repositoryId: ID!
  $title: String!
  $body: String!
  $assigneeIds: [ID!]!
  $labelIds: [ID!]!
  $milestoneId: ID
) {
  createIssue(
    input: {
      repositoryId: $repositoryId
      title: $title
      body: $body
      assigneeIds: $assigneeIds
      labelIds: $labelIds
      milestoneId: $milestoneId
    }
  ) {
    issue {
      ...IssueFields
    }
  }
}
