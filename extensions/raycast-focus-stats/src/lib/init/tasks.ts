import { arch, tmpdir } from "os";
import { SQLiteBindingFolder, SQLiteBindingPath, DatabaseMigrationsFolder } from "../db";
import fs from "fs";
import { join } from "path";
import { downloadFile, extractAndRewrite } from "./utils";
import { getDatabase } from "../db";
import { migrate } from "drizzle-orm/better-sqlite3/migrator";
import { markAsInitialized } from "./tracking";

// At the time of writing, 11.10.0 is the latest version of better-sqlite3.
const VERSION = "11.10.0";

/*
 * Task responsible for downloading better-sqlite3's native binding depending on the user's CPU
 * architecutre and node version. The operating system is assumed to be MacOS, as that is currently
 * the only place where Raycast is supported.
 */
export const downloadBinding = async () => {
  const nodeVersion = process.versions.modules;
  const architecture = arch();
  const downloadLink = `https://github.com/WiseLibs/better-sqlite3/releases/download/v${VERSION}/better-sqlite3-v${VERSION}-node-v${nodeVersion}-darwin-${architecture}.tar.gz`;

  try {
    // Validate that the binding doesn't already exist.
    if (fs.existsSync(SQLiteBindingPath)) {
      return null;
    }

    // If the folder where the binding is meant to be stored doesn't yet exist, create it.
    if (!fs.existsSync(SQLiteBindingFolder)) {
      fs.mkdirSync(SQLiteBindingFolder, { recursive: true });
    }

    // 1. Create a temporary folder to store the downloaded .tar.gz file
    // 2. Download the file to the temporary folder
    // 3. Extract the file's contents
    // 4. Move the binding to the correct folder
    const downloadFolder = tmpdir();
    const downloadPath = join(downloadFolder, "better-sqlite3.tar.gz");
    await downloadFile(downloadLink, downloadPath);
    await extractAndRewrite(downloadPath, "build/Release/better_sqlite3.node", SQLiteBindingPath);
  } catch (exception) {
    console.error("Failed to download better-sqlite3 binding.", exception);
  }
};

/*
 * Will apply any pending database migrations that were generated by Drizzle, to the user's existing
 * SQLite database.
 */
export function migrateDatabase() {
  migrate(getDatabase(), { migrationsFolder: DatabaseMigrationsFolder });
}

/*
 * Ensures the extension is fully initialized by running all necessary setup tasks.
 * Returns true if initialization was successful, false otherwise.
 */
export const ensureInitialized = async (): Promise<boolean> => {
  try {
    await downloadBinding();
    getDatabase();
    migrateDatabase();
    markAsInitialized();
    return true;
  } catch (error) {
    console.error("Failed to initialize extension:", error);
    return false;
  }
};
