import type { ModuleDoc } from "../types";

export const IO_ANSI: ModuleDoc = {
  functions: [
    {
      name: "yellow_background/0",
      type: "function",
      specs: ["@spec yellow_background() :: String.t()"],
      documentation: "Sets background color to yellow.",
    },
    {
      name: "yellow/0",
      type: "function",
      specs: ["@spec yellow() :: String.t()"],
      documentation: "Sets foreground color to yellow.",
    },
    {
      name: "white_background/0",
      type: "function",
      specs: ["@spec white_background() :: String.t()"],
      documentation: "Sets background color to white.",
    },
    {
      name: "white/0",
      type: "function",
      specs: ["@spec white() :: String.t()"],
      documentation: "Sets foreground color to white.",
    },
    {
      name: "underline/0",
      type: "function",
      specs: ["@spec underline() :: String.t()"],
      documentation: "Underline: single.",
    },
    {
      name: "syntax_colors/0",
      type: "function",
      specs: ["@spec syntax_colors() :: Keyword.t(ansidata())"],
      documentation:
        "Syntax colors to be used by `Inspect`.\n\nThose colors are used throughout Elixir's standard library,\nsuch as `dbg/2` and `IEx`.\n\nThe colors can be changed by setting the `:ansi_syntax_colors`\nin the `:elixir` application configuration. Configuration for\nmost built-in data types are supported: `:atom`, `:binary`,\n`:boolean`, `:charlist`, `:list`, `:map`, `:nil`, `:number`,\n`:string`, and `:tuple`. The default is:\n\n    [\n      atom: :cyan\n      boolean: :magenta,\n      charlist: :yellow,\n      nil: :magenta,\n      number: :yellow,\n      string: :green\n    ]\n\n",
    },
    {
      name: "reverse_off/0",
      type: "function",
      specs: ["@spec reverse_off() :: String.t()"],
      documentation: "Image: positive. Normal foreground and background.",
    },
    {
      name: "reverse/0",
      type: "function",
      specs: ["@spec reverse() :: String.t()"],
      documentation: "Image: negative. Swap foreground and background.",
    },
    {
      name: "reset/0",
      type: "function",
      specs: ["@spec reset() :: String.t()"],
      documentation: "Resets all attributes.",
    },
    {
      name: "red_background/0",
      type: "function",
      specs: ["@spec red_background() :: String.t()"],
      documentation: "Sets background color to red.",
    },
    {
      name: "red/0",
      type: "function",
      specs: ["@spec red() :: String.t()"],
      documentation: "Sets foreground color to red.",
    },
    {
      name: "primary_font/0",
      type: "function",
      specs: ["@spec primary_font() :: String.t()"],
      documentation: "Sets primary (default) font.",
    },
    {
      name: "overlined/0",
      type: "function",
      specs: ["@spec overlined() :: String.t()"],
      documentation: "Overlined.",
    },
    {
      name: "not_overlined/0",
      type: "function",
      specs: ["@spec not_overlined() :: String.t()"],
      documentation: "Not overlined.",
    },
    {
      name: "not_italic/0",
      type: "function",
      specs: ["@spec not_italic() :: String.t()"],
      documentation: "Not italic.",
    },
    {
      name: "not_framed_encircled/0",
      type: "function",
      specs: ["@spec not_framed_encircled() :: String.t()"],
      documentation: "Not framed or encircled.",
    },
    {
      name: "normal/0",
      type: "function",
      specs: ["@spec normal() :: String.t()"],
      documentation: "Normal color or intensity.",
    },
    {
      name: "no_underline/0",
      type: "function",
      specs: ["@spec no_underline() :: String.t()"],
      documentation: "Underline: none.",
    },
    {
      name: "magenta_background/0",
      type: "function",
      specs: ["@spec magenta_background() :: String.t()"],
      documentation: "Sets background color to magenta.",
    },
    {
      name: "magenta/0",
      type: "function",
      specs: ["@spec magenta() :: String.t()"],
      documentation: "Sets foreground color to magenta.",
    },
    {
      name: "light_yellow_background/0",
      type: "function",
      specs: ["@spec light_yellow_background() :: String.t()"],
      documentation: "Sets background color to light yellow.",
    },
    {
      name: "light_yellow/0",
      type: "function",
      specs: ["@spec light_yellow() :: String.t()"],
      documentation: "Sets foreground color to light yellow.",
    },
    {
      name: "light_white_background/0",
      type: "function",
      specs: ["@spec light_white_background() :: String.t()"],
      documentation: "Sets background color to light white.",
    },
    {
      name: "light_white/0",
      type: "function",
      specs: ["@spec light_white() :: String.t()"],
      documentation: "Sets foreground color to light white.",
    },
    {
      name: "light_red_background/0",
      type: "function",
      specs: ["@spec light_red_background() :: String.t()"],
      documentation: "Sets background color to light red.",
    },
    {
      name: "light_red/0",
      type: "function",
      specs: ["@spec light_red() :: String.t()"],
      documentation: "Sets foreground color to light red.",
    },
    {
      name: "light_magenta_background/0",
      type: "function",
      specs: ["@spec light_magenta_background() :: String.t()"],
      documentation: "Sets background color to light magenta.",
    },
    {
      name: "light_magenta/0",
      type: "function",
      specs: ["@spec light_magenta() :: String.t()"],
      documentation: "Sets foreground color to light magenta.",
    },
    {
      name: "light_green_background/0",
      type: "function",
      specs: ["@spec light_green_background() :: String.t()"],
      documentation: "Sets background color to light green.",
    },
    {
      name: "light_green/0",
      type: "function",
      specs: ["@spec light_green() :: String.t()"],
      documentation: "Sets foreground color to light green.",
    },
    {
      name: "light_cyan_background/0",
      type: "function",
      specs: ["@spec light_cyan_background() :: String.t()"],
      documentation: "Sets background color to light cyan.",
    },
    {
      name: "light_cyan/0",
      type: "function",
      specs: ["@spec light_cyan() :: String.t()"],
      documentation: "Sets foreground color to light cyan.",
    },
    {
      name: "light_blue_background/0",
      type: "function",
      specs: ["@spec light_blue_background() :: String.t()"],
      documentation: "Sets background color to light blue.",
    },
    {
      name: "light_blue/0",
      type: "function",
      specs: ["@spec light_blue() :: String.t()"],
      documentation: "Sets foreground color to light blue.",
    },
    {
      name: "light_black_background/0",
      type: "function",
      specs: ["@spec light_black_background() :: String.t()"],
      documentation: "Sets background color to light black.",
    },
    {
      name: "light_black/0",
      type: "function",
      specs: ["@spec light_black() :: String.t()"],
      documentation: "Sets foreground color to light black.",
    },
    {
      name: "italic/0",
      type: "function",
      specs: ["@spec italic() :: String.t()"],
      documentation:
        "Italic: on. Not widely supported. Sometimes treated as inverse.",
    },
    {
      name: "inverse_off/0",
      type: "function",
      specs: ["@spec inverse_off() :: String.t()"],
      documentation: "Image: positive. Normal foreground and background.",
    },
    {
      name: "inverse/0",
      type: "function",
      specs: ["@spec inverse() :: String.t()"],
      documentation: "Image: negative. Swap foreground and background.",
    },
    {
      name: "home/0",
      type: "function",
      specs: ["@spec home() :: String.t()"],
      documentation: "Sends cursor home.",
    },
    {
      name: "green_background/0",
      type: "function",
      specs: ["@spec green_background() :: String.t()"],
      documentation: "Sets background color to green.",
    },
    {
      name: "green/0",
      type: "function",
      specs: ["@spec green() :: String.t()"],
      documentation: "Sets foreground color to green.",
    },
    {
      name: "framed/0",
      type: "function",
      specs: ["@spec framed() :: String.t()"],
      documentation: "Framed.",
    },
    {
      name: "format_fragment/2",
      type: "function",
      specs: ["@spec format_fragment(ansidata(), boolean()) :: IO.chardata()"],
      documentation:
        'Formats a chardata-like argument by converting named ANSI sequences into actual\nANSI codes.\n\nThe named sequences are represented by atoms.\n\nAn optional boolean parameter can be passed to enable or disable\nemitting actual ANSI codes. When `false`, no ANSI codes will be emitted.\nBy default checks if ANSI is enabled using the `enabled?/0` function.\n\n## Examples\n\n    iex> IO.ANSI.format_fragment([:bright, ~c"Word"], true)\n    [[[[[[] | "\\e[1m"], 87], 111], 114], 100]\n\n',
    },
    {
      name: "format/2",
      type: "function",
      specs: ["@spec format(ansidata(), boolean()) :: IO.chardata()"],
      documentation:
        'Formats a chardata-like argument by converting named ANSI sequences into actual\nANSI codes.\n\nThe named sequences are represented by atoms.\n\nIt will also append an `IO.ANSI.reset/0` to the chardata when a conversion is\nperformed. If you don\'t want this behavior, use `format_fragment/2`.\n\nAn optional boolean parameter can be passed to enable or disable\nemitting actual ANSI codes. When `false`, no ANSI codes will be emitted.\nBy default checks if ANSI is enabled using the `enabled?/0` function.\n\nAn `ArgumentError` will be raised if an invalid ANSI code is provided.\n\n## Examples\n\n    iex> IO.ANSI.format(["Hello, ", :red, :bright, "world!"], true)\n    [[[[[[], "Hello, "] | "\\e[31m"] | "\\e[1m"], "world!"] | "\\e[0m"]\n\n',
    },
    {
      name: "font_9/0",
      type: "function",
      specs: ["@spec font_9() :: String.t()"],
      documentation: "Sets alternative font 9.",
    },
    {
      name: "font_8/0",
      type: "function",
      specs: ["@spec font_8() :: String.t()"],
      documentation: "Sets alternative font 8.",
    },
    {
      name: "font_7/0",
      type: "function",
      specs: ["@spec font_7() :: String.t()"],
      documentation: "Sets alternative font 7.",
    },
    {
      name: "font_6/0",
      type: "function",
      specs: ["@spec font_6() :: String.t()"],
      documentation: "Sets alternative font 6.",
    },
    {
      name: "font_5/0",
      type: "function",
      specs: ["@spec font_5() :: String.t()"],
      documentation: "Sets alternative font 5.",
    },
    {
      name: "font_4/0",
      type: "function",
      specs: ["@spec font_4() :: String.t()"],
      documentation: "Sets alternative font 4.",
    },
    {
      name: "font_3/0",
      type: "function",
      specs: ["@spec font_3() :: String.t()"],
      documentation: "Sets alternative font 3.",
    },
    {
      name: "font_2/0",
      type: "function",
      specs: ["@spec font_2() :: String.t()"],
      documentation: "Sets alternative font 2.",
    },
    {
      name: "font_1/0",
      type: "function",
      specs: ["@spec font_1() :: String.t()"],
      documentation: "Sets alternative font 1.",
    },
    {
      name: "faint/0",
      type: "function",
      specs: ["@spec faint() :: String.t()"],
      documentation: "Faint (decreased intensity). Not widely supported.",
    },
    {
      name: "encircled/0",
      type: "function",
      specs: ["@spec encircled() :: String.t()"],
      documentation: "Encircled.",
    },
    {
      name: "enabled?/0",
      type: "function",
      specs: ["@spec enabled?() :: boolean()"],
      documentation:
        "Checks if ANSI coloring is supported and enabled on this machine.\n\nThis function simply reads the configuration value for\n`:ansi_enabled` in the `:elixir` application. The value is by\ndefault `false` unless Elixir can detect during startup that\nboth `stdout` and `stderr` are terminals.\n",
    },
    {
      name: "default_color/0",
      type: "function",
      specs: ["@spec default_color() :: String.t()"],
      documentation: "Default text color.",
    },
    {
      name: "default_background/0",
      type: "function",
      specs: ["@spec default_background() :: String.t()"],
      documentation: "Default background color.",
    },
    {
      name: "cyan_background/0",
      type: "function",
      specs: ["@spec cyan_background() :: String.t()"],
      documentation: "Sets background color to cyan.",
    },
    {
      name: "cyan/0",
      type: "function",
      specs: ["@spec cyan() :: String.t()"],
      documentation: "Sets foreground color to cyan.",
    },
    {
      name: "cursor_up/1",
      type: "function",
      specs: ["@spec cursor_up(pos_integer()) :: String.t()"],
      documentation: "Sends cursor `lines` up.",
    },
    {
      name: "cursor_right/1",
      type: "function",
      specs: ["@spec cursor_right(pos_integer()) :: String.t()"],
      documentation: "Sends cursor `columns` to the right.",
    },
    {
      name: "cursor_left/1",
      type: "function",
      specs: ["@spec cursor_left(pos_integer()) :: String.t()"],
      documentation: "Sends cursor `columns` to the left.",
    },
    {
      name: "cursor_down/1",
      type: "function",
      specs: ["@spec cursor_down(pos_integer()) :: String.t()"],
      documentation: "Sends cursor `lines` down.",
    },
    {
      name: "cursor/2",
      type: "function",
      specs: [
        "@spec cursor(non_neg_integer(), non_neg_integer()) :: String.t()",
      ],
      documentation:
        "Sends cursor to the absolute position specified by `line` and `column`.\n\nLine `0` and column `0` would mean the top left corner.\n",
    },
    {
      name: "crossed_out/0",
      type: "function",
      specs: ["@spec crossed_out() :: String.t()"],
      documentation:
        "Crossed-out. Characters legible, but marked for deletion. Not widely supported.",
    },
    {
      name: "conceal/0",
      type: "function",
      specs: ["@spec conceal() :: String.t()"],
      documentation: "Conceal. Not widely supported.",
    },
    {
      name: "color_background/3",
      type: "function",
      specs: ["@spec color_background(0..5, 0..5, 0..5) :: String.t()"],
      documentation:
        "Sets the background color from individual RGB values.\n\nValid values for each color are in the range 0 to 5.\n",
    },
    {
      name: "color_background/1",
      type: "function",
      specs: ["@spec color_background(0..255) :: String.t()"],
      documentation: "Sets background color.",
    },
    {
      name: "color/3",
      type: "function",
      specs: ["@spec color(0..5, 0..5, 0..5) :: String.t()"],
      documentation:
        "Sets the foreground color from individual RGB values.\n\nValid values for each color are in the range 0 to 5.\n",
    },
    {
      name: "color/1",
      type: "function",
      specs: ["@spec color(0..255) :: String.t()"],
      documentation: "Sets foreground color.",
    },
    {
      name: "clear_line/0",
      type: "function",
      specs: ["@spec clear_line() :: String.t()"],
      documentation: "Clears line.",
    },
    {
      name: "clear/0",
      type: "function",
      specs: ["@spec clear() :: String.t()"],
      documentation: "Clears screen.",
    },
    {
      name: "bright/0",
      type: "function",
      specs: ["@spec bright() :: String.t()"],
      documentation: "Bright (increased intensity) or bold.",
    },
    {
      name: "blue_background/0",
      type: "function",
      specs: ["@spec blue_background() :: String.t()"],
      documentation: "Sets background color to blue.",
    },
    {
      name: "blue/0",
      type: "function",
      specs: ["@spec blue() :: String.t()"],
      documentation: "Sets foreground color to blue.",
    },
    {
      name: "blink_slow/0",
      type: "function",
      specs: ["@spec blink_slow() :: String.t()"],
      documentation: "Blink: slow. Less than 150 per minute.",
    },
    {
      name: "blink_rapid/0",
      type: "function",
      specs: ["@spec blink_rapid() :: String.t()"],
      documentation:
        "Blink: rapid. MS-DOS ANSI.SYS; 150 per minute or more; not widely supported.",
    },
    {
      name: "blink_off/0",
      type: "function",
      specs: ["@spec blink_off() :: String.t()"],
      documentation: "Blink: off.",
    },
    {
      name: "black_background/0",
      type: "function",
      specs: ["@spec black_background() :: String.t()"],
      documentation: "Sets background color to black.",
    },
    {
      name: "black/0",
      type: "function",
      specs: ["@spec black() :: String.t()"],
      documentation: "Sets foreground color to black.",
    },
  ],
  name: "IO.ANSI",
  callbacks: [],
  macros: [],
  types: [
    {
      name: "ansidata/0",
      type: "type",
      specs: ["@type ansidata() :: ansilist() | ansicode() | binary()"],
      documentation: null,
    },
    {
      name: "ansilist/0",
      type: "type",
      specs: [
        "@type ansilist() ::\n        maybe_improper_list(\n          char() | ansicode() | binary() | ansilist(),\n          binary() | ansicode() | []\n        )",
      ],
      documentation: null,
    },
    {
      name: "ansicode/0",
      type: "type",
      specs: ["@type ansicode() :: atom()"],
      documentation: null,
    },
  ],
};
