{
  "$schema": "https://www.raycast.com/schemas/extension.json",
  "name": "git-assistant",
  "title": "Git Assistant",
  "description": "Streamline your git workflow with AI-powered conventional commits and repository management.",
  "icon": "extension-icon.png",
  "author": "validate",
  "categories": [
    "Developer Tools"
  ],
  "license": "MIT",
  "commands": [
    {
      "name": "search-git-repositories",
      "icon": "search-git-repositories-icon.png",
      "title": "Search Git Repositories",
      "description": "Search for git repositories on your computer by name",
      "mode": "view"
    }
  ],
  "tools": [
    {
      "name": "get-current-directory",
      "title": "Get Current Directory",
      "description": "Gets the specified directory and checks if it's a git repository. Must be called first before other git operations."
    },
    {
      "name": "get-git-changes",
      "title": "Get Git Changes",
      "description": "Gets all types of changes in a git repository including staged, unstaged, and untracked files."
    },
    {
      "name": "commit-changes",
      "title": "Create Git Commit",
      "description": "Creates a git commit with the provided message, optionally staging all changes first. Use after reviewing the suggested commit message."
    },
    {
      "name": "run-git-command",
      "title": "Run Git Command",
      "description": "Runs a git command directly without any analysis or commit. Use when user wants to run a git command directly."
    }
  ],
  "ai": {
    "evals": [
      {
        "input": "@git-assistant Analyze my git changes and propose a commit message. Include scope and body",
        "expected": [
          {
            "callsTool": "get-current-directory"
          },
          {
            "callsTool": {
              "arguments": {
                "path": "/projects/git-assistant/",
                "onlyIncludeStagedChanges": false
              },
              "name": "get-git-changes"
            }
          }
        ],
        "mocks": {
          "get-current-directory": {
            "path": "/projects/git-assistant/",
            "gitDir": ".git"
          },
          "get-git-changes": {
            "path": "/projects/git-assistant",
            "changes": {
              "status": "M package.json",
              "stagedChanges": "",
              "untrackedFiles": [],
              "untrackedDiff": "",
              "unstagedChanges": "diff --git a/package.json b/package.json"
            },
            "summary": {
              "hasUnstagedChanges": false,
              "hasStagedChanges": true,
              "hasUntrackedFiles": false,
              "totalFiles": 1,
              "stats": {
                "deletions": 0,
                "filesChanged": 1,
                "insertions": 0
              }
            }
          }
        }
      },
      {
        "input": "@git-assistant Run git status",
        "expected": [
          {
            "callsTool": "get-current-directory"
          },
          {
            "callsTool": {
              "name": "run-git-command",
              "arguments": {
                "isGitRepo": true,
                "command": "git status"
              }
            }
          }
        ],
        "mocks": {
          "get-current-directory": {
            "path": "/projects/git-assistant/",
            "gitDir": ".git"
          },
          "run-git-command": {
            "command": "git status",
            "isGitRepo": true
          }
        },
        "meetsCriteria": "Runs the git status command"
      },
      {
        "input": "@git-assistant Stage and commit only staged changes. Include body.",
        "expected": [
          {
            "callsTool": "get-current-directory"
          },
          {
            "callsTool": {
              "name": "get-git-changes",
              "arguments": {
                "onlyIncludeStagedChanges": true
              }
            }
          },
          {
            "callsTool": "commit-changes"
          }
        ],
        "mocks": {
          "get-current-directory": {
            "path": "/projects/git-assistant",
            "gitDir": ".git"
          },
          "get-git-changes": {
            "path": "/projects/git-assistant",
            "changes": {
              "status": "M  ai.yaml",
              "stagedChanges": "diff --git a/ai.yaml b/ai.yaml",
              "untrackedFiles": [],
              "untrackedDiff": "",
              "unstagedChanges": ""
            },
            "summary": {
              "hasUnstagedChanges": true,
              "hasStagedChanges": true,
              "hasUntrackedFiles": false,
              "totalFiles": 1,
              "stats": {
                "deletions": 0,
                "filesChanged": 1,
                "insertions": 0
              }
            }
          },
          "commit-changes": {
            "success": true,
            "message": "refactor: update instructions"
          }
        }
      },
      {
        "input": "@git-assistant Stage and commit all changes. Include body and scope.",
        "expected": [
          {
            "callsTool": "get-current-directory"
          },
          {
            "callsTool": {
              "name": "get-git-changes",
              "arguments": {
                "onlyIncludeStagedChanges": false
              }
            }
          },
          {
            "callsTool": "commit-changes"
          }
        ],
        "mocks": {
          "get-git-changes": {
            "path": "/projects/git-assistant",
            "changes": {
              "status": "M package.json",
              "stagedChanges": "",
              "untrackedFiles": [],
              "untrackedDiff": "",
              "unstagedChanges": "diff --git a/package.json b/package.json"
            },
            "summary": {
              "hasUnstagedChanges": false,
              "hasStagedChanges": true,
              "hasUntrackedFiles": false,
              "totalFiles": 1,
              "stats": {
                "deletions": 0,
                "filesChanged": 1,
                "insertions": 0
              }
            }
          },
          "get-current-directory": {
            "path": "/projects/git-assistant",
            "gitDir": ".git"
          },
          "commit-changes": {
            "success": true,
            "message": "refactor(package): update package.json",
            "path": "/projects/git-assistant"
          }
        }
      },
      {
        "input": "@git-assistant Can you create a new branch named test/call-ducks?",
        "expected": [
          {
            "callsTool": "get-current-directory"
          },
          {
            "callsTool": {
              "name": "run-git-command",
              "arguments": {
                "command": "git checkout -b test/call-ducks",
                "isGitRepo": true
              }
            }
          }
        ],
        "mocks": {
          "run-git-command": {
            "command": "git checkout -b test/call-ducks",
            "path": "/projects/git-assistant",
            "output": ""
          },
          "get-current-directory": {
            "path": "/projects/git-assistant",
            "gitDir": ".git"
          }
        }
      },
      {
        "input": "@git-assistant Current status of the repo please",
        "expected": [
          {
            "callsTool": {
              "name": "get-current-directory"
            }
          },
          {
            "callsTool": {
              "name": "run-git-command",
              "arguments": {
                "path": "/projects/git-assistant",
                "isGitRepo": true
              }
            }
          }
        ],
        "mocks": {
          "get-current-directory": {
            "path": "/projects/git-assistant",
            "gitDir": ".git"
          },
          "run-git-command": {
            "command": "git status",
            "path": "/projects/git-assistant",
            "output": "Your branch is up to date"
          }
        }
      }
    ]
  },
  "dependencies": {
    "@raycast/api": "^1.87.4",
    "@raycast/utils": "^1.17.0",
    "node-spotlight": "^1.0.0"
  },
  "devDependencies": {
    "@raycast/eslint-config": "^1.0.11",
    "@types/node": "20.8.10",
    "@types/react": "18.3.3",
    "eslint": "^8.57.0",
    "prettier": "^3.3.3",
    "typescript": "^5.4.5"
  },
  "scripts": {
    "build": "ray build",
    "dev": "ray develop",
    "fix-lint": "ray lint --fix",
    "lint": "ray lint",
    "publish": "npx @raycast/api@latest publish"
  }
}
