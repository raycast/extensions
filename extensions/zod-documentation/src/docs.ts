export const docs = [
  { title: "Introduction", id: "introduction" },
  {
    title: "Ecosystem",
    id: "ecosystem",
    children: [
      { title: "Resources", id: "resources" },
      { title: "API libraries", id: "api-libraries" },
      { title: "Form integrations", id: "form-integrations" },
      { title: "Zod to X", id: "zod-to-x" },
      { title: "X to Zod", id: "x-to-zod" },
      { title: "Mocking", id: "mocking" },
      { title: "Powered by Zod", id: "powered-by-zod" },
      { title: "Utilities for Zod", id: "utilities-for-zod" },
    ],
  },
  {
    title: "Installation",
    id: "installation",
    children: [
      { title: "Requirements", id: "requirements" },
      { title: "From npm (Node/Bun)", id: "from-npm-nodebun" },
      { title: "From deno.land/x (Deno)", id: "from-denolandx-deno" },
    ],
  },
  { title: "Basic usage", id: "basic-usage" },
  { title: "Primitives", id: "primitives" },
  { title: "Coercion for primitives", id: "coercion-for-primitives" },
  { title: "Literals", id: "literals" },
  {
    title: "Strings",
    id: "strings",
    children: [
      { title: "Datetimes", id: "datetimes" },
      { title: "Dates", id: "dates" },
      { title: "Times", id: "times" },
      { title: "IP addresses", id: "ip-addresses" },
    ],
  },
  { title: "Numbers", id: "numbers" },
  { title: "BigInts", id: "bigints" },
  { title: "NaNs", id: "nans" },
  { title: "Booleans", id: "booleans" },
  { title: "Dates", id: "dates-1" },
  { title: "Zod enums", id: "zod-enums" },
  { title: "Native enums", id: "native-enums" },
  { title: "Optionals", id: "optionals" },
  { title: "Nullables", id: "nullables" },
  {
    title: "Objects",
    id: "objects",
    children: [
      { title: ".shape", id: "shape" },
      { title: ".keyof", id: "keyof" },
      { title: ".extend", id: "extend" },
      { title: ".merge", id: "merge" },
      { title: ".pick/.omit", id: "pickomit" },
      { title: ".partial", id: "partial" },
      { title: ".deepPartial", id: "deeppartial" },
      { title: ".required", id: "required" },
      { title: ".passthrough", id: "passthrough" },
      { title: ".strict", id: "strict" },
      { title: ".strip", id: "strip" },
      { title: ".catchall", id: "catchall" },
    ],
  },
  {
    title: "Arrays",
    id: "arrays",
    children: [
      { title: ".element", id: "element" },
      { title: ".nonempty", id: "nonempty" },
      { title: ".min/.max/.length", id: "minmaxlength" },
    ],
  },
  { title: "Tuples", id: "tuples" },
  { title: "Unions", id: "unions" },
  { title: "Discriminated unions", id: "discriminated-unions" },
  { title: "Records", id: "records" },
  { title: "Maps", id: "maps" },
  { title: "Sets", id: "sets" },
  { title: "Intersections", id: "intersections" },
  {
    title: "Recursive types",
    id: "recursive-types",
    children: [
      { title: "ZodType with ZodEffects", id: "zodtype-with-zodeffects" },
      { title: "JSON type", id: "json-type" },
      { title: "Cyclical objects", id: "cyclical-objects" },
    ],
  },
  { title: "Promises", id: "promises" },
  { title: "Instanceof", id: "instanceof" },
  { title: "Functions", id: "functions" },
  { title: "Preprocess", id: "preprocess" },
  { title: "Custom schemas", id: "custom-schemas" },
  {
    title: "Schema methods",
    id: "schema-methods",
    children: [
      { title: ".parse", id: "parse" },
      { title: ".parseAsync", id: "parseasync" },
      { title: ".safeParse", id: "safeparse" },
      { title: ".safeParseAsync", id: "safeparseasync" },
      {
        title: ".refine",
        id: "refine",
        children: [
          { title: "Arguments", id: "arguments" },
          { title: "Customize error path", id: "customize-error-path" },
          { title: "Asynchronous refinements", id: "asynchronous-refinements" },
          { title: "Relationship to transforms", id: "relationship-to-transforms" },
        ],
      },
      {
        title: ".superRefine",
        id: "superrefine",
        children: [
          { title: "Abort early", id: "abort-early" },
          { title: "Type refinements", id: "type-refinements" },
        ],
      },
      {
        title: ".transform",
        id: "transform",
        children: [
          { title: "Chaining order", id: "chaining-order" },
          { title: "Validating during transform", id: "validating-during-transform" },
          { title: "Relationship to refinements", id: "relationship-to-refinements" },
          { title: "Async transforms", id: "async-transforms" },
        ],
      },
      { title: ".default", id: "default" },
      { title: ".describe", id: "describe" },
      { title: ".catch", id: "catch" },
      { title: ".optional", id: "optional" },
      { title: ".nullable", id: "nullable" },
      { title: ".nullish", id: "nullish" },
      { title: ".array", id: "array" },
      { title: ".promise", id: "promise" },
      { title: ".or", id: "or" },
      { title: ".and", id: "and" },
      { title: ".brand", id: "brand" },
      { title: ".readonly", id: "readonly" },
      {
        title: ".pipe",
        id: "pipe",
        children: [
          {
            title: "You can use .pipe() to fix common issues with z.coerce.",
            id: "you-can-use-pipe-to-fix-common-issues-with-zcoerce",
          },
        ],
      },
    ],
  },
  {
    title: "Guides and concepts",
    id: "guides-and-concepts",
    children: [
      { title: "Type inference", id: "type-inference" },
      {
        title: "Writing generic functions",
        id: "writing-generic-functions",
        children: [{ id: "constraining-allowable-inputs", title: "Constraining allowable inputs" }],
      },
      { id: "error-handling", title: "Error handling" },
      { id: "error-formatting", title: "Error formatting" },
    ],
  },
  {
    title: "Comparison",
    id: "comparison",
    children: [
      { id: "joi", title: "Joi" },
      { id: "yup", title: "Yup" },
      { id: "io-ts", title: "io-ts" },
      { id: "runtypes", title: "Runtypes" },
      { id: "ow", title: "Ow" },
    ],
  },
  { id: "changelog", title: "Changelog" },
];
