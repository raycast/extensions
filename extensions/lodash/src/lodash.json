[
  {
    "name": "add",
    "category": "Math",
    "description": "Adds two numbers.",
    "since": "3.4.0",
    "examples": ["add(6, 4);\n// => 10"],
    "params": [
      {
        "name": "augend",
        "type": "number",
        "description": "The first number in an addition.",
        "optional": false
      },
      {
        "name": "addend",
        "type": "number",
        "description": "The second number in an addition.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the total."
    }
  },
  {
    "name": "after",
    "category": "Function",
    "description": "The opposite of `before`; this method creates a function that invokes\n`func` once it's called `n` or more times.",
    "since": "0.1.0",
    "examples": [
      "var saves = ['profile', 'settings'];\n\nvar done = after(saves.length, function() {\n  console.log('done saving!');\n});\n\nforEach(saves, function(type) {\n  asyncSave({ 'type': type, 'complete': done });\n});\n// => Logs 'done saving!' after the two async saves have completed."
    ],
    "params": [
      {
        "name": "n",
        "type": "number",
        "description": "The number of calls before `func` is invoked.",
        "optional": false
      },
      {
        "name": "func",
        "type": "Function",
        "description": "The function to restrict.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new restricted function."
    }
  },
  {
    "name": "ary",
    "category": "Function",
    "description": "Creates a function that invokes `func`, with up to `n` arguments,\nignoring any additional arguments.",
    "since": "3.0.0",
    "examples": ["map(['6', '8', '10'], ary(parseInt, 1));\n// => [6, 8, 10]"],
    "params": [
      {
        "name": "func",
        "type": "Function",
        "description": "The function to cap arguments for.",
        "optional": false
      },
      {
        "name": "n=func.length",
        "type": "number",
        "description": "The arity cap.",
        "optional": true,
        "defaultValue": "func.length"
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new capped function."
    }
  },
  {
    "name": "assign",
    "category": "Object",
    "description": "Assigns own enumerable string keyed properties of source objects to the\ndestination object. Source objects are applied from left to right.\nSubsequent sources overwrite property assignments of previous sources.\n<br>\n<br>\n**Note:** This method mutates `object` and is loosely based on\n[`Object.assign`](https://mdn.io/Object/assign).",
    "since": "0.10.0",
    "examples": [
      "function Foo() {\n  this.a = 1;\n}\n\nfunction Bar() {\n  this.c = 3;\n}\n\nFoo.prototype.b = 2;\nBar.prototype.d = 4;\n\nassign({ 'a': 0 }, new Foo, new Bar);\n// => { 'a': 1, 'c': 3 }"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The destination object.",
        "optional": false
      },
      {
        "name": "sources",
        "type": "...Object",
        "description": "The source objects.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns `object`."
    }
  },
  {
    "name": "assignIn",
    "category": "Object",
    "description": "This method is like `assign` except that it iterates over own and\ninherited source properties.\n<br>\n<br>\n**Note:** This method mutates `object`.",
    "since": "4.0.0",
    "examples": [
      "function Foo() {\n  this.a = 1;\n}\n\nfunction Bar() {\n  this.c = 3;\n}\n\nFoo.prototype.b = 2;\nBar.prototype.d = 4;\n\nassignIn({ 'a': 0 }, new Foo, new Bar);\n// => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The destination object.",
        "optional": false
      },
      {
        "name": "sources",
        "type": "...Object",
        "description": "The source objects.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns `object`."
    }
  },
  {
    "name": "assignInWith",
    "category": "Object",
    "description": "This method is like `assignIn` except that it accepts `customizer`\nwhich is invoked to produce the assigned values. If `customizer` returns\n`undefined`, assignment is handled by the method instead. The `customizer`\nis invoked with five arguments: *(objValue, srcValue, key, object, source)*.\n<br>\n<br>\n**Note:** This method mutates `object`.",
    "since": "4.0.0",
    "examples": [
      "function customizer(objValue, srcValue) {\n  return isUndefined(objValue) ? srcValue : objValue;\n}\n\nvar defaults = partialRight(assignInWith, customizer);\n\ndefaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n// => { 'a': 1, 'b': 2 }"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The destination object.",
        "optional": false
      },
      {
        "name": "sources",
        "type": "...Object",
        "description": "The source objects.",
        "optional": false
      },
      {
        "name": "customizer",
        "type": "Function",
        "description": "The function to customize assigned values.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns `object`."
    }
  },
  {
    "name": "assignWith",
    "category": "Object",
    "description": "This method is like `assign` except that it accepts `customizer`\nwhich is invoked to produce the assigned values. If `customizer` returns\n`undefined`, assignment is handled by the method instead. The `customizer`\nis invoked with five arguments: *(objValue, srcValue, key, object, source)*.\n<br>\n<br>\n**Note:** This method mutates `object`.",
    "since": "4.0.0",
    "examples": [
      "function customizer(objValue, srcValue) {\n  return isUndefined(objValue) ? srcValue : objValue;\n}\n\nvar defaults = partialRight(assignWith, customizer);\n\ndefaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n// => { 'a': 1, 'b': 2 }"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The destination object.",
        "optional": false
      },
      {
        "name": "sources",
        "type": "...Object",
        "description": "The source objects.",
        "optional": false
      },
      {
        "name": "customizer",
        "type": "Function",
        "description": "The function to customize assigned values.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns `object`."
    }
  },
  {
    "name": "at",
    "category": "Object",
    "description": "Creates an array of values corresponding to `paths` of `object`.",
    "since": "1.0.0",
    "examples": ["var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n\nat(object, ['a[0].b.c', 'a[1]']);\n// => [3, 4]"],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to iterate over.",
        "optional": false
      },
      {
        "name": "paths",
        "type": "...(string|string[])",
        "description": "The property paths to pick.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the picked values."
    }
  },
  {
    "name": "attempt",
    "category": "Util",
    "description": "Attempts to invoke `func`, returning either the result or the caught error\nobject. Any additional arguments are provided to `func` when it's invoked.",
    "since": "3.0.0",
    "examples": [
      "// Avoid throwing errors for invalid selectors.\nvar elements = attempt(function(selector) {\n  return document.querySelectorAll(selector);\n}, '>_>');\n\nif (isError(elements)) {\n  elements = [];\n}"
    ],
    "params": [
      {
        "name": "func",
        "type": "Function",
        "description": "The function to attempt.",
        "optional": false
      },
      {
        "name": "args",
        "type": "...*",
        "description": "The arguments to invoke `func` with.",
        "optional": true
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the `func` result or error object."
    }
  },
  {
    "name": "before",
    "category": "Function",
    "description": "Creates a function that invokes `func`, with the `this` binding and arguments\nof the created function, while it's called less than `n` times. Subsequent\ncalls to the created function return the result of the last `func` invocation.",
    "since": "3.0.0",
    "examples": [
      "jQuery(element).on('click', before(5, addContactToList));\n// => Allows adding up to 4 contacts to the list."
    ],
    "params": [
      {
        "name": "n",
        "type": "number",
        "description": "The number of calls at which `func` is no longer invoked.",
        "optional": false
      },
      {
        "name": "func",
        "type": "Function",
        "description": "The function to restrict.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new restricted function."
    }
  },
  {
    "name": "bind",
    "category": "Function",
    "description": "Creates a function that invokes `func` with the `this` binding of `thisArg`\nand `partials` prepended to the arguments it receives.\n<br>\n<br>\nThe `bind.placeholder` value, which defaults to `_` in monolithic builds,\nmay be used as a placeholder for partially applied arguments.\n<br>\n<br>\n**Note:** Unlike native `Function#bind`, this method doesn't set the \"length\"\nproperty of bound functions.",
    "since": "0.1.0",
    "examples": [
      "function greet(greeting, punctuation) {\n  return greeting + ' ' + this.user + punctuation;\n}\n\nvar object = { 'user': 'fred' };\n\nvar bound = bind(greet, object, 'hi');\nbound('!');\n// => 'hi fred!'\n\n// Bound with placeholders.\nvar bound = bind(greet, object, _, '!');\nbound('hi');\n// => 'hi fred!'"
    ],
    "params": [
      {
        "name": "func",
        "type": "Function",
        "description": "The function to bind.",
        "optional": false
      },
      {
        "name": "thisArg",
        "type": "*",
        "description": "The `this` binding of `func`.",
        "optional": false
      },
      {
        "name": "partials",
        "type": "...*",
        "description": "The arguments to be partially applied.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new bound function."
    }
  },
  {
    "name": "bindAll",
    "category": "Util",
    "description": "Binds methods of an object to the object itself, overwriting the existing\nmethod.\n<br>\n<br>\n**Note:** This method doesn't set the \"length\" property of bound functions.",
    "since": "0.1.0",
    "examples": [
      "var view = {\n  'label': 'docs',\n  'click': function() {\n    console.log('clicked ' + this.label);\n  }\n};\n\nbindAll(view, ['click']);\njQuery(element).on('click', view.click);\n// => Logs 'clicked docs' when clicked."
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to bind and assign the bound methods to.",
        "optional": false
      },
      {
        "name": "methodNames",
        "type": "...(string|string[])",
        "description": "The object method names to bind.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns `object`."
    }
  },
  {
    "name": "bindKey",
    "category": "Function",
    "description": "Creates a function that invokes the method at `object[key]` with `partials`\nprepended to the arguments it receives.\n<br>\n<br>\nThis method differs from `bind` by allowing bound functions to reference\nmethods that may be redefined or don't yet exist. See\n[Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\nfor more details.\n<br>\n<br>\nThe `bindKey.placeholder` value, which defaults to `_` in monolithic\nbuilds, may be used as a placeholder for partially applied arguments.",
    "since": "0.10.0",
    "examples": [
      "var object = {\n  'user': 'fred',\n  'greet': function(greeting, punctuation) {\n    return greeting + ' ' + this.user + punctuation;\n  }\n};\n\nvar bound = bindKey(object, 'greet', 'hi');\nbound('!');\n// => 'hi fred!'\n\nobject.greet = function(greeting, punctuation) {\n  return greeting + 'ya ' + this.user + punctuation;\n};\n\nbound('!');\n// => 'hiya fred!'\n\n// Bound with placeholders.\nvar bound = bindKey(object, 'greet', _, '!');\nbound('hi');\n// => 'hiya fred!'"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to invoke the method on.",
        "optional": false
      },
      {
        "name": "key",
        "type": "string",
        "description": "The key of the method.",
        "optional": false
      },
      {
        "name": "partials",
        "type": "...*",
        "description": "The arguments to be partially applied.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new bound function."
    }
  },
  {
    "name": "camelCase",
    "category": "String",
    "description": "Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).",
    "since": "3.0.0",
    "examples": [
      "camelCase('Foo Bar');\n// => 'fooBar'\n\ncamelCase('--foo-bar--');\n// => 'fooBar'\n\ncamelCase('__FOO_BAR__');\n// => 'fooBar'"
    ],
    "params": [
      {
        "name": "string=''",
        "type": "string",
        "description": "The string to convert.",
        "optional": true,
        "defaultValue": "''"
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the camel cased string."
    }
  },
  {
    "name": "capitalize",
    "category": "String",
    "description": "Converts the first character of `string` to upper case and the remaining\nto lower case.",
    "since": "3.0.0",
    "examples": ["capitalize('FRED');\n// => 'Fred'"],
    "params": [
      {
        "name": "string=''",
        "type": "string",
        "description": "The string to capitalize.",
        "optional": true,
        "defaultValue": "''"
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the capitalized string."
    }
  },
  {
    "name": "castArray",
    "category": "Lang",
    "description": "Casts `value` as an array if it's not one.",
    "since": "4.4.0",
    "examples": [
      "castArray(1);\n// => [1]\n\ncastArray({ 'a': 1 });\n// => [{ 'a': 1 }]\n\ncastArray('abc');\n// => ['abc']\n\ncastArray(null);\n// => [null]\n\ncastArray(undefined);\n// => [undefined]\n\ncastArray();\n// => []\n\nvar array = [1, 2, 3];\nconsole.log(castArray(array) === array);\n// => true"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to inspect.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the cast array."
    }
  },
  {
    "name": "ceil",
    "category": "Math",
    "description": "Computes `number` rounded up to `precision`.",
    "since": "3.10.0",
    "examples": ["ceil(4.006);\n// => 5\n\nceil(6.004, 2);\n// => 6.01\n\nceil(6040, -2);\n// => 6100"],
    "params": [
      {
        "name": "number",
        "type": "number",
        "description": "The number to round up.",
        "optional": false
      },
      {
        "name": "precision=0",
        "type": "number",
        "description": "The precision to round up to.",
        "optional": true,
        "defaultValue": "0"
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the rounded up number."
    }
  },
  {
    "name": "chain",
    "category": "Seq",
    "description": "Creates a `lodash` wrapper instance that wraps `value` with explicit method\nchain sequences enabled. The result of such sequences must be unwrapped\nwith `_#value`.",
    "since": "1.3.0",
    "examples": [
      "var users = [\n  { 'user': 'barney',  'age': 36 },\n  { 'user': 'fred',    'age': 40 },\n  { 'user': 'pebbles', 'age': 1 }\n];\n\nvar youngest = _\n  .chain(users)\n  .sortBy('age')\n  .map(function(o) {\n    return o.user + ' is ' + o.age;\n  })\n  .head()\n  .value();\n// => 'pebbles is 1'"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to wrap.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns the new `lodash` wrapper instance."
    }
  },
  {
    "name": "chunk",
    "category": "Array",
    "description": "Creates an array of elements split into groups the length of `size`.\nIf `array` can't be split evenly, the final chunk will be the remaining\nelements.",
    "since": "3.0.0",
    "examples": [
      "chunk(['a', 'b', 'c', 'd'], 2);\n// => [['a', 'b'], ['c', 'd']]\n\nchunk(['a', 'b', 'c', 'd'], 3);\n// => [['a', 'b', 'c'], ['d']]"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to process.",
        "optional": false
      },
      {
        "name": "size=1",
        "type": "number",
        "description": "The length of each chunk",
        "optional": true,
        "defaultValue": "1"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of chunks."
    }
  },
  {
    "name": "clamp",
    "category": "Number",
    "description": "Clamps `number` within the inclusive `lower` and `upper` bounds.",
    "since": "4.0.0",
    "examples": ["clamp(-10, -5, 5);\n// => -5\n\nclamp(10, -5, 5);\n// => 5"],
    "params": [
      {
        "name": "number",
        "type": "number",
        "description": "The number to clamp.",
        "optional": false
      },
      {
        "name": "lower",
        "type": "number",
        "description": "The lower bound.",
        "optional": true
      },
      {
        "name": "upper",
        "type": "number",
        "description": "The upper bound.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the clamped number."
    }
  },
  {
    "name": "clone",
    "category": "Lang",
    "description": "Creates a shallow clone of `value`.\n<br>\n<br>\n**Note:** This method is loosely based on the\n[structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\nand supports cloning arrays, array buffers, booleans, date objects, maps,\nnumbers, `Object` objects, regexes, sets, strings, symbols, and typed\narrays. The own enumerable properties of `arguments` objects are cloned\nas plain objects. An empty object is returned for uncloneable values such\nas error objects, functions, DOM nodes, and WeakMaps.",
    "since": "0.1.0",
    "examples": [
      "var objects = [{ 'a': 1 }, { 'b': 2 }];\n\nvar shallow = clone(objects);\nconsole.log(shallow[0] === objects[0]);\n// => true"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to clone.",
        "optional": false
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the cloned value."
    }
  },
  {
    "name": "cloneDeep",
    "category": "Lang",
    "description": "This method is like `clone` except that it recursively clones `value`.",
    "since": "1.0.0",
    "examples": [
      "var objects = [{ 'a': 1 }, { 'b': 2 }];\n\nvar deep = cloneDeep(objects);\nconsole.log(deep[0] === objects[0]);\n// => false"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to recursively clone.",
        "optional": false
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the deep cloned value."
    }
  },
  {
    "name": "cloneDeepWith",
    "category": "Lang",
    "description": "This method is like `cloneWith` except that it recursively clones `value`.",
    "since": "4.0.0",
    "examples": [
      "function customizer(value) {\n  if (isElement(value)) {\n    return value.cloneNode(true);\n  }\n}\n\nvar el = cloneDeepWith(document.body, customizer);\n\nconsole.log(el === document.body);\n// => false\nconsole.log(el.nodeName);\n// => 'BODY'\nconsole.log(el.childNodes.length);\n// => 20"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to recursively clone.",
        "optional": false
      },
      {
        "name": "customizer",
        "type": "Function",
        "description": "The function to customize cloning.",
        "optional": true
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the deep cloned value."
    }
  },
  {
    "name": "cloneWith",
    "category": "Lang",
    "description": "This method is like `clone` except that it accepts `customizer` which\nis invoked to produce the cloned value. If `customizer` returns `undefined`,\ncloning is handled by the method instead. The `customizer` is invoked with\nup to four arguments; *(value [, index|key, object, stack])*.",
    "since": "4.0.0",
    "examples": [
      "function customizer(value) {\n  if (isElement(value)) {\n    return value.cloneNode(false);\n  }\n}\n\nvar el = cloneWith(document.body, customizer);\n\nconsole.log(el === document.body);\n// => false\nconsole.log(el.nodeName);\n// => 'BODY'\nconsole.log(el.childNodes.length);\n// => 0"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to clone.",
        "optional": false
      },
      {
        "name": "customizer",
        "type": "Function",
        "description": "The function to customize cloning.",
        "optional": true
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the cloned value."
    }
  },
  {
    "name": "compact",
    "category": "Array",
    "description": "Creates an array with all falsey values removed. The values `false`, `null`,\n`0`, `\"\"`, `undefined`, and `NaN` are falsey.",
    "since": "0.1.0",
    "examples": ["compact([0, 1, false, 2, '', 3]);\n// => [1, 2, 3]"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to compact.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of filtered values."
    }
  },
  {
    "name": "concat",
    "category": "Array",
    "description": "Creates a new array concatenating `array` with any additional arrays\nand/or values.",
    "since": "4.0.0",
    "examples": [
      "var array = [1];\nvar other = concat(array, 2, [3], [[4]]);\n\nconsole.log(other);\n// => [1, 2, 3, [4]]\n\nconsole.log(array);\n// => [1]"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to concatenate.",
        "optional": false
      },
      {
        "name": "values",
        "type": "...*",
        "description": "The values to concatenate.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new concatenated array."
    }
  },
  {
    "name": "cond",
    "category": "Util",
    "description": "Creates a function that iterates over `pairs` and invokes the corresponding\nfunction of the first predicate to return truthy. The predicate-function\npairs are invoked with the `this` binding and arguments of the created\nfunction.",
    "since": "4.0.0",
    "examples": [
      "var func = cond([\n  [matches({ 'a': 1 }),           constant('matches A')],\n  [conforms({ 'b': isNumber }), constant('matches B')],\n  [stubTrue,                      constant('no match')]\n]);\n\nfunc({ 'a': 1, 'b': 2 });\n// => 'matches A'\n\nfunc({ 'a': 0, 'b': 1 });\n// => 'matches B'\n\nfunc({ 'a': '1', 'b': '2' });\n// => 'no match'"
    ],
    "params": [
      {
        "name": "pairs",
        "type": "Array",
        "description": "The predicate-function pairs.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new composite function."
    }
  },
  {
    "name": "conforms",
    "category": "Util",
    "description": "Creates a function that invokes the predicate properties of `source` with\nthe corresponding property values of a given object, returning `true` if\nall predicates return truthy, else `false`.\n<br>\n<br>\n**Note:** The created function is equivalent to `conformsTo` with\n`source` partially applied.",
    "since": "4.0.0",
    "examples": [
      "var objects = [\n  { 'a': 2, 'b': 1 },\n  { 'a': 1, 'b': 2 }\n];\n\nfilter(objects, conforms({ 'b': function(n) { return n > 1; } }));\n// => [{ 'a': 1, 'b': 2 }]"
    ],
    "params": [
      {
        "name": "source",
        "type": "Object",
        "description": "The object of property predicates to conform to.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new spec function."
    }
  },
  {
    "name": "conformsTo",
    "category": "Lang",
    "description": "Checks if `object` conforms to `source` by invoking the predicate\nproperties of `source` with the corresponding property values of `object`.\n<br>\n<br>\n**Note:** This method is equivalent to `conforms` when `source` is\npartially applied.",
    "since": "4.14.0",
    "examples": [
      "var object = { 'a': 1, 'b': 2 };\n\nconformsTo(object, { 'b': function(n) { return n > 1; } });\n// => true\n\nconformsTo(object, { 'b': function(n) { return n > 2; } });\n// => false"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to inspect.",
        "optional": false
      },
      {
        "name": "source",
        "type": "Object",
        "description": "The object of property predicates to conform to.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `object` conforms, else `false`."
    }
  },
  {
    "name": "constant",
    "category": "Util",
    "description": "Creates a function that returns `value`.",
    "since": "2.4.0",
    "examples": [
      "var objects = times(2, constant({ 'a': 1 }));\n\nconsole.log(objects);\n// => [{ 'a': 1 }, { 'a': 1 }]\n\nconsole.log(objects[0] === objects[1]);\n// => true"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to return from the new function.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new constant function."
    }
  },
  {
    "name": "countBy",
    "category": "Collection",
    "description": "Creates an object composed of keys generated from the results of running\neach element of `collection` thru `iteratee`. The corresponding value of\neach key is the number of times the key was returned by `iteratee`. The\niteratee is invoked with one argument: *(value)*.",
    "since": "0.5.0",
    "examples": [
      "countBy([6.1, 4.2, 6.3], Math.floor);\n// => { '4': 1, '6': 2 }\n\n// The `property` iteratee shorthand.\ncountBy(['one', 'two', 'three'], 'length');\n// => { '3': 2, '5': 1 }"
    ],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The iteratee to transform keys.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns the composed aggregate object."
    }
  },
  {
    "name": "create",
    "category": "Object",
    "description": "Creates an object that inherits from the `prototype` object. If a\n`properties` object is given, its own enumerable string keyed properties\nare assigned to the created object.",
    "since": "2.3.0",
    "examples": [
      "function Shape() {\n  this.x = 0;\n  this.y = 0;\n}\n\nfunction Circle() {\n  Shape.call(this);\n}\n\nCircle.prototype = create(Shape.prototype, {\n  'constructor': Circle\n});\n\nvar circle = new Circle;\ncircle instanceof Circle;\n// => true\n\ncircle instanceof Shape;\n// => true"
    ],
    "params": [
      {
        "name": "prototype",
        "type": "Object",
        "description": "The object to inherit from.",
        "optional": false
      },
      {
        "name": "properties",
        "type": "Object",
        "description": "The properties to assign to the object.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns the new object."
    }
  },
  {
    "name": "curry",
    "category": "Function",
    "description": "Creates a function that accepts arguments of `func` and either invokes\n`func` returning its result, if at least `arity` number of arguments have\nbeen provided, or returns a function that accepts the remaining `func`\narguments, and so on. The arity of `func` may be specified if `func.length`\nis not sufficient.\n<br>\n<br>\nThe `curry.placeholder` value, which defaults to `_` in monolithic builds,\nmay be used as a placeholder for provided arguments.\n<br>\n<br>\n**Note:** This method doesn't set the \"length\" property of curried functions.",
    "since": "2.0.0",
    "examples": [
      "var abc = function(a, b, c) {\n  return [a, b, c];\n};\n\nvar curried = curry(abc);\n\ncurried(1)(2)(3);\n// => [1, 2, 3]\n\ncurried(1, 2)(3);\n// => [1, 2, 3]\n\ncurried(1, 2, 3);\n// => [1, 2, 3]\n\n// Curried with placeholders.\ncurried(1)(_, 3)(2);\n// => [1, 2, 3]"
    ],
    "params": [
      {
        "name": "func",
        "type": "Function",
        "description": "The function to curry.",
        "optional": false
      },
      {
        "name": "arity=func.length",
        "type": "number",
        "description": "The arity of `func`.",
        "optional": true,
        "defaultValue": "func.length"
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new curried function."
    }
  },
  {
    "name": "curryRight",
    "category": "Function",
    "description": "This method is like `curry` except that arguments are applied to `func`\nin the manner of `partialRight` instead of `partial`.\n<br>\n<br>\nThe `curryRight.placeholder` value, which defaults to `_` in monolithic\nbuilds, may be used as a placeholder for provided arguments.\n<br>\n<br>\n**Note:** This method doesn't set the \"length\" property of curried functions.",
    "since": "3.0.0",
    "examples": [
      "var abc = function(a, b, c) {\n  return [a, b, c];\n};\n\nvar curried = curryRight(abc);\n\ncurried(3)(2)(1);\n// => [1, 2, 3]\n\ncurried(2, 3)(1);\n// => [1, 2, 3]\n\ncurried(1, 2, 3);\n// => [1, 2, 3]\n\n// Curried with placeholders.\ncurried(3)(1, _)(2);\n// => [1, 2, 3]"
    ],
    "params": [
      {
        "name": "func",
        "type": "Function",
        "description": "The function to curry.",
        "optional": false
      },
      {
        "name": "arity=func.length",
        "type": "number",
        "description": "The arity of `func`.",
        "optional": true,
        "defaultValue": "func.length"
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new curried function."
    }
  },
  {
    "name": "debounce",
    "category": "Function",
    "description": "Creates a debounced function that delays invoking `func` until after `wait`\nmilliseconds have elapsed since the last time the debounced function was\ninvoked. The debounced function comes with a `cancel` method to cancel\ndelayed `func` invocations and a `flush` method to immediately invoke them.\nProvide `options` to indicate whether `func` should be invoked on the\nleading and/or trailing edge of the `wait` timeout. The `func` is invoked\nwith the last arguments provided to the debounced function. Subsequent\ncalls to the debounced function return the result of the last `func`\ninvocation.\n<br>\n<br>\n**Note:** If `leading` and `trailing` options are `true`, `func` is\ninvoked on the trailing edge of the timeout only if the debounced function\nis invoked more than once during the `wait` timeout.\n<br>\n<br>\nIf `wait` is `0` and `leading` is `false`, `func` invocation is deferred\nuntil to the next tick, similar to `setTimeout` with a timeout of `0`.\n<br>\n<br>\nSee [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\nfor details over the differences between `debounce` and `throttle`.",
    "since": "0.1.0",
    "examples": [
      "// Avoid costly calculations while the window size is in flux.\njQuery(window).on('resize', debounce(calculateLayout, 150));\n\n// Invoke `sendMail` when clicked, debouncing subsequent calls.\njQuery(element).on('click', debounce(sendMail, 300, {\n  'leading': true,\n  'trailing': false\n}));\n\n// Ensure `batchLog` is invoked once after 1 second of debounced calls.\nvar debounced = debounce(batchLog, 250, { 'maxWait': 1000 });\nvar source = new EventSource('/stream');\njQuery(source).on('message', debounced);\n\n// Cancel the trailing debounced invocation.\njQuery(window).on('popstate', debounced.cancel);"
    ],
    "params": [
      {
        "name": "func",
        "type": "Function",
        "description": "The function to debounce.",
        "optional": false
      },
      {
        "name": "wait=0",
        "type": "number",
        "description": "The number of milliseconds to delay.",
        "optional": true,
        "defaultValue": "0"
      },
      {
        "name": "options={}",
        "type": "Object",
        "description": "The options object.",
        "optional": true,
        "defaultValue": "{}"
      },
      {
        "name": "options.leading=false",
        "type": "boolean",
        "description": "Specify invoking on the leading edge of the timeout.",
        "optional": true,
        "defaultValue": "false"
      },
      {
        "name": "options.maxWait",
        "type": "number",
        "description": "The maximum time `func` is allowed to be delayed before it's invoked.",
        "optional": true
      },
      {
        "name": "options.trailing=true",
        "type": "boolean",
        "description": "Specify invoking on the trailing edge of the timeout.",
        "optional": true,
        "defaultValue": "true"
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new debounced function."
    }
  },
  {
    "name": "deburr",
    "category": "String",
    "description": "Deburrs `string` by converting\n[Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\nand [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\nletters to basic Latin letters and removing\n[combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).",
    "since": "3.0.0",
    "examples": ["deburr('déjà vu');\n// => 'deja vu'"],
    "params": [
      {
        "name": "string=''",
        "type": "string",
        "description": "The string to deburr.",
        "optional": true,
        "defaultValue": "''"
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the deburred string."
    }
  },
  {
    "name": "defaults",
    "category": "Object",
    "description": "Assigns own and inherited enumerable string keyed properties of source\nobjects to the destination object for all destination properties that\nresolve to `undefined`. Source objects are applied from left to right.\nOnce a property is set, additional values of the same property are ignored.\n<br>\n<br>\n**Note:** This method mutates `object`.",
    "since": "0.1.0",
    "examples": ["defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n// => { 'a': 1, 'b': 2 }"],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The destination object.",
        "optional": false
      },
      {
        "name": "sources",
        "type": "...Object",
        "description": "The source objects.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns `object`."
    }
  },
  {
    "name": "defaultsDeep",
    "category": "Object",
    "description": "This method is like `defaults` except that it recursively assigns\ndefault properties.\n<br>\n<br>\n**Note:** This method mutates `object`.",
    "since": "3.10.0",
    "examples": ["defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n// => { 'a': { 'b': 2, 'c': 3 } }"],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The destination object.",
        "optional": false
      },
      {
        "name": "sources",
        "type": "...Object",
        "description": "The source objects.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns `object`."
    }
  },
  {
    "name": "defaultTo",
    "category": "Util",
    "description": "Checks `value` to determine whether a default value should be returned in\nits place. The `defaultValue` is returned if `value` is `NaN`, `null`,\nor `undefined`.",
    "since": "4.14.0",
    "examples": ["defaultTo(1, 10);\n// => 1\n\ndefaultTo(undefined, 10);\n// => 10"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      },
      {
        "name": "defaultValue",
        "type": "*",
        "description": "The default value.",
        "optional": false
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the resolved value."
    }
  },
  {
    "name": "defer",
    "category": "Function",
    "description": "Defers invoking the `func` until the current call stack has cleared. Any\nadditional arguments are provided to `func` when it's invoked.",
    "since": "0.1.0",
    "examples": [
      "defer(function(text) {\n  console.log(text);\n}, 'deferred');\n// => Logs 'deferred' after one millisecond."
    ],
    "params": [
      {
        "name": "func",
        "type": "Function",
        "description": "The function to defer.",
        "optional": false
      },
      {
        "name": "args",
        "type": "...*",
        "description": "The arguments to invoke `func` with.",
        "optional": true
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the timer id."
    }
  },
  {
    "name": "delay",
    "category": "Function",
    "description": "Invokes `func` after `wait` milliseconds. Any additional arguments are\nprovided to `func` when it's invoked.",
    "since": "0.1.0",
    "examples": [
      "delay(function(text) {\n  console.log(text);\n}, 1000, 'later');\n// => Logs 'later' after one second."
    ],
    "params": [
      {
        "name": "func",
        "type": "Function",
        "description": "The function to delay.",
        "optional": false
      },
      {
        "name": "wait",
        "type": "number",
        "description": "The number of milliseconds to delay invocation.",
        "optional": false
      },
      {
        "name": "args",
        "type": "...*",
        "description": "The arguments to invoke `func` with.",
        "optional": true
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the timer id."
    }
  },
  {
    "name": "difference",
    "category": "Array",
    "description": "Creates an array of `array` values not included in the other given arrays\nusing [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons. The order and references of result values are\ndetermined by the first array.\n<br>\n<br>\n**Note:** Unlike `pullAll`, this method returns a new array.",
    "since": "0.1.0",
    "examples": ["difference([2, 1], [2, 3]);\n// => [1]"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to inspect.",
        "optional": false
      },
      {
        "name": "values",
        "type": "...Array",
        "description": "The values to exclude.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of filtered values."
    }
  },
  {
    "name": "differenceBy",
    "category": "Array",
    "description": "This method is like `difference` except that it accepts `iteratee` which\nis invoked for each element of `array` and `values` to generate the criterion\nby which they're compared. The order and references of result values are\ndetermined by the first array. The iteratee is invoked with one argument:<br>\n*(value)*.\n<br>\n<br>\n**Note:** Unlike `pullAllBy`, this method returns a new array.",
    "since": "4.0.0",
    "examples": [
      "differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n// => [1.2]\n\n// The `property` iteratee shorthand.\ndifferenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n// => [{ 'x': 2 }]"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to inspect.",
        "optional": false
      },
      {
        "name": "values",
        "type": "...Array",
        "description": "The values to exclude.",
        "optional": true
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The iteratee invoked per element.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of filtered values."
    }
  },
  {
    "name": "differenceWith",
    "category": "Array",
    "description": "This method is like `difference` except that it accepts `comparator`\nwhich is invoked to compare elements of `array` to `values`. The order and\nreferences of result values are determined by the first array. The comparator\nis invoked with two arguments: *(arrVal, othVal)*.\n<br>\n<br>\n**Note:** Unlike `pullAllWith`, this method returns a new array.",
    "since": "4.0.0",
    "examples": [
      "var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n\ndifferenceWith(objects, [{ 'x': 1, 'y': 2 }], isEqual);\n// => [{ 'x': 2, 'y': 1 }]"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to inspect.",
        "optional": false
      },
      {
        "name": "values",
        "type": "...Array",
        "description": "The values to exclude.",
        "optional": true
      },
      {
        "name": "comparator",
        "type": "Function",
        "description": "The comparator invoked per element.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of filtered values."
    }
  },
  {
    "name": "divide",
    "category": "Math",
    "description": "Divide two numbers.",
    "since": "4.7.0",
    "examples": ["divide(6, 4);\n// => 1.5"],
    "params": [
      {
        "name": "dividend",
        "type": "number",
        "description": "The first number in a division.",
        "optional": false
      },
      {
        "name": "divisor",
        "type": "number",
        "description": "The second number in a division.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the quotient."
    }
  },
  {
    "name": "drop",
    "category": "Array",
    "description": "Creates a slice of `array` with `n` elements dropped from the beginning.",
    "since": "0.5.0",
    "examples": [
      "drop([1, 2, 3]);\n// => [2, 3]\n\ndrop([1, 2, 3], 2);\n// => [3]\n\ndrop([1, 2, 3], 5);\n// => []\n\ndrop([1, 2, 3], 0);\n// => [1, 2, 3]"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to query.",
        "optional": false
      },
      {
        "name": "n=1",
        "type": "number",
        "description": "The number of elements to drop.",
        "optional": true,
        "defaultValue": "1"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the slice of `array`."
    }
  },
  {
    "name": "dropRight",
    "category": "Array",
    "description": "Creates a slice of `array` with `n` elements dropped from the end.",
    "since": "3.0.0",
    "examples": [
      "dropRight([1, 2, 3]);\n// => [1, 2]\n\ndropRight([1, 2, 3], 2);\n// => [1]\n\ndropRight([1, 2, 3], 5);\n// => []\n\ndropRight([1, 2, 3], 0);\n// => [1, 2, 3]"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to query.",
        "optional": false
      },
      {
        "name": "n=1",
        "type": "number",
        "description": "The number of elements to drop.",
        "optional": true,
        "defaultValue": "1"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the slice of `array`."
    }
  },
  {
    "name": "dropRightWhile",
    "category": "Array",
    "description": "Creates a slice of `array` excluding elements dropped from the end.\nElements are dropped until `predicate` returns falsey. The predicate is\ninvoked with three arguments: *(value, index, array)*.",
    "since": "3.0.0",
    "examples": [
      "var users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': false }\n];\n\ndropRightWhile(users, function(o) { return !o.active; });\n// => objects for ['barney']\n\n// The `matches` iteratee shorthand.\ndropRightWhile(users, { 'user': 'pebbles', 'active': false });\n// => objects for ['barney', 'fred']\n\n// The `matchesProperty` iteratee shorthand.\ndropRightWhile(users, ['active', false]);\n// => objects for ['barney']\n\n// The `property` iteratee shorthand.\ndropRightWhile(users, 'active');\n// => objects for ['barney', 'fred', 'pebbles']"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to query.",
        "optional": false
      },
      {
        "name": "predicate=_.identity",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the slice of `array`."
    }
  },
  {
    "name": "dropWhile",
    "category": "Array",
    "description": "Creates a slice of `array` excluding elements dropped from the beginning.\nElements are dropped until `predicate` returns falsey. The predicate is\ninvoked with three arguments: *(value, index, array)*.",
    "since": "3.0.0",
    "examples": [
      "var users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': true }\n];\n\ndropWhile(users, function(o) { return !o.active; });\n// => objects for ['pebbles']\n\n// The `matches` iteratee shorthand.\ndropWhile(users, { 'user': 'barney', 'active': false });\n// => objects for ['fred', 'pebbles']\n\n// The `matchesProperty` iteratee shorthand.\ndropWhile(users, ['active', false]);\n// => objects for ['pebbles']\n\n// The `property` iteratee shorthand.\ndropWhile(users, 'active');\n// => objects for ['barney', 'fred', 'pebbles']"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to query.",
        "optional": false
      },
      {
        "name": "predicate=_.identity",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the slice of `array`."
    }
  },
  {
    "name": "endsWith",
    "category": "String",
    "description": "Checks if `string` ends with the given target string.",
    "since": "3.0.0",
    "examples": [
      "endsWith('abc', 'c');\n// => true\n\nendsWith('abc', 'b');\n// => false\n\nendsWith('abc', 'b', 2);\n// => true"
    ],
    "params": [
      {
        "name": "string=''",
        "type": "string",
        "description": "The string to inspect.",
        "optional": true,
        "defaultValue": "''"
      },
      {
        "name": "target",
        "type": "string",
        "description": "The string to search for.",
        "optional": true
      },
      {
        "name": "position=string.length",
        "type": "number",
        "description": "The position to search up to.",
        "optional": true,
        "defaultValue": "string.length"
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `string` ends with `target`,\n else `false`."
    }
  },
  {
    "name": "eq",
    "category": "Lang",
    "description": "Performs a\n[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\ncomparison between two values to determine if they are equivalent.",
    "since": "4.0.0",
    "examples": [
      "var object = { 'a': 1 };\nvar other = { 'a': 1 };\n\neq(object, object);\n// => true\n\neq(object, other);\n// => false\n\neq('a', 'a');\n// => true\n\neq('a', Object('a'));\n// => false\n\neq(NaN, NaN);\n// => true"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to compare.",
        "optional": false
      },
      {
        "name": "other",
        "type": "*",
        "description": "The other value to compare.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if the values are equivalent, else `false`."
    }
  },
  {
    "name": "escape",
    "category": "Properties",
    "description": "(RegExp): Used to detect `data` property values to be HTML-escaped.",
    "examples": [],
    "params": []
  },
  {
    "name": "escape",
    "category": "String",
    "description": "Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\ncorresponding HTML entities.\n<br>\n<br>\n**Note:** No other characters are escaped. To escape additional\ncharacters use a third-party library like [_he_](https://mths.be/he).\n<br>\n<br>\nThough the \">\" character is escaped for symmetry, characters like\n\">\" and \"/\" don't need escaping in HTML and have no special meaning\nunless they're part of a tag or unquoted attribute value. See\n[Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n*(under \"semi-related fun fact\")* for more details.\n<br>\n<br>\nWhen working with HTML you should always\n[quote attribute values](http://wonko.com/post/html-escaping) to reduce\nXSS vectors.",
    "since": "0.1.0",
    "examples": ["escape('fred, barney, & pebbles');\n// => 'fred, barney, &amp; pebbles'"],
    "params": [
      {
        "name": "string=''",
        "type": "string",
        "description": "The string to escape.",
        "optional": true,
        "defaultValue": "''"
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the escaped string."
    }
  },
  {
    "name": "escapeRegExp",
    "category": "String",
    "description": "Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n\"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.",
    "since": "3.0.0",
    "examples": ["escapeRegExp('[lodash](https://lodash.com/)');\n// => '\\[lodash\\]\\(https://lodash\\.com/\\)'"],
    "params": [
      {
        "name": "string=''",
        "type": "string",
        "description": "The string to escape.",
        "optional": true,
        "defaultValue": "''"
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the escaped string."
    }
  },
  {
    "name": "evaluate",
    "category": "Properties",
    "description": "(RegExp): Used to detect code to be evaluated.",
    "examples": [],
    "params": []
  },
  {
    "name": "every",
    "category": "Collection",
    "description": "Checks if `predicate` returns truthy for **all** elements of `collection`.\nIteration is stopped once `predicate` returns falsey. The predicate is\ninvoked with three arguments: *(value, index|key, collection)*.\n<br>\n<br>\n**Note:** This method returns `true` for\n[empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n[everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\nelements of empty collections.",
    "since": "0.1.0",
    "examples": [
      "every([true, 1, null, 'yes'], Boolean);\n// => false\n\nvar users = [\n  { 'user': 'barney', 'age': 36, 'active': false },\n  { 'user': 'fred',   'age': 40, 'active': false }\n];\n\n// The `matches` iteratee shorthand.\nevery(users, { 'user': 'barney', 'active': false });\n// => false\n\n// The `matchesProperty` iteratee shorthand.\nevery(users, ['active', false]);\n// => true\n\n// The `property` iteratee shorthand.\nevery(users, 'active');\n// => false"
    ],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "predicate=_.identity",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if all elements pass the predicate check,\n else `false`."
    }
  },
  {
    "name": "fill",
    "category": "Array",
    "description": "Fills elements of `array` with `value` from `start` up to, but not\nincluding, `end`.\n<br>\n<br>\n**Note:** This method mutates `array`.",
    "since": "3.2.0",
    "examples": [
      "var array = [1, 2, 3];\n\nfill(array, 'a');\nconsole.log(array);\n// => ['a', 'a', 'a']\n\nfill(Array(3), 2);\n// => [2, 2, 2]\n\nfill([4, 6, 8, 10], '*', 1, 3);\n// => [4, '*', '*', 10]"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to fill.",
        "optional": false
      },
      {
        "name": "value",
        "type": "*",
        "description": "The value to fill `array` with.",
        "optional": false
      },
      {
        "name": "start=0",
        "type": "number",
        "description": "The start position.",
        "optional": true,
        "defaultValue": "0"
      },
      {
        "name": "end=array.length",
        "type": "number",
        "description": "The end position.",
        "optional": true,
        "defaultValue": "array.length"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns `array`."
    }
  },
  {
    "name": "filter",
    "category": "Collection",
    "description": "Iterates over elements of `collection`, returning an array of all elements\n`predicate` returns truthy for. The predicate is invoked with three\narguments: *(value, index|key, collection)*.\n<br>\n<br>\n**Note:** Unlike `remove`, this method returns a new array.",
    "since": "0.1.0",
    "examples": [
      "var users = [\n  { 'user': 'barney', 'age': 36, 'active': true },\n  { 'user': 'fred',   'age': 40, 'active': false }\n];\n\nfilter(users, function(o) { return !o.active; });\n// => objects for ['fred']\n\n// The `matches` iteratee shorthand.\nfilter(users, { 'age': 36, 'active': true });\n// => objects for ['barney']\n\n// The `matchesProperty` iteratee shorthand.\nfilter(users, ['active', false]);\n// => objects for ['fred']\n\n// The `property` iteratee shorthand.\nfilter(users, 'active');\n// => objects for ['barney']\n\n// Combining several predicates using `overEvery` or `overSome`.\nfilter(users, overSome([{ 'age': 36 }, ['age', 40]]));\n// => objects for ['fred', 'barney']"
    ],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "predicate=_.identity",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new filtered array."
    }
  },
  {
    "name": "find",
    "category": "Collection",
    "description": "Iterates over elements of `collection`, returning the first element\n`predicate` returns truthy for. The predicate is invoked with three\narguments: *(value, index|key, collection)*.",
    "since": "0.1.0",
    "examples": [
      "var users = [\n  { 'user': 'barney',  'age': 36, 'active': true },\n  { 'user': 'fred',    'age': 40, 'active': false },\n  { 'user': 'pebbles', 'age': 1,  'active': true }\n];\n\nfind(users, function(o) { return o.age < 40; });\n// => object for 'barney'\n\n// The `matches` iteratee shorthand.\nfind(users, { 'age': 1, 'active': true });\n// => object for 'pebbles'\n\n// The `matchesProperty` iteratee shorthand.\nfind(users, ['active', false]);\n// => object for 'fred'\n\n// The `property` iteratee shorthand.\nfind(users, 'active');\n// => object for 'barney'"
    ],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to inspect.",
        "optional": false
      },
      {
        "name": "predicate=_.identity",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": true,
        "defaultValue": "_.identity"
      },
      {
        "name": "fromIndex=0",
        "type": "number",
        "description": "The index to search from.",
        "optional": true,
        "defaultValue": "0"
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the matched element, else `undefined`."
    }
  },
  {
    "name": "findIndex",
    "category": "Array",
    "description": "This method is like `find` except that it returns the index of the first\nelement `predicate` returns truthy for instead of the element itself.",
    "since": "1.1.0",
    "examples": [
      "var users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': true }\n];\n\nfindIndex(users, function(o) { return o.user == 'barney'; });\n// => 0\n\n// The `matches` iteratee shorthand.\nfindIndex(users, { 'user': 'fred', 'active': false });\n// => 1\n\n// The `matchesProperty` iteratee shorthand.\nfindIndex(users, ['active', false]);\n// => 0\n\n// The `property` iteratee shorthand.\nfindIndex(users, 'active');\n// => 2"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to inspect.",
        "optional": false
      },
      {
        "name": "predicate=_.identity",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": true,
        "defaultValue": "_.identity"
      },
      {
        "name": "fromIndex=0",
        "type": "number",
        "description": "The index to search from.",
        "optional": true,
        "defaultValue": "0"
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the index of the found element, else `-1`."
    }
  },
  {
    "name": "findKey",
    "category": "Object",
    "description": "This method is like `find` except that it returns the key of the first\nelement `predicate` returns truthy for instead of the element itself.",
    "since": "1.1.0",
    "examples": [
      "var users = {\n  'barney':  { 'age': 36, 'active': true },\n  'fred':    { 'age': 40, 'active': false },\n  'pebbles': { 'age': 1,  'active': true }\n};\n\nfindKey(users, function(o) { return o.age < 40; });\n// => 'barney' (iteration order is not guaranteed)\n\n// The `matches` iteratee shorthand.\nfindKey(users, { 'age': 1, 'active': true });\n// => 'pebbles'\n\n// The `matchesProperty` iteratee shorthand.\nfindKey(users, ['active', false]);\n// => 'fred'\n\n// The `property` iteratee shorthand.\nfindKey(users, 'active');\n// => 'barney'"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to inspect.",
        "optional": false
      },
      {
        "name": "predicate=_.identity",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the key of the matched element,\n else `undefined`."
    }
  },
  {
    "name": "findLast",
    "category": "Collection",
    "description": "This method is like `find` except that it iterates over elements of\n`collection` from right to left.",
    "since": "2.0.0",
    "examples": ["findLast([1, 2, 3, 4], function(n) {\n  return n % 2 == 1;\n});\n// => 3"],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to inspect.",
        "optional": false
      },
      {
        "name": "predicate=_.identity",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": true,
        "defaultValue": "_.identity"
      },
      {
        "name": "fromIndex=collection.length-1",
        "type": "number",
        "description": "The index to search from.",
        "optional": true,
        "defaultValue": "collection.length-1"
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the matched element, else `undefined`."
    }
  },
  {
    "name": "findLastIndex",
    "category": "Array",
    "description": "This method is like `findIndex` except that it iterates over elements\nof `collection` from right to left.",
    "since": "2.0.0",
    "examples": [
      "var users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': false }\n];\n\nfindLastIndex(users, function(o) { return o.user == 'pebbles'; });\n// => 2\n\n// The `matches` iteratee shorthand.\nfindLastIndex(users, { 'user': 'barney', 'active': true });\n// => 0\n\n// The `matchesProperty` iteratee shorthand.\nfindLastIndex(users, ['active', false]);\n// => 2\n\n// The `property` iteratee shorthand.\nfindLastIndex(users, 'active');\n// => 0"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to inspect.",
        "optional": false
      },
      {
        "name": "predicate=_.identity",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": true,
        "defaultValue": "_.identity"
      },
      {
        "name": "fromIndex=array.length-1",
        "type": "number",
        "description": "The index to search from.",
        "optional": true,
        "defaultValue": "array.length-1"
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the index of the found element, else `-1`."
    }
  },
  {
    "name": "findLastKey",
    "category": "Object",
    "description": "This method is like `findKey` except that it iterates over elements of\na collection in the opposite order.",
    "since": "2.0.0",
    "examples": [
      "var users = {\n  'barney':  { 'age': 36, 'active': true },\n  'fred':    { 'age': 40, 'active': false },\n  'pebbles': { 'age': 1,  'active': true }\n};\n\nfindLastKey(users, function(o) { return o.age < 40; });\n// => returns 'pebbles' assuming `findKey` returns 'barney'\n\n// The `matches` iteratee shorthand.\nfindLastKey(users, { 'age': 36, 'active': true });\n// => 'barney'\n\n// The `matchesProperty` iteratee shorthand.\nfindLastKey(users, ['active', false]);\n// => 'fred'\n\n// The `property` iteratee shorthand.\nfindLastKey(users, 'active');\n// => 'pebbles'"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to inspect.",
        "optional": false
      },
      {
        "name": "predicate=_.identity",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the key of the matched element,\n else `undefined`."
    }
  },
  {
    "name": "flatMap",
    "category": "Collection",
    "description": "Creates a flattened array of values by running each element in `collection`\nthru `iteratee` and flattening the mapped results. The iteratee is invoked\nwith three arguments: *(value, index|key, collection)*.",
    "since": "4.0.0",
    "examples": ["function duplicate(n) {\n  return [n, n];\n}\n\nflatMap([1, 2], duplicate);\n// => [1, 1, 2, 2]"],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new flattened array."
    }
  },
  {
    "name": "flatMapDeep",
    "category": "Collection",
    "description": "This method is like `flatMap` except that it recursively flattens the\nmapped results.",
    "since": "4.7.0",
    "examples": [
      "function duplicate(n) {\n  return [[[n, n]]];\n}\n\nflatMapDeep([1, 2], duplicate);\n// => [1, 1, 2, 2]"
    ],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new flattened array."
    }
  },
  {
    "name": "flatMapDepth",
    "category": "Collection",
    "description": "This method is like `flatMap` except that it recursively flattens the\nmapped results up to `depth` times.",
    "since": "4.7.0",
    "examples": [
      "function duplicate(n) {\n  return [[[n, n]]];\n}\n\nflatMapDepth([1, 2], duplicate, 2);\n// => [[1, 1], [2, 2]]"
    ],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": true,
        "defaultValue": "_.identity"
      },
      {
        "name": "depth=1",
        "type": "number",
        "description": "The maximum recursion depth.",
        "optional": true,
        "defaultValue": "1"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new flattened array."
    }
  },
  {
    "name": "flatten",
    "category": "Array",
    "description": "Flattens `array` a single level deep.",
    "since": "0.1.0",
    "examples": ["flatten([1, [2, [3, [4]], 5]]);\n// => [1, 2, [3, [4]], 5]"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to flatten.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new flattened array."
    }
  },
  {
    "name": "flattenDeep",
    "category": "Array",
    "description": "Recursively flattens `array`.",
    "since": "3.0.0",
    "examples": ["flattenDeep([1, [2, [3, [4]], 5]]);\n// => [1, 2, 3, 4, 5]"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to flatten.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new flattened array."
    }
  },
  {
    "name": "flattenDepth",
    "category": "Array",
    "description": "Recursively flatten `array` up to `depth` times.",
    "since": "4.4.0",
    "examples": [
      "var array = [1, [2, [3, [4]], 5]];\n\nflattenDepth(array, 1);\n// => [1, 2, [3, [4]], 5]\n\nflattenDepth(array, 2);\n// => [1, 2, 3, [4], 5]"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to flatten.",
        "optional": false
      },
      {
        "name": "depth=1",
        "type": "number",
        "description": "The maximum recursion depth.",
        "optional": true,
        "defaultValue": "1"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new flattened array."
    }
  },
  {
    "name": "flip",
    "category": "Function",
    "description": "Creates a function that invokes `func` with arguments reversed.",
    "since": "4.0.0",
    "examples": [
      "var flipped = flip(function() {\n  return toArray(arguments);\n});\n\nflipped('a', 'b', 'c', 'd');\n// => ['d', 'c', 'b', 'a']"
    ],
    "params": [
      {
        "name": "func",
        "type": "Function",
        "description": "The function to flip arguments for.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new flipped function."
    }
  },
  {
    "name": "floor",
    "category": "Math",
    "description": "Computes `number` rounded down to `precision`.",
    "since": "3.10.0",
    "examples": ["floor(4.006);\n// => 4\n\nfloor(0.046, 2);\n// => 0.04\n\nfloor(4060, -2);\n// => 4000"],
    "params": [
      {
        "name": "number",
        "type": "number",
        "description": "The number to round down.",
        "optional": false
      },
      {
        "name": "precision=0",
        "type": "number",
        "description": "The precision to round down to.",
        "optional": true,
        "defaultValue": "0"
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the rounded down number."
    }
  },
  {
    "name": "flow",
    "category": "Util",
    "description": "Creates a function that returns the result of invoking the given functions\nwith the `this` binding of the created function, where each successive\ninvocation is supplied the return value of the previous.",
    "since": "3.0.0",
    "examples": [
      "function square(n) {\n  return n * n;\n}\n\nvar addSquare = flow([add, square]);\naddSquare(1, 2);\n// => 9"
    ],
    "params": [
      {
        "name": "funcs",
        "type": "...(Function|Function[])",
        "description": "The functions to invoke.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new composite function."
    }
  },
  {
    "name": "flowRight",
    "category": "Util",
    "description": "This method is like `flow` except that it creates a function that\ninvokes the given functions from right to left.",
    "since": "3.0.0",
    "examples": [
      "function square(n) {\n  return n * n;\n}\n\nvar addSquare = flowRight([square, add]);\naddSquare(1, 2);\n// => 9"
    ],
    "params": [
      {
        "name": "funcs",
        "type": "...(Function|Function[])",
        "description": "The functions to invoke.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new composite function."
    }
  },
  {
    "name": "forEach",
    "category": "Collection",
    "description": "Iterates over elements of `collection` and invokes `iteratee` for each element.\nThe iteratee is invoked with three arguments: *(value, index|key, collection)*.\nIteratee functions may exit iteration early by explicitly returning `false`.\n<br>\n<br>\n**Note:** As with other \"Collections\" methods, objects with a \"length\"\nproperty are iterated like arrays. To avoid this behavior use `forIn`\nor `forOwn` for object iteration.",
    "since": "0.1.0",
    "examples": [
      "forEach([1, 2], function(value) {\n  console.log(value);\n});\n// => Logs `1` then `2`.\n\nforEach({ 'a': 1, 'b': 2 }, function(value, key) {\n  console.log(key);\n});\n// => Logs 'a' then 'b' (iteration order is not guaranteed)."
    ],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns `collection`."
    }
  },
  {
    "name": "forEachRight",
    "category": "Collection",
    "description": "This method is like `forEach` except that it iterates over elements of\n`collection` from right to left.",
    "since": "2.0.0",
    "examples": ["forEachRight([1, 2], function(value) {\n  console.log(value);\n});\n// => Logs `2` then `1`."],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns `collection`."
    }
  },
  {
    "name": "forIn",
    "category": "Object",
    "description": "Iterates over own and inherited enumerable string keyed properties of an\nobject and invokes `iteratee` for each property. The iteratee is invoked\nwith three arguments: *(value, key, object)*. Iteratee functions may exit\niteration early by explicitly returning `false`.",
    "since": "0.3.0",
    "examples": [
      "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\nforIn(new Foo, function(value, key) {\n  console.log(key);\n});\n// => Logs 'a', 'b', then 'c' (iteration order is not guaranteed)."
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns `object`."
    }
  },
  {
    "name": "forInRight",
    "category": "Object",
    "description": "This method is like `forIn` except that it iterates over properties of\n`object` in the opposite order.",
    "since": "2.0.0",
    "examples": [
      "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\nforInRight(new Foo, function(value, key) {\n  console.log(key);\n});\n// => Logs 'c', 'b', then 'a' assuming `forIn` logs 'a', 'b', then 'c'."
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns `object`."
    }
  },
  {
    "name": "forOwn",
    "category": "Object",
    "description": "Iterates over own enumerable string keyed properties of an object and\ninvokes `iteratee` for each property. The iteratee is invoked with three\narguments: *(value, key, object)*. Iteratee functions may exit iteration\nearly by explicitly returning `false`.",
    "since": "0.3.0",
    "examples": [
      "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\nforOwn(new Foo, function(value, key) {\n  console.log(key);\n});\n// => Logs 'a' then 'b' (iteration order is not guaranteed)."
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns `object`."
    }
  },
  {
    "name": "forOwnRight",
    "category": "Object",
    "description": "This method is like `forOwn` except that it iterates over properties of\n`object` in the opposite order.",
    "since": "2.0.0",
    "examples": [
      "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\nforOwnRight(new Foo, function(value, key) {\n  console.log(key);\n});\n// => Logs 'b' then 'a' assuming `forOwn` logs 'a' then 'b'."
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns `object`."
    }
  },
  {
    "name": "fromPairs",
    "category": "Array",
    "description": "The inverse of `toPairs`; this method returns an object composed\nfrom key-value `pairs`.",
    "since": "4.0.0",
    "examples": ["fromPairs([['a', 1], ['b', 2]]);\n// => { 'a': 1, 'b': 2 }"],
    "params": [
      {
        "name": "pairs",
        "type": "Array",
        "description": "The key-value pairs.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns the new object."
    }
  },
  {
    "name": "functions",
    "category": "Object",
    "description": "Creates an array of function property names from own enumerable properties\nof `object`.",
    "since": "0.1.0",
    "examples": [
      "function Foo() {\n  this.a = constant('a');\n  this.b = constant('b');\n}\n\nFoo.prototype.c = constant('c');\n\nfunctions(new Foo);\n// => ['a', 'b']"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to inspect.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the function names."
    }
  },
  {
    "name": "functionsIn",
    "category": "Object",
    "description": "Creates an array of function property names from own and inherited\nenumerable properties of `object`.",
    "since": "4.0.0",
    "examples": [
      "function Foo() {\n  this.a = constant('a');\n  this.b = constant('b');\n}\n\nFoo.prototype.c = constant('c');\n\nfunctionsIn(new Foo);\n// => ['a', 'b', 'c']"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to inspect.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the function names."
    }
  },
  {
    "name": "get",
    "category": "Object",
    "description": "Gets the value at `path` of `object`. If the resolved value is\n`undefined`, the `defaultValue` is returned in its place.",
    "since": "3.7.0",
    "examples": [
      "var object = { 'a': [{ 'b': { 'c': 3 } }] };\n\nget(object, 'a[0].b.c');\n// => 3\n\nget(object, ['a', '0', 'b', 'c']);\n// => 3\n\nget(object, 'a.b.c', 'default');\n// => 'default'"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to query.",
        "optional": false
      },
      {
        "name": "path",
        "type": "Array|string",
        "description": "The path of the property to get.",
        "optional": false
      },
      {
        "name": "defaultValue",
        "type": "*",
        "description": "The value returned for `undefined` resolved values.",
        "optional": true
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the resolved value."
    }
  },
  {
    "name": "groupBy",
    "category": "Collection",
    "description": "Creates an object composed of keys generated from the results of running\neach element of `collection` thru `iteratee`. The order of grouped values\nis determined by the order they occur in `collection`. The corresponding\nvalue of each key is an array of elements responsible for generating the\nkey. The iteratee is invoked with one argument: *(value)*.",
    "since": "0.1.0",
    "examples": [
      "groupBy([6.1, 4.2, 6.3], Math.floor);\n// => { '4': [4.2], '6': [6.1, 6.3] }\n\n// The `property` iteratee shorthand.\ngroupBy(['one', 'two', 'three'], 'length');\n// => { '3': ['one', 'two'], '5': ['three'] }"
    ],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The iteratee to transform keys.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns the composed aggregate object."
    }
  },
  {
    "name": "gt",
    "category": "Lang",
    "description": "Checks if `value` is greater than `other`.",
    "since": "3.9.0",
    "examples": ["gt(3, 1);\n// => true\n\ngt(3, 3);\n// => false\n\ngt(1, 3);\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to compare.",
        "optional": false
      },
      {
        "name": "other",
        "type": "*",
        "description": "The other value to compare.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is greater than `other`,\n else `false`."
    }
  },
  {
    "name": "gte",
    "category": "Lang",
    "description": "Checks if `value` is greater than or equal to `other`.",
    "since": "3.9.0",
    "examples": ["gte(3, 1);\n// => true\n\ngte(3, 3);\n// => true\n\ngte(1, 3);\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to compare.",
        "optional": false
      },
      {
        "name": "other",
        "type": "*",
        "description": "The other value to compare.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is greater than or equal to\n `other`, else `false`."
    }
  },
  {
    "name": "has",
    "category": "Object",
    "description": "Checks if `path` is a direct property of `object`.",
    "since": "0.1.0",
    "examples": [
      "var object = { 'a': { 'b': 2 } };\nvar other = create({ 'a': create({ 'b': 2 }) });\n\nhas(object, 'a');\n// => true\n\nhas(object, 'a.b');\n// => true\n\nhas(object, ['a', 'b']);\n// => true\n\nhas(other, 'a');\n// => false"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to query.",
        "optional": false
      },
      {
        "name": "path",
        "type": "Array|string",
        "description": "The path to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `path` exists, else `false`."
    }
  },
  {
    "name": "hasIn",
    "category": "Object",
    "description": "Checks if `path` is a direct or inherited property of `object`.",
    "since": "4.0.0",
    "examples": [
      "var object = create({ 'a': create({ 'b': 2 }) });\n\nhasIn(object, 'a');\n// => true\n\nhasIn(object, 'a.b');\n// => true\n\nhasIn(object, ['a', 'b']);\n// => true\n\nhasIn(object, 'b');\n// => false"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to query.",
        "optional": false
      },
      {
        "name": "path",
        "type": "Array|string",
        "description": "The path to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `path` exists, else `false`."
    }
  },
  {
    "name": "head",
    "category": "Array",
    "description": "Gets the first element of `array`.",
    "since": "0.1.0",
    "examples": ["head([1, 2, 3]);\n// => 1\n\nhead([]);\n// => undefined"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to query.",
        "optional": false
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the first element of `array`."
    }
  },
  {
    "name": "identity",
    "category": "Util",
    "description": "This method returns the first argument it receives.",
    "since": "0.1.0",
    "examples": ["var object = { 'a': 1 };\n\nconsole.log(identity(object) === object);\n// => true"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "Any value.",
        "optional": false
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns `value`."
    }
  },
  {
    "name": "imports",
    "category": "Properties",
    "description": "(Object): Used to import variables into the compiled template.",
    "examples": [],
    "params": []
  },
  {
    "name": "includes",
    "category": "Collection",
    "description": "Checks if `value` is in `collection`. If `collection` is a string, it's\nchecked for a substring of `value`, otherwise\n[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nis used for equality comparisons. If `fromIndex` is negative, it's used as\nthe offset from the end of `collection`.",
    "since": "0.1.0",
    "examples": [
      "includes([1, 2, 3], 1);\n// => true\n\nincludes([1, 2, 3], 1, 2);\n// => false\n\nincludes({ 'a': 1, 'b': 2 }, 1);\n// => true\n\nincludes('abcd', 'bc');\n// => true"
    ],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object|string",
        "description": "The collection to inspect.",
        "optional": false
      },
      {
        "name": "value",
        "type": "*",
        "description": "The value to search for.",
        "optional": false
      },
      {
        "name": "fromIndex=0",
        "type": "number",
        "description": "The index to search from.",
        "optional": true,
        "defaultValue": "0"
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is found, else `false`."
    }
  },
  {
    "name": "indexOf",
    "category": "Array",
    "description": "Gets the index at which the first occurrence of `value` is found in `array`\nusing [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons. If `fromIndex` is negative, it's used as the\noffset from the end of `array`.",
    "since": "0.1.0",
    "examples": [
      "indexOf([1, 2, 1, 2], 2);\n// => 1\n\n// Search from the `fromIndex`.\nindexOf([1, 2, 1, 2], 2, 2);\n// => 3"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to inspect.",
        "optional": false
      },
      {
        "name": "value",
        "type": "*",
        "description": "The value to search for.",
        "optional": false
      },
      {
        "name": "fromIndex=0",
        "type": "number",
        "description": "The index to search from.",
        "optional": true,
        "defaultValue": "0"
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the index of the matched value, else `-1`."
    }
  },
  {
    "name": "initial",
    "category": "Array",
    "description": "Gets all but the last element of `array`.",
    "since": "0.1.0",
    "examples": ["initial([1, 2, 3]);\n// => [1, 2]"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to query.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the slice of `array`."
    }
  },
  {
    "name": "inRange",
    "category": "Number",
    "description": "Checks if `n` is between `start` and up to, but not including, `end`. If\n`end` is not specified, it's set to `start` with `start` then set to `0`.\nIf `start` is greater than `end` the params are swapped to support\nnegative ranges.",
    "since": "3.3.0",
    "examples": [
      "inRange(3, 2, 4);\n// => true\n\ninRange(4, 8);\n// => true\n\ninRange(4, 2);\n// => false\n\ninRange(2, 2);\n// => false\n\ninRange(1.2, 2);\n// => true\n\ninRange(5.2, 4);\n// => false\n\ninRange(-3, -2, -6);\n// => true"
    ],
    "params": [
      {
        "name": "number",
        "type": "number",
        "description": "The number to check.",
        "optional": false
      },
      {
        "name": "start=0",
        "type": "number",
        "description": "The start of the range.",
        "optional": true,
        "defaultValue": "0"
      },
      {
        "name": "end",
        "type": "number",
        "description": "The end of the range.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `number` is in the range, else `false`."
    }
  },
  {
    "name": "interpolate",
    "category": "Properties",
    "description": "(RegExp): Used to detect `data` property values to inject.",
    "examples": [],
    "params": []
  },
  {
    "name": "intersection",
    "category": "Array",
    "description": "Creates an array of unique values that are included in all given arrays\nusing [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons. The order and references of result values are\ndetermined by the first array.",
    "since": "0.1.0",
    "examples": ["intersection([2, 1], [2, 3]);\n// => [2]"],
    "params": [
      {
        "name": "arrays",
        "type": "...Array",
        "description": "The arrays to inspect.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of intersecting values."
    }
  },
  {
    "name": "intersectionBy",
    "category": "Array",
    "description": "This method is like `intersection` except that it accepts `iteratee`\nwhich is invoked for each element of each `arrays` to generate the criterion\nby which they're compared. The order and references of result values are\ndetermined by the first array. The iteratee is invoked with one argument:<br>\n*(value)*.",
    "since": "4.0.0",
    "examples": [
      "intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n// => [2.1]\n\n// The `property` iteratee shorthand.\nintersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }]"
    ],
    "params": [
      {
        "name": "arrays",
        "type": "...Array",
        "description": "The arrays to inspect.",
        "optional": true
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The iteratee invoked per element.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of intersecting values."
    }
  },
  {
    "name": "intersectionWith",
    "category": "Array",
    "description": "This method is like `intersection` except that it accepts `comparator`\nwhich is invoked to compare elements of `arrays`. The order and references\nof result values are determined by the first array. The comparator is\ninvoked with two arguments: *(arrVal, othVal)*.",
    "since": "4.0.0",
    "examples": [
      "var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\nvar others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n\nintersectionWith(objects, others, isEqual);\n// => [{ 'x': 1, 'y': 2 }]"
    ],
    "params": [
      {
        "name": "arrays",
        "type": "...Array",
        "description": "The arrays to inspect.",
        "optional": true
      },
      {
        "name": "comparator",
        "type": "Function",
        "description": "The comparator invoked per element.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of intersecting values."
    }
  },
  {
    "name": "invert",
    "category": "Object",
    "description": "Creates an object composed of the inverted keys and values of `object`.\nIf `object` contains duplicate values, subsequent values overwrite\nproperty assignments of previous values.",
    "since": "0.7.0",
    "examples": ["var object = { 'a': 1, 'b': 2, 'c': 1 };\n\ninvert(object);\n// => { '1': 'c', '2': 'b' }"],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to invert.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns the new inverted object."
    }
  },
  {
    "name": "invertBy",
    "category": "Object",
    "description": "This method is like `invert` except that the inverted object is generated\nfrom the results of running each element of `object` thru `iteratee`. The\ncorresponding inverted value of each inverted key is an array of keys\nresponsible for generating the inverted value. The iteratee is invoked\nwith one argument: *(value)*.",
    "since": "4.1.0",
    "examples": [
      "var object = { 'a': 1, 'b': 2, 'c': 1 };\n\ninvertBy(object);\n// => { '1': ['a', 'c'], '2': ['b'] }\n\ninvertBy(object, function(value) {\n  return 'group' + value;\n});\n// => { 'group1': ['a', 'c'], 'group2': ['b'] }"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to invert.",
        "optional": false
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The iteratee invoked per element.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns the new inverted object."
    }
  },
  {
    "name": "invoke",
    "category": "Object",
    "description": "Invokes the method at `path` of `object`.",
    "since": "4.0.0",
    "examples": [
      "var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n\ninvoke(object, 'a[0].b.c.slice', 1, 3);\n// => [2, 3]"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to query.",
        "optional": false
      },
      {
        "name": "path",
        "type": "Array|string",
        "description": "The path of the method to invoke.",
        "optional": false
      },
      {
        "name": "args",
        "type": "...*",
        "description": "The arguments to invoke the method with.",
        "optional": true
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the result of the invoked method."
    }
  },
  {
    "name": "invokeMap",
    "category": "Collection",
    "description": "Invokes the method at `path` of each element in `collection`, returning\nan array of the results of each invoked method. Any additional arguments\nare provided to each invoked method. If `path` is a function, it's invoked\nfor, and `this` bound to, each element in `collection`.",
    "since": "4.0.0",
    "examples": [
      "invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n// => [[1, 5, 7], [1, 2, 3]]\n\ninvokeMap([123, 456], String.prototype.split, '');\n// => [['1', '2', '3'], ['4', '5', '6']]"
    ],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "path",
        "type": "Array|Function|string",
        "description": "The path of the method to invoke or the function invoked per iteration.",
        "optional": false
      },
      {
        "name": "args",
        "type": "...*",
        "description": "The arguments to invoke each method with.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the array of results."
    }
  },
  {
    "name": "isArguments",
    "category": "Lang",
    "description": "Checks if `value` is likely an `arguments` object.",
    "since": "0.1.0",
    "examples": [
      "isArguments(function() { return arguments; }());\n// => true\n\nisArguments([1, 2, 3]);\n// => false"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is an `arguments` object,\n else `false`."
    }
  },
  {
    "name": "isArray",
    "category": "Lang",
    "description": "Checks if `value` is classified as an `Array` object.",
    "since": "0.1.0",
    "examples": [
      "isArray([1, 2, 3]);\n// => true\n\nisArray(document.body.children);\n// => false\n\nisArray('abc');\n// => false\n\nisArray(noop);\n// => false"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is an array, else `false`."
    }
  },
  {
    "name": "isArrayBuffer",
    "category": "Lang",
    "description": "Checks if `value` is classified as an `ArrayBuffer` object.",
    "since": "4.3.0",
    "examples": ["isArrayBuffer(new ArrayBuffer(2));\n// => true\n\nisArrayBuffer(new Array(2));\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is an array buffer, else `false`."
    }
  },
  {
    "name": "isArrayLike",
    "category": "Lang",
    "description": "Checks if `value` is array-like. A value is considered array-like if it's\nnot a function and has a `value.length` that's an integer greater than or\nequal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.",
    "since": "4.0.0",
    "examples": [
      "isArrayLike([1, 2, 3]);\n// => true\n\nisArrayLike(document.body.children);\n// => true\n\nisArrayLike('abc');\n// => true\n\nisArrayLike(noop);\n// => false"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is array-like, else `false`."
    }
  },
  {
    "name": "isArrayLikeObject",
    "category": "Lang",
    "description": "This method is like `isArrayLike` except that it also checks if `value`\nis an object.",
    "since": "4.0.0",
    "examples": [
      "isArrayLikeObject([1, 2, 3]);\n// => true\n\nisArrayLikeObject(document.body.children);\n// => true\n\nisArrayLikeObject('abc');\n// => false\n\nisArrayLikeObject(noop);\n// => false"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is an array-like object,\n else `false`."
    }
  },
  {
    "name": "isBoolean",
    "category": "Lang",
    "description": "Checks if `value` is classified as a boolean primitive or object.",
    "since": "0.1.0",
    "examples": ["isBoolean(false);\n// => true\n\nisBoolean(null);\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a boolean, else `false`."
    }
  },
  {
    "name": "isBuffer",
    "category": "Lang",
    "description": "Checks if `value` is a buffer.",
    "since": "4.3.0",
    "examples": ["isBuffer(new Buffer(2));\n// => true\n\nisBuffer(new Uint8Array(2));\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a buffer, else `false`."
    }
  },
  {
    "name": "isDate",
    "category": "Lang",
    "description": "Checks if `value` is classified as a `Date` object.",
    "since": "0.1.0",
    "examples": ["isDate(new Date);\n// => true\n\nisDate('Mon April 23 2012');\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a date object, else `false`."
    }
  },
  {
    "name": "isElement",
    "category": "Lang",
    "description": "Checks if `value` is likely a DOM element.",
    "since": "0.1.0",
    "examples": ["isElement(document.body);\n// => true\n\nisElement('<body>');\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a DOM element, else `false`."
    }
  },
  {
    "name": "isEmpty",
    "category": "Lang",
    "description": "Checks if `value` is an empty object, collection, map, or set.\n<br>\n<br>\nObjects are considered empty if they have no own enumerable string keyed\nproperties.\n<br>\n<br>\nArray-like values such as `arguments` objects, arrays, buffers, strings, or\njQuery-like collections are considered empty if they have a `length` of `0`.\nSimilarly, maps and sets are considered empty if they have a `size` of `0`.",
    "since": "0.1.0",
    "examples": [
      "isEmpty(null);\n// => true\n\nisEmpty(true);\n// => true\n\nisEmpty(1);\n// => true\n\nisEmpty([1, 2, 3]);\n// => false\n\nisEmpty({ 'a': 1 });\n// => false"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is empty, else `false`."
    }
  },
  {
    "name": "isEqual",
    "category": "Lang",
    "description": "Performs a deep comparison between two values to determine if they are\nequivalent.\n<br>\n<br>\n**Note:** This method supports comparing arrays, array buffers, booleans,\ndate objects, error objects, maps, numbers, `Object` objects, regexes,\nsets, strings, symbols, and typed arrays. `Object` objects are compared\nby their own, not inherited, enumerable properties. Functions and DOM\nnodes are compared by strict equality, i.e. `===`.",
    "since": "0.1.0",
    "examples": [
      "var object = { 'a': 1 };\nvar other = { 'a': 1 };\n\nisEqual(object, other);\n// => true\n\nobject === other;\n// => false"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to compare.",
        "optional": false
      },
      {
        "name": "other",
        "type": "*",
        "description": "The other value to compare.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if the values are equivalent, else `false`."
    }
  },
  {
    "name": "isEqualWith",
    "category": "Lang",
    "description": "This method is like `isEqual` except that it accepts `customizer` which\nis invoked to compare values. If `customizer` returns `undefined`, comparisons\nare handled by the method instead. The `customizer` is invoked with up to\nsix arguments: *(objValue, othValue [, index|key, object, other, stack])*.",
    "since": "4.0.0",
    "examples": [
      "function isGreeting(value) {\n  return /^h(?:i|ello)$/.test(value);\n}\n\nfunction customizer(objValue, othValue) {\n  if (isGreeting(objValue) && isGreeting(othValue)) {\n    return true;\n  }\n}\n\nvar array = ['hello', 'goodbye'];\nvar other = ['hi', 'goodbye'];\n\nisEqualWith(array, other, customizer);\n// => true"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to compare.",
        "optional": false
      },
      {
        "name": "other",
        "type": "*",
        "description": "The other value to compare.",
        "optional": false
      },
      {
        "name": "customizer",
        "type": "Function",
        "description": "The function to customize comparisons.",
        "optional": true
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if the values are equivalent, else `false`."
    }
  },
  {
    "name": "isError",
    "category": "Lang",
    "description": "Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n`SyntaxError`, `TypeError`, or `URIError` object.",
    "since": "3.0.0",
    "examples": ["isError(new Error);\n// => true\n\nisError(Error);\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is an error object, else `false`."
    }
  },
  {
    "name": "isFinite",
    "category": "Lang",
    "description": "Checks if `value` is a finite primitive number.\n<br>\n<br>\n**Note:** This method is based on\n[`Number.isFinite`](https://mdn.io/Number/isFinite).",
    "since": "0.1.0",
    "examples": [
      "isFinite(3);\n// => true\n\nisFinite(Number.MIN_VALUE);\n// => true\n\nisFinite(Infinity);\n// => false\n\nisFinite('3');\n// => false"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a finite number, else `false`."
    }
  },
  {
    "name": "isFunction",
    "category": "Lang",
    "description": "Checks if `value` is classified as a `Function` object.",
    "since": "0.1.0",
    "examples": ["isFunction(_);\n// => true\n\nisFunction(/abc/);\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a function, else `false`."
    }
  },
  {
    "name": "isInteger",
    "category": "Lang",
    "description": "Checks if `value` is an integer.\n<br>\n<br>\n**Note:** This method is based on\n[`Number.isInteger`](https://mdn.io/Number/isInteger).",
    "since": "4.0.0",
    "examples": [
      "isInteger(3);\n// => true\n\nisInteger(Number.MIN_VALUE);\n// => false\n\nisInteger(Infinity);\n// => false\n\nisInteger('3');\n// => false"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is an integer, else `false`."
    }
  },
  {
    "name": "isLength",
    "category": "Lang",
    "description": "Checks if `value` is a valid array-like length.\n<br>\n<br>\n**Note:** This method is loosely based on\n[`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).",
    "since": "4.0.0",
    "examples": [
      "isLength(3);\n// => true\n\nisLength(Number.MIN_VALUE);\n// => false\n\nisLength(Infinity);\n// => false\n\nisLength('3');\n// => false"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a valid length, else `false`."
    }
  },
  {
    "name": "isMap",
    "category": "Lang",
    "description": "Checks if `value` is classified as a `Map` object.",
    "since": "4.3.0",
    "examples": ["isMap(new Map);\n// => true\n\nisMap(new WeakMap);\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a map, else `false`."
    }
  },
  {
    "name": "isMatch",
    "category": "Lang",
    "description": "Performs a partial deep comparison between `object` and `source` to\ndetermine if `object` contains equivalent property values.\n<br>\n<br>\n**Note:** This method is equivalent to `matches` when `source` is\npartially applied.\n<br>\n<br>\nPartial comparisons will match empty array and empty object `source`\nvalues against any array or object value, respectively. See `isEqual`\nfor a list of supported value comparisons.",
    "since": "3.0.0",
    "examples": [
      "var object = { 'a': 1, 'b': 2 };\n\nisMatch(object, { 'b': 2 });\n// => true\n\nisMatch(object, { 'b': 1 });\n// => false"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to inspect.",
        "optional": false
      },
      {
        "name": "source",
        "type": "Object",
        "description": "The object of property values to match.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `object` is a match, else `false`."
    }
  },
  {
    "name": "isMatchWith",
    "category": "Lang",
    "description": "This method is like `isMatch` except that it accepts `customizer` which\nis invoked to compare values. If `customizer` returns `undefined`, comparisons\nare handled by the method instead. The `customizer` is invoked with five\narguments: *(objValue, srcValue, index|key, object, source)*.",
    "since": "4.0.0",
    "examples": [
      "function isGreeting(value) {\n  return /^h(?:i|ello)$/.test(value);\n}\n\nfunction customizer(objValue, srcValue) {\n  if (isGreeting(objValue) && isGreeting(srcValue)) {\n    return true;\n  }\n}\n\nvar object = { 'greeting': 'hello' };\nvar source = { 'greeting': 'hi' };\n\nisMatchWith(object, source, customizer);\n// => true"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to inspect.",
        "optional": false
      },
      {
        "name": "source",
        "type": "Object",
        "description": "The object of property values to match.",
        "optional": false
      },
      {
        "name": "customizer",
        "type": "Function",
        "description": "The function to customize comparisons.",
        "optional": true
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `object` is a match, else `false`."
    }
  },
  {
    "name": "isNaN",
    "category": "Lang",
    "description": "Checks if `value` is `NaN`.\n<br>\n<br>\n**Note:** This method is based on\n[`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\nglobal [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n`undefined` and other non-number values.",
    "since": "0.1.0",
    "examples": [
      "isNaN(NaN);\n// => true\n\nisNaN(new Number(NaN));\n// => true\n\nisNaN(undefined);\n// => true\n\nisNaN(undefined);\n// => false"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is `NaN`, else `false`."
    }
  },
  {
    "name": "isNative",
    "category": "Lang",
    "description": "Checks if `value` is a pristine native function.\n<br>\n<br>\n**Note:** This method can't reliably detect native functions in the presence\nof the core-js package because core-js circumvents this kind of detection.\nDespite multiple requests, the core-js maintainer has made it clear: any\nattempt to fix the detection will be obstructed. As a result, we're left\nwith little choice but to throw an error. Unfortunately, this also affects\npackages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),\nwhich rely on core-js.",
    "since": "3.0.0",
    "examples": ["isNative(Array.prototype.push);\n// => true\n\nisNative(_);\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a native function,\n else `false`."
    }
  },
  {
    "name": "isNil",
    "category": "Lang",
    "description": "Checks if `value` is `null` or `undefined`.",
    "since": "4.0.0",
    "examples": ["isNil(null);\n// => true\n\nisNil(void 0);\n// => true\n\nisNil(NaN);\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is nullish, else `false`."
    }
  },
  {
    "name": "isNull",
    "category": "Lang",
    "description": "Checks if `value` is `null`.",
    "since": "0.1.0",
    "examples": ["isNull(null);\n// => true\n\nisNull(void 0);\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is `null`, else `false`."
    }
  },
  {
    "name": "isNumber",
    "category": "Lang",
    "description": "Checks if `value` is classified as a `Number` primitive or object.\n<br>\n<br>\n**Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\nclassified as numbers, use the `isFinite` method.",
    "since": "0.1.0",
    "examples": [
      "isNumber(3);\n// => true\n\nisNumber(Number.MIN_VALUE);\n// => true\n\nisNumber(Infinity);\n// => true\n\nisNumber('3');\n// => false"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a number, else `false`."
    }
  },
  {
    "name": "isObject",
    "category": "Lang",
    "description": "Checks if `value` is the\n[language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\nof `Object`. *(e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)*",
    "since": "0.1.0",
    "examples": [
      "isObject({});\n// => true\n\nisObject([1, 2, 3]);\n// => true\n\nisObject(noop);\n// => true\n\nisObject(null);\n// => false"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is an object, else `false`."
    }
  },
  {
    "name": "isObjectLike",
    "category": "Lang",
    "description": "Checks if `value` is object-like. A value is object-like if it's not `null`\nand has a `typeof` result of \"object\".",
    "since": "4.0.0",
    "examples": [
      "isObjectLike({});\n// => true\n\nisObjectLike([1, 2, 3]);\n// => true\n\nisObjectLike(noop);\n// => false\n\nisObjectLike(null);\n// => false"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is object-like, else `false`."
    }
  },
  {
    "name": "isPlainObject",
    "category": "Lang",
    "description": "Checks if `value` is a plain object, that is, an object created by the\n`Object` constructor or one with a `[[Prototype]]` of `null`.",
    "since": "0.8.0",
    "examples": [
      "function Foo() {\n  this.a = 1;\n}\n\nisPlainObject(new Foo);\n// => false\n\nisPlainObject([1, 2, 3]);\n// => false\n\nisPlainObject({ 'x': 0, 'y': 0 });\n// => true\n\nisPlainObject(Object.create(null));\n// => true"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a plain object, else `false`."
    }
  },
  {
    "name": "isRegExp",
    "category": "Lang",
    "description": "Checks if `value` is classified as a `RegExp` object.",
    "since": "0.1.0",
    "examples": ["isRegExp(/abc/);\n// => true\n\nisRegExp('/abc/');\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a regexp, else `false`."
    }
  },
  {
    "name": "isSafeInteger",
    "category": "Lang",
    "description": "Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\ndouble precision number which isn't the result of a rounded unsafe integer.\n<br>\n<br>\n**Note:** This method is based on\n[`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).",
    "since": "4.0.0",
    "examples": [
      "isSafeInteger(3);\n// => true\n\nisSafeInteger(Number.MIN_VALUE);\n// => false\n\nisSafeInteger(Infinity);\n// => false\n\nisSafeInteger('3');\n// => false"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a safe integer, else `false`."
    }
  },
  {
    "name": "isSet",
    "category": "Lang",
    "description": "Checks if `value` is classified as a `Set` object.",
    "since": "4.3.0",
    "examples": ["isSet(new Set);\n// => true\n\nisSet(new WeakSet);\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a set, else `false`."
    }
  },
  {
    "name": "isString",
    "category": "Lang",
    "description": "Checks if `value` is classified as a `String` primitive or object.",
    "since": "0.1.0",
    "examples": ["isString('abc');\n// => true\n\nisString(1);\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a string, else `false`."
    }
  },
  {
    "name": "isSymbol",
    "category": "Lang",
    "description": "Checks if `value` is classified as a `Symbol` primitive or object.",
    "since": "4.0.0",
    "examples": ["isSymbol(Symbol.iterator);\n// => true\n\nisSymbol('abc');\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a symbol, else `false`."
    }
  },
  {
    "name": "isTypedArray",
    "category": "Lang",
    "description": "Checks if `value` is classified as a typed array.",
    "since": "3.0.0",
    "examples": ["isTypedArray(new Uint8Array);\n// => true\n\nisTypedArray([]);\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a typed array, else `false`."
    }
  },
  {
    "name": "isUndefined",
    "category": "Lang",
    "description": "Checks if `value` is `undefined`.",
    "since": "0.1.0",
    "examples": ["isUndefined(void 0);\n// => true\n\nisUndefined(null);\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is `undefined`, else `false`."
    }
  },
  {
    "name": "isWeakMap",
    "category": "Lang",
    "description": "Checks if `value` is classified as a `WeakMap` object.",
    "since": "4.3.0",
    "examples": ["isWeakMap(new WeakMap);\n// => true\n\nisWeakMap(new Map);\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a weak map, else `false`."
    }
  },
  {
    "name": "isWeakSet",
    "category": "Lang",
    "description": "Checks if `value` is classified as a `WeakSet` object.",
    "since": "4.3.0",
    "examples": ["isWeakSet(new WeakSet);\n// => true\n\nisWeakSet(new Set);\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a weak set, else `false`."
    }
  },
  {
    "name": "iteratee",
    "category": "Util",
    "description": "Creates a function that invokes `func` with the arguments of the created\nfunction. If `func` is a property name, the created function returns the\nproperty value for a given element. If `func` is an array or object, the\ncreated function returns `true` for elements that contain the equivalent\nsource properties, otherwise it returns `false`.",
    "since": "4.0.0",
    "examples": [
      "var users = [\n  { 'user': 'barney', 'age': 36, 'active': true },\n  { 'user': 'fred',   'age': 40, 'active': false }\n];\n\n// The `matches` iteratee shorthand.\nfilter(users, iteratee({ 'user': 'barney', 'active': true }));\n// => [{ 'user': 'barney', 'age': 36, 'active': true }]\n\n// The `matchesProperty` iteratee shorthand.\nfilter(users, iteratee(['user', 'fred']));\n// => [{ 'user': 'fred', 'age': 40 }]\n\n// The `property` iteratee shorthand.\nmap(users, iteratee('user'));\n// => ['barney', 'fred']\n\n// Create custom iteratee shorthands.\niteratee = wrap(iteratee, function(iteratee, func) {\n  return !isRegExp(func) ? iteratee(func) : function(string) {\n    return func.test(string);\n  };\n});\n\nfilter(['abc', 'def'], /ef/);\n// => ['def']"
    ],
    "params": [
      {
        "name": "func=_.identity",
        "type": "*",
        "description": "The value to convert to a callback.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the callback."
    }
  },
  {
    "name": "join",
    "category": "Array",
    "description": "Converts all elements in `array` into a string separated by `separator`.",
    "since": "4.0.0",
    "examples": ["join(['a', 'b', 'c'], '~');\n// => 'a~b~c'"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to convert.",
        "optional": false
      },
      {
        "name": "separator=','",
        "type": "string",
        "description": "The element separator.",
        "optional": true,
        "defaultValue": "','"
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the joined string."
    }
  },
  {
    "name": "kebabCase",
    "category": "String",
    "description": "Converts `string` to\n[kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).",
    "since": "3.0.0",
    "examples": [
      "kebabCase('Foo Bar');\n// => 'foo-bar'\n\nkebabCase('fooBar');\n// => 'foo-bar'\n\nkebabCase('__FOO_BAR__');\n// => 'foo-bar'"
    ],
    "params": [
      {
        "name": "string=''",
        "type": "string",
        "description": "The string to convert.",
        "optional": true,
        "defaultValue": "''"
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the kebab cased string."
    }
  },
  {
    "name": "keyBy",
    "category": "Collection",
    "description": "Creates an object composed of keys generated from the results of running\neach element of `collection` thru `iteratee`. The corresponding value of\neach key is the last element responsible for generating the key. The\niteratee is invoked with one argument: *(value)*.",
    "since": "4.0.0",
    "examples": [
      "var array = [\n  { 'dir': 'left', 'code': 97 },\n  { 'dir': 'right', 'code': 100 }\n];\n\nkeyBy(array, function(o) {\n  return String.fromCharCode(o.code);\n});\n// => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n\nkeyBy(array, 'dir');\n// => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }"
    ],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The iteratee to transform keys.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns the composed aggregate object."
    }
  },
  {
    "name": "keys",
    "category": "Object",
    "description": "Creates an array of the own enumerable property names of `object`.\n<br>\n<br>\n**Note:** Non-object values are coerced to objects. See the\n[ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\nfor more details.",
    "since": "0.1.0",
    "examples": [
      "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\nkeys(new Foo);\n// => ['a', 'b'] (iteration order is not guaranteed)\n\nkeys('hi');\n// => ['0', '1']"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to query.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the array of property names."
    }
  },
  {
    "name": "keysIn",
    "category": "Object",
    "description": "Creates an array of the own and inherited enumerable property names of `object`.\n<br>\n<br>\n**Note:** Non-object values are coerced to objects.",
    "since": "3.0.0",
    "examples": [
      "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\nkeysIn(new Foo);\n// => ['a', 'b', 'c'] (iteration order is not guaranteed)"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to query.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the array of property names."
    }
  },
  {
    "name": "last",
    "category": "Array",
    "description": "Gets the last element of `array`.",
    "since": "0.1.0",
    "examples": ["last([1, 2, 3]);\n// => 3"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to query.",
        "optional": false
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the last element of `array`."
    }
  },
  {
    "name": "lastIndexOf",
    "category": "Array",
    "description": "This method is like `indexOf` except that it iterates over elements of\n`array` from right to left.",
    "since": "0.1.0",
    "examples": [
      "lastIndexOf([1, 2, 1, 2], 2);\n// => 3\n\n// Search from the `fromIndex`.\nlastIndexOf([1, 2, 1, 2], 2, 2);\n// => 1"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to inspect.",
        "optional": false
      },
      {
        "name": "value",
        "type": "*",
        "description": "The value to search for.",
        "optional": false
      },
      {
        "name": "fromIndex=array.length-1",
        "type": "number",
        "description": "The index to search from.",
        "optional": true,
        "defaultValue": "array.length-1"
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the index of the matched value, else `-1`."
    }
  },
  {
    "name": "lowerCase",
    "category": "String",
    "description": "Converts `string`, as space separated words, to lower case.",
    "since": "4.0.0",
    "examples": [
      "lowerCase('--Foo-Bar--');\n// => 'foo bar'\n\nlowerCase('fooBar');\n// => 'foo bar'\n\nlowerCase('__FOO_BAR__');\n// => 'foo bar'"
    ],
    "params": [
      {
        "name": "string=''",
        "type": "string",
        "description": "The string to convert.",
        "optional": true,
        "defaultValue": "''"
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the lower cased string."
    }
  },
  {
    "name": "lowerFirst",
    "category": "String",
    "description": "Converts the first character of `string` to lower case.",
    "since": "4.0.0",
    "examples": ["lowerFirst('Fred');\n// => 'fred'\n\nlowerFirst('FRED');\n// => 'fRED'"],
    "params": [
      {
        "name": "string=''",
        "type": "string",
        "description": "The string to convert.",
        "optional": true,
        "defaultValue": "''"
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the converted string."
    }
  },
  {
    "name": "lt",
    "category": "Lang",
    "description": "Checks if `value` is less than `other`.",
    "since": "3.9.0",
    "examples": ["lt(1, 3);\n// => true\n\nlt(3, 3);\n// => false\n\nlt(3, 1);\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to compare.",
        "optional": false
      },
      {
        "name": "other",
        "type": "*",
        "description": "The other value to compare.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is less than `other`,\n else `false`."
    }
  },
  {
    "name": "lte",
    "category": "Lang",
    "description": "Checks if `value` is less than or equal to `other`.",
    "since": "3.9.0",
    "examples": ["lte(1, 3);\n// => true\n\nlte(3, 3);\n// => true\n\nlte(3, 1);\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to compare.",
        "optional": false
      },
      {
        "name": "other",
        "type": "*",
        "description": "The other value to compare.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is less than or equal to\n `other`, else `false`."
    }
  },
  {
    "name": "map",
    "category": "Collection",
    "description": "Creates an array of values by running each element in `collection` thru\n`iteratee`. The iteratee is invoked with three arguments:<br>\n*(value, index|key, collection)*.\n<br>\n<br>\nMany lodash methods are guarded to work as iteratees for methods like\n`every`, `filter`, `map`, `mapValues`, `reject`, and `some`.\n<br>\n<br>\nThe guarded methods are:<br>\n`ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n`fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n`sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n`template`, `trim`, `trimEnd`, `trimStart`, and `words`",
    "since": "0.1.0",
    "examples": [
      "function square(n) {\n  return n * n;\n}\n\nmap([4, 8], square);\n// => [16, 64]\n\nmap({ 'a': 4, 'b': 8 }, square);\n// => [16, 64] (iteration order is not guaranteed)\n\nvar users = [\n  { 'user': 'barney' },\n  { 'user': 'fred' }\n];\n\n// The `property` iteratee shorthand.\nmap(users, 'user');\n// => ['barney', 'fred']"
    ],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new mapped array."
    }
  },
  {
    "name": "mapKeys",
    "category": "Object",
    "description": "The opposite of `mapValues`; this method creates an object with the\nsame values as `object` and keys generated by running each own enumerable\nstring keyed property of `object` thru `iteratee`. The iteratee is invoked\nwith three arguments: *(value, key, object)*.",
    "since": "3.8.0",
    "examples": [
      "mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n  return key + value;\n});\n// => { 'a1': 1, 'b2': 2 }"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns the new mapped object."
    }
  },
  {
    "name": "mapValues",
    "category": "Object",
    "description": "Creates an object with the same keys as `object` and values generated\nby running each own enumerable string keyed property of `object` thru\n`iteratee`. The iteratee is invoked with three arguments:<br>\n*(value, key, object)*.",
    "since": "2.4.0",
    "examples": [
      "var users = {\n  'fred':    { 'user': 'fred',    'age': 40 },\n  'pebbles': { 'user': 'pebbles', 'age': 1 }\n};\n\nmapValues(users, function(o) { return o.age; });\n// => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n\n// The `property` iteratee shorthand.\nmapValues(users, 'age');\n// => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns the new mapped object."
    }
  },
  {
    "name": "matches",
    "category": "Util",
    "description": "Creates a function that performs a partial deep comparison between a given\nobject and `source`, returning `true` if the given object has equivalent\nproperty values, else `false`.\n<br>\n<br>\n**Note:** The created function is equivalent to `isMatch` with `source`\npartially applied.\n<br>\n<br>\nPartial comparisons will match empty array and empty object `source`\nvalues against any array or object value, respectively. See `isEqual`\nfor a list of supported value comparisons.\n<br>\n<br>\n**Note:** Multiple values can be checked by combining several matchers\nusing `overSome`",
    "since": "3.0.0",
    "examples": [
      "var objects = [\n  { 'a': 1, 'b': 2, 'c': 3 },\n  { 'a': 4, 'b': 5, 'c': 6 }\n];\n\nfilter(objects, matches({ 'a': 4, 'c': 6 }));\n// => [{ 'a': 4, 'b': 5, 'c': 6 }]\n\n// Checking for several possible values\nfilter(objects, overSome([matches({ 'a': 1 }), matches({ 'a': 4 })]));\n// => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]"
    ],
    "params": [
      {
        "name": "source",
        "type": "Object",
        "description": "The object of property values to match.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new spec function."
    }
  },
  {
    "name": "matchesProperty",
    "category": "Util",
    "description": "Creates a function that performs a partial deep comparison between the\nvalue at `path` of a given object to `srcValue`, returning `true` if the\nobject value is equivalent, else `false`.\n<br>\n<br>\n**Note:** Partial comparisons will match empty array and empty object\n`srcValue` values against any array or object value, respectively. See\n`isEqual` for a list of supported value comparisons.\n<br>\n<br>\n**Note:** Multiple values can be checked by combining several matchers\nusing `overSome`",
    "since": "3.2.0",
    "examples": [
      "var objects = [\n  { 'a': 1, 'b': 2, 'c': 3 },\n  { 'a': 4, 'b': 5, 'c': 6 }\n];\n\nfind(objects, matchesProperty('a', 4));\n// => { 'a': 4, 'b': 5, 'c': 6 }\n\n// Checking for several possible values\nfilter(objects, overSome([matchesProperty('a', 1), matchesProperty('a', 4)]));\n// => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]"
    ],
    "params": [
      {
        "name": "path",
        "type": "Array|string",
        "description": "The path of the property to get.",
        "optional": false
      },
      {
        "name": "srcValue",
        "type": "*",
        "description": "The value to match.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new spec function."
    }
  },
  {
    "name": "max",
    "category": "Math",
    "description": "Computes the maximum value of `array`. If `array` is empty or falsey,\n`undefined` is returned.",
    "since": "0.1.0",
    "examples": ["max([4, 2, 8, 6]);\n// => 8\n\nmax([]);\n// => undefined"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to iterate over.",
        "optional": false
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the maximum value."
    }
  },
  {
    "name": "maxBy",
    "category": "Math",
    "description": "This method is like `max` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the criterion by which\nthe value is ranked. The iteratee is invoked with one argument: *(value)*.",
    "since": "4.0.0",
    "examples": [
      "var objects = [{ 'n': 1 }, { 'n': 2 }];\n\nmaxBy(objects, function(o) { return o.n; });\n// => { 'n': 2 }\n\n// The `property` iteratee shorthand.\nmaxBy(objects, 'n');\n// => { 'n': 2 }"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The iteratee invoked per element.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the maximum value."
    }
  },
  {
    "name": "mean",
    "category": "Math",
    "description": "Computes the mean of the values in `array`.",
    "since": "4.0.0",
    "examples": ["mean([4, 2, 8, 6]);\n// => 5"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to iterate over.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the mean."
    }
  },
  {
    "name": "meanBy",
    "category": "Math",
    "description": "This method is like `mean` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the value to be averaged.\nThe iteratee is invoked with one argument: *(value)*.",
    "since": "4.7.0",
    "examples": [
      "var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n\nmeanBy(objects, function(o) { return o.n; });\n// => 5\n\n// The `property` iteratee shorthand.\nmeanBy(objects, 'n');\n// => 5"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The iteratee invoked per element.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the mean."
    }
  },
  {
    "name": "memoize",
    "category": "Function",
    "description": "Creates a function that memoizes the result of `func`. If `resolver` is\nprovided, it determines the cache key for storing the result based on the\narguments provided to the memoized function. By default, the first argument\nprovided to the memoized function is used as the map cache key. The `func`\nis invoked with the `this` binding of the memoized function.\n<br>\n<br>\n**Note:** The cache is exposed as the `cache` property on the memoized\nfunction. Its creation may be customized by replacing the `memoize.Cache`\nconstructor with one whose instances implement the\n[`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\nmethod interface of `clear`, `delete`, `get`, `has`, and `set`.",
    "since": "0.1.0",
    "examples": [
      "var object = { 'a': 1, 'b': 2 };\nvar other = { 'c': 3, 'd': 4 };\n\nvar values = memoize(values);\nvalues(object);\n// => [1, 2]\n\nvalues(other);\n// => [3, 4]\n\nobject.a = 2;\nvalues(object);\n// => [1, 2]\n\n// Modify the result cache.\nvalues.cache.set(object, ['a', 'b']);\nvalues(object);\n// => ['a', 'b']\n\n// Replace `memoize.Cache`.\nmemoize.Cache = WeakMap;"
    ],
    "params": [
      {
        "name": "func",
        "type": "Function",
        "description": "The function to have its output memoized.",
        "optional": false
      },
      {
        "name": "resolver",
        "type": "Function",
        "description": "The function to resolve the cache key.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new memoized function."
    }
  },
  {
    "name": "merge",
    "category": "Object",
    "description": "This method is like `assign` except that it recursively merges own and\ninherited enumerable string keyed properties of source objects into the\ndestination object. Source properties that resolve to `undefined` are\nskipped if a destination value exists. Array and plain object properties\nare merged recursively. Other objects and value types are overridden by\nassignment. Source objects are applied from left to right. Subsequent\nsources overwrite property assignments of previous sources.\n<br>\n<br>\n**Note:** This method mutates `object`.",
    "since": "0.5.0",
    "examples": [
      "var object = {\n  'a': [{ 'b': 2 }, { 'd': 4 }]\n};\n\nvar other = {\n  'a': [{ 'c': 3 }, { 'e': 5 }]\n};\n\nmerge(object, other);\n// => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The destination object.",
        "optional": false
      },
      {
        "name": "sources",
        "type": "...Object",
        "description": "The source objects.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns `object`."
    }
  },
  {
    "name": "mergeWith",
    "category": "Object",
    "description": "This method is like `merge` except that it accepts `customizer` which\nis invoked to produce the merged values of the destination and source\nproperties. If `customizer` returns `undefined`, merging is handled by the\nmethod instead. The `customizer` is invoked with six arguments:<br>\n*(objValue, srcValue, key, object, source, stack)*.\n<br>\n<br>\n**Note:** This method mutates `object`.",
    "since": "4.0.0",
    "examples": [
      "function customizer(objValue, srcValue) {\n  if (isArray(objValue)) {\n    return objValue.concat(srcValue);\n  }\n}\n\nvar object = { 'a': [1], 'b': [2] };\nvar other = { 'a': [3], 'b': [4] };\n\nmergeWith(object, other, customizer);\n// => { 'a': [1, 3], 'b': [2, 4] }"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The destination object.",
        "optional": false
      },
      {
        "name": "sources",
        "type": "...Object",
        "description": "The source objects.",
        "optional": false
      },
      {
        "name": "customizer",
        "type": "Function",
        "description": "The function to customize assigned values.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns `object`."
    }
  },
  {
    "name": "method",
    "category": "Util",
    "description": "Creates a function that invokes the method at `path` of a given object.\nAny additional arguments are provided to the invoked method.",
    "since": "3.7.0",
    "examples": [
      "var objects = [\n  { 'a': { 'b': constant(2) } },\n  { 'a': { 'b': constant(1) } }\n];\n\nmap(objects, method('a.b'));\n// => [2, 1]\n\nmap(objects, method(['a', 'b']));\n// => [2, 1]"
    ],
    "params": [
      {
        "name": "path",
        "type": "Array|string",
        "description": "The path of the method to invoke.",
        "optional": false
      },
      {
        "name": "args",
        "type": "...*",
        "description": "The arguments to invoke the method with.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new invoker function."
    }
  },
  {
    "name": "methodOf",
    "category": "Util",
    "description": "The opposite of `method`; this method creates a function that invokes\nthe method at a given path of `object`. Any additional arguments are\nprovided to the invoked method.",
    "since": "3.7.0",
    "examples": [
      "var array = times(3, constant),\n    object = { 'a': array, 'b': array, 'c': array };\n\nmap(['a[2]', 'c[0]'], methodOf(object));\n// => [2, 0]\n\nmap([['a', '2'], ['c', '0']], methodOf(object));\n// => [2, 0]"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to query.",
        "optional": false
      },
      {
        "name": "args",
        "type": "...*",
        "description": "The arguments to invoke the method with.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new invoker function."
    }
  },
  {
    "name": "min",
    "category": "Math",
    "description": "Computes the minimum value of `array`. If `array` is empty or falsey,\n`undefined` is returned.",
    "since": "0.1.0",
    "examples": ["min([4, 2, 8, 6]);\n// => 2\n\nmin([]);\n// => undefined"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to iterate over.",
        "optional": false
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the minimum value."
    }
  },
  {
    "name": "minBy",
    "category": "Math",
    "description": "This method is like `min` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the criterion by which\nthe value is ranked. The iteratee is invoked with one argument: *(value)*.",
    "since": "4.0.0",
    "examples": [
      "var objects = [{ 'n': 1 }, { 'n': 2 }];\n\nminBy(objects, function(o) { return o.n; });\n// => { 'n': 1 }\n\n// The `property` iteratee shorthand.\nminBy(objects, 'n');\n// => { 'n': 1 }"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The iteratee invoked per element.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the minimum value."
    }
  },
  {
    "name": "mixin",
    "category": "Util",
    "description": "Adds all own enumerable string keyed function properties of a source\nobject to the destination object. If `object` is a function, then methods\nare added to its prototype as well.\n<br>\n<br>\n**Note:** Use `runInContext` to create a pristine `lodash` function to\navoid conflicts caused by modifying the original.",
    "since": "0.1.0",
    "examples": [
      "function vowels(string) {\n  return filter(string, function(v) {\n    return /[aeiou]/i.test(v);\n  });\n}\n\nmixin({ 'vowels': vowels });\nvowels('fred');\n// => ['e']\n\n_('fred').vowels().value();\n// => ['e']\n\nmixin({ 'vowels': vowels }, { 'chain': false });\n_('fred').vowels();\n// => ['e']"
    ],
    "params": [
      {
        "name": "object=lodash",
        "type": "Function|Object",
        "description": "The destination object.",
        "optional": true,
        "defaultValue": "lodash"
      },
      {
        "name": "source",
        "type": "Object",
        "description": "The object of functions to add.",
        "optional": false
      },
      {
        "name": "options={}",
        "type": "Object",
        "description": "The options object.",
        "optional": true,
        "defaultValue": "{}"
      },
      {
        "name": "options.chain=true",
        "type": "boolean",
        "description": "Specify whether mixins are chainable.",
        "optional": true,
        "defaultValue": "true"
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns `object`."
    }
  },
  {
    "name": "multiply",
    "category": "Math",
    "description": "Multiply two numbers.",
    "since": "4.7.0",
    "examples": ["multiply(6, 4);\n// => 24"],
    "params": [
      {
        "name": "multiplier",
        "type": "number",
        "description": "The first number in a multiplication.",
        "optional": false
      },
      {
        "name": "multiplicand",
        "type": "number",
        "description": "The second number in a multiplication.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the product."
    }
  },
  {
    "name": "negate",
    "category": "Function",
    "description": "Creates a function that negates the result of the predicate `func`. The\n`func` predicate is invoked with the `this` binding and arguments of the\ncreated function.",
    "since": "3.0.0",
    "examples": [
      "function isEven(n) {\n  return n % 2 == 0;\n}\n\nfilter([1, 2, 3, 4, 5, 6], negate(isEven));\n// => [1, 3, 5]"
    ],
    "params": [
      {
        "name": "predicate",
        "type": "Function",
        "description": "The predicate to negate.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new negated function."
    }
  },
  {
    "name": "noConflict",
    "category": "Util",
    "description": "Reverts the `_` variable to its previous value and returns a reference to\nthe `lodash` function.",
    "since": "0.1.0",
    "examples": ["var lodash = noConflict();"],
    "params": [],
    "returns": {
      "type": "Function",
      "description": "Returns the `lodash` function."
    }
  },
  {
    "name": "noop",
    "category": "Util",
    "description": "This method returns `undefined`.",
    "since": "2.3.0",
    "examples": ["times(2, noop);\n// => [undefined, undefined]"],
    "params": []
  },
  {
    "name": "now",
    "category": "Date",
    "description": "Gets the timestamp of the number of milliseconds that have elapsed since\nthe Unix epoch *(1 January `1970 00`:00:00 UTC)*.",
    "since": "2.4.0",
    "examples": [
      "defer(function(stamp) {\n  console.log(now() - stamp);\n}, now());\n// => Logs the number of milliseconds it took for the deferred invocation."
    ],
    "params": [],
    "returns": {
      "type": "number",
      "description": "Returns the timestamp."
    }
  },
  {
    "name": "nth",
    "category": "Array",
    "description": "Gets the element at index `n` of `array`. If `n` is negative, the nth\nelement from the end is returned.",
    "since": "4.11.0",
    "examples": ["var array = ['a', 'b', 'c', 'd'];\n\nnth(array, 1);\n// => 'b'\n\nnth(array, -2);\n// => 'c';"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to query.",
        "optional": false
      },
      {
        "name": "n=0",
        "type": "number",
        "description": "The index of the element to return.",
        "optional": true,
        "defaultValue": "0"
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the nth element of `array`."
    }
  },
  {
    "name": "nthArg",
    "category": "Util",
    "description": "Creates a function that gets the argument at index `n`. If `n` is negative,\nthe nth argument from the end is returned.",
    "since": "4.0.0",
    "examples": [
      "var func = nthArg(1);\nfunc('a', 'b', 'c', 'd');\n// => 'b'\n\nvar func = nthArg(-2);\nfunc('a', 'b', 'c', 'd');\n// => 'c'"
    ],
    "params": [
      {
        "name": "n=0",
        "type": "number",
        "description": "The index of the argument to return.",
        "optional": true,
        "defaultValue": "0"
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new pass-thru function."
    }
  },
  {
    "name": "omit",
    "category": "Object",
    "description": "The opposite of `pick`; this method creates an object composed of the\nown and inherited enumerable property paths of `object` that are not omitted.\n<br>\n<br>\n**Note:** This method is considerably slower than `pick`.",
    "since": "0.1.0",
    "examples": ["var object = { 'a': 1, 'b': '2', 'c': 3 };\n\nomit(object, ['a', 'c']);\n// => { 'b': '2' }"],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The source object.",
        "optional": false
      },
      {
        "name": "paths",
        "type": "...(string|string[])",
        "description": "The property paths to omit.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns the new object."
    }
  },
  {
    "name": "omitBy",
    "category": "Object",
    "description": "The opposite of `pickBy`; this method creates an object composed of\nthe own and inherited enumerable string keyed properties of `object` that\n`predicate` doesn't return truthy for. The predicate is invoked with two\narguments: *(value, key)*.",
    "since": "4.0.0",
    "examples": ["var object = { 'a': 1, 'b': '2', 'c': 3 };\n\nomitBy(object, isNumber);\n// => { 'b': '2' }"],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The source object.",
        "optional": false
      },
      {
        "name": "predicate=_.identity",
        "type": "Function",
        "description": "The function invoked per property.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns the new object."
    }
  },
  {
    "name": "once",
    "category": "Function",
    "description": "Creates a function that is restricted to invoking `func` once. Repeat calls\nto the function return the value of the first invocation. The `func` is\ninvoked with the `this` binding and arguments of the created function.",
    "since": "0.1.0",
    "examples": [
      "var initialize = once(createApplication);\ninitialize();\ninitialize();\n// => `createApplication` is invoked once"
    ],
    "params": [
      {
        "name": "func",
        "type": "Function",
        "description": "The function to restrict.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new restricted function."
    }
  },
  {
    "name": "orderBy",
    "category": "Collection",
    "description": "This method is like `sortBy` except that it allows specifying the sort\norders of the iteratees to sort by. If `orders` is unspecified, all values\nare sorted in ascending order. Otherwise, specify an order of \"desc\" for\ndescending or \"asc\" for ascending sort order of corresponding values.",
    "since": "4.0.0",
    "examples": [
      "var users = [\n  { 'user': 'fred',   'age': 48 },\n  { 'user': 'barney', 'age': 34 },\n  { 'user': 'fred',   'age': 40 },\n  { 'user': 'barney', 'age': 36 }\n];\n\n// Sort by `user` in ascending order and by `age` in descending order.\norderBy(users, ['user', 'age'], ['asc', 'desc']);\n// => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]"
    ],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "iteratees=[_.identity]",
        "type": "Array[]|Function[]|Object[]|string[]",
        "description": "The iteratees to sort by.",
        "optional": true,
        "defaultValue": "[_.identity]"
      },
      {
        "name": "orders",
        "type": "string[]",
        "description": "The sort orders of `iteratees`.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new sorted array."
    }
  },
  {
    "name": "over",
    "category": "Util",
    "description": "Creates a function that invokes `iteratees` with the arguments it receives\nand returns their results.",
    "since": "4.0.0",
    "examples": ["var func = over([Math.max, Math.min]);\n\nfunc(1, 2, 3, 4);\n// => [4, 1]"],
    "params": [
      {
        "name": "iteratees=[_.identity]",
        "type": "...(Function|Function[])",
        "description": "The iteratees to invoke.",
        "optional": true,
        "defaultValue": "[_.identity]"
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new function."
    }
  },
  {
    "name": "overArgs",
    "category": "Function",
    "description": "Creates a function that invokes `func` with its arguments transformed.",
    "since": "4.0.0",
    "examples": [
      "function doubled(n) {\n  return n * 2;\n}\n\nfunction square(n) {\n  return n * n;\n}\n\nvar func = overArgs(function(x, y) {\n  return [x, y];\n}, [square, doubled]);\n\nfunc(9, 3);\n// => [81, 6]\n\nfunc(10, 5);\n// => [100, 10]"
    ],
    "params": [
      {
        "name": "func",
        "type": "Function",
        "description": "The function to wrap.",
        "optional": false
      },
      {
        "name": "transforms=[_.identity]",
        "type": "...(Function|Function[])",
        "description": "The argument transforms.",
        "optional": true,
        "defaultValue": "[_.identity]"
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new function."
    }
  },
  {
    "name": "overEvery",
    "category": "Util",
    "description": "Creates a function that checks if **all** of the `predicates` return\ntruthy when invoked with the arguments it receives.\n<br>\n<br>\nFollowing shorthands are possible for providing predicates.\nPass an `Object` and it will be used as an parameter for `matches` to create the predicate.\nPass an `Array` of parameters for `matchesProperty` and the predicate will be created using them.",
    "since": "4.0.0",
    "examples": [
      "var func = overEvery([Boolean, isFinite]);\n\nfunc('1');\n// => true\n\nfunc(null);\n// => false\n\nfunc(NaN);\n// => false"
    ],
    "params": [
      {
        "name": "predicates=[_.identity]",
        "type": "...(Function|Function[])",
        "description": "The predicates to check.",
        "optional": true,
        "defaultValue": "[_.identity]"
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new function."
    }
  },
  {
    "name": "overSome",
    "category": "Util",
    "description": "Creates a function that checks if **any** of the `predicates` return\ntruthy when invoked with the arguments it receives.\n<br>\n<br>\nFollowing shorthands are possible for providing predicates.\nPass an `Object` and it will be used as an parameter for `matches` to create the predicate.\nPass an `Array` of parameters for `matchesProperty` and the predicate will be created using them.",
    "since": "4.0.0",
    "examples": [
      "var func = overSome([Boolean, isFinite]);\n\nfunc('1');\n// => true\n\nfunc(null);\n// => true\n\nfunc(NaN);\n// => false\n\nvar matchesFunc = overSome([{ 'a': 1 }, { 'a': 2 }])\nvar matchesPropertyFunc = overSome([['a', 1], ['a', 2]])"
    ],
    "params": [
      {
        "name": "predicates=[_.identity]",
        "type": "...(Function|Function[])",
        "description": "The predicates to check.",
        "optional": true,
        "defaultValue": "[_.identity]"
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new function."
    }
  },
  {
    "name": "pad",
    "category": "String",
    "description": "Pads `string` on the left and right sides if it's shorter than `length`.\nPadding characters are truncated if they can't be evenly divided by `length`.",
    "since": "3.0.0",
    "examples": [
      "pad('abc', 8);\n// => '  abc   '\n\npad('abc', 8, '_-');\n// => '_-abc_-_'\n\npad('abc', 3);\n// => 'abc'"
    ],
    "params": [
      {
        "name": "string=''",
        "type": "string",
        "description": "The string to pad.",
        "optional": true,
        "defaultValue": "''"
      },
      {
        "name": "length=0",
        "type": "number",
        "description": "The padding length.",
        "optional": true,
        "defaultValue": "0"
      },
      {
        "name": "chars=' '",
        "type": "string",
        "description": "The string used as padding.",
        "optional": true,
        "defaultValue": "' '"
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the padded string."
    }
  },
  {
    "name": "padEnd",
    "category": "String",
    "description": "Pads `string` on the right side if it's shorter than `length`. Padding\ncharacters are truncated if they exceed `length`.",
    "since": "4.0.0",
    "examples": [
      "padEnd('abc', 6);\n// => 'abc   '\n\npadEnd('abc', 6, '_-');\n// => 'abc_-_'\n\npadEnd('abc', 3);\n// => 'abc'"
    ],
    "params": [
      {
        "name": "string=''",
        "type": "string",
        "description": "The string to pad.",
        "optional": true,
        "defaultValue": "''"
      },
      {
        "name": "length=0",
        "type": "number",
        "description": "The padding length.",
        "optional": true,
        "defaultValue": "0"
      },
      {
        "name": "chars=' '",
        "type": "string",
        "description": "The string used as padding.",
        "optional": true,
        "defaultValue": "' '"
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the padded string."
    }
  },
  {
    "name": "padStart",
    "category": "String",
    "description": "Pads `string` on the left side if it's shorter than `length`. Padding\ncharacters are truncated if they exceed `length`.",
    "since": "4.0.0",
    "examples": [
      "padStart('abc', 6);\n// => '   abc'\n\npadStart('abc', 6, '_-');\n// => '_-_abc'\n\npadStart('abc', 3);\n// => 'abc'"
    ],
    "params": [
      {
        "name": "string=''",
        "type": "string",
        "description": "The string to pad.",
        "optional": true,
        "defaultValue": "''"
      },
      {
        "name": "length=0",
        "type": "number",
        "description": "The padding length.",
        "optional": true,
        "defaultValue": "0"
      },
      {
        "name": "chars=' '",
        "type": "string",
        "description": "The string used as padding.",
        "optional": true,
        "defaultValue": "' '"
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the padded string."
    }
  },
  {
    "name": "parseInt",
    "category": "String",
    "description": "Converts `string` to an integer of the specified radix. If `radix` is\n`undefined` or `0`, a `radix` of `10` is used unless `value` is a\nhexadecimal, in which case a `radix` of `16` is used.\n<br>\n<br>\n**Note:** This method aligns with the\n[ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.",
    "since": "1.1.0",
    "examples": ["parseInt('08');\n// => 8\n\nmap(['6', '08', '10'], parseInt);\n// => [6, 8, 10]"],
    "params": [
      {
        "name": "string",
        "type": "string",
        "description": "The string to convert.",
        "optional": false
      },
      {
        "name": "radix=10",
        "type": "number",
        "description": "The radix to interpret `value` by.",
        "optional": true,
        "defaultValue": "10"
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the converted integer."
    }
  },
  {
    "name": "partial",
    "category": "Function",
    "description": "Creates a function that invokes `func` with `partials` prepended to the\narguments it receives. This method is like `bind` except it does **not**\nalter the `this` binding.\n<br>\n<br>\nThe `partial.placeholder` value, which defaults to `_` in monolithic\nbuilds, may be used as a placeholder for partially applied arguments.\n<br>\n<br>\n**Note:** This method doesn't set the \"length\" property of partially\napplied functions.",
    "since": "0.2.0",
    "examples": [
      "function greet(greeting, name) {\n  return greeting + ' ' + name;\n}\n\nvar sayHelloTo = partial(greet, 'hello');\nsayHelloTo('fred');\n// => 'hello fred'\n\n// Partially applied with placeholders.\nvar greetFred = partial(greet, _, 'fred');\ngreetFred('hi');\n// => 'hi fred'"
    ],
    "params": [
      {
        "name": "func",
        "type": "Function",
        "description": "The function to partially apply arguments to.",
        "optional": false
      },
      {
        "name": "partials",
        "type": "...*",
        "description": "The arguments to be partially applied.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new partially applied function."
    }
  },
  {
    "name": "partialRight",
    "category": "Function",
    "description": "This method is like `partial` except that partially applied arguments\nare appended to the arguments it receives.\n<br>\n<br>\nThe `partialRight.placeholder` value, which defaults to `_` in monolithic\nbuilds, may be used as a placeholder for partially applied arguments.\n<br>\n<br>\n**Note:** This method doesn't set the \"length\" property of partially\napplied functions.",
    "since": "1.0.0",
    "examples": [
      "function greet(greeting, name) {\n  return greeting + ' ' + name;\n}\n\nvar greetFred = partialRight(greet, 'fred');\ngreetFred('hi');\n// => 'hi fred'\n\n// Partially applied with placeholders.\nvar sayHelloTo = partialRight(greet, 'hello', _);\nsayHelloTo('fred');\n// => 'hello fred'"
    ],
    "params": [
      {
        "name": "func",
        "type": "Function",
        "description": "The function to partially apply arguments to.",
        "optional": false
      },
      {
        "name": "partials",
        "type": "...*",
        "description": "The arguments to be partially applied.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new partially applied function."
    }
  },
  {
    "name": "partition",
    "category": "Collection",
    "description": "Creates an array of elements split into two groups, the first of which\ncontains elements `predicate` returns truthy for, the second of which\ncontains elements `predicate` returns falsey for. The predicate is\ninvoked with one argument: *(value)*.",
    "since": "3.0.0",
    "examples": [
      "var users = [\n  { 'user': 'barney',  'age': 36, 'active': false },\n  { 'user': 'fred',    'age': 40, 'active': true },\n  { 'user': 'pebbles', 'age': 1,  'active': false }\n];\n\npartition(users, function(o) { return o.active; });\n// => objects for [['fred'], ['barney', 'pebbles']]\n\n// The `matches` iteratee shorthand.\npartition(users, { 'age': 1, 'active': false });\n// => objects for [['pebbles'], ['barney', 'fred']]\n\n// The `matchesProperty` iteratee shorthand.\npartition(users, ['active', false]);\n// => objects for [['barney', 'pebbles'], ['fred']]\n\n// The `property` iteratee shorthand.\npartition(users, 'active');\n// => objects for [['fred'], ['barney', 'pebbles']]"
    ],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "predicate=_.identity",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the array of grouped elements."
    }
  },
  {
    "name": "pick",
    "category": "Object",
    "description": "Creates an object composed of the picked `object` properties.",
    "since": "0.1.0",
    "examples": ["var object = { 'a': 1, 'b': '2', 'c': 3 };\n\npick(object, ['a', 'c']);\n// => { 'a': 1, 'c': 3 }"],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The source object.",
        "optional": false
      },
      {
        "name": "paths",
        "type": "...(string|string[])",
        "description": "The property paths to pick.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns the new object."
    }
  },
  {
    "name": "pickBy",
    "category": "Object",
    "description": "Creates an object composed of the `object` properties `predicate` returns\ntruthy for. The predicate is invoked with two arguments: *(value, key)*.",
    "since": "4.0.0",
    "examples": ["var object = { 'a': 1, 'b': '2', 'c': 3 };\n\npickBy(object, isNumber);\n// => { 'a': 1, 'c': 3 }"],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The source object.",
        "optional": false
      },
      {
        "name": "predicate=_.identity",
        "type": "Function",
        "description": "The function invoked per property.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns the new object."
    }
  },
  {
    "name": "property",
    "category": "Util",
    "description": "Creates a function that returns the value at `path` of a given object.",
    "since": "2.4.0",
    "examples": [
      "var objects = [\n  { 'a': { 'b': 2 } },\n  { 'a': { 'b': 1 } }\n];\n\nmap(objects, property('a.b'));\n// => [2, 1]\n\nmap(sortBy(objects, property(['a', 'b'])), 'a.b');\n// => [1, 2]"
    ],
    "params": [
      {
        "name": "path",
        "type": "Array|string",
        "description": "The path of the property to get.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new accessor function."
    }
  },
  {
    "name": "propertyOf",
    "category": "Util",
    "description": "The opposite of `property`; this method creates a function that returns\nthe value at a given path of `object`.",
    "since": "3.0.0",
    "examples": [
      "var array = [0, 1, 2],\n    object = { 'a': array, 'b': array, 'c': array };\n\nmap(['a[2]', 'c[0]'], propertyOf(object));\n// => [2, 0]\n\nmap([['a', '2'], ['c', '0']], propertyOf(object));\n// => [2, 0]"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to query.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new accessor function."
    }
  },
  {
    "name": "prototype.at",
    "category": "Seq",
    "description": "This method is the wrapper version of `at`.",
    "since": "1.0.0",
    "examples": [
      "var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n\n_(object).at(['a[0].b.c', 'a[1]']).value();\n// => [3, 4]"
    ],
    "params": [
      {
        "name": "paths",
        "type": "...(string|string[])",
        "description": "The property paths to pick.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns the new `lodash` wrapper instance."
    }
  },
  {
    "name": "prototype.chain",
    "category": "Seq",
    "description": "Creates a `lodash` wrapper instance with explicit method chain sequences enabled.",
    "since": "0.1.0",
    "examples": [
      "var users = [\n  { 'user': 'barney', 'age': 36 },\n  { 'user': 'fred',   'age': 40 }\n];\n\n// A sequence without explicit chaining.\n_(users).head();\n// => { 'user': 'barney', 'age': 36 }\n\n// A sequence with explicit chaining.\n_(users)\n  .chain()\n  .head()\n  .pick('user')\n  .value();\n// => { 'user': 'barney' }"
    ],
    "params": [],
    "returns": {
      "type": "Object",
      "description": "Returns the new `lodash` wrapper instance."
    }
  },
  {
    "name": "prototype.commit",
    "category": "Seq",
    "description": "Executes the chain sequence and returns the wrapped result.",
    "since": "3.2.0",
    "examples": [
      "var array = [1, 2];\nvar wrapped = _(array).push(3);\n\nconsole.log(array);\n// => [1, 2]\n\nwrapped = wrapped.commit();\nconsole.log(array);\n// => [1, 2, 3]\n\nwrapped.last();\n// => 3\n\nconsole.log(array);\n// => [1, 2, 3]"
    ],
    "params": [],
    "returns": {
      "type": "Object",
      "description": "Returns the new `lodash` wrapper instance."
    }
  },
  {
    "name": "prototype.next",
    "category": "Seq",
    "description": "Gets the next value on a wrapped object following the\n[iterator protocol](https://mdn.io/iteration_protocols#iterator).",
    "since": "4.0.0",
    "examples": [
      "var wrapped = _([1, 2]);\n\nwrapped.next();\n// => { 'done': false, 'value': 1 }\n\nwrapped.next();\n// => { 'done': false, 'value': 2 }\n\nwrapped.next();\n// => { 'done': true, 'value': undefined }"
    ],
    "params": [],
    "returns": {
      "type": "Object",
      "description": "Returns the next iterator value."
    }
  },
  {
    "name": "prototype.plant",
    "category": "Seq",
    "description": "Creates a clone of the chain sequence planting `value` as the wrapped value.",
    "since": "3.2.0",
    "examples": [
      "function square(n) {\n  return n * n;\n}\n\nvar wrapped = _([1, 2]).map(square);\nvar other = wrapped.plant([3, 4]);\n\nother.value();\n// => [9, 16]\n\nwrapped.value();\n// => [1, 4]"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to plant.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns the new `lodash` wrapper instance."
    }
  },
  {
    "name": "prototype.reverse",
    "category": "Seq",
    "description": "This method is the wrapper version of `reverse`.\n<br>\n<br>\n**Note:** This method mutates the wrapped array.",
    "since": "0.1.0",
    "examples": [
      "var array = [1, 2, 3];\n\n_(array).reverse().value()\n// => [3, 2, 1]\n\nconsole.log(array);\n// => [3, 2, 1]"
    ],
    "params": [],
    "returns": {
      "type": "Object",
      "description": "Returns the new `lodash` wrapper instance."
    }
  },
  {
    "name": "prototype.Symbol.iterator",
    "category": "Seq",
    "description": "Enables the wrapper to be iterable.",
    "since": "4.0.0",
    "examples": [
      "var wrapped = _([1, 2]);\n\nwrapped[Symbol.iterator]() === wrapped;\n// => true\n\nArray.from(wrapped);\n// => [1, 2]"
    ],
    "params": [],
    "returns": {
      "type": "Object",
      "description": "Returns the wrapper object."
    }
  },
  {
    "name": "prototype.value",
    "category": "Seq",
    "description": "Executes the chain sequence to resolve the unwrapped value.",
    "since": "0.1.0",
    "examples": ["_([1, 2, 3]).value();\n// => [1, 2, 3]"],
    "params": [],
    "returns": {
      "type": "*",
      "description": "Returns the resolved unwrapped value."
    }
  },
  {
    "name": "pull",
    "category": "Array",
    "description": "Removes all given values from `array` using\n[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons.\n<br>\n<br>\n**Note:** Unlike `without`, this method mutates `array`. Use `remove`\nto remove elements from an array by predicate.",
    "since": "2.0.0",
    "examples": [
      "var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n\npull(array, 'a', 'c');\nconsole.log(array);\n// => ['b', 'b']"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to modify.",
        "optional": false
      },
      {
        "name": "values",
        "type": "...*",
        "description": "The values to remove.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns `array`."
    }
  },
  {
    "name": "pullAll",
    "category": "Array",
    "description": "This method is like `pull` except that it accepts an array of values to remove.\n<br>\n<br>\n**Note:** Unlike `difference`, this method mutates `array`.",
    "since": "4.0.0",
    "examples": [
      "var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n\npullAll(array, ['a', 'c']);\nconsole.log(array);\n// => ['b', 'b']"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to modify.",
        "optional": false
      },
      {
        "name": "values",
        "type": "Array",
        "description": "The values to remove.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns `array`."
    }
  },
  {
    "name": "pullAllBy",
    "category": "Array",
    "description": "This method is like `pullAll` except that it accepts `iteratee` which is\ninvoked for each element of `array` and `values` to generate the criterion\nby which they're compared. The iteratee is invoked with one argument: *(value)*.\n<br>\n<br>\n**Note:** Unlike `differenceBy`, this method mutates `array`.",
    "since": "4.0.0",
    "examples": [
      "var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n\npullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\nconsole.log(array);\n// => [{ 'x': 2 }]"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to modify.",
        "optional": false
      },
      {
        "name": "values",
        "type": "Array",
        "description": "The values to remove.",
        "optional": false
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The iteratee invoked per element.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns `array`."
    }
  },
  {
    "name": "pullAllWith",
    "category": "Array",
    "description": "This method is like `pullAll` except that it accepts `comparator` which\nis invoked to compare elements of `array` to `values`. The comparator is\ninvoked with two arguments: *(arrVal, othVal)*.\n<br>\n<br>\n**Note:** Unlike `differenceWith`, this method mutates `array`.",
    "since": "4.6.0",
    "examples": [
      "var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n\npullAllWith(array, [{ 'x': 3, 'y': 4 }], isEqual);\nconsole.log(array);\n// => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to modify.",
        "optional": false
      },
      {
        "name": "values",
        "type": "Array",
        "description": "The values to remove.",
        "optional": false
      },
      {
        "name": "comparator",
        "type": "Function",
        "description": "The comparator invoked per element.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns `array`."
    }
  },
  {
    "name": "pullAt",
    "category": "Array",
    "description": "Removes elements from `array` corresponding to `indexes` and returns an\narray of removed elements.\n<br>\n<br>\n**Note:** Unlike `at`, this method mutates `array`.",
    "since": "3.0.0",
    "examples": [
      "var array = ['a', 'b', 'c', 'd'];\nvar pulled = pullAt(array, [1, 3]);\n\nconsole.log(array);\n// => ['a', 'c']\n\nconsole.log(pulled);\n// => ['b', 'd']"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to modify.",
        "optional": false
      },
      {
        "name": "indexes",
        "type": "...(number|number[])",
        "description": "The indexes of elements to remove.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of removed elements."
    }
  },
  {
    "name": "random",
    "category": "Number",
    "description": "Produces a random number between the inclusive `lower` and `upper` bounds.\nIf only one argument is provided a number between `0` and the given number\nis returned. If `floating` is `true`, or either `lower` or `upper` are\nfloats, a floating-point number is returned instead of an integer.\n<br>\n<br>\n**Note:** JavaScript follows the IEEE-754 standard for resolving\nfloating-point values which can produce unexpected results.",
    "since": "0.7.0",
    "examples": [
      "random(0, 5);\n// => an integer between 0 and 5\n\nrandom(5);\n// => also an integer between 0 and 5\n\nrandom(5, true);\n// => a floating-point number between 0 and 5\n\nrandom(1.2, 5.2);\n// => a floating-point number between 1.2 and 5.2"
    ],
    "params": [
      {
        "name": "lower=0",
        "type": "number",
        "description": "The lower bound.",
        "optional": true,
        "defaultValue": "0"
      },
      {
        "name": "upper=1",
        "type": "number",
        "description": "The upper bound.",
        "optional": true,
        "defaultValue": "1"
      },
      {
        "name": "floating",
        "type": "boolean",
        "description": "Specify returning a floating-point number.",
        "optional": true
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the random number."
    }
  },
  {
    "name": "range",
    "category": "Util",
    "description": "Creates an array of numbers *(positive and/or negative)* progressing from\n`start` up to, but not including, `end`. A step of `-1` is used if a negative\n`start` is specified without an `end` or `step`. If `end` is not specified,\nit's set to `start` with `start` then set to `0`.\n<br>\n<br>\n**Note:** JavaScript follows the IEEE-754 standard for resolving\nfloating-point values which can produce unexpected results.",
    "since": "0.1.0",
    "examples": [
      "range(4);\n// => [0, 1, 2, 3]\n\nrange(-4);\n// => [0, -1, -2, -3]\n\nrange(1, 5);\n// => [1, 2, 3, 4]\n\nrange(0, 20, 5);\n// => [0, 5, 10, 15]\n\nrange(0, -4, -1);\n// => [0, -1, -2, -3]\n\nrange(1, 4, 0);\n// => [1, 1, 1]\n\nrange(0);\n// => []"
    ],
    "params": [
      {
        "name": "start=0",
        "type": "number",
        "description": "The start of the range.",
        "optional": true,
        "defaultValue": "0"
      },
      {
        "name": "end",
        "type": "number",
        "description": "The end of the range.",
        "optional": false
      },
      {
        "name": "step=1",
        "type": "number",
        "description": "The value to increment or decrement by.",
        "optional": true,
        "defaultValue": "1"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the range of numbers."
    }
  },
  {
    "name": "rangeRight",
    "category": "Util",
    "description": "This method is like `range` except that it populates values in\ndescending order.",
    "since": "4.0.0",
    "examples": [
      "rangeRight(4);\n// => [3, 2, 1, 0]\n\nrangeRight(-4);\n// => [-3, -2, -1, 0]\n\nrangeRight(1, 5);\n// => [4, 3, 2, 1]\n\nrangeRight(0, 20, 5);\n// => [15, 10, 5, 0]\n\nrangeRight(0, -4, -1);\n// => [-3, -2, -1, 0]\n\nrangeRight(1, 4, 0);\n// => [1, 1, 1]\n\nrangeRight(0);\n// => []"
    ],
    "params": [
      {
        "name": "start=0",
        "type": "number",
        "description": "The start of the range.",
        "optional": true,
        "defaultValue": "0"
      },
      {
        "name": "end",
        "type": "number",
        "description": "The end of the range.",
        "optional": false
      },
      {
        "name": "step=1",
        "type": "number",
        "description": "The value to increment or decrement by.",
        "optional": true,
        "defaultValue": "1"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the range of numbers."
    }
  },
  {
    "name": "rearg",
    "category": "Function",
    "description": "Creates a function that invokes `func` with arguments arranged according\nto the specified `indexes` where the argument value at the first index is\nprovided as the first argument, the argument value at the second index is\nprovided as the second argument, and so on.",
    "since": "3.0.0",
    "examples": [
      "var rearged = rearg(function(a, b, c) {\n  return [a, b, c];\n}, [2, 0, 1]);\n\nrearged('b', 'c', 'a')\n// => ['a', 'b', 'c']"
    ],
    "params": [
      {
        "name": "func",
        "type": "Function",
        "description": "The function to rearrange arguments for.",
        "optional": false
      },
      {
        "name": "indexes",
        "type": "...(number|number[])",
        "description": "The arranged argument indexes.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new function."
    }
  },
  {
    "name": "reduce",
    "category": "Collection",
    "description": "Reduces `collection` to a value which is the accumulated result of running\neach element in `collection` thru `iteratee`, where each successive\ninvocation is supplied the return value of the previous. If `accumulator`\nis not given, the first element of `collection` is used as the initial\nvalue. The iteratee is invoked with four arguments:<br>\n*(accumulator, value, index|key, collection)*.\n<br>\n<br>\nMany lodash methods are guarded to work as iteratees for methods like\n`reduce`, `reduceRight`, and `transform`.\n<br>\n<br>\nThe guarded methods are:<br>\n`assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\nand `sortBy`",
    "since": "0.1.0",
    "examples": [
      "reduce([1, 2], function(sum, n) {\n  return sum + n;\n}, 0);\n// => 3\n\nreduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n  (result[value] || (result[value] = [])).push(key);\n  return result;\n}, {});\n// => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)"
    ],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": true,
        "defaultValue": "_.identity"
      },
      {
        "name": "accumulator",
        "type": "*",
        "description": "The initial value.",
        "optional": true
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the accumulated value."
    }
  },
  {
    "name": "reduceRight",
    "category": "Collection",
    "description": "This method is like `reduce` except that it iterates over elements of\n`collection` from right to left.",
    "since": "0.1.0",
    "examples": [
      "var array = [[0, 1], [2, 3], [4, 5]];\n\nreduceRight(array, function(flattened, other) {\n  return flattened.concat(other);\n}, []);\n// => [4, 5, 2, 3, 0, 1]"
    ],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": true,
        "defaultValue": "_.identity"
      },
      {
        "name": "accumulator",
        "type": "*",
        "description": "The initial value.",
        "optional": true
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the accumulated value."
    }
  },
  {
    "name": "reject",
    "category": "Collection",
    "description": "The opposite of `filter`; this method returns the elements of `collection`\nthat `predicate` does **not** return truthy for.",
    "since": "0.1.0",
    "examples": [
      "var users = [\n  { 'user': 'barney', 'age': 36, 'active': false },\n  { 'user': 'fred',   'age': 40, 'active': true }\n];\n\nreject(users, function(o) { return !o.active; });\n// => objects for ['fred']\n\n// The `matches` iteratee shorthand.\nreject(users, { 'age': 40, 'active': true });\n// => objects for ['barney']\n\n// The `matchesProperty` iteratee shorthand.\nreject(users, ['active', false]);\n// => objects for ['fred']\n\n// The `property` iteratee shorthand.\nreject(users, 'active');\n// => objects for ['barney']"
    ],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "predicate=_.identity",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new filtered array."
    }
  },
  {
    "name": "remove",
    "category": "Array",
    "description": "Removes all elements from `array` that `predicate` returns truthy for\nand returns an array of the removed elements. The predicate is invoked\nwith three arguments: *(value, index, array)*.\n<br>\n<br>\n**Note:** Unlike `filter`, this method mutates `array`. Use `pull`\nto pull elements from an array by value.",
    "since": "2.0.0",
    "examples": [
      "var array = [1, 2, 3, 4];\nvar evens = remove(array, function(n) {\n  return n % 2 == 0;\n});\n\nconsole.log(array);\n// => [1, 3]\n\nconsole.log(evens);\n// => [2, 4]"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to modify.",
        "optional": false
      },
      {
        "name": "predicate=_.identity",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of removed elements."
    }
  },
  {
    "name": "repeat",
    "category": "String",
    "description": "Repeats the given string `n` times.",
    "since": "3.0.0",
    "examples": ["repeat('*', 3);\n// => '***'\n\nrepeat('abc', 2);\n// => 'abcabc'\n\nrepeat('abc', 0);\n// => ''"],
    "params": [
      {
        "name": "string=''",
        "type": "string",
        "description": "The string to repeat.",
        "optional": true,
        "defaultValue": "''"
      },
      {
        "name": "n=1",
        "type": "number",
        "description": "The number of times to repeat the string.",
        "optional": true,
        "defaultValue": "1"
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the repeated string."
    }
  },
  {
    "name": "replace",
    "category": "String",
    "description": "Replaces matches for `pattern` in `string` with `replacement`.\n<br>\n<br>\n**Note:** This method is based on\n[`String#replace`](https://mdn.io/String/replace).",
    "since": "4.0.0",
    "examples": ["replace('Hi Fred', 'Fred', 'Barney');\n// => 'Hi Barney'"],
    "params": [
      {
        "name": "string=''",
        "type": "string",
        "description": "The string to modify.",
        "optional": true,
        "defaultValue": "''"
      },
      {
        "name": "pattern",
        "type": "RegExp|string",
        "description": "The pattern to replace.",
        "optional": false
      },
      {
        "name": "replacement",
        "type": "Function|string",
        "description": "The match replacement.",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the modified string."
    }
  },
  {
    "name": "rest",
    "category": "Function",
    "description": "Creates a function that invokes `func` with the `this` binding of the\ncreated function and arguments from `start` and beyond provided as\nan array.\n<br>\n<br>\n**Note:** This method is based on the\n[rest parameter](https://mdn.io/rest_parameters).",
    "since": "4.0.0",
    "examples": [
      "var say = rest(function(what, names) {\n  return what + ' ' + initial(names).join(', ') +\n    (size(names) > 1 ? ', & ' : '') + last(names);\n});\n\nsay('hello', 'fred', 'barney', 'pebbles');\n// => 'hello fred, barney, & pebbles'"
    ],
    "params": [
      {
        "name": "func",
        "type": "Function",
        "description": "The function to apply a rest parameter to.",
        "optional": false
      },
      {
        "name": "start=func.length-1",
        "type": "number",
        "description": "The start position of the rest parameter.",
        "optional": true,
        "defaultValue": "func.length-1"
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new function."
    }
  },
  {
    "name": "result",
    "category": "Object",
    "description": "This method is like `get` except that if the resolved value is a\nfunction it's invoked with the `this` binding of its parent object and\nits result is returned.",
    "since": "0.1.0",
    "examples": [
      "var object = { 'a': [{ 'b': { 'c1': 3, 'c2': constant(4) } }] };\n\nresult(object, 'a[0].b.c1');\n// => 3\n\nresult(object, 'a[0].b.c2');\n// => 4\n\nresult(object, 'a[0].b.c3', 'default');\n// => 'default'\n\nresult(object, 'a[0].b.c3', constant('default'));\n// => 'default'"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to query.",
        "optional": false
      },
      {
        "name": "path",
        "type": "Array|string",
        "description": "The path of the property to resolve.",
        "optional": false
      },
      {
        "name": "defaultValue",
        "type": "*",
        "description": "The value returned for `undefined` resolved values.",
        "optional": true
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the resolved value."
    }
  },
  {
    "name": "reverse",
    "category": "Array",
    "description": "Reverses `array` so that the first element becomes the last, the second\nelement becomes the second to last, and so on.\n<br>\n<br>\n**Note:** This method mutates `array` and is based on\n[`Array#reverse`](https://mdn.io/Array/reverse).",
    "since": "4.0.0",
    "examples": ["var array = [1, 2, 3];\n\nreverse(array);\n// => [3, 2, 1]\n\nconsole.log(array);\n// => [3, 2, 1]"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to modify.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns `array`."
    }
  },
  {
    "name": "round",
    "category": "Math",
    "description": "Computes `number` rounded to `precision`.",
    "since": "3.10.0",
    "examples": ["round(4.006);\n// => 4\n\nround(4.006, 2);\n// => 4.01\n\nround(4060, -2);\n// => 4100"],
    "params": [
      {
        "name": "number",
        "type": "number",
        "description": "The number to round.",
        "optional": false
      },
      {
        "name": "precision=0",
        "type": "number",
        "description": "The precision to round to.",
        "optional": true,
        "defaultValue": "0"
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the rounded number."
    }
  },
  {
    "name": "runInContext",
    "category": "Util",
    "description": "Create a new pristine `lodash` function using the `context` object.",
    "since": "1.1.0",
    "examples": [
      "mixin({ 'foo': constant('foo') });\n\nvar lodash = runInContext();\nlodash.mixin({ 'bar': lodash.constant('bar') });\n\nisFunction(foo);\n// => true\nisFunction(bar);\n// => false\n\nlodash.isFunction(lodash.foo);\n// => false\nlodash.isFunction(lodash.bar);\n// => true\n\n// Create a suped-up `defer` in Node.js.\nvar defer = runInContext({ 'setTimeout': setImmediate }).defer;"
    ],
    "params": [
      {
        "name": "context=root",
        "type": "Object",
        "description": "The context object.",
        "optional": true,
        "defaultValue": "root"
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns a new `lodash` function."
    }
  },
  {
    "name": "sample",
    "category": "Collection",
    "description": "Gets a random element from `collection`.",
    "since": "2.0.0",
    "examples": ["sample([1, 2, 3, 4]);\n// => 2"],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to sample.",
        "optional": false
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the random element."
    }
  },
  {
    "name": "sampleSize",
    "category": "Collection",
    "description": "Gets `n` random elements at unique keys from `collection` up to the\nsize of `collection`.",
    "since": "4.0.0",
    "examples": ["sampleSize([1, 2, 3], 2);\n// => [3, 1]\n\nsampleSize([1, 2, 3], 4);\n// => [2, 3, 1]"],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to sample.",
        "optional": false
      },
      {
        "name": "n=1",
        "type": "number",
        "description": "The number of elements to sample.",
        "optional": true,
        "defaultValue": "1"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the random elements."
    }
  },
  {
    "name": "set",
    "category": "Object",
    "description": "Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\nit's created. Arrays are created for missing index properties while objects\nare created for all other missing properties. Use `setWith` to customize\n`path` creation.\n<br>\n<br>\n**Note:** This method mutates `object`.",
    "since": "3.7.0",
    "examples": [
      "var object = { 'a': [{ 'b': { 'c': 3 } }] };\n\nset(object, 'a[0].b.c', 4);\nconsole.log(object.a[0].b.c);\n// => 4\n\nset(object, ['x', '0', 'y', 'z'], 5);\nconsole.log(object.x[0].y.z);\n// => 5"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to modify.",
        "optional": false
      },
      {
        "name": "path",
        "type": "Array|string",
        "description": "The path of the property to set.",
        "optional": false
      },
      {
        "name": "value",
        "type": "*",
        "description": "The value to set.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns `object`."
    }
  },
  {
    "name": "setWith",
    "category": "Object",
    "description": "This method is like `set` except that it accepts `customizer` which is\ninvoked to produce the objects of `path`.  If `customizer` returns `undefined`\npath creation is handled by the method instead. The `customizer` is invoked\nwith three arguments: *(nsValue, key, nsObject)*.\n<br>\n<br>\n**Note:** This method mutates `object`.",
    "since": "4.0.0",
    "examples": ["var object = {};\n\nsetWith(object, '[0][1]', 'a', Object);\n// => { '0': { '1': 'a' } }"],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to modify.",
        "optional": false
      },
      {
        "name": "path",
        "type": "Array|string",
        "description": "The path of the property to set.",
        "optional": false
      },
      {
        "name": "value",
        "type": "*",
        "description": "The value to set.",
        "optional": false
      },
      {
        "name": "customizer",
        "type": "Function",
        "description": "The function to customize assigned values.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns `object`."
    }
  },
  {
    "name": "shuffle",
    "category": "Collection",
    "description": "Creates an array of shuffled values, using a version of the\n[Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).",
    "since": "0.1.0",
    "examples": ["shuffle([1, 2, 3, 4]);\n// => [4, 1, 3, 2]"],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to shuffle.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new shuffled array."
    }
  },
  {
    "name": "size",
    "category": "Collection",
    "description": "Gets the size of `collection` by returning its length for array-like\nvalues or the number of own enumerable string keyed properties for objects.",
    "since": "0.1.0",
    "examples": ["size([1, 2, 3]);\n// => 3\n\nsize({ 'a': 1, 'b': 2 });\n// => 2\n\nsize('pebbles');\n// => 7"],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object|string",
        "description": "The collection to inspect.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the collection size."
    }
  },
  {
    "name": "slice",
    "category": "Array",
    "description": "Creates a slice of `array` from `start` up to, but not including, `end`.\n<br>\n<br>\n**Note:** This method is used instead of\n[`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\nreturned.",
    "since": "3.0.0",
    "examples": [],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to slice.",
        "optional": false
      },
      {
        "name": "start=0",
        "type": "number",
        "description": "The start position.",
        "optional": true,
        "defaultValue": "0"
      },
      {
        "name": "end=array.length",
        "type": "number",
        "description": "The end position.",
        "optional": true,
        "defaultValue": "array.length"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the slice of `array`."
    }
  },
  {
    "name": "snakeCase",
    "category": "String",
    "description": "Converts `string` to\n[snake case](https://en.wikipedia.org/wiki/Snake_case).",
    "since": "3.0.0",
    "examples": [
      "snakeCase('Foo Bar');\n// => 'foo_bar'\n\nsnakeCase('fooBar');\n// => 'foo_bar'\n\nsnakeCase('--FOO-BAR--');\n// => 'foo_bar'"
    ],
    "params": [
      {
        "name": "string=''",
        "type": "string",
        "description": "The string to convert.",
        "optional": true,
        "defaultValue": "''"
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the snake cased string."
    }
  },
  {
    "name": "some",
    "category": "Collection",
    "description": "Checks if `predicate` returns truthy for **any** element of `collection`.\nIteration is stopped once `predicate` returns truthy. The predicate is\ninvoked with three arguments: *(value, index|key, collection)*.",
    "since": "0.1.0",
    "examples": [
      "some([null, 0, 'yes', false], Boolean);\n// => true\n\nvar users = [\n  { 'user': 'barney', 'active': true },\n  { 'user': 'fred',   'active': false }\n];\n\n// The `matches` iteratee shorthand.\nsome(users, { 'user': 'barney', 'active': false });\n// => false\n\n// The `matchesProperty` iteratee shorthand.\nsome(users, ['active', false]);\n// => true\n\n// The `property` iteratee shorthand.\nsome(users, 'active');\n// => true"
    ],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "predicate=_.identity",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if any element passes the predicate check,\n else `false`."
    }
  },
  {
    "name": "sortBy",
    "category": "Collection",
    "description": "Creates an array of elements, sorted in ascending order by the results of\nrunning each element in a collection thru each iteratee. This method\nperforms a stable sort, that is, it preserves the original sort order of\nequal elements. The iteratees are invoked with one argument: *(value)*.",
    "since": "0.1.0",
    "examples": [
      "var users = [\n  { 'user': 'fred',   'age': 48 },\n  { 'user': 'barney', 'age': 36 },\n  { 'user': 'fred',   'age': 30 },\n  { 'user': 'barney', 'age': 34 }\n];\n\nsortBy(users, [function(o) { return o.user; }]);\n// => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]\n\nsortBy(users, ['user', 'age']);\n// => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]"
    ],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "iteratees=[_.identity]",
        "type": "...(Function|Function[])",
        "description": "The iteratees to sort by.",
        "optional": true,
        "defaultValue": "[_.identity]"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new sorted array."
    }
  },
  {
    "name": "sortedIndex",
    "category": "Array",
    "description": "Uses a binary search to determine the lowest index at which `value`\nshould be inserted into `array` in order to maintain its sort order.",
    "since": "0.1.0",
    "examples": ["sortedIndex([30, 50], 40);\n// => 1"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The sorted array to inspect.",
        "optional": false
      },
      {
        "name": "value",
        "type": "*",
        "description": "The value to evaluate.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the index at which `value` should be inserted\n into `array`."
    }
  },
  {
    "name": "sortedIndexBy",
    "category": "Array",
    "description": "This method is like `sortedIndex` except that it accepts `iteratee`\nwhich is invoked for `value` and each element of `array` to compute their\nsort ranking. The iteratee is invoked with one argument: *(value)*.",
    "since": "4.0.0",
    "examples": [
      "var objects = [{ 'x': 4 }, { 'x': 5 }];\n\nsortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n// => 0\n\n// The `property` iteratee shorthand.\nsortedIndexBy(objects, { 'x': 4 }, 'x');\n// => 0"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The sorted array to inspect.",
        "optional": false
      },
      {
        "name": "value",
        "type": "*",
        "description": "The value to evaluate.",
        "optional": false
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The iteratee invoked per element.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the index at which `value` should be inserted\n into `array`."
    }
  },
  {
    "name": "sortedIndexOf",
    "category": "Array",
    "description": "This method is like `indexOf` except that it performs a binary\nsearch on a sorted `array`.",
    "since": "4.0.0",
    "examples": ["sortedIndexOf([4, 5, 5, 5, 6], 5);\n// => 1"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to inspect.",
        "optional": false
      },
      {
        "name": "value",
        "type": "*",
        "description": "The value to search for.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the index of the matched value, else `-1`."
    }
  },
  {
    "name": "sortedLastIndex",
    "category": "Array",
    "description": "This method is like `sortedIndex` except that it returns the highest\nindex at which `value` should be inserted into `array` in order to\nmaintain its sort order.",
    "since": "3.0.0",
    "examples": ["sortedLastIndex([4, 5, 5, 5, 6], 5);\n// => 4"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The sorted array to inspect.",
        "optional": false
      },
      {
        "name": "value",
        "type": "*",
        "description": "The value to evaluate.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the index at which `value` should be inserted\n into `array`."
    }
  },
  {
    "name": "sortedLastIndexBy",
    "category": "Array",
    "description": "This method is like `sortedLastIndex` except that it accepts `iteratee`\nwhich is invoked for `value` and each element of `array` to compute their\nsort ranking. The iteratee is invoked with one argument: *(value)*.",
    "since": "4.0.0",
    "examples": [
      "var objects = [{ 'x': 4 }, { 'x': 5 }];\n\nsortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n// => 1\n\n// The `property` iteratee shorthand.\nsortedLastIndexBy(objects, { 'x': 4 }, 'x');\n// => 1"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The sorted array to inspect.",
        "optional": false
      },
      {
        "name": "value",
        "type": "*",
        "description": "The value to evaluate.",
        "optional": false
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The iteratee invoked per element.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the index at which `value` should be inserted\n into `array`."
    }
  },
  {
    "name": "sortedLastIndexOf",
    "category": "Array",
    "description": "This method is like `lastIndexOf` except that it performs a binary\nsearch on a sorted `array`.",
    "since": "4.0.0",
    "examples": ["sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n// => 3"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to inspect.",
        "optional": false
      },
      {
        "name": "value",
        "type": "*",
        "description": "The value to search for.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the index of the matched value, else `-1`."
    }
  },
  {
    "name": "sortedUniq",
    "category": "Array",
    "description": "This method is like `uniq` except that it's designed and optimized\nfor sorted arrays.",
    "since": "4.0.0",
    "examples": ["sortedUniq([1, 1, 2]);\n// => [1, 2]"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to inspect.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new duplicate free array."
    }
  },
  {
    "name": "sortedUniqBy",
    "category": "Array",
    "description": "This method is like `uniqBy` except that it's designed and optimized\nfor sorted arrays.",
    "since": "4.0.0",
    "examples": ["sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n// => [1.1, 2.3]"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to inspect.",
        "optional": false
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The iteratee invoked per element.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new duplicate free array."
    }
  },
  {
    "name": "split",
    "category": "String",
    "description": "Splits `string` by `separator`.\n<br>\n<br>\n**Note:** This method is based on\n[`String#split`](https://mdn.io/String/split).",
    "since": "4.0.0",
    "examples": ["split('a-b-c', '-', 2);\n// => ['a', 'b']"],
    "params": [
      {
        "name": "string=''",
        "type": "string",
        "description": "The string to split.",
        "optional": true,
        "defaultValue": "''"
      },
      {
        "name": "separator",
        "type": "RegExp|string",
        "description": "The separator pattern to split by.",
        "optional": false
      },
      {
        "name": "limit",
        "type": "number",
        "description": "The length to truncate results to.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the string segments."
    }
  },
  {
    "name": "spread",
    "category": "Function",
    "description": "Creates a function that invokes `func` with the `this` binding of the\ncreate function and an array of arguments much like\n[`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).\n<br>\n<br>\n**Note:** This method is based on the\n[spread operator](https://mdn.io/spread_operator).",
    "since": "3.2.0",
    "examples": [
      "var say = spread(function(who, what) {\n  return who + ' says ' + what;\n});\n\nsay(['fred', 'hello']);\n// => 'fred says hello'\n\nvar numbers = Promise.all([\n  Promise.resolve(40),\n  Promise.resolve(36)\n]);\n\nnumbers.then(spread(function(x, y) {\n  return x + y;\n}));\n// => a Promise of 76"
    ],
    "params": [
      {
        "name": "func",
        "type": "Function",
        "description": "The function to spread arguments over.",
        "optional": false
      },
      {
        "name": "start=0",
        "type": "number",
        "description": "The start position of the spread.",
        "optional": true,
        "defaultValue": "0"
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new function."
    }
  },
  {
    "name": "startCase",
    "category": "String",
    "description": "Converts `string` to\n[start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).",
    "since": "3.1.0",
    "examples": [
      "startCase('--foo-bar--');\n// => 'Foo Bar'\n\nstartCase('fooBar');\n// => 'Foo Bar'\n\nstartCase('__FOO_BAR__');\n// => 'FOO BAR'"
    ],
    "params": [
      {
        "name": "string=''",
        "type": "string",
        "description": "The string to convert.",
        "optional": true,
        "defaultValue": "''"
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the start cased string."
    }
  },
  {
    "name": "startsWith",
    "category": "String",
    "description": "Checks if `string` starts with the given target string.",
    "since": "3.0.0",
    "examples": [
      "startsWith('abc', 'a');\n// => true\n\nstartsWith('abc', 'b');\n// => false\n\nstartsWith('abc', 'b', 1);\n// => true"
    ],
    "params": [
      {
        "name": "string=''",
        "type": "string",
        "description": "The string to inspect.",
        "optional": true,
        "defaultValue": "''"
      },
      {
        "name": "target",
        "type": "string",
        "description": "The string to search for.",
        "optional": true
      },
      {
        "name": "position=0",
        "type": "number",
        "description": "The position to search from.",
        "optional": true,
        "defaultValue": "0"
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `string` starts with `target`,\n else `false`."
    }
  },
  {
    "name": "stubArray",
    "category": "Util",
    "description": "This method returns a new empty array.",
    "since": "4.13.0",
    "examples": [
      "var arrays = times(2, stubArray);\n\nconsole.log(arrays);\n// => [[], []]\n\nconsole.log(arrays[0] === arrays[1]);\n// => false"
    ],
    "params": [],
    "returns": {
      "type": "Array",
      "description": "Returns the new empty array."
    }
  },
  {
    "name": "stubFalse",
    "category": "Util",
    "description": "This method returns `false`.",
    "since": "4.13.0",
    "examples": ["times(2, stubFalse);\n// => [false, false]"],
    "params": [],
    "returns": {
      "type": "boolean",
      "description": "Returns `false`."
    }
  },
  {
    "name": "stubObject",
    "category": "Util",
    "description": "This method returns a new empty object.",
    "since": "4.13.0",
    "examples": [
      "var objects = times(2, stubObject);\n\nconsole.log(objects);\n// => [{}, {}]\n\nconsole.log(objects[0] === objects[1]);\n// => false"
    ],
    "params": [],
    "returns": {
      "type": "Object",
      "description": "Returns the new empty object."
    }
  },
  {
    "name": "stubString",
    "category": "Util",
    "description": "This method returns an empty string.",
    "since": "4.13.0",
    "examples": ["times(2, stubString);\n// => ['', '']"],
    "params": [],
    "returns": {
      "type": "string",
      "description": "Returns the empty string."
    }
  },
  {
    "name": "stubTrue",
    "category": "Util",
    "description": "This method returns `true`.",
    "since": "4.13.0",
    "examples": ["times(2, stubTrue);\n// => [true, true]"],
    "params": [],
    "returns": {
      "type": "boolean",
      "description": "Returns `true`."
    }
  },
  {
    "name": "subtract",
    "category": "Math",
    "description": "Subtract two numbers.",
    "since": "4.0.0",
    "examples": ["subtract(6, 4);\n// => 2"],
    "params": [
      {
        "name": "minuend",
        "type": "number",
        "description": "The first number in a subtraction.",
        "optional": false
      },
      {
        "name": "subtrahend",
        "type": "number",
        "description": "The second number in a subtraction.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the difference."
    }
  },
  {
    "name": "sum",
    "category": "Math",
    "description": "Computes the sum of the values in `array`.",
    "since": "3.4.0",
    "examples": ["sum([4, 2, 8, 6]);\n// => 20"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to iterate over.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the sum."
    }
  },
  {
    "name": "sumBy",
    "category": "Math",
    "description": "This method is like `sum` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the value to be summed.\nThe iteratee is invoked with one argument: *(value)*.",
    "since": "4.0.0",
    "examples": [
      "var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n\nsumBy(objects, function(o) { return o.n; });\n// => 20\n\n// The `property` iteratee shorthand.\nsumBy(objects, 'n');\n// => 20"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The iteratee invoked per element.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the sum."
    }
  },
  {
    "name": "tail",
    "category": "Array",
    "description": "Gets all but the first element of `array`.",
    "since": "4.0.0",
    "examples": ["tail([1, 2, 3]);\n// => [2, 3]"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to query.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the slice of `array`."
    }
  },
  {
    "name": "take",
    "category": "Array",
    "description": "Creates a slice of `array` with `n` elements taken from the beginning.",
    "since": "0.1.0",
    "examples": [
      "take([1, 2, 3]);\n// => [1]\n\ntake([1, 2, 3], 2);\n// => [1, 2]\n\ntake([1, 2, 3], 5);\n// => [1, 2, 3]\n\ntake([1, 2, 3], 0);\n// => []"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to query.",
        "optional": false
      },
      {
        "name": "n=1",
        "type": "number",
        "description": "The number of elements to take.",
        "optional": true,
        "defaultValue": "1"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the slice of `array`."
    }
  },
  {
    "name": "takeRight",
    "category": "Array",
    "description": "Creates a slice of `array` with `n` elements taken from the end.",
    "since": "3.0.0",
    "examples": [
      "takeRight([1, 2, 3]);\n// => [3]\n\ntakeRight([1, 2, 3], 2);\n// => [2, 3]\n\ntakeRight([1, 2, 3], 5);\n// => [1, 2, 3]\n\ntakeRight([1, 2, 3], 0);\n// => []"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to query.",
        "optional": false
      },
      {
        "name": "n=1",
        "type": "number",
        "description": "The number of elements to take.",
        "optional": true,
        "defaultValue": "1"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the slice of `array`."
    }
  },
  {
    "name": "takeRightWhile",
    "category": "Array",
    "description": "Creates a slice of `array` with elements taken from the end. Elements are\ntaken until `predicate` returns falsey. The predicate is invoked with\nthree arguments: *(value, index, array)*.",
    "since": "3.0.0",
    "examples": [
      "var users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': false }\n];\n\ntakeRightWhile(users, function(o) { return !o.active; });\n// => objects for ['fred', 'pebbles']\n\n// The `matches` iteratee shorthand.\ntakeRightWhile(users, { 'user': 'pebbles', 'active': false });\n// => objects for ['pebbles']\n\n// The `matchesProperty` iteratee shorthand.\ntakeRightWhile(users, ['active', false]);\n// => objects for ['fred', 'pebbles']\n\n// The `property` iteratee shorthand.\ntakeRightWhile(users, 'active');\n// => []"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to query.",
        "optional": false
      },
      {
        "name": "predicate=_.identity",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the slice of `array`."
    }
  },
  {
    "name": "takeWhile",
    "category": "Array",
    "description": "Creates a slice of `array` with elements taken from the beginning. Elements\nare taken until `predicate` returns falsey. The predicate is invoked with\nthree arguments: *(value, index, array)*.",
    "since": "3.0.0",
    "examples": [
      "var users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': true }\n];\n\ntakeWhile(users, function(o) { return !o.active; });\n// => objects for ['barney', 'fred']\n\n// The `matches` iteratee shorthand.\ntakeWhile(users, { 'user': 'barney', 'active': false });\n// => objects for ['barney']\n\n// The `matchesProperty` iteratee shorthand.\ntakeWhile(users, ['active', false]);\n// => objects for ['barney', 'fred']\n\n// The `property` iteratee shorthand.\ntakeWhile(users, 'active');\n// => []"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to query.",
        "optional": false
      },
      {
        "name": "predicate=_.identity",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the slice of `array`."
    }
  },
  {
    "name": "tap",
    "category": "Seq",
    "description": "This method invokes `interceptor` and returns `value`. The interceptor\nis invoked with one argument; *(value)*. The purpose of this method is to\n\"tap into\" a method chain sequence in order to modify intermediate results.",
    "since": "0.1.0",
    "examples": [
      "_([1, 2, 3])\n .tap(function(array) {\n   // Mutate input array.\n   array.pop();\n })\n .reverse()\n .value();\n// => [2, 1]"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to provide to `interceptor`.",
        "optional": false
      },
      {
        "name": "interceptor",
        "type": "Function",
        "description": "The function to invoke.",
        "optional": false
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns `value`."
    }
  },
  {
    "name": "template",
    "category": "String",
    "description": "Creates a compiled template function that can interpolate data properties\nin \"interpolate\" delimiters, HTML-escape interpolated data properties in\n\"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\nproperties may be accessed as free variables in the template. If a setting\nobject is given, it takes precedence over `templateSettings` values.\n<br>\n<br>\n**Note:** In the development build `template` utilizes\n[sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\nfor easier debugging.\n<br>\n<br>\nFor more information on precompiling templates see\n[lodash's custom builds documentation](https://lodash.com/custom-builds).\n<br>\n<br>\nFor more information on Chrome extension sandboxes see\n[Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).",
    "since": "0.1.0",
    "examples": [
      "// Use the \"interpolate\" delimiter to create a compiled template.\nvar compiled = template('hello <%= user %>!');\ncompiled({ 'user': 'fred' });\n// => 'hello fred!'\n\n// Use the HTML \"escape\" delimiter to escape data property values.\nvar compiled = template('<b><%- value %></b>');\ncompiled({ 'value': '<script>' });\n// => '<b>&lt;script&gt;</b>'\n\n// Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\nvar compiled = template('<% forEach(users, function(user) { %><li><%- user %></li><% }); %>');\ncompiled({ 'users': ['fred', 'barney'] });\n// => '<li>fred</li><li>barney</li>'\n\n// Use the internal `print` function in \"evaluate\" delimiters.\nvar compiled = template('<% print(\"hello \" + user); %>!');\ncompiled({ 'user': 'barney' });\n// => 'hello barney!'\n\n// Use the ES template literal delimiter as an \"interpolate\" delimiter.\n// Disable support by replacing the \"interpolate\" delimiter.\nvar compiled = template('hello ${ user }!');\ncompiled({ 'user': 'pebbles' });\n// => 'hello pebbles!'\n\n// Use backslashes to treat delimiters as plain text.\nvar compiled = template('<%= \"\\\\<%- value %\\\\>\" %>');\ncompiled({ 'value': 'ignored' });\n// => '<%- value %>'\n\n// Use the `imports` option to import `jQuery` as `jq`.\nvar text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\nvar compiled = template(text, { 'imports': { 'jq': jQuery } });\ncompiled({ 'users': ['fred', 'barney'] });\n// => '<li>fred</li><li>barney</li>'\n\n// Use the `sourceURL` option to specify a custom sourceURL for the template.\nvar compiled = template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\ncompiled(data);\n// => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\n\n// Use the `variable` option to ensure a with-statement isn't used in the compiled template.\nvar compiled = template('hi <%= data.user %>!', { 'variable': 'data' });\ncompiled.source;\n// => function(data) {\n//   var __t, __p = '';\n//   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n//   return __p;\n// }\n\n// Use custom template delimiters.\ntemplateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\nvar compiled = template('hello {{ user }}!');\ncompiled({ 'user': 'mustache' });\n// => 'hello mustache!'\n\n// Use the `source` property to inline compiled templates for meaningful\n// line numbers in error messages and stack traces.\nfs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\n  var JST = {\\\n    \"main\": ' + template(mainText).source + '\\\n  };\\\n');"
    ],
    "params": [
      {
        "name": "string=''",
        "type": "string",
        "description": "The template string.",
        "optional": true,
        "defaultValue": "''"
      },
      {
        "name": "options={}",
        "type": "Object",
        "description": "The options object.",
        "optional": true,
        "defaultValue": "{}"
      },
      {
        "name": "options.escape=_.templateSettings.escape",
        "type": "RegExp",
        "description": "The HTML \"escape\" delimiter.",
        "optional": true,
        "defaultValue": "_.templateSettings.escape"
      },
      {
        "name": "options.evaluate=_.templateSettings.evaluate",
        "type": "RegExp",
        "description": "The \"evaluate\" delimiter.",
        "optional": true,
        "defaultValue": "_.templateSettings.evaluate"
      },
      {
        "name": "options.imports=_.templateSettings.imports",
        "type": "Object",
        "description": "An object to import into the template as free variables.",
        "optional": true,
        "defaultValue": "_.templateSettings.imports"
      },
      {
        "name": "options.interpolate=_.templateSettings.interpolate",
        "type": "RegExp",
        "description": "The \"interpolate\" delimiter.",
        "optional": true,
        "defaultValue": "_.templateSettings.interpolate"
      },
      {
        "name": "options.sourceURL='lodash.templateSources[n]'",
        "type": "string",
        "description": "The sourceURL of the compiled template.",
        "optional": true,
        "defaultValue": "'lodash.templateSources[n]'"
      },
      {
        "name": "options.variable='obj'",
        "type": "string",
        "description": "The data object variable name.",
        "optional": true,
        "defaultValue": "'obj'"
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the compiled template function."
    }
  },
  {
    "name": "templateSettings",
    "category": "Properties",
    "description": "(Object): By default, the template delimiters used by lodash are like those in\nembedded Ruby *(ERB)* as well as ES2015 template strings. Change the\nfollowing template settings to use alternative delimiters.",
    "examples": [],
    "params": []
  },
  {
    "name": "throttle",
    "category": "Function",
    "description": "Creates a throttled function that only invokes `func` at most once per\nevery `wait` milliseconds. The throttled function comes with a `cancel`\nmethod to cancel delayed `func` invocations and a `flush` method to\nimmediately invoke them. Provide `options` to indicate whether `func`\nshould be invoked on the leading and/or trailing edge of the `wait`\ntimeout. The `func` is invoked with the last arguments provided to the\nthrottled function. Subsequent calls to the throttled function return the\nresult of the last `func` invocation.\n<br>\n<br>\n**Note:** If `leading` and `trailing` options are `true`, `func` is\ninvoked on the trailing edge of the timeout only if the throttled function\nis invoked more than once during the `wait` timeout.\n<br>\n<br>\nIf `wait` is `0` and `leading` is `false`, `func` invocation is deferred\nuntil to the next tick, similar to `setTimeout` with a timeout of `0`.\n<br>\n<br>\nSee [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\nfor details over the differences between `throttle` and `debounce`.",
    "since": "0.1.0",
    "examples": [
      "// Avoid excessively updating the position while scrolling.\njQuery(window).on('scroll', throttle(updatePosition, 100));\n\n// Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\nvar throttled = throttle(renewToken, 300000, { 'trailing': false });\njQuery(element).on('click', throttled);\n\n// Cancel the trailing throttled invocation.\njQuery(window).on('popstate', throttled.cancel);"
    ],
    "params": [
      {
        "name": "func",
        "type": "Function",
        "description": "The function to throttle.",
        "optional": false
      },
      {
        "name": "wait=0",
        "type": "number",
        "description": "The number of milliseconds to throttle invocations to.",
        "optional": true,
        "defaultValue": "0"
      },
      {
        "name": "options={}",
        "type": "Object",
        "description": "The options object.",
        "optional": true,
        "defaultValue": "{}"
      },
      {
        "name": "options.leading=true",
        "type": "boolean",
        "description": "Specify invoking on the leading edge of the timeout.",
        "optional": true,
        "defaultValue": "true"
      },
      {
        "name": "options.trailing=true",
        "type": "boolean",
        "description": "Specify invoking on the trailing edge of the timeout.",
        "optional": true,
        "defaultValue": "true"
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new throttled function."
    }
  },
  {
    "name": "thru",
    "category": "Seq",
    "description": "This method is like `tap` except that it returns the result of `interceptor`.\nThe purpose of this method is to \"pass thru\" values replacing intermediate\nresults in a method chain sequence.",
    "since": "3.0.0",
    "examples": [
      "_('  abc  ')\n .chain()\n .trim()\n .thru(function(value) {\n   return [value];\n })\n .value();\n// => ['abc']"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to provide to `interceptor`.",
        "optional": false
      },
      {
        "name": "interceptor",
        "type": "Function",
        "description": "The function to invoke.",
        "optional": false
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the result of `interceptor`."
    }
  },
  {
    "name": "times",
    "category": "Util",
    "description": "Invokes the iteratee `n` times, returning an array of the results of\neach invocation. The iteratee is invoked with one argument; *(index)*.",
    "since": "0.1.0",
    "examples": ["times(3, String);\n// => ['0', '1', '2']\n\n times(4, constant(0));\n// => [0, 0, 0, 0]"],
    "params": [
      {
        "name": "n",
        "type": "number",
        "description": "The number of times to invoke `iteratee`.",
        "optional": false
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the array of results."
    }
  },
  {
    "name": "toArray",
    "category": "Lang",
    "description": "Converts `value` to an array.",
    "since": "0.1.0",
    "examples": [
      "toArray({ 'a': 1, 'b': 2 });\n// => [1, 2]\n\ntoArray('abc');\n// => ['a', 'b', 'c']\n\ntoArray(1);\n// => []\n\ntoArray(null);\n// => []"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to convert.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the converted array."
    }
  },
  {
    "name": "toFinite",
    "category": "Lang",
    "description": "Converts `value` to a finite number.",
    "since": "4.12.0",
    "examples": [
      "toFinite(3.2);\n// => 3.2\n\ntoFinite(Number.MIN_VALUE);\n// => 5e-324\n\ntoFinite(Infinity);\n// => 1.7976931348623157e+308\n\ntoFinite('3.2');\n// => 3.2"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to convert.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the converted number."
    }
  },
  {
    "name": "toInteger",
    "category": "Lang",
    "description": "Converts `value` to an integer.\n<br>\n<br>\n**Note:** This method is loosely based on\n[`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).",
    "since": "4.0.0",
    "examples": [
      "toInteger(3.2);\n// => 3\n\ntoInteger(Number.MIN_VALUE);\n// => 0\n\ntoInteger(Infinity);\n// => 1.7976931348623157e+308\n\ntoInteger('3.2');\n// => 3"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to convert.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the converted integer."
    }
  },
  {
    "name": "toLength",
    "category": "Lang",
    "description": "Converts `value` to an integer suitable for use as the length of an\narray-like object.\n<br>\n<br>\n**Note:** This method is based on\n[`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).",
    "since": "4.0.0",
    "examples": [
      "toLength(3.2);\n// => 3\n\ntoLength(Number.MIN_VALUE);\n// => 0\n\ntoLength(Infinity);\n// => 4294967295\n\ntoLength('3.2');\n// => 3"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to convert.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the converted integer."
    }
  },
  {
    "name": "toLower",
    "category": "String",
    "description": "Converts `string`, as a whole, to lower case just like\n[String#toLowerCase](https://mdn.io/toLowerCase).",
    "since": "4.0.0",
    "examples": [
      "toLower('--Foo-Bar--');\n// => '--foo-bar--'\n\ntoLower('fooBar');\n// => 'foobar'\n\ntoLower('__FOO_BAR__');\n// => '__foo_bar__'"
    ],
    "params": [
      {
        "name": "string=''",
        "type": "string",
        "description": "The string to convert.",
        "optional": true,
        "defaultValue": "''"
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the lower cased string."
    }
  },
  {
    "name": "toNumber",
    "category": "Lang",
    "description": "Converts `value` to a number.",
    "since": "4.0.0",
    "examples": [
      "toNumber(3.2);\n// => 3.2\n\ntoNumber(Number.MIN_VALUE);\n// => 5e-324\n\ntoNumber(Infinity);\n// => Infinity\n\ntoNumber('3.2');\n// => 3.2"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to process.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the number."
    }
  },
  {
    "name": "toPairs",
    "category": "Object",
    "description": "Creates an array of own enumerable string keyed-value pairs for `object`\nwhich can be consumed by `fromPairs`. If `object` is a map or set, its\nentries are returned.",
    "since": "4.0.0",
    "examples": [
      "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\ntoPairs(new Foo);\n// => [['a', 1], ['b', 2]] (iteration order is not guaranteed)"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to query.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the key-value pairs."
    }
  },
  {
    "name": "toPairsIn",
    "category": "Object",
    "description": "Creates an array of own and inherited enumerable string keyed-value pairs\nfor `object` which can be consumed by `fromPairs`. If `object` is a map\nor set, its entries are returned.",
    "since": "4.0.0",
    "examples": [
      "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\ntoPairsIn(new Foo);\n// => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to query.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the key-value pairs."
    }
  },
  {
    "name": "toPath",
    "category": "Util",
    "description": "Converts `value` to a property path array.",
    "since": "4.0.0",
    "examples": ["toPath('a.b.c');\n// => ['a', 'b', 'c']\n\ntoPath('a[0].b.c');\n// => ['a', '0', 'b', 'c']"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to convert.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new property path array."
    }
  },
  {
    "name": "toPlainObject",
    "category": "Lang",
    "description": "Converts `value` to a plain object flattening inherited enumerable string\nkeyed properties of `value` to own properties of the plain object.",
    "since": "3.0.0",
    "examples": [
      "function Foo() {\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\nassign({ 'a': 1 }, new Foo);\n// => { 'a': 1, 'b': 2 }\n\nassign({ 'a': 1 }, toPlainObject(new Foo));\n// => { 'a': 1, 'b': 2, 'c': 3 }"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to convert.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns the converted plain object."
    }
  },
  {
    "name": "toSafeInteger",
    "category": "Lang",
    "description": "Converts `value` to a safe integer. A safe integer can be compared and\nrepresented correctly.",
    "since": "4.0.0",
    "examples": [
      "toSafeInteger(3.2);\n// => 3\n\ntoSafeInteger(Number.MIN_VALUE);\n// => 0\n\ntoSafeInteger(Infinity);\n// => 9007199254740991\n\ntoSafeInteger('3.2');\n// => 3"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to convert.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the converted integer."
    }
  },
  {
    "name": "toString",
    "category": "Lang",
    "description": "Converts `value` to a string. An empty string is returned for `null`\nand `undefined` values. The sign of `-0` is preserved.",
    "since": "4.0.0",
    "examples": ["toString(null);\n// => ''\n\ntoString(-0);\n// => '-0'\n\ntoString([1, 2, 3]);\n// => '1,2,3'"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to convert.",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the converted string."
    }
  },
  {
    "name": "toUpper",
    "category": "String",
    "description": "Converts `string`, as a whole, to upper case just like\n[String#toUpperCase](https://mdn.io/toUpperCase).",
    "since": "4.0.0",
    "examples": [
      "toUpper('--foo-bar--');\n// => '--FOO-BAR--'\n\ntoUpper('fooBar');\n// => 'FOOBAR'\n\ntoUpper('__foo_bar__');\n// => '__FOO_BAR__'"
    ],
    "params": [
      {
        "name": "string=''",
        "type": "string",
        "description": "The string to convert.",
        "optional": true,
        "defaultValue": "''"
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the upper cased string."
    }
  },
  {
    "name": "transform",
    "category": "Object",
    "description": "An alternative to `reduce`; this method transforms `object` to a new\n`accumulator` object which is the result of running each of its own\nenumerable string keyed properties thru `iteratee`, with each invocation\npotentially mutating the `accumulator` object. If `accumulator` is not\nprovided, a new object with the same `[[Prototype]]` will be used. The\niteratee is invoked with four arguments: *(accumulator, value, key, object)*.\nIteratee functions may exit iteration early by explicitly returning `false`.",
    "since": "1.3.0",
    "examples": [
      "transform([2, 3, 4], function(result, n) {\n  result.push(n *= n);\n  return n % 2 == 0;\n}, []);\n// => [4, 9]\n\ntransform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n  (result[value] || (result[value] = [])).push(key);\n}, {});\n// => { '1': ['a', 'c'], '2': ['b'] }"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": true,
        "defaultValue": "_.identity"
      },
      {
        "name": "accumulator",
        "type": "*",
        "description": "The custom accumulator value.",
        "optional": true
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the accumulated value."
    }
  },
  {
    "name": "trim",
    "category": "String",
    "description": "Removes leading and trailing whitespace or specified characters from `string`.",
    "since": "3.0.0",
    "examples": [
      "trim('  abc  ');\n// => 'abc'\n\ntrim('-_-abc-_-', '_-');\n// => 'abc'\n\nmap(['  foo  ', '  bar  '], trim);\n// => ['foo', 'bar']"
    ],
    "params": [
      {
        "name": "string=''",
        "type": "string",
        "description": "The string to trim.",
        "optional": true,
        "defaultValue": "''"
      },
      {
        "name": "chars=whitespace",
        "type": "string",
        "description": "The characters to trim.",
        "optional": true,
        "defaultValue": "whitespace"
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the trimmed string."
    }
  },
  {
    "name": "trimEnd",
    "category": "String",
    "description": "Removes trailing whitespace or specified characters from `string`.",
    "since": "4.0.0",
    "examples": ["trimEnd('  abc  ');\n// => '  abc'\n\ntrimEnd('-_-abc-_-', '_-');\n// => '-_-abc'"],
    "params": [
      {
        "name": "string=''",
        "type": "string",
        "description": "The string to trim.",
        "optional": true,
        "defaultValue": "''"
      },
      {
        "name": "chars=whitespace",
        "type": "string",
        "description": "The characters to trim.",
        "optional": true,
        "defaultValue": "whitespace"
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the trimmed string."
    }
  },
  {
    "name": "trimStart",
    "category": "String",
    "description": "Removes leading whitespace or specified characters from `string`.",
    "since": "4.0.0",
    "examples": ["trimStart('  abc  ');\n// => 'abc  '\n\ntrimStart('-_-abc-_-', '_-');\n// => 'abc-_-'"],
    "params": [
      {
        "name": "string=''",
        "type": "string",
        "description": "The string to trim.",
        "optional": true,
        "defaultValue": "''"
      },
      {
        "name": "chars=whitespace",
        "type": "string",
        "description": "The characters to trim.",
        "optional": true,
        "defaultValue": "whitespace"
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the trimmed string."
    }
  },
  {
    "name": "truncate",
    "category": "String",
    "description": "Truncates `string` if it's longer than the given maximum string length.\nThe last characters of the truncated string are replaced with the omission\nstring which defaults to \"...\".",
    "since": "4.0.0",
    "examples": [
      "truncate('hi-diddly-ho there, neighborino');\n// => 'hi-diddly-ho there, neighbo...'\n\ntruncate('hi-diddly-ho there, neighborino', {\n  'length': 24,\n  'separator': ' '\n});\n// => 'hi-diddly-ho there,...'\n\ntruncate('hi-diddly-ho there, neighborino', {\n  'length': 24,\n  'separator': /,? +/\n});\n// => 'hi-diddly-ho there...'\n\ntruncate('hi-diddly-ho there, neighborino', {\n  'omission': ' [...]'\n});\n// => 'hi-diddly-ho there, neig [...]'"
    ],
    "params": [
      {
        "name": "string=''",
        "type": "string",
        "description": "The string to truncate.",
        "optional": true,
        "defaultValue": "''"
      },
      {
        "name": "options={}",
        "type": "Object",
        "description": "The options object.",
        "optional": true,
        "defaultValue": "{}"
      },
      {
        "name": "options.length=30",
        "type": "number",
        "description": "The maximum string length.",
        "optional": true,
        "defaultValue": "30"
      },
      {
        "name": "options.omission='...'",
        "type": "string",
        "description": "The string to indicate text is omitted.",
        "optional": true,
        "defaultValue": "'...'"
      },
      {
        "name": "options.separator",
        "type": "RegExp|string",
        "description": "The separator pattern to truncate to.",
        "optional": true
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the truncated string."
    }
  },
  {
    "name": "unary",
    "category": "Function",
    "description": "Creates a function that accepts up to one argument, ignoring any\nadditional arguments.",
    "since": "4.0.0",
    "examples": ["map(['6', '8', '10'], unary(parseInt));\n// => [6, 8, 10]"],
    "params": [
      {
        "name": "func",
        "type": "Function",
        "description": "The function to cap arguments for.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new capped function."
    }
  },
  {
    "name": "unescape",
    "category": "String",
    "description": "The inverse of `escape`; this method converts the HTML entities\n`&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\ntheir corresponding characters.\n<br>\n<br>\n**Note:** No other HTML entities are unescaped. To unescape additional\nHTML entities use a third-party library like [_he_](https://mths.be/he).",
    "since": "0.6.0",
    "examples": ["unescape('fred, barney, &amp; pebbles');\n// => 'fred, barney, & pebbles'"],
    "params": [
      {
        "name": "string=''",
        "type": "string",
        "description": "The string to unescape.",
        "optional": true,
        "defaultValue": "''"
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the unescaped string."
    }
  },
  {
    "name": "union",
    "category": "Array",
    "description": "Creates an array of unique values, in order, from all given arrays using\n[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons.",
    "since": "0.1.0",
    "examples": ["union([2], [1, 2]);\n// => [2, 1]"],
    "params": [
      {
        "name": "arrays",
        "type": "...Array",
        "description": "The arrays to inspect.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of combined values."
    }
  },
  {
    "name": "unionBy",
    "category": "Array",
    "description": "This method is like `union` except that it accepts `iteratee` which is\ninvoked for each element of each `arrays` to generate the criterion by\nwhich uniqueness is computed. Result values are chosen from the first\narray in which the value occurs. The iteratee is invoked with one argument:<br>\n*(value)*.",
    "since": "4.0.0",
    "examples": [
      "unionBy([2.1], [1.2, 2.3], Math.floor);\n// => [2.1, 1.2]\n\n// The `property` iteratee shorthand.\nunionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }, { 'x': 2 }]"
    ],
    "params": [
      {
        "name": "arrays",
        "type": "...Array",
        "description": "The arrays to inspect.",
        "optional": true
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The iteratee invoked per element.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of combined values."
    }
  },
  {
    "name": "unionWith",
    "category": "Array",
    "description": "This method is like `union` except that it accepts `comparator` which\nis invoked to compare elements of `arrays`. Result values are chosen from\nthe first array in which the value occurs. The comparator is invoked\nwith two arguments: *(arrVal, othVal)*.",
    "since": "4.0.0",
    "examples": [
      "var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\nvar others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n\nunionWith(objects, others, isEqual);\n// => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]"
    ],
    "params": [
      {
        "name": "arrays",
        "type": "...Array",
        "description": "The arrays to inspect.",
        "optional": true
      },
      {
        "name": "comparator",
        "type": "Function",
        "description": "The comparator invoked per element.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of combined values."
    }
  },
  {
    "name": "uniq",
    "category": "Array",
    "description": "Creates a duplicate-free version of an array, using\n[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons, in which only the first occurrence of each element\nis kept. The order of result values is determined by the order they occur\nin the array.",
    "since": "0.1.0",
    "examples": ["uniq([2, 1, 2]);\n// => [2, 1]"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to inspect.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new duplicate free array."
    }
  },
  {
    "name": "uniqBy",
    "category": "Array",
    "description": "This method is like `uniq` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the criterion by which\nuniqueness is computed. The order of result values is determined by the\norder they occur in the array. The iteratee is invoked with one argument:<br>\n*(value)*.",
    "since": "4.0.0",
    "examples": [
      "uniqBy([2.1, 1.2, 2.3], Math.floor);\n// => [2.1, 1.2]\n\n// The `property` iteratee shorthand.\nuniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }, { 'x': 2 }]"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to inspect.",
        "optional": false
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The iteratee invoked per element.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new duplicate free array."
    }
  },
  {
    "name": "uniqueId",
    "category": "Util",
    "description": "Generates a unique ID. If `prefix` is given, the ID is appended to it.",
    "since": "0.1.0",
    "examples": ["uniqueId('contact_');\n// => 'contact_104'\n\nuniqueId();\n// => '105'"],
    "params": [
      {
        "name": "prefix=''",
        "type": "string",
        "description": "The value to prefix the ID with.",
        "optional": true,
        "defaultValue": "''"
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the unique ID."
    }
  },
  {
    "name": "uniqWith",
    "category": "Array",
    "description": "This method is like `uniq` except that it accepts `comparator` which\nis invoked to compare elements of `array`. The order of result values is\ndetermined by the order they occur in the array.The comparator is invoked\nwith two arguments: *(arrVal, othVal)*.",
    "since": "4.0.0",
    "examples": [
      "var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n\nuniqWith(objects, isEqual);\n// => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to inspect.",
        "optional": false
      },
      {
        "name": "comparator",
        "type": "Function",
        "description": "The comparator invoked per element.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new duplicate free array."
    }
  },
  {
    "name": "unset",
    "category": "Object",
    "description": "Removes the property at `path` of `object`.\n<br>\n<br>\n**Note:** This method mutates `object`.",
    "since": "4.0.0",
    "examples": [
      "var object = { 'a': [{ 'b': { 'c': 7 } }] };\nunset(object, 'a[0].b.c');\n// => true\n\nconsole.log(object);\n// => { 'a': [{ 'b': {} }] };\n\nunset(object, ['a', '0', 'b', 'c']);\n// => true\n\nconsole.log(object);\n// => { 'a': [{ 'b': {} }] };"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to modify.",
        "optional": false
      },
      {
        "name": "path",
        "type": "Array|string",
        "description": "The path of the property to unset.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if the property is deleted, else `false`."
    }
  },
  {
    "name": "unzip",
    "category": "Array",
    "description": "This method is like `zip` except that it accepts an array of grouped\nelements and creates an array regrouping the elements to their pre-zip\nconfiguration.",
    "since": "1.2.0",
    "examples": [
      "var zipped = zip(['a', 'b'], [1, 2], [true, false]);\n// => [['a', 1, true], ['b', 2, false]]\n\nunzip(zipped);\n// => [['a', 'b'], [1, 2], [true, false]]"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array of grouped elements to process.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of regrouped elements."
    }
  },
  {
    "name": "unzipWith",
    "category": "Array",
    "description": "This method is like `unzip` except that it accepts `iteratee` to specify\nhow regrouped values should be combined. The iteratee is invoked with the\nelements of each group: *(...group)*.",
    "since": "3.8.0",
    "examples": [
      "var zipped = zip([1, 2], [10, 20], [100, 200]);\n// => [[1, 10, 100], [2, 20, 200]]\n\nunzipWith(zipped, add);\n// => [3, 30, 300]"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array of grouped elements to process.",
        "optional": false
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The function to combine regrouped values.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of regrouped elements."
    }
  },
  {
    "name": "update",
    "category": "Object",
    "description": "This method is like `set` except that accepts `updater` to produce the\nvalue to set. Use `updateWith` to customize `path` creation. The `updater`\nis invoked with one argument: *(value)*.\n<br>\n<br>\n**Note:** This method mutates `object`.",
    "since": "4.6.0",
    "examples": [
      "var object = { 'a': [{ 'b': { 'c': 3 } }] };\n\nupdate(object, 'a[0].b.c', function(n) { return n * n; });\nconsole.log(object.a[0].b.c);\n// => 9\n\nupdate(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\nconsole.log(object.x[0].y.z);\n// => 0"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to modify.",
        "optional": false
      },
      {
        "name": "path",
        "type": "Array|string",
        "description": "The path of the property to set.",
        "optional": false
      },
      {
        "name": "updater",
        "type": "Function",
        "description": "The function to produce the updated value.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns `object`."
    }
  },
  {
    "name": "updateWith",
    "category": "Object",
    "description": "This method is like `update` except that it accepts `customizer` which is\ninvoked to produce the objects of `path`.  If `customizer` returns `undefined`\npath creation is handled by the method instead. The `customizer` is invoked\nwith three arguments: *(nsValue, key, nsObject)*.\n<br>\n<br>\n**Note:** This method mutates `object`.",
    "since": "4.6.0",
    "examples": [
      "var object = {};\n\nupdateWith(object, '[0][1]', constant('a'), Object);\n// => { '0': { '1': 'a' } }"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to modify.",
        "optional": false
      },
      {
        "name": "path",
        "type": "Array|string",
        "description": "The path of the property to set.",
        "optional": false
      },
      {
        "name": "updater",
        "type": "Function",
        "description": "The function to produce the updated value.",
        "optional": false
      },
      {
        "name": "customizer",
        "type": "Function",
        "description": "The function to customize assigned values.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns `object`."
    }
  },
  {
    "name": "upperCase",
    "category": "String",
    "description": "Converts `string`, as space separated words, to upper case.",
    "since": "4.0.0",
    "examples": [
      "upperCase('--foo-bar');\n// => 'FOO BAR'\n\nupperCase('fooBar');\n// => 'FOO BAR'\n\nupperCase('__foo_bar__');\n// => 'FOO BAR'"
    ],
    "params": [
      {
        "name": "string=''",
        "type": "string",
        "description": "The string to convert.",
        "optional": true,
        "defaultValue": "''"
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the upper cased string."
    }
  },
  {
    "name": "upperFirst",
    "category": "String",
    "description": "Converts the first character of `string` to upper case.",
    "since": "4.0.0",
    "examples": ["upperFirst('fred');\n// => 'Fred'\n\nupperFirst('FRED');\n// => 'FRED'"],
    "params": [
      {
        "name": "string=''",
        "type": "string",
        "description": "The string to convert.",
        "optional": true,
        "defaultValue": "''"
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the converted string."
    }
  },
  {
    "name": "values",
    "category": "Object",
    "description": "Creates an array of the own enumerable string keyed property values of `object`.\n<br>\n<br>\n**Note:** Non-object values are coerced to objects.",
    "since": "0.1.0",
    "examples": [
      "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\nvalues(new Foo);\n// => [1, 2] (iteration order is not guaranteed)\n\nvalues('hi');\n// => ['h', 'i']"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to query.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the array of property values."
    }
  },
  {
    "name": "valuesIn",
    "category": "Object",
    "description": "Creates an array of the own and inherited enumerable string keyed property\nvalues of `object`.\n<br>\n<br>\n**Note:** Non-object values are coerced to objects.",
    "since": "3.0.0",
    "examples": [
      "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\nvaluesIn(new Foo);\n// => [1, 2, 3] (iteration order is not guaranteed)"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to query.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the array of property values."
    }
  },
  {
    "name": "variable",
    "category": "Properties",
    "description": "(string): Used to reference the data object in the template text.",
    "examples": [],
    "params": []
  },
  {
    "name": "VERSION",
    "category": "Properties",
    "description": "(string): The semantic version number.",
    "examples": [],
    "params": []
  },
  {
    "name": "without",
    "category": "Array",
    "description": "Creates an array excluding all given values using\n[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons.\n<br>\n<br>\n**Note:** Unlike `pull`, this method returns a new array.",
    "since": "0.1.0",
    "examples": ["without([2, 1, 2, 3], 1, 2);\n// => [3]"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to inspect.",
        "optional": false
      },
      {
        "name": "values",
        "type": "...*",
        "description": "The values to exclude.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of filtered values."
    }
  },
  {
    "name": "words",
    "category": "String",
    "description": "Splits `string` into an array of its words.",
    "since": "3.0.0",
    "examples": [
      "words('fred, barney, & pebbles');\n// => ['fred', 'barney', 'pebbles']\n\nwords('fred, barney, & pebbles', /[^, ]+/g);\n// => ['fred', 'barney', '&', 'pebbles']"
    ],
    "params": [
      {
        "name": "string=''",
        "type": "string",
        "description": "The string to inspect.",
        "optional": true,
        "defaultValue": "''"
      },
      {
        "name": "pattern",
        "type": "RegExp|string",
        "description": "The pattern to match words.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the words of `string`."
    }
  },
  {
    "name": "wrap",
    "category": "Function",
    "description": "Creates a function that provides `value` to `wrapper` as its first\nargument. Any additional arguments provided to the function are appended\nto those provided to the `wrapper`. The wrapper is invoked with the `this`\nbinding of the created function.",
    "since": "0.1.0",
    "examples": [
      "var p = wrap(escape, function(func, text) {\n  return '<p>' + func(text) + '</p>';\n});\n\np('fred, barney, & pebbles');\n// => '<p>fred, barney, &amp; pebbles</p>'"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to wrap.",
        "optional": false
      },
      {
        "name": "wrapper=identity",
        "type": "Function",
        "description": "The wrapper function.",
        "optional": true,
        "defaultValue": "identity"
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new function."
    }
  },
  {
    "name": "xor",
    "category": "Array",
    "description": "Creates an array of unique values that is the\n[symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\nof the given arrays. The order of result values is determined by the order\nthey occur in the arrays.",
    "since": "2.4.0",
    "examples": ["xor([2, 1], [2, 3]);\n// => [1, 3]"],
    "params": [
      {
        "name": "arrays",
        "type": "...Array",
        "description": "The arrays to inspect.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of filtered values."
    }
  },
  {
    "name": "xorBy",
    "category": "Array",
    "description": "This method is like `xor` except that it accepts `iteratee` which is\ninvoked for each element of each `arrays` to generate the criterion by\nwhich by which they're compared. The order of result values is determined\nby the order they occur in the arrays. The iteratee is invoked with one\nargument: *(value)*.",
    "since": "4.0.0",
    "examples": [
      "xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n// => [1.2, 3.4]\n\n// The `property` iteratee shorthand.\nxorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 2 }]"
    ],
    "params": [
      {
        "name": "arrays",
        "type": "...Array",
        "description": "The arrays to inspect.",
        "optional": true
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The iteratee invoked per element.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of filtered values."
    }
  },
  {
    "name": "xorWith",
    "category": "Array",
    "description": "This method is like `xor` except that it accepts `comparator` which is\ninvoked to compare elements of `arrays`. The order of result values is\ndetermined by the order they occur in the arrays. The comparator is invoked\nwith two arguments: *(arrVal, othVal)*.",
    "since": "4.0.0",
    "examples": [
      "var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\nvar others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n\nxorWith(objects, others, isEqual);\n// => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]"
    ],
    "params": [
      {
        "name": "arrays",
        "type": "...Array",
        "description": "The arrays to inspect.",
        "optional": true
      },
      {
        "name": "comparator",
        "type": "Function",
        "description": "The comparator invoked per element.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of filtered values."
    }
  },
  {
    "name": "zip",
    "category": "Array",
    "description": "Creates an array of grouped elements, the first of which contains the\nfirst elements of the given arrays, the second of which contains the\nsecond elements of the given arrays, and so on.",
    "since": "0.1.0",
    "examples": ["zip(['a', 'b'], [1, 2], [true, false]);\n// => [['a', 1, true], ['b', 2, false]]"],
    "params": [
      {
        "name": "arrays",
        "type": "...Array",
        "description": "The arrays to process.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of grouped elements."
    }
  },
  {
    "name": "zipObject",
    "category": "Array",
    "description": "This method is like `fromPairs` except that it accepts two arrays,\none of property identifiers and one of corresponding values.",
    "since": "0.4.0",
    "examples": ["zipObject(['a', 'b'], [1, 2]);\n// => { 'a': 1, 'b': 2 }"],
    "params": [
      {
        "name": "props=[]",
        "type": "Array",
        "description": "The property identifiers.",
        "optional": true,
        "defaultValue": "[]"
      },
      {
        "name": "values=[]",
        "type": "Array",
        "description": "The property values.",
        "optional": true,
        "defaultValue": "[]"
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns the new object."
    }
  },
  {
    "name": "zipObjectDeep",
    "category": "Array",
    "description": "This method is like `zipObject` except that it supports property paths.",
    "since": "4.1.0",
    "examples": ["zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n// => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }"],
    "params": [
      {
        "name": "props=[]",
        "type": "Array",
        "description": "The property identifiers.",
        "optional": true,
        "defaultValue": "[]"
      },
      {
        "name": "values=[]",
        "type": "Array",
        "description": "The property values.",
        "optional": true,
        "defaultValue": "[]"
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns the new object."
    }
  },
  {
    "name": "zipWith",
    "category": "Array",
    "description": "This method is like `zip` except that it accepts `iteratee` to specify\nhow grouped values should be combined. The iteratee is invoked with the\nelements of each group: *(...group)*.",
    "since": "3.8.0",
    "examples": [
      "zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n  return a + b + c;\n});\n// => [111, 222]"
    ],
    "params": [
      {
        "name": "arrays",
        "type": "...Array",
        "description": "The arrays to process.",
        "optional": true
      },
      {
        "name": "iteratee=_.identity",
        "type": "Function",
        "description": "The function to combine grouped values.",
        "optional": true,
        "defaultValue": "_.identity"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of grouped elements."
    }
  }
]
