[
  {
    "name": "add",
    "category": "Math",
    "description": "Adds two numbers.",
    "since": "3.4.0",
    "examples": ["add(6, 4)\n// => 10"],
    "params": [
      {
        "name": "augend",
        "type": "number",
        "description": "The first number in an addition.",
        "optional": false
      },
      {
        "name": "addend",
        "type": "number",
        "description": "The second number in an addition.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the total."
    }
  },
  {
    "name": "after",
    "category": "Function",
    "description": "The opposite of `before`. This method creates a function that invokes\n`func` once it's called `n` or more times.",
    "since": "0.1.0",
    "examples": [
      "const saves = ['profile', 'settings']\nconst done = after(saves.length, () => console.log('done saving!'))\n\nforEach(saves, type => asyncSave({ 'type': type, 'complete': done }))\n// => Logs 'done saving!' after the two async saves have completed."
    ],
    "params": [
      {
        "name": "n",
        "type": "number",
        "description": "The number of calls before `func` is invoked.",
        "optional": false
      },
      {
        "name": "func",
        "type": "Function",
        "description": "The function to restrict.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new restricted function."
    }
  },
  {
    "name": "at",
    "category": "Object",
    "description": "Creates an array of values corresponding to `paths` of `object`.",
    "since": "1.0.0",
    "examples": ["const object = { 'a': [{ 'b': { 'c': 3 } }, 4] }\n\nat(object, ['a[0].b.c', 'a[1]'])\n// => [3, 4]"],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to iterate over.",
        "optional": false
      },
      {
        "name": "paths",
        "type": "...(string|string[])",
        "description": "The property paths to pick.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the picked values."
    }
  },
  {
    "name": "attempt",
    "category": "Util",
    "description": "Attempts to invoke `func`, returning either the result or the caught error\nobject. Any additional arguments are provided to `func` when it's invoked.",
    "since": "3.0.0",
    "examples": [
      "// Avoid throwing errors for invalid selectors.\nconst elements = attempt(selector =>\n  document.querySelectorAll(selector), '>_>')\n\nif (isError(elements)) {\n  elements = []\n}"
    ],
    "params": [
      {
        "name": "func",
        "type": "Function",
        "description": "The function to attempt.",
        "optional": false
      },
      {
        "name": "args",
        "type": "...*",
        "description": "The arguments to invoke `func` with.",
        "optional": true
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the `func` result or error object."
    }
  },
  {
    "name": "before",
    "category": "Function",
    "description": "Creates a function that invokes `func`, with the `this` binding and arguments\nof the created function, while it's called less than `n` times. Subsequent\ncalls to the created function return the result of the last `func` invocation.",
    "since": "3.0.0",
    "examples": [
      "jQuery(element).on('click', before(5, addContactToList))\n// => Allows adding up to 4 contacts to the list."
    ],
    "params": [
      {
        "name": "n",
        "type": "number",
        "description": "The number of calls at which `func` is no longer invoked.",
        "optional": false
      },
      {
        "name": "func",
        "type": "Function",
        "description": "The function to restrict.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new restricted function."
    }
  },
  {
    "name": "camelCase",
    "category": "String",
    "description": "Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).",
    "since": "3.0.0",
    "examples": [
      "camelCase('Foo Bar')\n// => 'fooBar'\n\ncamelCase('--foo-bar--')\n// => 'fooBar'\n\ncamelCase('__FOO_BAR__')\n// => 'fooBar'"
    ],
    "params": [
      {
        "name": "string",
        "type": "string",
        "description": "The string to convert.",
        "defaultValue": "''",
        "optional": true
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the camel cased string."
    }
  },
  {
    "name": "capitalize",
    "category": "String",
    "description": "Converts the first character of `string` to upper case and the remaining\nto lower case.",
    "since": "3.0.0",
    "examples": ["capitalize('FRED')\n// => 'Fred'"],
    "params": [
      {
        "name": "string",
        "type": "string",
        "description": "The string to capitalize.",
        "defaultValue": "''",
        "optional": true
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the capitalized string."
    }
  },
  {
    "name": "castArray",
    "category": "Lang",
    "description": "Casts `value` as an array if it's not one.",
    "since": "4.4.0",
    "examples": [
      "castArray(1)\n// => [1]\n\ncastArray({ 'a': 1 })\n// => [{ 'a': 1 }]\n\ncastArray('abc')\n// => ['abc']\n\ncastArray(null)\n// => [null]\n\ncastArray(undefined)\n// => [undefined]\n\ncastArray()\n// => []\n\nconst array = [1, 2, 3]\nconsole.log(castArray(array) === array)\n// => true"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to inspect.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the cast array."
    }
  },
  {
    "name": "ceil",
    "category": "Math",
    "description": "Computes `number` rounded up to `precision`. (Round up: the smallest integer greater than or equal to a given number.)",
    "since": "3.10.0",
    "examples": ["ceil(4.006)\n// => 5\n\nceil(6.004, 2)\n// => 6.01\n\nceil(6040, -2)\n// => 6100"],
    "params": [
      {
        "name": "number",
        "type": "number",
        "description": "The number to round up.",
        "optional": false
      },
      {
        "name": "precision",
        "type": "number",
        "description": "The precision to round up to.",
        "defaultValue": "0",
        "optional": true
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the rounded up number."
    }
  },
  {
    "name": "chunk",
    "category": "Array",
    "description": "Creates an array of elements split into groups the length of `size`.\nIf `array` can't be split evenly, the final chunk will be the remaining\nelements.",
    "since": "3.0.0",
    "examples": [
      "chunk(['a', 'b', 'c', 'd'], 2)\n// => [['a', 'b'], ['c', 'd']]\n\nchunk(['a', 'b', 'c', 'd'], 3)\n// => [['a', 'b', 'c'], ['d']]"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to process.",
        "optional": false
      },
      {
        "name": "size",
        "type": "number",
        "description": "The length of each chunk",
        "defaultValue": "1",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of chunks."
    }
  },
  {
    "name": "clamp",
    "category": "Number",
    "description": "Clamps `number` within the inclusive `lower` and `upper` bounds.",
    "since": "4.0.0",
    "examples": ["clamp(-10, -5, 5)\n// => -5\n\nclamp(10, -5, 5)\n// => 5"],
    "params": [
      {
        "name": "number",
        "type": "number",
        "description": "The number to clamp.",
        "optional": false
      },
      {
        "name": "lower",
        "type": "number",
        "description": "The lower bound.",
        "optional": false
      },
      {
        "name": "upper",
        "type": "number",
        "description": "The upper bound.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the clamped number."
    }
  },
  {
    "name": "clone",
    "category": "Lang",
    "description": "Used to compose bitmasks for cloning.",
    "since": "0.1.0",
    "examples": [
      "const objects = [{ 'a': 1 }, { 'b': 2 }]\n\nconst shallow = clone(objects)\nconsole.log(shallow[0] === objects[0])\n// => true"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to clone.",
        "optional": false
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the cloned value."
    }
  },
  {
    "name": "cloneDeep",
    "category": "Lang",
    "description": "Used to compose bitmasks for cloning.",
    "since": "1.0.0",
    "examples": [
      "const objects = [{ 'a': 1 }, { 'b': 2 }]\n\nconst deep = cloneDeep(objects)\nconsole.log(deep[0] === objects[0])\n// => false"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to recursively clone.",
        "optional": false
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the deep cloned value."
    }
  },
  {
    "name": "cloneDeepWith",
    "category": "Lang",
    "description": "Used to compose bitmasks for cloning.",
    "since": "4.0.0",
    "examples": [
      "function customizer(value) {\n  if (isElement(value)) {\n    return value.cloneNode(true)\n  }\n}\n\nconst el = cloneDeepWith(document.body, customizer)\n\nconsole.log(el === document.body)\n// => false\nconsole.log(el.nodeName)\n// => 'BODY'\nconsole.log(el.childNodes.length)\n// => 20"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to recursively clone.",
        "optional": false
      },
      {
        "name": "customizer",
        "type": "Function",
        "description": "The function to customize cloning.",
        "optional": true
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the deep cloned value."
    }
  },
  {
    "name": "cloneWith",
    "category": "Lang",
    "description": "Used to compose bitmasks for cloning.",
    "since": "4.0.0",
    "examples": [
      "function customizer(value) {\n  if (isElement(value)) {\n    return value.cloneNode(false)\n  }\n}\n\nconst el = cloneWith(document.body, customizer)\n\nconsole.log(el === document.body)\n// => false\nconsole.log(el.nodeName)\n// => 'BODY'\nconsole.log(el.childNodes.length)\n// => 0"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to clone.",
        "optional": false
      },
      {
        "name": "customizer",
        "type": "Function",
        "description": "The function to customize cloning.",
        "optional": true
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the cloned value."
    }
  },
  {
    "name": "compact",
    "category": "Array",
    "description": "Creates an array with all falsey values removed. The values `false`, `null`,\n`0`, `\"\"`, `undefined`, and `NaN` are falsey.",
    "since": "0.1.0",
    "examples": ["compact([0, 1, false, 2, '', 3])\n// => [1, 2, 3]"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to compact.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of filtered values."
    }
  },
  {
    "name": "cond",
    "category": "Util",
    "description": "Creates a function that iterates over `pairs` and invokes the corresponding\nfunction of the first predicate to return truthy. The predicate-function\npairs are invoked with the `this` binding and arguments of the created\nfunction.",
    "since": "4.0.0",
    "examples": [
      "const func = cond([\n  [matches({ 'a': 1 }),         () => 'matches A'],\n  [conforms({ 'b': isNumber }), () => 'matches B'],\n  [() => true,                  () => 'no match']\n])\n\nfunc({ 'a': 1, 'b': 2 })\n// => 'matches A'\n\nfunc({ 'a': 0, 'b': 1 })\n// => 'matches B'\n\nfunc({ 'a': '1', 'b': '2' })\n// => 'no match'"
    ],
    "params": [
      {
        "name": "pairs",
        "type": "Array",
        "description": "The predicate-function pairs.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new composite function."
    }
  },
  {
    "name": "conforms",
    "category": "Util",
    "description": "Used to compose bitmasks for cloning.",
    "since": "4.0.0",
    "examples": [
      "const objects = [\n  { 'a': 2, 'b': 1 },\n  { 'a': 1, 'b': 2 }\n]\n\nfilter(objects, conforms({ 'b': function(n) { return n > 1 } }))\n// => [{ 'a': 1, 'b': 2 }]"
    ],
    "params": [
      {
        "name": "source",
        "type": "Object",
        "description": "The object of property predicates to conform to.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new spec function."
    }
  },
  {
    "name": "conformsTo",
    "category": "Lang",
    "description": "Checks if `object` conforms to `source` by invoking the predicate\nproperties of `source` with the corresponding property values of `object`.\n\n**Note:** This method is equivalent to `conforms` when `source` is\npartially applied.",
    "since": "4.14.0",
    "examples": [
      "const object = { 'a': 1, 'b': 2 }\n\nconformsTo(object, { 'b': function(n) { return n > 1 } })\n// => true\n\nconformsTo(object, { 'b': function(n) { return n > 2 } })\n// => false"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to inspect.",
        "optional": false
      },
      {
        "name": "source",
        "type": "Object",
        "description": "The object of property predicates to conform to.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `object` conforms, else `false`."
    }
  },
  {
    "name": "countBy",
    "category": "Collection",
    "description": "Used to check objects for own properties.",
    "since": "0.5.0",
    "examples": [
      "const users = [\n  { 'user': 'barney', 'active': true },\n  { 'user': 'betty', 'active': true },\n  { 'user': 'fred', 'active': false }\n]\n\ncountBy(users, value => value.active);\n// => { 'true': 2, 'false': 1 }"
    ],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The iteratee to transform keys.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns the composed aggregate object."
    }
  },
  {
    "name": "create",
    "category": "Object",
    "description": "Creates an object that inherits from the `prototype` object. If a\n`properties` object is given, its own enumerable string keyed properties\nare assigned to the created object.",
    "since": "2.3.0",
    "examples": [
      "function Shape() {\n  this.x = 0\n  this.y = 0\n}\n\nfunction Circle() {\n  Shape.call(this)\n}\n\nCircle.prototype = create(Shape.prototype, {\n  'constructor': Circle\n})\n\nconst circle = new Circle\ncircle instanceof Circle\n// => true\n\ncircle instanceof Shape\n// => true"
    ],
    "params": [
      {
        "name": "prototype",
        "type": "Object",
        "description": "The object to inherit from.",
        "optional": false
      },
      {
        "name": "properties",
        "type": "Object",
        "description": "The properties to assign to the object.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns the new object."
    }
  },
  {
    "name": "debounce",
    "category": "Function",
    "description": "Creates a debounced function that delays invoking `func` until after `wait`\nmilliseconds have elapsed since the last time the debounced function was\ninvoked, or until the next browser frame is drawn. The debounced function\ncomes with a `cancel` method to cancel delayed `func` invocations and a\n`flush` method to immediately invoke them. Provide `options` to indicate\nwhether `func` should be invoked on the leading and/or trailing edge of the\n`wait` timeout. The `func` is invoked with the last arguments provided to the\ndebounced function. Subsequent calls to the debounced function return the\nresult of the last `func` invocation.\n\n**Note:** If `leading` and `trailing` options are `true`, `func` is\ninvoked on the trailing edge of the timeout only if the debounced function\nis invoked more than once during the `wait` timeout.\n\nIf `wait` is `0` and `leading` is `false`, `func` invocation is deferred\nuntil the next tick, similar to `setTimeout` with a timeout of `0`.\n\nIf `wait` is omitted in an environment with `requestAnimationFrame`, `func`\ninvocation will be deferred until the next frame is drawn (typically about\n16ms).\n\nSee [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\nfor details over the differences between `debounce` and `throttle`.",
    "since": "0.1.0",
    "examples": [
      "// Avoid costly calculations while the window size is in flux.\njQuery(window).on('resize', debounce(calculateLayout, 150))\n\n// Invoke `sendMail` when clicked, debouncing subsequent calls.\njQuery(element).on('click', debounce(sendMail, 300, {\n  'leading': true,\n  'trailing': false\n}))\n\n// Ensure `batchLog` is invoked once after 1 second of debounced calls.\nconst debounced = debounce(batchLog, 250, { 'maxWait': 1000 })\nconst source = new EventSource('/stream')\njQuery(source).on('message', debounced)\n\n// Cancel the trailing debounced invocation.\njQuery(window).on('popstate', debounced.cancel)\n\n// Check for pending invocations.\nconst status = debounced.pending() ? \"Pending...\" : \"Ready\""
    ],
    "params": [
      {
        "name": "func",
        "type": "Function",
        "description": "The function to debounce.",
        "optional": false
      },
      {
        "name": "options",
        "type": "Object",
        "description": "The options object.",
        "defaultValue": "{}",
        "optional": true
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new debounced function."
    }
  },
  {
    "name": "deburr",
    "category": "String",
    "description": "Used to match Latin Unicode letters (excluding mathematical operators).",
    "since": "3.0.0",
    "examples": ["deburr('déjà vu')\n// => 'deja vu'"],
    "params": [
      {
        "name": "string",
        "type": "string",
        "description": "The string to deburr.",
        "defaultValue": "''",
        "optional": true
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the deburred string."
    }
  },
  {
    "name": "defaultTo",
    "category": "Util",
    "description": "Checks `value` to determine whether a default value should be returned in\nits place. The `defaultValue` is returned if `value` is `NaN`, `null`,\nor `undefined`.",
    "since": "4.14.0",
    "examples": ["defaultTo(1, 10)\n// => 1\n\ndefaultTo(undefined, 10)\n// => 10"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      },
      {
        "name": "defaultValue",
        "type": "*",
        "description": "The default value.",
        "optional": false
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the resolved value."
    }
  },
  {
    "name": "defaultToAny",
    "category": "Util",
    "description": "This method is like `defaultTo` except that it accepts multiple default values and returns the first one that is not\n`NaN`, `null`, or `undefined`.",
    "since": "5.0.0",
    "examples": [
      "defaultToAny(1, 10, 20)\n// => 1\n\ndefaultToAny(undefined, 10, 20)\n// => 10\n\ndefaultToAny(undefined, null, 20)\n// => 20\n\ndefaultToAny(undefined, null, NaN)\n// => NaN"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      },
      {
        "name": "defaultValues",
        "type": "...*",
        "description": "The default values.",
        "optional": false
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the resolved value."
    }
  },
  {
    "name": "defaults",
    "category": "Object",
    "description": "Used for built-in method references.",
    "since": "0.1.0",
    "examples": ["defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 })\n// => { 'a': 1, 'b': 2 }"],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The destination object.",
        "optional": false
      },
      {
        "name": "sources",
        "type": "...Object",
        "description": "The source objects.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns `object`."
    }
  },
  {
    "name": "defaultsDeep",
    "category": "Object",
    "description": "This method is like `defaults` except that it recursively assigns\ndefault properties.\n\n**Note:** This method mutates `object`.",
    "since": "3.10.0",
    "examples": ["defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } })\n// => { 'a': { 'b': 2, 'c': 3 } }"],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The destination object.",
        "optional": false
      },
      {
        "name": "sources",
        "type": "...Object",
        "description": "The source objects.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns `object`."
    }
  },
  {
    "name": "defer",
    "category": "Function",
    "description": "Defers invoking the `func` until the current call stack has cleared. Any\nadditional arguments are provided to `func` when it's invoked.",
    "since": "0.1.0",
    "examples": ["defer(text => console.log(text), 'deferred')\n// => Logs 'deferred' after one millisecond."],
    "params": [
      {
        "name": "func",
        "type": "Function",
        "description": "The function to defer.",
        "optional": false
      },
      {
        "name": "args",
        "type": "...*",
        "description": "The arguments to invoke `func` with.",
        "optional": true
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the timer id."
    }
  },
  {
    "name": "delay",
    "category": "Function",
    "description": "Invokes `func` after `wait` milliseconds. Any additional arguments are\nprovided to `func` when it's invoked.",
    "since": "0.1.0",
    "examples": ["delay(text => console.log(text), 1000, 'later')\n// => Logs 'later' after one second."],
    "params": [
      {
        "name": "func",
        "type": "Function",
        "description": "The function to delay.",
        "optional": false
      },
      {
        "name": "wait",
        "type": "number",
        "description": "The number of milliseconds to delay invocation.",
        "optional": false
      },
      {
        "name": "args",
        "type": "...*",
        "description": "The arguments to invoke `func` with.",
        "optional": true
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the timer id."
    }
  },
  {
    "name": "difference",
    "category": "Array",
    "description": "Creates an array of `array` values not included in the other given arrays\nusing [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons. The order and references of result values are\ndetermined by the first array.\n\n**Note:** Unlike `pullAll`, this method returns a new array.",
    "since": "0.1.0",
    "examples": ["difference([2, 1], [2, 3])\n// => [1]"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to inspect.",
        "optional": false
      },
      {
        "name": "values",
        "type": "...Array",
        "description": "The values to exclude.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of filtered values."
    }
  },
  {
    "name": "differenceBy",
    "category": "Array",
    "description": "This method is like `difference` except that it accepts `iteratee` which\nis invoked for each element of `array` and `values` to generate the criterion\nby which they're compared. The order and references of result values are\ndetermined by the first array. The iteratee is invoked with one argument:\n(value).\n\n**Note:** Unlike `pullAllBy`, this method returns a new array.",
    "since": "4.0.0",
    "examples": ["differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor)\n// => [1.2]"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to inspect.",
        "optional": false
      },
      {
        "name": "values",
        "type": "...Array",
        "description": "The values to exclude.",
        "optional": true
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The iteratee invoked per element.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of filtered values."
    }
  },
  {
    "name": "differenceWith",
    "category": "Array",
    "description": "This method is like `difference` except that it accepts `comparator`\nwhich is invoked to compare elements of `array` to `values`. The order and\nreferences of result values are determined by the first array. The comparator\nis invoked with two arguments: (arrVal, othVal).\n\n**Note:** Unlike `pullAllWith`, this method returns a new array.",
    "since": "4.0.0",
    "examples": [
      "const objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n\ndifferenceWith(objects, [{ 'x': 1, 'y': 2 }], isEqual)\n// => [{ 'x': 2, 'y': 1 }]"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to inspect.",
        "optional": false
      },
      {
        "name": "values",
        "type": "...Array",
        "description": "The values to exclude.",
        "optional": true
      },
      {
        "name": "comparator",
        "type": "Function",
        "description": "The comparator invoked per element.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of filtered values."
    }
  },
  {
    "name": "divide",
    "category": "Math",
    "description": "Divide two numbers.",
    "since": "4.7.0",
    "examples": ["divide(6, 4)\n// => 1.5"],
    "params": [
      {
        "name": "dividend",
        "type": "number",
        "description": "The first number in a division.",
        "optional": false
      },
      {
        "name": "divisor",
        "type": "number",
        "description": "The second number in a division.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the quotient."
    }
  },
  {
    "name": "drop",
    "category": "Array",
    "description": "Creates a slice of `array` with `n` elements dropped from the beginning.",
    "since": "0.5.0",
    "examples": [
      "drop([1, 2, 3])\n// => [2, 3]\n\ndrop([1, 2, 3], 2)\n// => [3]\n\ndrop([1, 2, 3], 5)\n// => []\n\ndrop([1, 2, 3], 0)\n// => [1, 2, 3]"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to query.",
        "optional": false
      },
      {
        "name": "n",
        "type": "number",
        "description": "The number of elements to drop.",
        "defaultValue": "1",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the slice of `array`."
    }
  },
  {
    "name": "dropRight",
    "category": "Array",
    "description": "Creates a slice of `array` with `n` elements dropped from the end.",
    "since": "3.0.0",
    "examples": [
      "dropRight([1, 2, 3])\n// => [1, 2]\n\ndropRight([1, 2, 3], 2)\n// => [1]\n\ndropRight([1, 2, 3], 5)\n// => []\n\ndropRight([1, 2, 3], 0)\n// => [1, 2, 3]"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to query.",
        "optional": false
      },
      {
        "name": "n",
        "type": "number",
        "description": "The number of elements to drop.",
        "defaultValue": "1",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the slice of `array`."
    }
  },
  {
    "name": "dropRightWhile",
    "category": "Array",
    "description": "Creates a slice of `array` excluding elements dropped from the end.\nElements are dropped until `predicate` returns falsey. The predicate is\ninvoked with three arguments: (value, index, array).",
    "since": "3.0.0",
    "examples": [
      "const users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': true },\n  { 'user': 'pebbles', 'active': true }\n]\n\ndropRightWhile(users, ({ active }) => active)\n// => objects for ['barney']"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to query.",
        "optional": false
      },
      {
        "name": "predicate",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the slice of `array`."
    }
  },
  {
    "name": "dropWhile",
    "category": "Array",
    "description": "Creates a slice of `array` excluding elements dropped from the beginning.\nElements are dropped until `predicate` returns falsey. The predicate is\ninvoked with three arguments: (value, index, array).",
    "since": "3.0.0",
    "examples": [
      "const users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': true },\n  { 'user': 'pebbles', 'active': false }\n]\n\ndropWhile(users, ({ active }) => active)\n// => objects for ['pebbles']"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to query.",
        "optional": false
      },
      {
        "name": "predicate",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the slice of `array`."
    }
  },
  {
    "name": "each",
    "category": "Collection",
    "description": "Iterates over elements of `collection` and invokes `iteratee` for each element.\nThe iteratee is invoked with three arguments: (value, index|key, collection).\nIteratee functions may exit iteration early by explicitly returning `false`.\n\n**Note:** As with other \"Collections\" methods, objects with a \"length\"\nproperty are iterated like arrays. To avoid this behavior use `forIn`\nor `forOwn` for object iteration.",
    "since": "0.1.0",
    "examples": [
      "forEach([1, 2], value => console.log(value))\n// => Logs `1` then `2`.\n\nforEach({ 'a': 1, 'b': 2 }, (value, key) => console.log(key))\n// => Logs 'a' then 'b' (iteration order is not guaranteed)."
    ],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array|Object",
      "description": "Returns `collection`."
    }
  },
  {
    "name": "eachRight",
    "category": "Collection",
    "description": "This method is like `forEach` except that it iterates over elements of\n`collection` from right to left.",
    "since": "2.0.0",
    "examples": ["forEachRight([1, 2], value => console.log(value))\n// => Logs `2` then `1`."],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array|Object",
      "description": "Returns `collection`."
    }
  },
  {
    "name": "endsWith",
    "category": "String",
    "description": "Checks if `string` ends with the given target string.",
    "since": "3.0.0",
    "examples": [
      "endsWith('abc', 'c')\n// => true\n\nendsWith('abc', 'b')\n// => false\n\nendsWith('abc', 'b', 2)\n// => true"
    ],
    "params": [
      {
        "name": "string",
        "type": "string",
        "description": "The string to inspect.",
        "defaultValue": "''",
        "optional": true
      },
      {
        "name": "target",
        "type": "string",
        "description": "The string to search for.",
        "optional": true
      },
      {
        "name": "position",
        "type": "number",
        "description": "The position to search up to.",
        "defaultValue": "string.length",
        "optional": true
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `string` ends with `target`,"
    }
  },
  {
    "name": "eq",
    "category": "Lang",
    "description": "Performs a\n[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\ncomparison between two values to determine if they are equivalent.",
    "since": "4.0.0",
    "examples": [
      "const object = { 'a': 1 }\nconst other = { 'a': 1 }\n\neq(object, object)\n// => true\n\neq(object, other)\n// => false\n\neq('a', 'a')\n// => true\n\neq('a', Object('a'))\n// => false\n\neq(NaN, NaN)\n// => true"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to compare.",
        "optional": false
      },
      {
        "name": "other",
        "type": "*",
        "description": "The other value to compare.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if the values are equivalent, else `false`."
    }
  },
  {
    "name": "eqDeep",
    "category": "Lang",
    "description": "Performs a deep comparison between two values to determine if they are\nequivalent.\n\n**Note:** This method supports comparing arrays, array buffers, booleans,\ndate objects, error objects, maps, numbers, `Object` objects, regexes,\nsets, strings, symbols, and typed arrays. `Object` objects are compared\nby their own, not inherited, enumerable properties. Functions and DOM\nnodes are compared by strict equality, i.e. `===`.",
    "since": "0.1.0",
    "examples": [
      "const object = { 'a': 1 }\nconst other = { 'a': 1 }\n\nisEqual(object, other)\n// => true\n\nobject === other\n// => false"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to compare.",
        "optional": false
      },
      {
        "name": "other",
        "type": "*",
        "description": "The other value to compare.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if the values are equivalent, else `false`."
    }
  },
  {
    "name": "escape",
    "category": "String",
    "description": "Used to map characters to HTML entities.",
    "since": "0.1.0",
    "examples": ["escape('fred, barney, & pebbles')\n// => 'fred, barney, &amp; pebbles'"],
    "params": [
      {
        "name": "string",
        "type": "string",
        "description": "The string to escape.",
        "defaultValue": "''",
        "optional": true
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the escaped string."
    }
  },
  {
    "name": "escapeRegExp",
    "category": "String",
    "description": "Used to match `RegExp`\n[syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n\nconst reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g\nconst reHasRegExpChar = RegExp(reRegExpChar.source)\n\n\nEscapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n\"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.",
    "since": "3.0.0",
    "examples": ["escapeRegExp('[lodash](https://lodash.com/)')\n// => '\\[lodash\\]\\(https://lodash\\.com/\\)'"],
    "params": [
      {
        "name": "string",
        "type": "string",
        "description": "The string to escape.",
        "defaultValue": "''",
        "optional": true
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the escaped string."
    }
  },
  {
    "name": "every",
    "category": "Array",
    "description": "Checks if `predicate` returns truthy for **all** elements of `array`.\nIteration is stopped once `predicate` returns falsey. The predicate is\ninvoked with three arguments: (value, index, array).\n\n**Note:** This method returns `true` for\n[empty arrays](https://en.wikipedia.org/wiki/Empty_set) because\n[everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\nelements of empty arrays.",
    "since": "5.0.0",
    "examples": ["every([true, 1, null, 'yes'], Boolean)\n// => false"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to iterate over.",
        "optional": false
      },
      {
        "name": "predicate",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if all elements pass the predicate check,"
    }
  },
  {
    "name": "everyValue",
    "category": "Object",
    "description": "Checks if `predicate` returns truthy for **all** properties of `object`.\nIteration is stopped once `predicate` returns falsey. The predicate is\ninvoked with three arguments: (value, key, object).\n\n**Note:** This method returns `true` for\n[empty objects](https://en.wikipedia.org/wiki/Empty_set) because\n[everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\nelements of empty objects.",
    "since": "5.0.0",
    "examples": ["everyValue({ 'a': 0, 'b': 'yes', 'c': false }, Boolean)\n// => false"],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to iterate over.",
        "optional": false
      },
      {
        "name": "predicate",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if all properties pass the predicate check,"
    }
  },
  {
    "name": "filter",
    "category": "Array",
    "description": "Iterates over elements of `array`, returning an array of all elements\n`predicate` returns truthy for. The predicate is invoked with three\narguments: (value, index, array).\n\n**Note:** Unlike `remove`, this method returns a new array.",
    "since": "5.0.0",
    "examples": [
      "const users = [\n  { 'user': 'barney', 'active': true },\n  { 'user': 'fred',   'active': false }\n]\n\nfilter(users, ({ active }) => active)\n// => objects for ['barney']"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to iterate over.",
        "optional": false
      },
      {
        "name": "predicate",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new filtered array."
    }
  },
  {
    "name": "filterObject",
    "category": "Object",
    "description": "Iterates over properties of `object`, returning an array of all elements\n`predicate` returns truthy for. The predicate is invoked with three\narguments: (value, key, object).\n\nIf you want an object in return, consider `pickBy`.",
    "since": "5.0.0",
    "examples": ["const object = { 'a': 5, 'b': 8, 'c': 10 }\n\nfilterObject(object, (n) => !(n % 5))\n// => [5, 10]"],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to iterate over.",
        "optional": false
      },
      {
        "name": "predicate",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new filtered array."
    }
  },
  {
    "name": "findKey",
    "category": "Object",
    "description": "This method is like `find` except that it returns the key of the first\nelement `predicate` returns truthy for instead of the element itself.",
    "since": "1.1.0",
    "examples": [
      "const users = {\n  'barney':  { 'age': 36, 'active': true },\n  'fred':    { 'age': 40, 'active': false },\n  'pebbles': { 'age': 1,  'active': true }\n}\n\nfindKey(users, ({ age }) => age < 40)\n// => 'barney' (iteration order is not guaranteed)"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to inspect.",
        "optional": false
      },
      {
        "name": "predicate",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      }
    ],
    "returns": {
      "type": "string|undefined",
      "description": "Returns the key of the matched element,"
    }
  },
  {
    "name": "findLast",
    "category": "Collection",
    "description": "This method is like `find` except that it iterates over elements of\n`collection` from right to left.",
    "since": "2.0.0",
    "examples": ["findLast([1, 2, 3, 4], n => n % 2 == 1)\n// => 3"],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to inspect.",
        "optional": false
      },
      {
        "name": "predicate",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      },
      {
        "name": "fromIndex",
        "type": "number",
        "description": "The index to search from.",
        "defaultValue": "collection.length-1",
        "optional": true
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the matched element, else `undefined`."
    }
  },
  {
    "name": "findLastIndex",
    "category": "Array",
    "description": "This method is like `findIndex` except that it iterates over elements\nof `collection` from right to left.",
    "since": "2.0.0",
    "examples": [
      "const users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': false }\n]\n\nfindLastIndex(users, ({ user }) => user == 'pebbles')\n// => 2"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to inspect.",
        "optional": false
      },
      {
        "name": "predicate",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      },
      {
        "name": "fromIndex",
        "type": "number",
        "description": "The index to search from.",
        "defaultValue": "array.length-1",
        "optional": true
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the index of the found element, else `-1`."
    }
  },
  {
    "name": "findLastKey",
    "category": "Object",
    "description": "This method is like `findKey` except that it iterates over elements of\na collection in the opposite order.",
    "since": "2.0.0",
    "examples": [
      "const users = {\n  'barney':  { 'age': 36, 'active': true },\n  'fred':    { 'age': 40, 'active': false },\n  'pebbles': { 'age': 1,  'active': true }\n}\n\nfindLastKey(users, ({ age }) => age < 40)\n// => returns 'pebbles' assuming `findKey` returns 'barney'"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to inspect.",
        "optional": false
      },
      {
        "name": "predicate",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      }
    ],
    "returns": {
      "type": "string|undefined",
      "description": "Returns the key of the matched element,"
    }
  },
  {
    "name": "first",
    "category": "Array",
    "description": "Gets the first element of `array`.",
    "since": "0.1.0",
    "examples": ["head([1, 2, 3])\n// => 1\n\nhead([])\n// => undefined"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to query.",
        "optional": false
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the first element of `array`."
    }
  },
  {
    "name": "flatMap",
    "category": "Collection",
    "description": "Creates a flattened array of values by running each element in `collection`\nthru `iteratee` and flattening the mapped results. The iteratee is invoked\nwith three arguments: (value, index|key, collection).",
    "since": "4.0.0",
    "examples": ["function duplicate(n) {\n  return [n, n]\n}\n\nflatMap([1, 2], duplicate)\n// => [1, 1, 2, 2]"],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new flattened array."
    }
  },
  {
    "name": "flatMapDeep",
    "category": "Collection",
    "description": "Used as references for various `Number` constants.",
    "since": "4.7.0",
    "examples": [
      "function duplicate(n) {\n  return [[[n, n]]]\n}\n\nflatMapDeep([1, 2], duplicate)\n// => [1, 1, 2, 2]"
    ],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new flattened array."
    }
  },
  {
    "name": "flatMapDepth",
    "category": "Collection",
    "description": "This method is like `flatMap` except that it recursively flattens the\nmapped results up to `depth` times.",
    "since": "4.7.0",
    "examples": [
      "function duplicate(n) {\n  return [[[n, n]]]\n}\n\nflatMapDepth([1, 2], duplicate, 2)\n// => [[1, 1], [2, 2]]"
    ],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      },
      {
        "name": "depth",
        "type": "number",
        "description": "The maximum recursion depth.",
        "defaultValue": "1",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new flattened array."
    }
  },
  {
    "name": "flatten",
    "category": "Array",
    "description": "Flattens `array` a single level deep.",
    "since": "0.1.0",
    "examples": ["flatten([1, [2, [3, [4]], 5]])\n// => [1, 2, [3, [4]], 5]"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to flatten.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new flattened array."
    }
  },
  {
    "name": "flattenDeep",
    "category": "Array",
    "description": "Used as references for various `Number` constants.",
    "since": "3.0.0",
    "examples": ["flattenDeep([1, [2, [3, [4]], 5]])\n// => [1, 2, 3, 4, 5]"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to flatten.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new flattened array."
    }
  },
  {
    "name": "flattenDepth",
    "category": "Array",
    "description": "Recursively flatten `array` up to `depth` times.",
    "since": "4.4.0",
    "examples": [
      "const array = [1, [2, [3, [4]], 5]]\n\nflattenDepth(array, 1)\n// => [1, 2, [3, [4]], 5]\n\nflattenDepth(array, 2)\n// => [1, 2, 3, [4], 5]"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to flatten.",
        "optional": false
      },
      {
        "name": "depth",
        "type": "number",
        "description": "The maximum recursion depth.",
        "defaultValue": "1",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new flattened array."
    }
  },
  {
    "name": "flip",
    "category": "Function",
    "description": "Creates a function that invokes `func` with arguments reversed.",
    "since": "4.0.0",
    "examples": ["const flipped = flip((...args) => args)\n\nflipped('a', 'b', 'c', 'd')\n// => ['d', 'c', 'b', 'a']"],
    "params": [
      {
        "name": "func",
        "type": "Function",
        "description": "The function to flip arguments for.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new flipped function."
    }
  },
  {
    "name": "floor",
    "category": "Math",
    "description": "Computes `number` rounded down to `precision`.",
    "since": "3.10.0",
    "examples": ["floor(4.006)\n// => 4\n\nfloor(0.046, 2)\n// => 0.04\n\nfloor(4060, -2)\n// => 4000"],
    "params": [
      {
        "name": "number",
        "type": "number",
        "description": "The number to round down.",
        "optional": false
      },
      {
        "name": "precision",
        "type": "number",
        "description": "The precision to round down to.",
        "defaultValue": "0",
        "optional": true
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the rounded down number."
    }
  },
  {
    "name": "flow",
    "category": "Util",
    "description": "Composes a function that returns the result of invoking the given functions\nwith the `this` binding of the created function, where each successive\ninvocation is supplied the return value of the previous.",
    "since": "3.0.0",
    "examples": [
      "import add from 'lodash/add'\n\nfunction square(n) {\n  return n * n\n}\n\nconst addSquare = flow(add, square)\naddSquare(1, 2)\n// => 9"
    ],
    "params": [
      {
        "name": "funcs",
        "type": "Function[]",
        "description": "The functions to invoke.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new composite function."
    }
  },
  {
    "name": "flowRight",
    "category": "Util",
    "description": "This method is like `flow` except that it composes a function that\ninvokes the given functions from right to left.",
    "since": "3.0.0",
    "examples": [
      "import add from 'lodash/add'\n\nfunction square(n) {\n  return n * n\n}\n\nconst addSquare = flowRight(square, add)\naddSquare(1, 2)\n// => 9"
    ],
    "params": [
      {
        "name": "funcs",
        "type": "Function[]",
        "description": "The functions to invoke.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new composite function."
    }
  },
  {
    "name": "forEach",
    "category": "Collection",
    "description": "Iterates over elements of `collection` and invokes `iteratee` for each element.\nThe iteratee is invoked with three arguments: (value, index|key, collection).\nIteratee functions may exit iteration early by explicitly returning `false`.\n\n**Note:** As with other \"Collections\" methods, objects with a \"length\"\nproperty are iterated like arrays. To avoid this behavior use `forIn`\nor `forOwn` for object iteration.",
    "since": "0.1.0",
    "examples": [
      "forEach([1, 2], value => console.log(value))\n// => Logs `1` then `2`.\n\nforEach({ 'a': 1, 'b': 2 }, (value, key) => console.log(key))\n// => Logs 'a' then 'b' (iteration order is not guaranteed)."
    ],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array|Object",
      "description": "Returns `collection`."
    }
  },
  {
    "name": "forEachRight",
    "category": "Collection",
    "description": "This method is like `forEach` except that it iterates over elements of\n`collection` from right to left.",
    "since": "2.0.0",
    "examples": ["forEachRight([1, 2], value => console.log(value))\n// => Logs `2` then `1`."],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array|Object",
      "description": "Returns `collection`."
    }
  },
  {
    "name": "forOwn",
    "category": "Object",
    "description": "Iterates over own enumerable string keyed properties of an object and\ninvokes `iteratee` for each property. The iteratee is invoked with three\narguments: (value, key, object). Iteratee functions may exit iteration\nearly by explicitly returning `false`.",
    "since": "0.3.0",
    "examples": [
      "function Foo() {\n  this.a = 1\n  this.b = 2\n}\n\nFoo.prototype.c = 3\n\nforOwn(new Foo, function(value, key) {\n  console.log(key)\n})\n// => Logs 'a' then 'b' (iteration order is not guaranteed)."
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      }
    ],
    "returns": null
  },
  {
    "name": "forOwnRight",
    "category": "Object",
    "description": "This method is like `forOwn` except that it iterates over properties of\n`object` in the opposite order.",
    "since": "2.0.0",
    "examples": [
      "function Foo() {\n  this.a = 1\n  this.b = 2\n}\n\nFoo.prototype.c = 3\n\nforOwnRight(new Foo, function(value, key) {\n  console.log(key)\n})\n// => Logs 'b' then 'a' assuming `forOwn` logs 'a' then 'b'."
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns `object`."
    }
  },
  {
    "name": "fromEntries",
    "category": "Array",
    "description": "The inverse of `entries`is method returns an object composed\nfrom key-value `pairs`.",
    "since": "4.0.0",
    "examples": ["fromEntries([['a', 1], ['b', 2]])\n// => { 'a': 1, 'b': 2 }"],
    "params": [
      {
        "name": "pairs",
        "type": "Array",
        "description": "The key-value pairs.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns the new object."
    }
  },
  {
    "name": "functions",
    "category": "Object",
    "description": "Creates an array of function property names from own enumerable properties\nof `object`.",
    "since": "0.1.0",
    "examples": [
      "function Foo() {\n  this.a = () => 'a'\n  this.b = () => 'b'\n}\n\nFoo.prototype.c = () => 'c'\n\nfunctions(new Foo)\n// => ['a', 'b']"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to inspect.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the function names."
    }
  },
  {
    "name": "get",
    "category": "Object",
    "description": "Gets the value at `path` of `object`. If the resolved value is\n`undefined`, the `defaultValue` is returned in its place.",
    "since": "3.7.0",
    "examples": [
      "const object = { 'a': [{ 'b': { 'c': 3 } }] }\n\nget(object, 'a[0].b.c')\n// => 3\n\nget(object, ['a', '0', 'b', 'c'])\n// => 3\n\nget(object, 'a.b.c', 'default')\n// => 'default'"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to query.",
        "optional": false
      },
      {
        "name": "path",
        "type": "Array|string",
        "description": "The path of the property to get.",
        "optional": false
      },
      {
        "name": "defaultValue",
        "type": "*",
        "description": "The value returned for `undefined` resolved values.",
        "optional": true
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the resolved value."
    }
  },
  {
    "name": "groupBy",
    "category": "Collection",
    "description": "Used to check objects for own properties.",
    "since": "0.1.0",
    "examples": ["groupBy([6.1, 4.2, 6.3], Math.floor)\n// => { '4': [4.2], '6': [6.1, 6.3] }"],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The iteratee to transform keys.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns the composed aggregate object."
    }
  },
  {
    "name": "gt",
    "category": "Lang",
    "description": "Checks if `value` is greater than `other`.",
    "since": "3.9.0",
    "examples": ["gt(3, 1)\n// => true\n\ngt(3, 3)\n// => false\n\ngt(1, 3)\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to compare.",
        "optional": false
      },
      {
        "name": "other",
        "type": "*",
        "description": "The other value to compare.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is greater than `other`,"
    }
  },
  {
    "name": "gte",
    "category": "Lang",
    "description": "Checks if `value` is greater than or equal to `other`.",
    "since": "3.9.0",
    "examples": ["gte(3, 1)\n// => true\n\ngte(3, 3)\n// => true\n\ngte(1, 3)\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to compare.",
        "optional": false
      },
      {
        "name": "other",
        "type": "*",
        "description": "The other value to compare.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is greater than or equal to"
    }
  },
  {
    "name": "has",
    "category": "Object",
    "description": "Used to check objects for own properties.",
    "since": "0.1.0",
    "examples": [
      "const object = { 'a': { 'b': 2 } }\nconst other = create({ 'a': create({ 'b': 2 }) })\n\nhas(object, 'a')\n// => true\n\nhas(other, 'a')\n// => false"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to query.",
        "optional": false
      },
      {
        "name": "key",
        "type": "string",
        "description": "The key to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `key` exists, else `false`."
    }
  },
  {
    "name": "hasIn",
    "category": "Object",
    "description": "Checks if `path` is a direct or inherited property of `object`.",
    "since": "4.0.0",
    "examples": [
      "const object = create({ 'a': create({ 'b': 2 }) })\n\nhasIn(object, 'a')\n// => true\n\nhasIn(object, 'b')\n// => false"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to query.",
        "optional": false
      },
      {
        "name": "key",
        "type": "string",
        "description": "The key to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `key` exists, else `false`."
    }
  },
  {
    "name": "hasPath",
    "category": "Object",
    "description": "Used to check objects for own properties.",
    "since": "5.0.0",
    "examples": [
      "const object = { 'a': { 'b': 2 } }\nconst other = create({ 'a': create({ 'b': 2 }) })\n\nhasPath(object, 'a.b')\n// => true\n\nhasPath(object, ['a', 'b'])\n// => true"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to query.",
        "optional": false
      },
      {
        "name": "path",
        "type": "Array|string",
        "description": "The path to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `path` exists, else `false`."
    }
  },
  {
    "name": "hasPathIn",
    "category": "Object",
    "description": "Checks if `path` is a direct property of `object`.",
    "since": "5.0.0",
    "examples": [
      "const object = { 'a': { 'b': 2 } }\nconst other = create({ 'a': create({ 'b': 2 }) })\n\nhasPathIn(object, 'a.b')\n// => true\n\nhasPathIn(object, ['a', 'b'])\n// => true"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to query.",
        "optional": false
      },
      {
        "name": "path",
        "type": "Array|string",
        "description": "The path to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `path` exists, else `false`."
    }
  },
  {
    "name": "head",
    "category": "Array",
    "description": "Gets the first element of `array`.",
    "since": "0.1.0",
    "examples": ["head([1, 2, 3])\n// => 1\n\nhead([])\n// => undefined"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to query.",
        "optional": false
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the first element of `array`."
    }
  },
  {
    "name": "inRange",
    "category": "Number",
    "description": "Checks if `number` is between `start` and up to, but not including, `end`. If\n`end` is not specified, it's set to `start` with `start` then set to `0`.\nIf `start` is greater than `end` the params are swapped to support\nnegative ranges.",
    "since": "3.3.0",
    "examples": [
      "inRange(3, 2, 4)\n// => true\n\ninRange(4, 8)\n// => true\n\ninRange(4, 2)\n// => false\n\ninRange(2, 2)\n// => false\n\ninRange(1.2, 2)\n// => true\n\ninRange(5.2, 4)\n// => false\n\ninRange(-3, -2, -6)\n// => true"
    ],
    "params": [
      {
        "name": "number",
        "type": "number",
        "description": "The number to check.",
        "optional": false
      },
      {
        "name": "start",
        "type": "number",
        "description": "The start of the range.",
        "defaultValue": "0",
        "optional": true
      },
      {
        "name": "end",
        "type": "number",
        "description": "The end of the range.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `number` is in the range, else `false`."
    }
  },
  {
    "name": "indexOf",
    "category": "Array",
    "description": "Gets the index at which the first occurrence of `value` is found in `array`\nusing [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons. If `fromIndex` is negative, it's used as the\noffset from the end of `array`.",
    "since": "0.1.0",
    "examples": [
      "indexOf([1, 2, 1, 2], 2)\n// => 1\n\n// Search from the `fromIndex`.\nindexOf([1, 2, 1, 2], 2, 2)\n// => 3"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to inspect.",
        "optional": false
      },
      {
        "name": "value",
        "type": "*",
        "description": "The value to search for.",
        "optional": false
      },
      {
        "name": "fromIndex",
        "type": "number",
        "description": "The index to search from.",
        "defaultValue": "0",
        "optional": true
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the index of the matched value, else `-1`."
    }
  },
  {
    "name": "initial",
    "category": "Array",
    "description": "Gets all but the last element of `array`.",
    "since": "0.1.0",
    "examples": ["initial([1, 2, 3])\n// => [1, 2]"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to query.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the slice of `array`."
    }
  },
  {
    "name": "intersection",
    "category": "Array",
    "description": "Creates an array of unique values that are included in all given arrays\nusing [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons. The order and references of result values are\ndetermined by the first array.",
    "since": "0.1.0",
    "examples": ["intersection([2, 1], [2, 3])\n// => [2]"],
    "params": [
      {
        "name": "arrays",
        "type": "...Array",
        "description": "The arrays to inspect.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of intersecting values."
    }
  },
  {
    "name": "intersectionBy",
    "category": "Array",
    "description": "This method is like `intersection` except that it accepts `iteratee`\nwhich is invoked for each element of each `arrays` to generate the criterion\nby which they're compared. The order and references of result values are\ndetermined by the first array. The iteratee is invoked with one argument:\n(value).",
    "since": "4.0.0",
    "examples": ["intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor)\n// => [2.1]"],
    "params": [
      {
        "name": "arrays",
        "type": "...Array",
        "description": "The arrays to inspect.",
        "optional": true
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The iteratee invoked per element.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of intersecting values."
    }
  },
  {
    "name": "intersectionWith",
    "category": "Array",
    "description": "This method is like `intersection` except that it accepts `comparator`\nwhich is invoked to compare elements of `arrays`. The order and references\nof result values are determined by the first array. The comparator is\ninvoked with two arguments: (arrVal, othVal).",
    "since": "4.0.0",
    "examples": [
      "const objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\nconst others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }]\n\nintersectionWith(objects, others, isEqual)\n// => [{ 'x': 1, 'y': 2 }]"
    ],
    "params": [
      {
        "name": "arrays",
        "type": "...Array",
        "description": "The arrays to inspect.",
        "optional": true
      },
      {
        "name": "comparator",
        "type": "Function",
        "description": "The comparator invoked per element.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of intersecting values."
    }
  },
  {
    "name": "invert",
    "category": "Object",
    "description": "Creates an object composed of the inverted keys and values of `object`.\nIf `object` contains duplicate values, subsequent values overwrite\nproperty assignments of previous values.",
    "since": "0.7.0",
    "examples": ["const object = { 'a': 1, 'b': 2, 'c': 1 }\n\ninvert(object)\n// => { '1': 'c', '2': 'b' }"],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to invert.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns the new inverted object."
    }
  },
  {
    "name": "invertBy",
    "category": "Object",
    "description": "Used to check objects for own properties.",
    "since": "4.1.0",
    "examples": [
      "const object = { 'a': 1, 'b': 2, 'c': 1 }\n\ninvertBy(object, value => `group${value}`)\n// => { 'group1': ['a', 'c'], 'group2': ['b'] }"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to invert.",
        "optional": false
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The iteratee invoked per element.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns the new inverted object."
    }
  },
  {
    "name": "invoke",
    "category": "Object",
    "description": "Invokes the method at `path` of `object`.",
    "since": "4.0.0",
    "examples": [
      "const object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] }\n\ninvoke(object, 'a[0].b.c.slice', [1, 3])\n// => [2, 3]"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to query.",
        "optional": false
      },
      {
        "name": "path",
        "type": "Array|string",
        "description": "The path of the method to invoke.",
        "optional": false
      },
      {
        "name": "args",
        "type": "Array",
        "description": "The arguments to invoke the method with.",
        "optional": true
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the result of the invoked method."
    }
  },
  {
    "name": "invokeMap",
    "category": "Collection",
    "description": "Invokes the method at `path` of each element in `collection`, returning\nan array of the results of each invoked method. Any additional arguments\nare provided to each invoked method. If `path` is a function, it's invoked\nfor, and `this` bound to, each element in `collection`.",
    "since": "4.0.0",
    "examples": [
      "invokeMap([[5, 1, 7], [3, 2, 1]], 'sort')\n// => [[1, 5, 7], [1, 2, 3]]\n\ninvokeMap([123, 456], String.prototype.split, [''])\n// => [['1', '2', '3'], ['4', '5', '6']]"
    ],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "path",
        "type": "Array|Function|string",
        "description": "The path of the method to invoke or",
        "optional": false
      },
      {
        "name": "args",
        "type": "Array",
        "description": "The arguments to invoke each method with.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the array of results."
    }
  },
  {
    "name": "isArguments",
    "category": "Lang",
    "description": "Checks if `value` is likely an `arguments` object.",
    "since": "0.1.0",
    "examples": ["isArguments(function() { return arguments }())\n// => true\n\nisArguments([1, 2, 3])\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is an `arguments` object, else `false`."
    }
  },
  {
    "name": "isArrayBuffer",
    "category": "Lang",
    "description": "Checks if `value` is classified as an `ArrayBuffer` object.",
    "since": "4.3.0",
    "examples": ["isArrayBuffer(new ArrayBuffer(2))\n// => true\n\nisArrayBuffer(new Array(2))\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is an array buffer, else `false`."
    }
  },
  {
    "name": "isArrayLike",
    "category": "Lang",
    "description": "Checks if `value` is array-like. A value is considered array-like if it's\nnot a function and has a `value.length` that's an integer greater than or\nequal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.",
    "since": "4.0.0",
    "examples": [
      "isArrayLike([1, 2, 3])\n// => true\n\nisArrayLike(document.body.children)\n// => true\n\nisArrayLike('abc')\n// => true\n\nisArrayLike(Function)\n// => false"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is array-like, else `false`."
    }
  },
  {
    "name": "isArrayLikeObject",
    "category": "Lang",
    "description": "This method is like `isArrayLike` except that it also checks if `value`\nis an object.",
    "since": "4.0.0",
    "examples": [
      "isArrayLikeObject([1, 2, 3])\n// => true\n\nisArrayLikeObject(document.body.children)\n// => true\n\nisArrayLikeObject('abc')\n// => false\n\nisArrayLikeObject(Function)\n// => false"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is an array-like object,"
    }
  },
  {
    "name": "isBoolean",
    "category": "Lang",
    "description": "Checks if `value` is classified as a boolean primitive or object.",
    "since": "0.1.0",
    "examples": ["isBoolean(false)\n// => true\n\nisBoolean(null)\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a boolean, else `false`."
    }
  },
  {
    "name": "isBuffer",
    "category": "Lang",
    "description": "Detect free variable `exports`.",
    "since": "4.3.0",
    "examples": ["isBuffer(new Buffer(2))\n// => true\n\nisBuffer(new Uint8Array(2))\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a buffer, else `false`."
    }
  },
  {
    "name": "isDate",
    "category": "Lang",
    "description": "Checks if `value` is classified as a `Date` object.",
    "since": "0.1.0",
    "examples": ["isDate(new Date)\n// => true\n\nisDate('Mon April 23 2012')\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a date object, else `false`."
    }
  },
  {
    "name": "isElement",
    "category": "Lang",
    "description": "Checks if `value` is likely a DOM element.",
    "since": "0.1.0",
    "examples": ["isElement(document.body)\n// => true\n\nisElement('<body>')\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a DOM element, else `false`."
    }
  },
  {
    "name": "isEmpty",
    "category": "Lang",
    "description": "Used to check objects for own properties.",
    "since": "0.1.0",
    "examples": [
      "isEmpty(null)\n// => true\n\nisEmpty(true)\n// => true\n\nisEmpty(1)\n// => true\n\nisEmpty([1, 2, 3])\n// => false\n\nisEmpty('abc')\n// => false\n\nisEmpty({ 'a': 1 })\n// => false"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is empty, else `false`."
    }
  },
  {
    "name": "isEqualWith",
    "category": "Lang",
    "description": "This method is like `isEqual` except that it accepts `customizer` which\nis invoked to compare values. If `customizer` returns `undefined`, comparisons\nare handled by the method instead. The `customizer` is invoked with up to\nsix arguments: (objValue, othValue [, index|key, object, other, stack]).",
    "since": "4.0.0",
    "examples": [
      "function isGreeting(value) {\n  return /^h(?:i|ello)$/.test(value)\n}\n\nfunction customizer(objValue, othValue) {\n  if (isGreeting(objValue) && isGreeting(othValue)) {\n    return true\n  }\n}\n\nconst array = ['hello', 'goodbye']\nconst other = ['hi', 'goodbye']\n\nisEqualWith(array, other, customizer)\n// => true"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to compare.",
        "optional": false
      },
      {
        "name": "other",
        "type": "*",
        "description": "The other value to compare.",
        "optional": false
      },
      {
        "name": "customizer",
        "type": "Function",
        "description": "The function to customize comparisons.",
        "optional": true
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if the values are equivalent, else `false`."
    }
  },
  {
    "name": "isError",
    "category": "Lang",
    "description": "Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n`SyntaxError`, `TypeError`, or `URIError` object.",
    "since": "3.0.0",
    "examples": ["isError(new Error)\n// => true\n\nisError(Error)\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is an error object, else `false`."
    }
  },
  {
    "name": "isFunction",
    "category": "Lang",
    "description": "Checks if `value` is classified as a `Function` object.",
    "since": "0.1.0",
    "examples": [
      "isFunction(class Any{})\n// => true\n\nisFunction(() => {})\n// => true\n\nisFunction(async () => {})\n// => true\n\nisFunction(function * Any() {})\n// => true\n\nisFunction(Math.round)\n// => true\n\nisFunction(/abc/)\n// => false"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a function, else `false`."
    }
  },
  {
    "name": "isLength",
    "category": "Lang",
    "description": "Used as references for various `Number` constants.",
    "since": "4.0.0",
    "examples": [
      "isLength(3)\n// => true\n\nisLength(Number.MIN_VALUE)\n// => false\n\nisLength(Infinity)\n// => false\n\nisLength('3')\n// => false"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a valid length, else `false`."
    }
  },
  {
    "name": "isMap",
    "category": "Lang",
    "description": "Checks if `value` is classified as a `Map` object.",
    "since": "4.3.0",
    "examples": ["isMap(new Map)\n// => true\n\nisMap(new WeakMap)\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a map, else `false`."
    }
  },
  {
    "name": "isMatch",
    "category": "Lang",
    "description": "Performs a partial deep comparison between `object` and `source` to\ndetermine if `object` contains equivalent property values.\n\n**Note:** This method is equivalent to `matches` when `source` is\npartially applied.\n\nPartial comparisons will match empty array and empty object `source`\nvalues against any array or object value, respectively. See `isEqual`\nfor a list of supported value comparisons.",
    "since": "3.0.0",
    "examples": [
      "const object = { 'a': 1, 'b': 2 }\n\nisMatch(object, { 'b': 2 })\n// => true\n\nisMatch(object, { 'b': 1 })\n// => false"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to inspect.",
        "optional": false
      },
      {
        "name": "source",
        "type": "Object",
        "description": "The object of property values to match.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `object` is a match, else `false`."
    }
  },
  {
    "name": "isMatchWith",
    "category": "Lang",
    "description": "This method is like `isMatch` except that it accepts `customizer` which\nis invoked to compare values. If `customizer` returns `undefined`, comparisons\nare handled by the method instead. The `customizer` is invoked with five\narguments: (objValue, srcValue, index|key, object, source).",
    "since": "4.0.0",
    "examples": [
      "function isGreeting(value) {\n  return /^h(?:i|ello)$/.test(value)\n}\n\nfunction customizer(objValue, srcValue) {\n  if (isGreeting(objValue) && isGreeting(srcValue)) {\n    return true\n  }\n}\n\nconst object = { 'greeting': 'hello' }\nconst source = { 'greeting': 'hi' }\n\nisMatchWith(object, source, customizer)\n// => true"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to inspect.",
        "optional": false
      },
      {
        "name": "source",
        "type": "Object",
        "description": "The object of property values to match.",
        "optional": false
      },
      {
        "name": "customizer",
        "type": "Function",
        "description": "The function to customize comparisons.",
        "optional": true
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `object` is a match, else `false`."
    }
  },
  {
    "name": "isNative",
    "category": "Lang",
    "description": "Used to detect if a method is native.",
    "since": "3.0.0",
    "examples": ["isNative(Array.prototype.push)\n// => true\n\nisNative(isDate)\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a native function,"
    }
  },
  {
    "name": "isNil",
    "category": "Lang",
    "description": "Checks if `value` is `null` or `undefined`.",
    "since": "4.0.0",
    "examples": ["isNil(null)\n// => true\n\nisNil(void 0)\n// => true\n\nisNil(NaN)\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is nullish, else `false`."
    }
  },
  {
    "name": "isNull",
    "category": "Lang",
    "description": "Checks if `value` is `null`.",
    "since": "0.1.0",
    "examples": ["isNull(null)\n// => true\n\nisNull(void 0)\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is `null`, else `false`."
    }
  },
  {
    "name": "isNumber",
    "category": "Lang",
    "description": "Checks if `value` is classified as a `Number` primitive or object.\n\n**Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\nclassified as numbers, use the `Number.isFinite` method.",
    "since": "0.1.0",
    "examples": [
      "isNumber(3)\n// => true\n\nisNumber(Number.MIN_VALUE)\n// => true\n\nisNumber(Infinity)\n// => true\n\nisNumber('3')\n// => false"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a number, else `false`."
    }
  },
  {
    "name": "isObject",
    "category": "Lang",
    "description": "Checks if `value` is the\n[language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\nof `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)",
    "since": "0.1.0",
    "examples": [
      "isObject({})\n// => true\n\nisObject([1, 2, 3])\n// => true\n\nisObject(Function)\n// => true\n\nisObject(null)\n// => false"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is an object, else `false`."
    }
  },
  {
    "name": "isObjectLike",
    "category": "Lang",
    "description": "Checks if `value` is object-like. A value is object-like if it's not `null`\nand has a `typeof` result of \"object\".",
    "since": "4.0.0",
    "examples": [
      "isObjectLike({})\n// => true\n\nisObjectLike([1, 2, 3])\n// => true\n\nisObjectLike(Function)\n// => false\n\nisObjectLike(null)\n// => false"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is object-like, else `false`."
    }
  },
  {
    "name": "isPlainObject",
    "category": "Lang",
    "description": "Checks if `value` is a plain object, that is, an object created by the\n`Object` constructor or one with a `[[Prototype]]` of `null`.",
    "since": "0.8.0",
    "examples": [
      "function Foo() {\n  this.a = 1\n}\n\nisPlainObject(new Foo)\n// => false\n\nisPlainObject([1, 2, 3])\n// => false\n\nisPlainObject({ 'x': 0, 'y': 0 })\n// => true\n\nisPlainObject(Object.create(null))\n// => true"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a plain object, else `false`."
    }
  },
  {
    "name": "isRegExp",
    "category": "Lang",
    "description": "Checks if `value` is classified as a `RegExp` object.",
    "since": "0.1.0",
    "examples": ["isRegExp(/abc/)\n// => true\n\nisRegExp('/abc/')\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a regexp, else `false`."
    }
  },
  {
    "name": "isSet",
    "category": "Lang",
    "description": "Checks if `value` is classified as a `Set` object.",
    "since": "4.3.0",
    "examples": ["isSet(new Set)\n// => true\n\nisSet(new WeakSet)\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a set, else `false`."
    }
  },
  {
    "name": "isString",
    "category": "Lang",
    "description": "Checks if `value` is classified as a `String` primitive or object.",
    "since": "0.1.0",
    "examples": ["isString('abc')\n// => true\n\nisString(1)\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a string, else `false`."
    }
  },
  {
    "name": "isSymbol",
    "category": "Lang",
    "description": "Checks if `value` is classified as a `Symbol` primitive or object.",
    "since": "4.0.0",
    "examples": ["isSymbol(Symbol.iterator)\n// => true\n\nisSymbol('abc')\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a symbol, else `false`."
    }
  },
  {
    "name": "isTypedArray",
    "category": "Lang",
    "description": "Used to match `toStringTag` values of typed arrays.",
    "since": "3.0.0",
    "examples": ["isTypedArray(new Uint8Array)\n// => true\n\nisTypedArray([])\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a typed array, else `false`."
    }
  },
  {
    "name": "isUndefined",
    "category": "Lang",
    "description": "Checks if `value` is `undefined`.",
    "since": "0.1.0",
    "examples": ["isUndefined(void 0)\n// => true\n\nisUndefined(null)\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is `undefined`, else `false`."
    }
  },
  {
    "name": "isWeakMap",
    "category": "Lang",
    "description": "Checks if `value` is classified as a `WeakMap` object.",
    "since": "4.3.0",
    "examples": ["isWeakMap(new WeakMap)\n// => true\n\nisWeakMap(new Map)\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a weak map, else `false`."
    }
  },
  {
    "name": "isWeakSet",
    "category": "Lang",
    "description": "Checks if `value` is classified as a `WeakSet` object.",
    "since": "4.3.0",
    "examples": ["isWeakSet(new WeakSet)\n// => true\n\nisWeakSet(new Set)\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to check.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is a weak set, else `false`."
    }
  },
  {
    "name": "kebabCase",
    "category": "String",
    "description": "Converts `string` to\n[kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).",
    "since": "3.0.0",
    "examples": [
      "kebabCase('Foo Bar')\n// => 'foo-bar'\n\nkebabCase('fooBar')\n// => 'foo-bar'\n\nkebabCase('__FOO_BAR__')\n// => 'foo-bar'"
    ],
    "params": [
      {
        "name": "string",
        "type": "string",
        "description": "The string to convert.",
        "defaultValue": "''",
        "optional": true
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the kebab cased string."
    }
  },
  {
    "name": "keyBy",
    "category": "Collection",
    "description": "Creates an object composed of keys generated from the results of running\neach element of `collection` thru `iteratee`. The corresponding value of\neach key is the last element responsible for generating the key. The\niteratee is invoked with one argument: (value).",
    "since": "4.0.0",
    "examples": [
      "const array = [\n  { 'dir': 'left', 'code': 97 },\n  { 'dir': 'right', 'code': 100 }\n]\n\nkeyBy(array, ({ code }) => String.fromCharCode(code))\n// => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }"
    ],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The iteratee to transform keys.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns the composed aggregate object."
    }
  },
  {
    "name": "keys",
    "category": "Object",
    "description": "Creates an array of the own enumerable property names of `object`.\n\n**Note:** Non-object values are coerced to objects. See the\n[ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\nfor more details.",
    "since": "0.1.0",
    "examples": [
      "function Foo() {\n  this.a = 1\n  this.b = 2\n}\n\nFoo.prototype.c = 3\n\nkeys(new Foo)\n// => ['a', 'b'] (iteration order is not guaranteed)\n\nkeys('hi')\n// => ['0', '1']"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to query.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the array of property names."
    }
  },
  {
    "name": "keysIn",
    "category": "Object",
    "description": "Creates an array of the own and inherited enumerable property names of `object`.",
    "since": "3.0.0",
    "examples": [
      "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.keysIn(new Foo);\n// => ['a', 'b', 'c'] (iteration order is not guaranteed)"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to query.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the array of property names."
    }
  },
  {
    "name": "last",
    "category": "Array",
    "description": "Gets the last element of `array`.",
    "since": "0.1.0",
    "examples": ["last([1, 2, 3])\n// => 3"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to query.",
        "optional": false
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the last element of `array`."
    }
  },
  {
    "name": "lastIndexOf",
    "category": "Array",
    "description": "This method is like `indexOf` except that it iterates over elements of\n`array` from right to left.",
    "since": "0.1.0",
    "examples": [
      "lastIndexOf([1, 2, 1, 2], 2)\n// => 3\n\n// Search from the `fromIndex`.\nlastIndexOf([1, 2, 1, 2], 2, 2)\n// => 1"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to inspect.",
        "optional": false
      },
      {
        "name": "value",
        "type": "*",
        "description": "The value to search for.",
        "optional": false
      },
      {
        "name": "fromIndex",
        "type": "number",
        "description": "The index to search from.",
        "defaultValue": "array.length-1",
        "optional": true
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the index of the matched value, else `-1`."
    }
  },
  {
    "name": "lowerCase",
    "category": "String",
    "description": "Converts `string`, as space separated words, to lower case.",
    "since": "4.0.0",
    "examples": [
      "lowerCase('--Foo-Bar--')\n// => 'foo bar'\n\nlowerCase('fooBar')\n// => 'foo bar'\n\nlowerCase('__FOO_BAR__')\n// => 'foo bar'"
    ],
    "params": [
      {
        "name": "string",
        "type": "string",
        "description": "The string to convert.",
        "defaultValue": "''",
        "optional": true
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the lower cased string."
    }
  },
  {
    "name": "lowerFirst",
    "category": "String",
    "description": "Converts the first character of `string` to lower case.",
    "since": "4.0.0",
    "examples": ["lowerFirst('Fred')\n// => 'fred'\n\nlowerFirst('FRED')\n// => 'fRED'"],
    "params": [
      {
        "name": "string",
        "type": "string",
        "description": "The string to convert.",
        "defaultValue": "''",
        "optional": true
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the converted string."
    }
  },
  {
    "name": "lt",
    "category": "Lang",
    "description": "Checks if `value` is less than `other`.",
    "since": "3.9.0",
    "examples": ["lt(1, 3)\n// => true\n\nlt(3, 3)\n// => false\n\nlt(3, 1)\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to compare.",
        "optional": false
      },
      {
        "name": "other",
        "type": "*",
        "description": "The other value to compare.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is less than `other`,"
    }
  },
  {
    "name": "lte",
    "category": "Lang",
    "description": "Checks if `value` is less than or equal to `other`.",
    "since": "3.9.0",
    "examples": ["lte(1, 3)\n// => true\n\nlte(3, 3)\n// => true\n\nlte(3, 1)\n// => false"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to compare.",
        "optional": false
      },
      {
        "name": "other",
        "type": "*",
        "description": "The other value to compare.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `value` is less than or equal to"
    }
  },
  {
    "name": "map",
    "category": "Array",
    "description": "Creates an array of values by running each element of `array` thru `iteratee`.\nThe iteratee is invoked with three arguments: (value, index, array).",
    "since": "5.0.0",
    "examples": ["function square(n) {\n  return n * n\n}\n\nmap([4, 8], square)\n// => [16, 64]"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new mapped array."
    }
  },
  {
    "name": "mapKey",
    "category": "Object",
    "description": "The opposite of `mapValue` this method creates an object with the\nsame values as `object` and keys generated by running each own enumerable\nstring keyed property of `object` thru `iteratee`. The iteratee is invoked\nwith three arguments: (value, key, object).",
    "since": "3.8.0",
    "examples": [
      "mapKey({ 'a': 1, 'b': 2 }, function(value, key) {\n  return key + value\n})\n// => { 'a1': 1, 'b2': 2 }"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns the new mapped object."
    }
  },
  {
    "name": "mapObject",
    "category": "Object",
    "description": "Creates an array of values by running each property of `object` thru\n`iteratee`. The iteratee is invoked with three arguments: (value, key, object).",
    "since": "5.0.0",
    "examples": [
      "function square(n) {\n  return n * n\n}\n\nmap({ 'a': 4, 'b': 8 }, square)\n// => [16, 64] (iteration order is not guaranteed)"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new mapped array."
    }
  },
  {
    "name": "mapValue",
    "category": "Object",
    "description": "Creates an object with the same keys as `object` and values generated\nby running each own enumerable string keyed property of `object` thru\n`iteratee`. The iteratee is invoked with three arguments:\n(value, key, object).",
    "since": "2.4.0",
    "examples": [
      "const users = {\n  'fred':    { 'user': 'fred',    'age': 40 },\n  'pebbles': { 'user': 'pebbles', 'age': 1 }\n}\n\nmapValue(users, ({ age }) => age)\n// => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns the new mapped object."
    }
  },
  {
    "name": "matches",
    "category": "Util",
    "description": "Used to compose bitmasks for cloning.",
    "since": "3.0.0",
    "examples": [
      "const objects = [\n  { 'a': 1, 'b': 2, 'c': 3 },\n  { 'a': 4, 'b': 5, 'c': 6 }\n]\n\nfilter(objects, matches({ 'a': 4, 'c': 6 }))\n// => [{ 'a': 4, 'b': 5, 'c': 6 }]"
    ],
    "params": [
      {
        "name": "source",
        "type": "Object",
        "description": "The object of property values to match.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new spec function."
    }
  },
  {
    "name": "matchesProperty",
    "category": "Util",
    "description": "Used to compose bitmasks for cloning.",
    "since": "3.2.0",
    "examples": [
      "const objects = [\n  { 'a': 1, 'b': 2, 'c': 3 },\n  { 'a': 4, 'b': 5, 'c': 6 }\n]\n\nfind(objects, matchesProperty('a', 4))\n// => { 'a': 4, 'b': 5, 'c': 6 }"
    ],
    "params": [
      {
        "name": "path",
        "type": "Array|string",
        "description": "The path of the property to get.",
        "optional": false
      },
      {
        "name": "srcValue",
        "type": "*",
        "description": "The value to match.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new spec function."
    }
  },
  {
    "name": "maxBy",
    "category": "Math",
    "description": "This method is like `max` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the criterion by which\nthe value is ranked. The iteratee is invoked with one argument: (value).",
    "since": "4.0.0",
    "examples": ["const objects = [{ 'n': 1 }, { 'n': 2 }]\n\nmaxBy(objects, ({ n }) => n)\n// => { 'n': 2 }"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The iteratee invoked per element.",
        "optional": false
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the maximum value."
    }
  },
  {
    "name": "mean",
    "category": "Math",
    "description": "Computes the mean of the values in `array`.",
    "since": "4.0.0",
    "examples": ["mean([4, 2, 8, 6])\n// => 5"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to iterate over.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the mean."
    }
  },
  {
    "name": "meanBy",
    "category": "Math",
    "description": "Used as references for various `Number` constants.",
    "since": "4.7.0",
    "examples": [
      "const objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }]\n\nmeanBy(objects, ({ n }) => n)\n// => 5"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The iteratee invoked per element.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the mean."
    }
  },
  {
    "name": "memoize",
    "category": "Function",
    "description": "Creates a function that memoizes the result of `func`. If `resolver` is\nprovided, it determines the cache key for storing the result based on the\narguments provided to the memoized function. By default, the first argument\nprovided to the memoized function is used as the map cache key. The `func`\nis invoked with the `this` binding of the memoized function.\n\n**Note:** The cache is exposed as the `cache` property on the memoized\nfunction. Its creation may be customized by replacing the `memoize.Cache`\nconstructor with one whose instances implement the\n[`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\nmethod interface of `clear`, `delete`, `get`, `has`, and `set`.",
    "since": "0.1.0",
    "examples": [
      "const object = { 'a': 1, 'b': 2 }\nconst other = { 'c': 3, 'd': 4 }\n\nconst values = memoize(values)\nvalues(object)\n// => [1, 2]\n\nvalues(other)\n// => [3, 4]\n\nobject.a = 2\nvalues(object)\n// => [1, 2]\n\n// Modify the result cache.\nvalues.cache.set(object, ['a', 'b'])\nvalues(object)\n// => ['a', 'b']\n\n// Replace `memoize.Cache`.\nmemoize.Cache = WeakMap"
    ],
    "params": [
      {
        "name": "func",
        "type": "Function",
        "description": "The function to have its output memoized.",
        "optional": false
      },
      {
        "name": "resolver",
        "type": "Function",
        "description": "The function to resolve the cache key.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new memoized function."
    }
  },
  {
    "name": "merge",
    "category": "Object",
    "description": "This method is like `assign` except that it recursively merges own and\ninherited enumerable string keyed properties of source objects into the\ndestination object. Source properties that resolve to `undefined` are\nskipped if a destination value exists. Array and plain object properties\nare merged recursively. Other objects and value types are overridden by\nassignment. Source objects are applied from left to right. Subsequent\nsources overwrite property assignments of previous sources.\n\n**Note:** This method mutates `object`.",
    "since": "0.5.0",
    "examples": [
      "const object = {\n  'a': [{ 'b': 2 }, { 'd': 4 }]\n}\n\nconst other = {\n  'a': [{ 'c': 3 }, { 'e': 5 }]\n}\n\nmerge(object, other)\n// => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The destination object.",
        "optional": false
      },
      {
        "name": "sources",
        "type": "...Object",
        "description": "The source objects.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns `object`."
    }
  },
  {
    "name": "mergeWith",
    "category": "Object",
    "description": "This method is like `merge` except that it accepts `customizer` which\nis invoked to produce the merged values of the destination and source\nproperties. If `customizer` returns `undefined`, merging is handled by the\nmethod instead. The `customizer` is invoked with six arguments:\n(objValue, srcValue, key, object, source, stack).\n\n**Note:** This method mutates `object`.",
    "since": "4.0.0",
    "examples": [
      "function customizer(objValue, srcValue) {\n  if (Array.isArray(objValue)) {\n    return objValue.concat(srcValue)\n  }\n}\n\nconst object = { 'a': [1], 'b': [2] }\nconst other = { 'a': [3], 'b': [4] }\n\nmergeWith(object, other, customizer)\n// => { 'a': [1, 3], 'b': [2, 4] }"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The destination object.",
        "optional": false
      },
      {
        "name": "sources",
        "type": "...Object",
        "description": "The source objects.",
        "optional": false
      },
      {
        "name": "customizer",
        "type": "Function",
        "description": "The function to customize assigned values.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns `object`."
    }
  },
  {
    "name": "method",
    "category": "Util",
    "description": "Creates a function that invokes the method at `path` of a given object.\nAny additional arguments are provided to the invoked method.",
    "since": "3.7.0",
    "examples": [
      "const objects = [\n  { 'a': { 'b': () => 2 } },\n  { 'a': { 'b': () => 1 } }\n]\n\nmap(objects, method('a.b'))\n// => [2, 1]\n\nmap(objects, method(['a', 'b']))\n// => [2, 1]"
    ],
    "params": [
      {
        "name": "path",
        "type": "Array|string",
        "description": "The path of the method to invoke.",
        "optional": false
      },
      {
        "name": "args",
        "type": "Array",
        "description": "The arguments to invoke the method with.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new invoker function."
    }
  },
  {
    "name": "methodOf",
    "category": "Util",
    "description": "The opposite of `method` this method creates a function that invokes\nthe method at a given path of `object`. Any additional arguments are\nprovided to the invoked method.",
    "since": "3.7.0",
    "examples": [
      "const array = times(3, i => () => i)\nconst object = { 'a': array, 'b': array, 'c': array }\n\nmap(['a[2]', 'c[0]'], methodOf(object))\n// => [2, 0]\n\nmap([['a', '2'], ['c', '0']], methodOf(object))\n// => [2, 0]f"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to query.",
        "optional": false
      },
      {
        "name": "args",
        "type": "Array",
        "description": "The arguments to invoke the method with.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new invoker function."
    }
  },
  {
    "name": "minBy",
    "category": "Math",
    "description": "This method is like `min` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the criterion by which\nthe value is ranked. The iteratee is invoked with one argument: (value).",
    "since": "4.0.0",
    "examples": ["const objects = [{ 'n': 1 }, { 'n': 2 }]\n\nminBy(objects, ({ n }) => n)\n// => { 'n': 1 }"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The iteratee invoked per element.",
        "optional": false
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the minimum value."
    }
  },
  {
    "name": "multiply",
    "category": "Math",
    "description": "Multiply two numbers.",
    "since": "4.7.0",
    "examples": ["multiply(6, 4)\n// => 24"],
    "params": [
      {
        "name": "multiplier",
        "type": "number",
        "description": "The first number in a multiplication.",
        "optional": false
      },
      {
        "name": "multiplicand",
        "type": "number",
        "description": "The second number in a multiplication.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the product."
    }
  },
  {
    "name": "negate",
    "category": "Function",
    "description": "Creates a function that negates the result of the predicate `func`. The\n`func` predicate is invoked with the `this` binding and arguments of the\ncreated function.",
    "since": "3.0.0",
    "examples": [
      "function isEven(n) {\n  return n % 2 == 0\n}\n\nfilter([1, 2, 3, 4, 5, 6], negate(isEven))\n// => [1, 3, 5]"
    ],
    "params": [
      {
        "name": "predicate",
        "type": "Function",
        "description": "The predicate to negate.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new negated function."
    }
  },
  {
    "name": "nth",
    "category": "Array",
    "description": "Gets the element at index `n` of `array`. If `n` is negative, the nth\nelement from the end is returned.",
    "since": "4.11.0",
    "examples": ["const array = ['a', 'b', 'c', 'd']\n\nnth(array, 1)\n// => 'b'\n\nnth(array, -2)\n// => 'c'"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to query.",
        "optional": false
      },
      {
        "name": "n",
        "type": "number",
        "description": "The index of the element to return.",
        "defaultValue": "0",
        "optional": true
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the nth element of `array`."
    }
  },
  {
    "name": "nthArg",
    "category": "Util",
    "description": "Creates a function that gets the argument at index `n`. If `n` is negative,\nthe nth argument from the end is returned.",
    "since": "4.0.0",
    "examples": [
      "const func = nthArg(1)\nfunc('a', 'b', 'c', 'd')\n// => 'b'\n\nconst func = nthArg(-2)\nfunc('a', 'b', 'c', 'd')\n// => 'c'"
    ],
    "params": [
      {
        "name": "n",
        "type": "number",
        "description": "The index of the argument to return.",
        "defaultValue": "0",
        "optional": true
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new pass-thru function."
    }
  },
  {
    "name": "once",
    "category": "Function",
    "description": "Creates a function that is restricted to invoking `func` once. Repeat calls\nto the function return the value of the first invocation. The `func` is\ninvoked with the `this` binding and arguments of the created function.",
    "since": "0.1.0",
    "examples": [
      "const initialize = once(createApplication)\ninitialize()\ninitialize()\n// => `createApplication` is invoked once"
    ],
    "params": [
      {
        "name": "func",
        "type": "Function",
        "description": "The function to restrict.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new restricted function."
    }
  },
  {
    "name": "orderBy",
    "category": "Collection",
    "description": "This method is like `sortBy` except that it allows specifying the sort\norders of the iteratees to sort by. If `orders` is unspecified, all values\nare sorted in ascending order. Otherwise, specify an order of \"desc\" for\ndescending or \"asc\" for ascending sort order of corresponding values.\nYou may also specify a compare function for an order.",
    "since": "4.0.0",
    "examples": [
      "const users = [\n  { 'user': 'fred',   'age': 48 },\n  { 'user': 'barney', 'age': 34 },\n  { 'user': 'fred',   'age': 40 },\n  { 'user': 'barney', 'age': 36 }\n]\n\n// Sort by `user` in ascending order and by `age` in descending order.\norderBy(users, ['user', 'age'], ['asc', 'desc'])\n// => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n\n// Sort by `user` then by `age` using custom compare functions for each\norderBy(users, ['user', 'age'], [\n  (a, b) => a.localeCompare(b, 'de', { sensitivity: 'base' }),\n  (a, b) => a - b,\n])"
    ],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "orders",
        "type": "(string|function)[]",
        "description": "The sort orders of `iteratees`.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new sorted array."
    }
  },
  {
    "name": "over",
    "category": "Util",
    "description": "Creates a function that invokes `iteratees` with the arguments it receives\nand returns their results.",
    "since": "4.0.0",
    "examples": ["const func = over([Math.max, Math.min])\n\nfunc(1, 2, 3, 4)\n// => [4, 1]"],
    "params": [],
    "returns": {
      "type": "Function",
      "description": "Returns the new function."
    }
  },
  {
    "name": "overArgs",
    "category": "Function",
    "description": "Creates a function that invokes `func` with its arguments transformed.",
    "since": "4.0.0",
    "examples": [
      "function doubled(n) {\n  return n * 2\n}\n\nfunction square(n) {\n  return n * n\n}\n\nconst func = overArgs((x, y) => [x, y], [square, doubled])\n\nfunc(9, 3)\n// => [81, 6]\n\nfunc(10, 5)\n// => [100, 10]"
    ],
    "params": [
      {
        "name": "func",
        "type": "Function",
        "description": "The function to wrap.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new function."
    }
  },
  {
    "name": "overEvery",
    "category": "Util",
    "description": "Creates a function that checks if **all** of the `predicates` return\ntruthy when invoked with the arguments it receives.",
    "since": "4.0.0",
    "examples": [
      "const func = overEvery([Boolean, isFinite])\n\nfunc('1')\n// => true\n\nfunc(null)\n// => false\n\nfunc(NaN)\n// => false"
    ],
    "params": [],
    "returns": {
      "type": "Function",
      "description": "Returns the new function."
    }
  },
  {
    "name": "overSome",
    "category": "Util",
    "description": "Creates a function that checks if **any** of the `predicates` return\ntruthy when invoked with the arguments it receives.",
    "since": "4.0.0",
    "examples": [
      "const func = overSome([Boolean, isFinite])\n\nfunc('1')\n// => true\n\nfunc(null)\n// => true\n\nfunc(NaN)\n// => false"
    ],
    "params": [],
    "returns": {
      "type": "Function",
      "description": "Returns the new function."
    }
  },
  {
    "name": "pad",
    "category": "String",
    "description": "Pads `string` on the left and right sides if it's shorter than `length`.\nPadding characters are truncated if they can't be evenly divided by `length`.",
    "since": "3.0.0",
    "examples": [
      "pad('abc', 8)\n// => '  abc   '\n\npad('abc', 8, '_-')\n// => '_-abc_-_'\n\npad('abc', 2)\n// => 'abc'"
    ],
    "params": [
      {
        "name": "string",
        "type": "string",
        "description": "The string to pad.",
        "defaultValue": "''",
        "optional": true
      },
      {
        "name": "length",
        "type": "number",
        "description": "The padding length.",
        "defaultValue": "0",
        "optional": true
      },
      {
        "name": "chars",
        "type": "string",
        "description": "The string used as padding.",
        "defaultValue": "' '",
        "optional": true
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the padded string."
    }
  },
  {
    "name": "padEnd",
    "category": "String",
    "description": "Pads `string` on the right side if it's shorter than `length`. Padding\ncharacters are truncated if they exceed `length`.",
    "since": "4.0.0",
    "examples": [
      "padEnd('abc', 6)\n// => 'abc   '\n\npadEnd('abc', 6, '_-')\n// => 'abc_-_'\n\npadEnd('abc', 2)\n// => 'abc'"
    ],
    "params": [
      {
        "name": "string",
        "type": "string",
        "description": "The string to pad.",
        "defaultValue": "''",
        "optional": true
      },
      {
        "name": "length",
        "type": "number",
        "description": "The padding length.",
        "defaultValue": "0",
        "optional": true
      },
      {
        "name": "chars",
        "type": "string",
        "description": "The string used as padding.",
        "defaultValue": "' '",
        "optional": true
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the padded string."
    }
  },
  {
    "name": "padStart",
    "category": "String",
    "description": "Pads `string` on the left side if it's shorter than `length`. Padding\ncharacters are truncated if they exceed `length`.",
    "since": "4.0.0",
    "examples": [
      "padStart('abc', 6)\n// => '   abc'\n\npadStart('abc', 6, '_-')\n// => '_-_abc'\n\npadStart('abc', 2)\n// => 'abc'"
    ],
    "params": [
      {
        "name": "string",
        "type": "string",
        "description": "The string to pad.",
        "defaultValue": "''",
        "optional": true
      },
      {
        "name": "length",
        "type": "number",
        "description": "The padding length.",
        "defaultValue": "0",
        "optional": true
      },
      {
        "name": "chars",
        "type": "string",
        "description": "The string used as padding.",
        "defaultValue": "' '",
        "optional": true
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the padded string."
    }
  },
  {
    "name": "parseInt",
    "category": "String",
    "description": "Used to match leading and trailing whitespace.",
    "since": "1.1.0",
    "examples": ["parseInt('08')\n// => 8"],
    "params": [
      {
        "name": "string",
        "type": "string",
        "description": "The string to convert.",
        "optional": false
      },
      {
        "name": "radix",
        "type": "number",
        "description": "The radix to interpret `string` by.",
        "defaultValue": "10",
        "optional": true
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the converted integer."
    }
  },
  {
    "name": "partition",
    "category": "Collection",
    "description": "Creates an array of elements split into two groups, the first of which\ncontains elements `predicate` returns truthy for, the second of which\ncontains elements `predicate` returns falsey for. The predicate is\ninvoked with one argument: (value).",
    "since": "3.0.0",
    "examples": [
      "const users = [\n  { 'user': 'barney',  'age': 36, 'active': false },\n  { 'user': 'fred',    'age': 40, 'active': true },\n  { 'user': 'pebbles', 'age': 1,  'active': false }\n]\n\npartition(users, ({ active }) => active)\n// => objects for [['fred'], ['barney', 'pebbles']]"
    ],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "predicate",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the array of grouped elements."
    }
  },
  {
    "name": "pick",
    "category": "Object",
    "description": "Creates an object composed of the picked `object` properties.",
    "since": "0.1.0",
    "examples": ["const object = { 'a': 1, 'b': '2', 'c': 3 }\n\npick(object, ['a', 'c'])\n// => { 'a': 1, 'c': 3 }"],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The source object.",
        "optional": false
      },
      {
        "name": "paths",
        "type": "...(string|string[])",
        "description": "The property paths to pick.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns the new object."
    }
  },
  {
    "name": "pickBy",
    "category": "Object",
    "description": "Creates an object composed of the `object` properties `predicate` returns\ntruthy for. The predicate is invoked with two arguments: (value, key).",
    "since": "4.0.0",
    "examples": ["const object = { 'a': 1, 'b': '2', 'c': 3 }\n\npickBy(object, isNumber)\n// => { 'a': 1, 'c': 3 }"],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The source object.",
        "optional": false
      },
      {
        "name": "predicate",
        "type": "Function",
        "description": "The function invoked per property.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns the new object."
    }
  },
  {
    "name": "property",
    "category": "Util",
    "description": "Creates a function that returns the value at `path` of a given object.",
    "since": "2.4.0",
    "examples": [
      "const objects = [\n  { 'a': { 'b': 2 } },\n  { 'a': { 'b': 1 } }\n]\n\nmap(objects, property('a.b'))\n// => [2, 1]\n\nmap(sortBy(objects, property(['a', 'b'])), 'a.b')\n// => [1, 2]"
    ],
    "params": [
      {
        "name": "path",
        "type": "Array|string",
        "description": "The path of the property to get.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new accessor function."
    }
  },
  {
    "name": "propertyOf",
    "category": "Util",
    "description": "The opposite of `property`s method creates a function that returns\nthe value at a given path of `object`.",
    "since": "3.0.0",
    "examples": [
      "const array = [0, 1, 2]\nconst object = { 'a': array, 'b': array, 'c': array }\n\nmap(['a[2]', 'c[0]'], propertyOf(object))\n// => [2, 0]\n\nmap([['a', '2'], ['c', '0']], propertyOf(object))\n// => [2, 0]"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to query.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new accessor function."
    }
  },
  {
    "name": "pull",
    "category": "Array",
    "description": "Removes all given values from `array` using\n[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons.\n\n**Note:** Unlike `without`, this method mutates `array`. Use `remove`\nto remove elements from an array by predicate.",
    "since": "2.0.0",
    "examples": [
      "const array = ['a', 'b', 'c', 'a', 'b', 'c']\n\npull(array, 'a', 'c')\nconsole.log(array)\n// => ['b', 'b']"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to modify.",
        "optional": false
      },
      {
        "name": "values",
        "type": "...*",
        "description": "The values to remove.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns `array`."
    }
  },
  {
    "name": "pullAll",
    "category": "Array",
    "description": "This method is like `pull` except that it accepts an array of values to remove.\n\n**Note:** Unlike `difference`, this method mutates `array`.",
    "since": "4.0.0",
    "examples": [
      "const array = ['a', 'b', 'c', 'a', 'b', 'c']\n\npullAll(array, ['a', 'c'])\nconsole.log(array)\n// => ['b', 'b']"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to modify.",
        "optional": false
      },
      {
        "name": "values",
        "type": "Array",
        "description": "The values to remove.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns `array`."
    }
  },
  {
    "name": "pullAllBy",
    "category": "Array",
    "description": "This method is like `pullAll` except that it accepts `iteratee` which is\ninvoked for each element of `array` and `values` to generate the criterion\nby which they're compared. The iteratee is invoked with one argument: (value).\n\n**Note:** Unlike `differenceBy`, this method mutates `array`.",
    "since": "4.0.0",
    "examples": [
      "const array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }]\n\npullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x')\nconsole.log(array)\n// => [{ 'x': 2 }]"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to modify.",
        "optional": false
      },
      {
        "name": "values",
        "type": "Array",
        "description": "The values to remove.",
        "optional": false
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The iteratee invoked per element.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns `array`."
    }
  },
  {
    "name": "pullAllWith",
    "category": "Array",
    "description": "This method is like `pullAll` except that it accepts `comparator` which\nis invoked to compare elements of `array` to `values`. The comparator is\ninvoked with two arguments: (arrVal, othVal).\n\n**Note:** Unlike `differenceWith`, this method mutates `array`.",
    "since": "4.6.0",
    "examples": [
      "const array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }]\n\npullAllWith(array, [{ 'x': 3, 'y': 4 }], isEqual)\nconsole.log(array)\n// => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to modify.",
        "optional": false
      },
      {
        "name": "values",
        "type": "Array",
        "description": "The values to remove.",
        "optional": false
      },
      {
        "name": "comparator",
        "type": "Function",
        "description": "The comparator invoked per element.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns `array`."
    }
  },
  {
    "name": "pullAt",
    "category": "Array",
    "description": "Removes elements from `array` corresponding to `indexes` and returns an\narray of removed elements.\n\n**Note:** Unlike `at`, this method mutates `array`.",
    "since": "3.0.0",
    "examples": [
      "const array = ['a', 'b', 'c', 'd']\nconst pulled = pullAt(array, [1, 3])\n\nconsole.log(array)\n// => ['a', 'c']\n\nconsole.log(pulled)\n// => ['b', 'd']"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to modify.",
        "optional": false
      },
      {
        "name": "indexes",
        "type": "...(number|number[])",
        "description": "The indexes of elements to remove.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of removed elements."
    }
  },
  {
    "name": "random",
    "category": "Number",
    "description": "Built-in method references without a dependency on `root`.",
    "since": "0.7.0",
    "examples": [
      "random(0, 5)\n// => an integer between 0 and 5\n\nrandom(5)\n// => also an integer between 0 and 5\n\nrandom(5, true)\n// => a floating-point number between 0 and 5\n\nrandom(1.2, 5.2)\n// => a floating-point number between 1.2 and 5.2"
    ],
    "params": [
      {
        "name": "lower",
        "type": "number",
        "description": "The lower bound.",
        "defaultValue": "0",
        "optional": true
      },
      {
        "name": "upper",
        "type": "number",
        "description": "The upper bound.",
        "defaultValue": "1",
        "optional": true
      },
      {
        "name": "floating",
        "type": "boolean",
        "description": "Specify returning a floating-point number.",
        "optional": true
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the random number."
    }
  },
  {
    "name": "range",
    "category": "Util",
    "description": "Creates an array of numbers (positive and/or negative) progressing from\n`start` up to, but not including, `end`. A step of `-1` is used if a negative\n`start` is specified without an `end` or `step`. If `end` is not specified,\nit's set to `start`, and `start` is then set to `0`.\n\n**Note:** JavaScript follows the IEEE-754 standard for resolving\nfloating-point values which can produce unexpected results.",
    "since": "0.1.0",
    "examples": [
      "range(4)\n// => [0, 1, 2, 3]\n\nrange(-4)\n// => [0, -1, -2, -3]\n\nrange(1, 5)\n// => [1, 2, 3, 4]\n\nrange(0, 20, 5)\n// => [0, 5, 10, 15]\n\nrange(0, -4, -1)\n// => [0, -1, -2, -3]\n\nrange(1, 4, 0)\n// => [1, 1, 1]\n\nrange(0)\n// => []"
    ],
    "params": [
      {
        "name": "start",
        "type": "number",
        "description": "The start of the range.",
        "defaultValue": "0",
        "optional": true
      },
      {
        "name": "end",
        "type": "number",
        "description": "The end of the range.",
        "optional": false
      },
      {
        "name": "step",
        "type": "number",
        "description": "The value to increment or decrement by.",
        "defaultValue": "1",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the range of numbers."
    }
  },
  {
    "name": "rangeRight",
    "category": "Util",
    "description": "This method is like `range` except that it populates values in\ndescending order.",
    "since": "4.0.0",
    "examples": [
      "rangeRight(4)\n// => [3, 2, 1, 0]\n\nrangeRight(-4)\n// => [-3, -2, -1, 0]\n\nrangeRight(1, 5)\n// => [4, 3, 2, 1]\n\nrangeRight(0, 20, 5)\n// => [15, 10, 5, 0]\n\nrangeRight(0, -4, -1)\n// => [-3, -2, -1, 0]\n\nrangeRight(1, 4, 0)\n// => [1, 1, 1]\n\nrangeRight(0)\n// => []"
    ],
    "params": [
      {
        "name": "start",
        "type": "number",
        "description": "The start of the range.",
        "defaultValue": "0",
        "optional": true
      },
      {
        "name": "end",
        "type": "number",
        "description": "The end of the range.",
        "optional": false
      },
      {
        "name": "step",
        "type": "number",
        "description": "The value to increment or decrement by.",
        "defaultValue": "1",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the range of numbers."
    }
  },
  {
    "name": "reduce",
    "category": "Collection",
    "description": "Reduces `collection` to a value which is the accumulated result of running\neach element in `collection` thru `iteratee`, where each successive\ninvocation is supplied the return value of the previous. If `accumulator`\nis not given, the first element of `collection` is used as the initial\nvalue. The iteratee is invoked with four arguments:\n(accumulator, value, index|key, collection).\n\nMany lodash methods are guarded to work as iteratees for methods like\n`reduce`, `reduceRight`, and `transform`.\n\nThe guarded methods are:\n`assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\nand `sortBy`",
    "since": "0.1.0",
    "examples": [
      "reduce([1, 2], (sum, n) => sum + n, 0)\n// => 3\n\nreduce({ 'a': 1, 'b': 2, 'c': 1 }, (result, value, key) => {\n  (result[value] || (result[value] = [])).push(key)\n  return result\n}, {})\n// => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)"
    ],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      },
      {
        "name": "accumulator",
        "type": "*",
        "description": "The initial value.",
        "optional": true
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the accumulated value."
    }
  },
  {
    "name": "reduceRight",
    "category": "Collection",
    "description": "This method is like `reduce` except that it iterates over elements of\n`collection` from right to left.",
    "since": "0.1.0",
    "examples": [
      "const array = [[0, 1], [2, 3], [4, 5]]\n\nreduceRight(array, (flattened, other) => flattened.concat(other), [])\n// => [4, 5, 2, 3, 0, 1]"
    ],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      },
      {
        "name": "accumulator",
        "type": "*",
        "description": "The initial value.",
        "optional": true
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the accumulated value."
    }
  },
  {
    "name": "reject",
    "category": "Collection",
    "description": "The opposite of `filter` this method returns the elements of `collection`\nthat `predicate` does **not** return truthy for.",
    "since": "0.1.0",
    "examples": [
      "const users = [\n  { 'user': 'barney', 'active': true },\n  { 'user': 'fred',   'active': false }\n]\n\nreject(users, ({ active }) => active)\n// => objects for ['fred']"
    ],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object",
        "description": "The collection to iterate over.",
        "optional": false
      },
      {
        "name": "predicate",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new filtered array."
    }
  },
  {
    "name": "remove",
    "category": "Array",
    "description": "Removes all elements from `array` that `predicate` returns truthy for\nand returns an array of the removed elements. The predicate is invoked\nwith three arguments: (value, index, array).\n\n**Note:** Unlike `filter`, this method mutates `array`. Use `pull`\nto pull elements from an array by value.",
    "since": "2.0.0",
    "examples": [
      "const array = [1, 2, 3, 4]\nconst evens = remove(array, n => n % 2 == 0)\n\nconsole.log(array)\n// => [1, 3]\n\nconsole.log(evens)\n// => [2, 4]"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to modify.",
        "optional": false
      },
      {
        "name": "predicate",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of removed elements."
    }
  },
  {
    "name": "repeat",
    "category": "String",
    "description": "Repeats the given string `n` times.",
    "since": "3.0.0",
    "examples": ["repeat('*', 3)\n// => '***'\n\nrepeat('abc', 2)\n// => 'abcabc'\n\nrepeat('abc', 0)\n// => ''"],
    "params": [
      {
        "name": "string",
        "type": "string",
        "description": "The string to repeat.",
        "defaultValue": "''",
        "optional": true
      },
      {
        "name": "n",
        "type": "number",
        "description": "The number of times to repeat the string.",
        "defaultValue": "1",
        "optional": true
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the repeated string."
    }
  },
  {
    "name": "replace",
    "category": "String",
    "description": "Replaces matches for `pattern` in `string` with `replacement`.\n\n**Note:** This method is based on\n[`String#replace`](https://mdn.io/String/replace).",
    "since": "4.0.0",
    "examples": ["replace('Hi Fred', 'Fred', 'Barney')\n// => 'Hi Barney'"],
    "params": [
      {
        "name": "string",
        "type": "string",
        "description": "The string to modify.",
        "defaultValue": "''",
        "optional": true
      },
      {
        "name": "pattern",
        "type": "RegExp|string",
        "description": "The pattern to replace.",
        "optional": false
      },
      {
        "name": "replacement",
        "type": "Function|string",
        "description": "The match replacement.",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the modified string."
    }
  },
  {
    "name": "result",
    "category": "Object",
    "description": "This method is like `get` except that if the resolved value is a\nfunction it's invoked with the `this` binding of its parent object and\nits result is returned.",
    "since": "0.1.0",
    "examples": [
      "const object = { 'a': [{ 'b': { 'c1': 3, 'c2': () => 4 } }] }\n\nresult(object, 'a[0].b.c1')\n// => 3\n\nresult(object, 'a[0].b.c2')\n// => 4\n\nresult(object, 'a[0].b.c3', 'default')\n// => 'default'\n\nresult(object, 'a[0].b.c3', () => 'default')\n// => 'default'"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to query.",
        "optional": false
      },
      {
        "name": "path",
        "type": "Array|string",
        "description": "The path of the property to resolve.",
        "optional": false
      },
      {
        "name": "defaultValue",
        "type": "*",
        "description": "The value returned for `undefined` resolved values.",
        "optional": true
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the resolved value."
    }
  },
  {
    "name": "round",
    "category": "Math",
    "description": "Computes `number` rounded to `precision`.",
    "since": "3.10.0",
    "examples": ["round(4.006)\n// => 4\n\nround(4.006, 2)\n// => 4.01\n\nround(4060, -2)\n// => 4100"],
    "params": [
      {
        "name": "number",
        "type": "number",
        "description": "The number to round.",
        "optional": false
      },
      {
        "name": "precision",
        "type": "number",
        "description": "The precision to round to.",
        "defaultValue": "0",
        "optional": true
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the rounded number."
    }
  },
  {
    "name": "sample",
    "category": "Array",
    "description": "Gets a random element from `array`.",
    "since": "2.0.0",
    "examples": ["sample([1, 2, 3, 4])\n// => 2"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to sample.",
        "optional": false
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the random element."
    }
  },
  {
    "name": "sampleSize",
    "category": "Array",
    "description": "Gets `n` random elements at unique keys from `array` up to the\nsize of `array`.",
    "since": "4.0.0",
    "examples": ["sampleSize([1, 2, 3], 2)\n// => [3, 1]\n\nsampleSize([1, 2, 3], 4)\n// => [2, 3, 1]"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to sample.",
        "optional": false
      },
      {
        "name": "n",
        "type": "number",
        "description": "The number of elements to sample.",
        "defaultValue": "1",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the random elements."
    }
  },
  {
    "name": "set",
    "category": "Object",
    "description": "Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\nit's created. Arrays are created for missing index properties while objects\nare created for all other missing properties. Use `setWith` to customize\n`path` creation.\n\n**Note:** This method mutates `object`.",
    "since": "3.7.0",
    "examples": [
      "const object = { 'a': [{ 'b': { 'c': 3 } }] }\n\nset(object, 'a[0].b.c', 4)\nconsole.log(object.a[0].b.c)\n// => 4\n\nset(object, ['x', '0', 'y', 'z'], 5)\nconsole.log(object.x[0].y.z)\n// => 5"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to modify.",
        "optional": false
      },
      {
        "name": "path",
        "type": "Array|string",
        "description": "The path of the property to set.",
        "optional": false
      },
      {
        "name": "value",
        "type": "*",
        "description": "The value to set.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns `object`."
    }
  },
  {
    "name": "setWith",
    "category": "Object",
    "description": "This method is like `set` except that it accepts `customizer` which is\ninvoked to produce the objects of `path`. If `customizer` returns `undefined`\npath creation is handled by the method instead. The `customizer` is invoked\nwith three arguments: (nsValue, key, nsObject).\n\n**Note:** This method mutates `object`.",
    "since": "4.0.0",
    "examples": ["const object = {}\n\nsetWith(object, '[0][1]', 'a', Object)\n// => { '0': { '1': 'a' } }"],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to modify.",
        "optional": false
      },
      {
        "name": "path",
        "type": "Array|string",
        "description": "The path of the property to set.",
        "optional": false
      },
      {
        "name": "value",
        "type": "*",
        "description": "The value to set.",
        "optional": false
      },
      {
        "name": "customizer",
        "type": "Function",
        "description": "The function to customize assigned values.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns `object`."
    }
  },
  {
    "name": "shuffle",
    "category": "Array",
    "description": "Creates an array of shuffled values, using a version of the\n[Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).",
    "since": "0.1.0",
    "examples": ["shuffle([1, 2, 3, 4])\n// => [4, 1, 3, 2]"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to shuffle.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new shuffled array."
    }
  },
  {
    "name": "size",
    "category": "Collection",
    "description": "`Object#toString` result references.",
    "since": "0.1.0",
    "examples": ["size([1, 2, 3])\n// => 3\n\nsize({ 'a': 1, 'b': 2 })\n// => 2\n\nsize('pebbles')\n// => 7"],
    "params": [
      {
        "name": "collection",
        "type": "Array|Object|string",
        "description": "The collection to inspect.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the collection size."
    }
  },
  {
    "name": "slice",
    "category": "Array",
    "description": "Creates a slice of `array` from `start` up to, but not including, `end`.\n\n**Note:** This method is used instead of\n[`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\nreturned.",
    "since": "3.0.0",
    "examples": ["var array = [1, 2, 3, 4]\n\n_.slice(array, 2)\n// => [3, 4]"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to slice.",
        "optional": false
      },
      {
        "name": "start",
        "type": "number",
        "description": "The start position. A negative index will be treated as an offset from the end.",
        "defaultValue": "0",
        "optional": true
      },
      {
        "name": "end",
        "type": "number",
        "description": "The end position. A negative index will be treated as an offset from the end.",
        "defaultValue": "array.length",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the slice of `array`."
    }
  },
  {
    "name": "snakeCase",
    "category": "String",
    "description": "Converts `string` to\n[snake case](https://en.wikipedia.org/wiki/Snake_case).",
    "since": "3.0.0",
    "examples": [
      "snakeCase('Foo Bar')\n// => 'foo_bar'\n\nsnakeCase('fooBar')\n// => 'foo_bar'\n\nsnakeCase('--FOO-BAR--')\n// => 'foo_bar'\n\nsnakeCase('foo2bar')\n// => 'foo_2_bar'"
    ],
    "params": [
      {
        "name": "string",
        "type": "string",
        "description": "The string to convert.",
        "defaultValue": "''",
        "optional": true
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the snake cased string."
    }
  },
  {
    "name": "some",
    "category": "Array",
    "description": "Checks if `predicate` returns truthy for **any** element of `array`.\nIteration is stopped once `predicate` returns truthy. The predicate is\ninvoked with three arguments: (value, index, array).",
    "since": "5.0.0",
    "examples": ["some([null, 0, 'yes', false], Boolean)\n// => true"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to iterate over.",
        "optional": false
      },
      {
        "name": "predicate",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if any element passes the predicate check,"
    }
  },
  {
    "name": "someValue",
    "category": "Object",
    "description": "Checks if `predicate` returns truthy for **any** element of `object`.\nIteration is stopped once `predicate` returns truthy. The predicate is\ninvoked with three arguments: (value, key, object).",
    "since": "5.0.0",
    "examples": ["someValues({ 'a': 0, 'b': 'yes', 'c': false }, Boolean)\n// => true"],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to iterate over.",
        "optional": false
      },
      {
        "name": "predicate",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if any element passes the predicate check,"
    }
  },
  {
    "name": "sortedIndex",
    "category": "Array",
    "description": "Uses a binary search to determine the lowest index at which `value`\nshould be inserted into `array` in order to maintain its sort order.",
    "since": "0.1.0",
    "examples": ["sortedIndex([30, 50], 40)\n// => 1"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The sorted array to inspect.",
        "optional": false
      },
      {
        "name": "value",
        "type": "*",
        "description": "The value to evaluate.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the index at which `value` should be inserted"
    }
  },
  {
    "name": "sortedIndexBy",
    "category": "Array",
    "description": "This method is like `sortedIndex` except that it accepts `iteratee`\nwhich is invoked for `value` and each element of `array` to compute their\nsort ranking. The iteratee is invoked with one argument: (value).",
    "since": "4.0.0",
    "examples": [
      "const objects = [{ 'n': 4 }, { 'n': 5 }]\n\nsortedIndexBy(objects, { 'n': 4 }, ({ n }) => n)\n// => 0"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The sorted array to inspect.",
        "optional": false
      },
      {
        "name": "value",
        "type": "*",
        "description": "The value to evaluate.",
        "optional": false
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The iteratee invoked per element.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the index at which `value` should be inserted"
    }
  },
  {
    "name": "sortedIndexOf",
    "category": "Array",
    "description": "This method is like `indexOf` except that it performs a binary\nsearch on a sorted `array`.",
    "since": "4.0.0",
    "examples": ["sortedIndexOf([4, 5, 5, 5, 6], 5)\n// => 1"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to inspect.",
        "optional": false
      },
      {
        "name": "value",
        "type": "*",
        "description": "The value to search for.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the index of the matched value, else `-1`."
    }
  },
  {
    "name": "sortedLastIndex",
    "category": "Array",
    "description": "This method is like `sortedIndex` except that it returns the highest\nindex at which `value` should be inserted into `array` in order to\nmaintain its sort order.",
    "since": "3.0.0",
    "examples": ["sortedLastIndex([4, 5, 5, 5, 6], 5)\n// => 4"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The sorted array to inspect.",
        "optional": false
      },
      {
        "name": "value",
        "type": "*",
        "description": "The value to evaluate.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the index at which `value` should be inserted"
    }
  },
  {
    "name": "sortedLastIndexBy",
    "category": "Array",
    "description": "This method is like `sortedLastIndex` except that it accepts `iteratee`\nwhich is invoked for `value` and each element of `array` to compute their\nsort ranking. The iteratee is invoked with one argument: (value).",
    "since": "4.0.0",
    "examples": [
      "const objects = [{ 'n': 4 }, { 'n': 5 }]\n\nsortedLastIndexBy(objects, { 'n': 4 }, ({ n }) => n)\n// => 1"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The sorted array to inspect.",
        "optional": false
      },
      {
        "name": "value",
        "type": "*",
        "description": "The value to evaluate.",
        "optional": false
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The iteratee invoked per element.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the index at which `value` should be inserted"
    }
  },
  {
    "name": "sortedLastIndexOf",
    "category": "Array",
    "description": "This method is like `lastIndexOf` except that it performs a binary\nsearch on a sorted `array`.",
    "since": "4.0.0",
    "examples": ["sortedLastIndexOf([4, 5, 5, 5, 6], 5)\n// => 3"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to inspect.",
        "optional": false
      },
      {
        "name": "value",
        "type": "*",
        "description": "The value to search for.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the index of the matched value, else `-1`."
    }
  },
  {
    "name": "sortedUniq",
    "category": "Array",
    "description": "This method is like `uniq` except that it only works\nfor sorted arrays.\nIf the input array is known to be sorted `sortedUniq` is\nfaster than `uniq`.",
    "since": "4.0.0",
    "examples": ["sortedUniq([1, 1, 2])\n// => [1, 2]"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to inspect.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new duplicate free array."
    }
  },
  {
    "name": "sortedUniqBy",
    "category": "Array",
    "description": "This method is like `uniqBy` except that it's designed and optimized\nfor sorted arrays.",
    "since": "4.0.0",
    "examples": ["sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor)\n// => [1.1, 2.3]"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to inspect.",
        "optional": false
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The iteratee invoked per element.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new duplicate free array."
    }
  },
  {
    "name": "split",
    "category": "String",
    "description": "Used as references for the maximum length and index of an array.",
    "since": "4.0.0",
    "examples": ["split('a-b-c', '-', 2)\n// => ['a', 'b']"],
    "params": [
      {
        "name": "string",
        "type": "string",
        "description": "The string to split.",
        "defaultValue": "''",
        "optional": true
      },
      {
        "name": "separator",
        "type": "RegExp|string",
        "description": "The separator pattern to split by.",
        "optional": false
      },
      {
        "name": "limit",
        "type": "number",
        "description": "The length to truncate results to.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the string segments."
    }
  },
  {
    "name": "startCase",
    "category": "String",
    "description": "Converts `string` to\n[start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).",
    "since": "3.1.0",
    "examples": [
      "startCase('--foo-bar--')\n// => 'Foo Bar'\n\nstartCase('fooBar')\n// => 'Foo Bar'\n\nstartCase('__FOO_BAR__')\n// => 'FOO BAR'"
    ],
    "params": [
      {
        "name": "string",
        "type": "string",
        "description": "The string to convert.",
        "defaultValue": "''",
        "optional": true
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the start cased string."
    }
  },
  {
    "name": "startsWith",
    "category": "String",
    "description": "Checks if `string` starts with the given target string.",
    "since": "3.0.0",
    "examples": [
      "startsWith('abc', 'a')\n// => true\n\nstartsWith('abc', 'b')\n// => false\n\nstartsWith('abc', 'b', 1)\n// => true"
    ],
    "params": [
      {
        "name": "string",
        "type": "string",
        "description": "The string to inspect.",
        "defaultValue": "''",
        "optional": true
      },
      {
        "name": "target",
        "type": "string",
        "description": "The string to search for.",
        "optional": true
      },
      {
        "name": "position",
        "type": "number",
        "description": "The position to search from.",
        "defaultValue": "0",
        "optional": true
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if `string` starts with `target`,"
    }
  },
  {
    "name": "subtract",
    "category": "Math",
    "description": "Subtract two numbers.",
    "since": "4.0.0",
    "examples": ["subtract(6, 4)\n// => 2"],
    "params": [
      {
        "name": "minuend",
        "type": "number",
        "description": "The first number in a subtraction.",
        "optional": false
      },
      {
        "name": "subtrahend",
        "type": "number",
        "description": "The second number in a subtraction.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the difference."
    }
  },
  {
    "name": "sum",
    "category": "Math",
    "description": "Computes the sum of the values in `array`.",
    "since": "3.4.0",
    "examples": ["sum([4, 2, 8, 6])\n// => 20"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to iterate over.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the sum."
    }
  },
  {
    "name": "sumBy",
    "category": "Math",
    "description": "This method is like `sum` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the value to be summed.\nThe iteratee is invoked with one argument: (value).",
    "since": "4.0.0",
    "examples": [
      "const objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }]\n\nsumBy(objects, ({ n }) => n)\n// => 20"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The iteratee invoked per element.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the sum."
    }
  },
  {
    "name": "tail",
    "category": "Array",
    "description": "Gets all but the first element of `array`.",
    "since": "4.0.0",
    "examples": ["tail([1, 2, 3])\n// => [2, 3]"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to query.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the slice of `array`."
    }
  },
  {
    "name": "take",
    "category": "Array",
    "description": "Creates a slice of `array` with `n` elements taken from the beginning.",
    "since": "0.1.0",
    "examples": [
      "take([1, 2, 3])\n// => [1]\n\ntake([1, 2, 3], 2)\n// => [1, 2]\n\ntake([1, 2, 3], 5)\n// => [1, 2, 3]\n\ntake([1, 2, 3], 0)\n// => []"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to query.",
        "optional": false
      },
      {
        "name": "n",
        "type": "number",
        "description": "The number of elements to take.",
        "defaultValue": "1",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the slice of `array`."
    }
  },
  {
    "name": "takeRight",
    "category": "Array",
    "description": "Creates a slice of `array` with `n` elements taken from the end.",
    "since": "3.0.0",
    "examples": [
      "takeRight([1, 2, 3])\n// => [3]\n\ntakeRight([1, 2, 3], 2)\n// => [2, 3]\n\ntakeRight([1, 2, 3], 5)\n// => [1, 2, 3]\n\ntakeRight([1, 2, 3], 0)\n// => []"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to query.",
        "optional": false
      },
      {
        "name": "n",
        "type": "number",
        "description": "The number of elements to take.",
        "defaultValue": "1",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the slice of `array`."
    }
  },
  {
    "name": "takeRightWhile",
    "category": "Array",
    "description": "Creates a slice of `array` with elements taken from the end. Elements are\ntaken until `predicate` returns falsey. The predicate is invoked with\nthree arguments: (value, index, array).",
    "since": "3.0.0",
    "examples": [
      "const users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': true },\n  { 'user': 'pebbles', 'active': true }\n]\n\ntakeRightWhile(users, ({ active }) => active)\n// => objects for ['fred', 'pebbles']"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to query.",
        "optional": false
      },
      {
        "name": "predicate",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the slice of `array`."
    }
  },
  {
    "name": "takeWhile",
    "category": "Array",
    "description": "Creates a slice of `array` with elements taken from the beginning. Elements\nare taken until `predicate` returns falsey. The predicate is invoked with\nthree arguments: (value, index, array).",
    "since": "3.0.0",
    "examples": [
      "const users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': true },\n  { 'user': 'pebbles', 'active': false }\n]\n\ntakeWhile(users, ({ active }) => active)\n// => objects for ['barney', 'fred']"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to query.",
        "optional": false
      },
      {
        "name": "predicate",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the slice of `array`."
    }
  },
  {
    "name": "throttle",
    "category": "Function",
    "description": "Creates a throttled function that only invokes `func` at most once per\nevery `wait` milliseconds (or once per browser frame). The throttled function\ncomes with a `cancel` method to cancel delayed `func` invocations and a\n`flush` method to immediately invoke them. Provide `options` to indicate\nwhether `func` should be invoked on the leading and/or trailing edge of the\n`wait` timeout. The `func` is invoked with the last arguments provided to the\nthrottled function. Subsequent calls to the throttled function return the\nresult of the last `func` invocation.\n\n**Note:** If `leading` and `trailing` options are `true`, `func` is\ninvoked on the trailing edge of the timeout only if the throttled function\nis invoked more than once during the `wait` timeout.\n\nIf `wait` is `0` and `leading` is `false`, `func` invocation is deferred\nuntil the next tick, similar to `setTimeout` with a timeout of `0`.\n\nIf `wait` is omitted in an environment with `requestAnimationFrame`, `func`\ninvocation will be deferred until the next frame is drawn (typically about\n16ms).\n\nSee [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\nfor details over the differences between `throttle` and `debounce`.",
    "since": "0.1.0",
    "examples": [
      "// Avoid excessively updating the position while scrolling.\njQuery(window).on('scroll', throttle(updatePosition, 100))\n\n// Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\nconst throttled = throttle(renewToken, 300000, { 'trailing': false })\njQuery(element).on('click', throttled)\n\n// Cancel the trailing throttled invocation.\njQuery(window).on('popstate', throttled.cancel)"
    ],
    "params": [
      {
        "name": "func",
        "type": "Function",
        "description": "The function to throttle.",
        "optional": false
      },
      {
        "name": "options",
        "type": "Object",
        "description": "The options object.",
        "defaultValue": "{}",
        "optional": true
      }
    ],
    "returns": {
      "type": "Function",
      "description": "Returns the new throttled function."
    }
  },
  {
    "name": "times",
    "category": "Util",
    "description": "Used as references for various `Number` constants.",
    "since": "0.1.0",
    "examples": ["times(3, String)\n// => ['0', '1', '2']\n\n times(4, () => 0)\n// => [0, 0, 0, 0]"],
    "params": [
      {
        "name": "n",
        "type": "number",
        "description": "The number of times to invoke `iteratee`.",
        "optional": false
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the array of results."
    }
  },
  {
    "name": "toArray",
    "category": "Lang",
    "description": "`Object#toString` result references.",
    "since": "0.1.0",
    "examples": [
      "toArray({ 'a': 1, 'b': 2 })\n// => [1, 2]\n\ntoArray('abc')\n// => ['a', 'b', 'c']\n\ntoArray(1)\n// => []\n\ntoArray(null)\n// => []"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to convert.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the converted array."
    }
  },
  {
    "name": "toFinite",
    "category": "Lang",
    "description": "Used as references for various `Number` constants.",
    "since": "4.12.0",
    "examples": [
      "toFinite(3.2)\n// => 3.2\n\ntoFinite(Number.MIN_VALUE)\n// => 5e-324\n\ntoFinite(Infinity)\n// => 1.7976931348623157e+308\n\ntoFinite('3.2')\n// => 3.2"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to convert.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the converted number."
    }
  },
  {
    "name": "toInteger",
    "category": "Lang",
    "description": "Converts `value` to an integer.\n\n**Note:** This method is loosely based on\n[`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).",
    "since": "4.0.0",
    "examples": [
      "toInteger(3.2)\n// => 3\n\ntoInteger(Number.MIN_VALUE)\n// => 0\n\ntoInteger(Infinity)\n// => 1.7976931348623157e+308\n\ntoInteger('3.2')\n// => 3"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to convert.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the converted integer."
    }
  },
  {
    "name": "toLength",
    "category": "Lang",
    "description": "Used as references for the maximum length and index of an array.",
    "since": "4.0.0",
    "examples": [
      "toLength(3.2)\n// => 3\n\ntoLength(Number.MIN_VALUE)\n// => 0\n\ntoLength(Infinity)\n// => 4294967295\n\ntoLength('3.2')\n// => 3"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to convert.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the converted integer."
    }
  },
  {
    "name": "toNumber",
    "category": "Lang",
    "description": "Used as references for various `Number` constants.",
    "since": "4.0.0",
    "examples": [
      "toNumber(3.2)\n// => 3.2\n\ntoNumber(Number.MIN_VALUE)\n// => 5e-324\n\ntoNumber(Infinity)\n// => Infinity\n\ntoNumber('3.2')\n// => 3.2"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to process.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the number."
    }
  },
  {
    "name": "toPath",
    "category": "Util",
    "description": "Converts `value` to a property path array.",
    "since": "4.0.0",
    "examples": ["toPath('a.b.c')\n// => ['a', 'b', 'c']\n\ntoPath('a[0].b.c')\n// => ['a', '0', 'b', 'c']"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to convert.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new property path array."
    }
  },
  {
    "name": "toPlainObject",
    "category": "Lang",
    "description": "Converts `value` to a plain object flattening inherited enumerable string\nkeyed properties of `value` to own properties of the plain object.",
    "since": "3.0.0",
    "examples": [
      "function Foo() {\n  this.b = 2\n}\n\nFoo.prototype.c = 3\n\nassign({ 'a': 1 }, new Foo)\n// => { 'a': 1, 'b': 2 }\n\nassign({ 'a': 1 }, toPlainObject(new Foo))\n// => { 'a': 1, 'b': 2, 'c': 3 }"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to convert.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns the converted plain object."
    }
  },
  {
    "name": "toSafeInteger",
    "category": "Lang",
    "description": "Used as references for various `Number` constants.",
    "since": "4.0.0",
    "examples": [
      "toSafeInteger(3.2)\n// => 3\n\ntoSafeInteger(Number.MIN_VALUE)\n// => 0\n\ntoSafeInteger(Infinity)\n// => 9007199254740991\n\ntoSafeInteger('3.2')\n// => 3"
    ],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to convert.",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "Returns the converted integer."
    }
  },
  {
    "name": "toString",
    "category": "Lang",
    "description": "Used as references for various `Number` constants.",
    "since": "4.0.0",
    "examples": ["toString(null)\n// => ''\n\ntoString(-0)\n// => '-0'\n\ntoString([1, 2, 3])\n// => '1,2,3'"],
    "params": [
      {
        "name": "value",
        "type": "*",
        "description": "The value to convert.",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the converted string."
    }
  },
  {
    "name": "transform",
    "category": "Object",
    "description": "An alternative to `reduce` this method transforms `object` to a new\n`accumulator` object which is the result of running each of its own\nenumerable string keyed properties thru `iteratee`, with each invocation\npotentially mutating the `accumulator` object. If `accumulator` is not\nprovided, a new object with the same `[[Prototype]]` will be used. The\niteratee is invoked with four arguments: (accumulator, value, key, object).\nIteratee functions may exit iteration early by explicitly returning `false`.",
    "since": "1.3.0",
    "examples": [
      "transform([2, 3, 4], (result, n) => {\n  result.push(n *= n)\n  return n % 2 == 0\n}, [])\n// => [4, 9]\n\ntransform({ 'a': 1, 'b': 2, 'c': 1 }, (result, value, key) => {\n  (result[value] || (result[value] = [])).push(key)\n}, {})\n// => { '1': ['a', 'c'], '2': ['b'] }"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to iterate over.",
        "optional": false
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The function invoked per iteration.",
        "optional": false
      },
      {
        "name": "accumulator",
        "type": "*",
        "description": "The custom accumulator value.",
        "optional": true
      }
    ],
    "returns": {
      "type": "*",
      "description": "Returns the accumulated value."
    }
  },
  {
    "name": "trim",
    "category": "String",
    "description": "Removes leading and trailing whitespace or specified characters from `string`.",
    "since": "3.0.0",
    "examples": ["trim('  abc  ')\n// => 'abc'\n\ntrim('-_-abc-_-', '_-')\n// => 'abc'"],
    "params": [
      {
        "name": "string",
        "type": "string",
        "description": "The string to trim.",
        "defaultValue": "''",
        "optional": true
      },
      {
        "name": "chars",
        "type": "string",
        "description": "The characters to trim.",
        "defaultValue": "whitespace",
        "optional": true
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the trimmed string."
    }
  },
  {
    "name": "trimEnd",
    "category": "String",
    "description": "Removes trailing whitespace or specified characters from `string`.",
    "since": "4.0.0",
    "examples": ["trimEnd('  abc  ')\n// => '  abc'\n\ntrimEnd('-_-abc-_-', '_-')\n// => '-_-abc'"],
    "params": [
      {
        "name": "string",
        "type": "string",
        "description": "The string to trim.",
        "defaultValue": "''",
        "optional": true
      },
      {
        "name": "chars",
        "type": "string",
        "description": "The characters to trim.",
        "defaultValue": "whitespace",
        "optional": true
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the trimmed string."
    }
  },
  {
    "name": "trimStart",
    "category": "String",
    "description": "Removes leading whitespace or specified characters from `string`.",
    "since": "4.0.0",
    "examples": ["trimStart('  abc  ')\n// => 'abc  '\n\ntrimStart('-_-abc-_-', '_-')\n// => 'abc-_-'"],
    "params": [
      {
        "name": "string",
        "type": "string",
        "description": "The string to trim.",
        "defaultValue": "''",
        "optional": true
      },
      {
        "name": "chars",
        "type": "string",
        "description": "The characters to trim.",
        "defaultValue": "whitespace",
        "optional": true
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the trimmed string."
    }
  },
  {
    "name": "truncate",
    "category": "String",
    "description": "Used as default options for `truncate`.",
    "since": "4.0.0",
    "examples": [
      "truncate('hi-diddly-ho there, neighborino')\n// => 'hi-diddly-ho there, neighbo...'\n\ntruncate('hi-diddly-ho there, neighborino', {\n  'length': 24,\n  'separator': ' '\n})\n// => 'hi-diddly-ho there,...'\n\ntruncate('hi-diddly-ho there, neighborino', {\n  'length': 24,\n  'separator': /,? +/\n})\n// => 'hi-diddly-ho there...'\n\ntruncate('hi-diddly-ho there, neighborino', {\n  'omission': ' [...]'\n})\n// => 'hi-diddly-ho there, neig [...]'"
    ],
    "params": [
      {
        "name": "string",
        "type": "string",
        "description": "The string to truncate.",
        "defaultValue": "''",
        "optional": true
      },
      {
        "name": "options",
        "type": "Object",
        "description": "The options object.",
        "defaultValue": "{}",
        "optional": true
      },
      {
        "name": "options.length",
        "type": "number",
        "description": "The maximum string length.",
        "defaultValue": "30",
        "optional": true
      },
      {
        "name": "options.omission",
        "type": "string",
        "description": "The string to indicate text is omitted.",
        "defaultValue": "'...'",
        "optional": true
      },
      {
        "name": "options.separator",
        "type": "RegExp|string",
        "description": "The separator pattern to truncate to.",
        "optional": true
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the truncated string."
    }
  },
  {
    "name": "unescape",
    "category": "String",
    "description": "Used to map HTML entities to characters.",
    "since": "0.6.0",
    "examples": ["unescape('fred, barney, &amp; pebbles')\n// => 'fred, barney, & pebbles'"],
    "params": [
      {
        "name": "string",
        "type": "string",
        "description": "The string to unescape.",
        "defaultValue": "''",
        "optional": true
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the unescaped string."
    }
  },
  {
    "name": "union",
    "category": "Array",
    "description": "Creates an array of unique values, in order, from all given arrays using\n[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons.",
    "since": "0.1.0",
    "examples": ["union([2, 3], [1, 2])\n// => [2, 3, 1]"],
    "params": [
      {
        "name": "arrays",
        "type": "...Array",
        "description": "The arrays to inspect.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of combined values."
    }
  },
  {
    "name": "unionBy",
    "category": "Array",
    "description": "This method is like `union` except that it accepts `iteratee` which is\ninvoked for each element of each `arrays` to generate the criterion by\nwhich uniqueness is computed. Result values are chosen from the first\narray in which the value occurs. The iteratee is invoked with one argument:\n(value).",
    "since": "4.0.0",
    "examples": ["unionBy([2.1], [1.2, 2.3], Math.floor)\n// => [2.1, 1.2]"],
    "params": [
      {
        "name": "arrays",
        "type": "...Array",
        "description": "The arrays to inspect.",
        "optional": true
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The iteratee invoked per element.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of combined values."
    }
  },
  {
    "name": "unionWith",
    "category": "Array",
    "description": "This method is like `union` except that it accepts `comparator` which\nis invoked to compare elements of `arrays`. Result values are chosen from\nthe first array in which the value occurs. The comparator is invoked\nwith two arguments: (arrVal, othVal).",
    "since": "4.0.0",
    "examples": [
      "const objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\nconst others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }]\n\nunionWith(objects, others, isEqual)\n// => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]"
    ],
    "params": [
      {
        "name": "arrays",
        "type": "...Array",
        "description": "The arrays to inspect.",
        "optional": true
      },
      {
        "name": "comparator",
        "type": "Function",
        "description": "The comparator invoked per element.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of combined values."
    }
  },
  {
    "name": "uniq",
    "category": "Array",
    "description": "Creates a duplicate-free version of an array, using\n[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons, in which only the first occurrence of each element\nis kept. The order of result values is determined by the order they occur\nin the array.",
    "since": "0.1.0",
    "examples": ["uniq([2, 1, 2])\n// => [2, 1]"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to inspect.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new duplicate free array."
    }
  },
  {
    "name": "uniqBy",
    "category": "Array",
    "description": "This method is like `uniq` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the criterion by which\nuniqueness is computed. The order of result values is determined by the\norder they occur in the array. The iteratee is invoked with one argument:\n(value).",
    "since": "4.0.0",
    "examples": ["uniqBy([2.1, 1.2, 2.3], Math.floor)\n// => [2.1, 1.2]"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to inspect.",
        "optional": false
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The iteratee invoked per element.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new duplicate free array."
    }
  },
  {
    "name": "uniqWith",
    "category": "Array",
    "description": "This method is like `uniq` except that it accepts `comparator` which\nis invoked to compare elements of `array`. The order of result values is\ndetermined by the order they occur in the array. The comparator is invoked\nwith two arguments: (arrVal, othVal).",
    "since": "4.0.0",
    "examples": [
      "const objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }]\n\nuniqWith(objects, isEqual)\n// => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to inspect.",
        "optional": false
      },
      {
        "name": "comparator",
        "type": "Function",
        "description": "The comparator invoked per element.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new duplicate free array."
    }
  },
  {
    "name": "uniqueId",
    "category": "Util",
    "description": "Used to generate unique IDs.",
    "since": "0.1.0",
    "examples": ["uniqueId('contact_')\n// => 'contact_104'\n\nuniqueId()\n// => '105'"],
    "params": [
      {
        "name": "prefix",
        "type": "string",
        "description": "The value to prefix the ID with.",
        "defaultValue": "''",
        "optional": true
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the unique ID."
    }
  },
  {
    "name": "unset",
    "category": "Object",
    "description": "Removes the property at `path` of `object`.\n\n**Note:** This method mutates `object`.",
    "since": "4.0.0",
    "examples": [
      "const object = { 'a': [{ 'b': { 'c': 7 } }] }\nunset(object, 'a[0].b.c')\n// => true\n\nconsole.log(object)\n// => { 'a': [{ 'b': {} }] }\n\nunset(object, ['a', '0', 'b', 'c'])\n// => true\n\nconsole.log(object)\n// => { 'a': [{ 'b': {} }] }"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to modify.",
        "optional": false
      },
      {
        "name": "path",
        "type": "Array|string",
        "description": "The path of the property to unset.",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "Returns `true` if the property is deleted, else `false`."
    }
  },
  {
    "name": "unzip",
    "category": "Array",
    "description": "This method is like `zip` except that it accepts an array of grouped\nelements and creates an array regrouping the elements to their pre-zip\nconfiguration.",
    "since": "1.2.0",
    "examples": [
      "const zipped = zip(['a', 'b'], [1, 2], [true, false])\n// => [['a', 1, true], ['b', 2, false]]\n\nunzip(zipped)\n// => [['a', 'b'], [1, 2], [true, false]]"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array of grouped elements to process.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of regrouped elements."
    }
  },
  {
    "name": "unzipWith",
    "category": "Array",
    "description": "This method is like `unzip` except that it accepts `iteratee` to specify\nhow regrouped values should be combined. The iteratee is invoked with the\nelements of each group: (...group).",
    "since": "3.8.0",
    "examples": [
      "const zipped = zip([1, 2], [10, 20], [100, 200])\n// => [[1, 10, 100], [2, 20, 200]]\n\nunzipWith(zipped, add)\n// => [3, 30, 300]"
    ],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array of grouped elements to process.",
        "optional": false
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The function to combine",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of regrouped elements."
    }
  },
  {
    "name": "update",
    "category": "Object",
    "description": "This method is like `set` except that it accepts `updater` to produce the\nvalue to set. Use `updateWith` to customize `path` creation. The `updater`\nis invoked with one argument: (value).\n\n**Note:** This method mutates `object`.",
    "since": "4.6.0",
    "examples": [
      "const object = { 'a': [{ 'b': { 'c': 3 } }] }\n\nupdate(object, 'a[0].b.c', n => n * n)\nconsole.log(object.a[0].b.c)\n// => 9\n\nupdate(object, 'x[0].y.z', n => n ? n + 1 : 0)\nconsole.log(object.x[0].y.z)\n// => 0"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to modify.",
        "optional": false
      },
      {
        "name": "path",
        "type": "Array|string",
        "description": "The path of the property to set.",
        "optional": false
      },
      {
        "name": "updater",
        "type": "Function",
        "description": "The function to produce the updated value.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns `object`."
    }
  },
  {
    "name": "updateWith",
    "category": "Object",
    "description": "This method is like `update` except that it accepts `customizer` which is\ninvoked to produce the objects of `path`. If `customizer` returns `undefined`\npath creation is handled by the method instead. The `customizer` is invoked\nwith three arguments: (nsValue, key, nsObject).\n\n**Note:** This method mutates `object`.",
    "since": "4.6.0",
    "examples": ["const object = {}\n\nupdateWith(object, '[0][1]', () => 'a', Object)\n// => { '0': { '1': 'a' } }"],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to modify.",
        "optional": false
      },
      {
        "name": "path",
        "type": "Array|string",
        "description": "The path of the property to set.",
        "optional": false
      },
      {
        "name": "updater",
        "type": "Function",
        "description": "The function to produce the updated value.",
        "optional": false
      },
      {
        "name": "customizer",
        "type": "Function",
        "description": "The function to customize assigned values.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns `object`."
    }
  },
  {
    "name": "upperCase",
    "category": "String",
    "description": "Converts `string`, as space separated words, to upper case.",
    "since": "4.0.0",
    "examples": [
      "upperCase('--foo-bar')\n// => 'FOO BAR'\n\nupperCase('fooBar')\n// => 'FOO BAR'\n\nupperCase('__foo_bar__')\n// => 'FOO BAR'"
    ],
    "params": [
      {
        "name": "string",
        "type": "string",
        "description": "The string to convert.",
        "defaultValue": "''",
        "optional": true
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the upper cased string."
    }
  },
  {
    "name": "upperFirst",
    "category": "String",
    "description": "Converts the first character of `string` to upper case.",
    "since": "4.0.0",
    "examples": ["upperFirst('fred')\n// => 'Fred'\n\nupperFirst('FRED')\n// => 'FRED'"],
    "params": [
      {
        "name": "string",
        "type": "string",
        "description": "The string to convert.",
        "defaultValue": "''",
        "optional": true
      }
    ],
    "returns": {
      "type": "string",
      "description": "Returns the converted string."
    }
  },
  {
    "name": "values",
    "category": "Object",
    "description": "Creates an array of the own enumerable string keyed property values of `object`.\n\n**Note:** Non-object values are coerced to objects.",
    "since": "0.1.0",
    "examples": [
      "function Foo() {\n  this.a = 1\n  this.b = 2\n}\n\nFoo.prototype.c = 3\n\nvalues(new Foo)\n// => [1, 2] (iteration order is not guaranteed)\n\nvalues('hi')\n// => ['h', 'i']"
    ],
    "params": [
      {
        "name": "object",
        "type": "Object",
        "description": "The object to query.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the array of property values."
    }
  },
  {
    "name": "without",
    "category": "Array",
    "description": "Creates an array excluding all given values using\n[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons.\n\n**Note:** Unlike `pull`, this method returns a new array.",
    "since": "0.1.0",
    "examples": ["without([2, 1, 2, 3], 1, 2)\n// => [3]"],
    "params": [
      {
        "name": "array",
        "type": "Array",
        "description": "The array to inspect.",
        "optional": false
      },
      {
        "name": "values",
        "type": "...*",
        "description": "The values to exclude.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of filtered values."
    }
  },
  {
    "name": "words",
    "category": "String",
    "description": "Used to match words composed of alphanumeric characters.",
    "since": "3.0.0",
    "examples": [
      "words('fred, barney, & pebbles')\n// => ['fred', 'barney', 'pebbles']\n\nwords('fred, barney, & pebbles', /[^, ]+/g)\n// => ['fred', 'barney', '&', 'pebbles']"
    ],
    "params": [
      {
        "name": "string",
        "type": "string",
        "description": "The string to inspect.",
        "defaultValue": "''",
        "optional": true
      },
      {
        "name": "pattern",
        "type": "RegExp|string",
        "description": "The pattern to match words.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the words of `string`."
    }
  },
  {
    "name": "xor",
    "category": "Array",
    "description": "Creates an array of unique values that is the\n[symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\nof the given arrays. The order of result values is determined by the order\nthey occur in the arrays.",
    "since": "2.4.0",
    "examples": ["xor([2, 1], [2, 3])\n// => [1, 3]"],
    "params": [
      {
        "name": "arrays",
        "type": "...Array",
        "description": "The arrays to inspect.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of filtered values."
    }
  },
  {
    "name": "xorBy",
    "category": "Array",
    "description": "This method is like `xor` except that it accepts `iteratee` which is\ninvoked for each element of each `arrays` to generate the criterion by\nwhich they're compared. The order of result values is determined\nby the order they occur in the arrays. The iteratee is invoked with one\nargument: (value).",
    "since": "4.0.0",
    "examples": ["xorBy([2.1, 1.2], [2.3, 3.4], Math.floor)\n// => [1.2, 3.4]"],
    "params": [
      {
        "name": "arrays",
        "type": "...Array",
        "description": "The arrays to inspect.",
        "optional": true
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The iteratee invoked per element.",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of filtered values."
    }
  },
  {
    "name": "xorWith",
    "category": "Array",
    "description": "This method is like `xor` except that it accepts `comparator` which is\ninvoked to compare elements of `arrays`. The order of result values is\ndetermined by the order they occur in the arrays. The comparator is invoked\nwith two arguments: (arrVal, othVal).",
    "since": "4.0.0",
    "examples": [
      "const objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\nconst others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }]\n\nxorWith(objects, others, isEqual)\n// => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]"
    ],
    "params": [
      {
        "name": "arrays",
        "type": "...Array",
        "description": "The arrays to inspect.",
        "optional": true
      },
      {
        "name": "comparator",
        "type": "Function",
        "description": "The comparator invoked per element.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of filtered values."
    }
  },
  {
    "name": "zip",
    "category": "Array",
    "description": "Creates an array of grouped elements, the first of which contains the\nfirst elements of the given arrays, the second of which contains the\nsecond elements of the given arrays, and so on.",
    "since": "0.1.0",
    "examples": ["zip(['a', 'b'], [1, 2], [true, false])\n// => [['a', 1, true], ['b', 2, false]]"],
    "params": [
      {
        "name": "arrays",
        "type": "...Array",
        "description": "The arrays to process.",
        "optional": true
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of grouped elements."
    }
  },
  {
    "name": "zipObject",
    "category": "Array",
    "description": "This method is like `fromPairs` except that it accepts two arrays,\none of property identifiers and one of corresponding values.",
    "since": "0.4.0",
    "examples": ["zipObject(['a', 'b'], [1, 2])\n// => { 'a': 1, 'b': 2 }"],
    "params": [
      {
        "name": "props",
        "type": "Array",
        "description": "The property identifiers.",
        "defaultValue": "[]",
        "optional": true
      },
      {
        "name": "values",
        "type": "Array",
        "description": "The property values.",
        "defaultValue": "[]",
        "optional": true
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns the new object."
    }
  },
  {
    "name": "zipObjectDeep",
    "category": "Array",
    "description": "This method is like `zipObject` except that it supports property paths.",
    "since": "4.1.0",
    "examples": ["zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2])\n// => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }"],
    "params": [
      {
        "name": "props",
        "type": "Array",
        "description": "The property identifiers.",
        "defaultValue": "[]",
        "optional": true
      },
      {
        "name": "values",
        "type": "Array",
        "description": "The property values.",
        "defaultValue": "[]",
        "optional": true
      }
    ],
    "returns": {
      "type": "Object",
      "description": "Returns the new object."
    }
  },
  {
    "name": "zipWith",
    "category": "Array",
    "description": "This method is like `zip` except that it accepts `iteratee` to specify\nhow grouped values should be combined. The iteratee is invoked with the\nelements of each group: (...group).",
    "since": "3.8.0",
    "examples": ["zipWith([1, 2], [10, 20], [100, 200], (a, b, c) => a + b + c)\n// => [111, 222]"],
    "params": [
      {
        "name": "arrays",
        "type": "...Array",
        "description": "The arrays to process.",
        "optional": true
      },
      {
        "name": "iteratee",
        "type": "Function",
        "description": "The function to combine",
        "optional": false
      }
    ],
    "returns": {
      "type": "Array",
      "description": "Returns the new array of grouped elements."
    }
  }
]
