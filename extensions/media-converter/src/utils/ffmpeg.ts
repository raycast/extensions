import fs from "fs";
import os from "os";
import { LocalStorage, environment, getPreferenceValues } from "@raycast/api";
import { execPromise } from "../utils/exec";
import * as ffmpegStatic from "./ffmpeg-static";

export async function checkFFmpegVersion(ffmpegPath: string): Promise<number | null> {
  try {
    const { stdout } = await execPromise(`"${ffmpegPath}" -version`);
    const versionMatch = stdout.match(/ffmpeg version (\d+)\.(\d+)/);
    if (versionMatch) {
      const major = parseInt(versionMatch[1], 10);
      const minor = parseInt(versionMatch[2], 10);
      return major + minor / 10; // Convert to decimal format like 6.1
    }
    return null;
  } catch (error) {
    console.error("Error checking FFmpeg version:", error);
    return null;
  }
}

export async function findFFmpegPath(minimumVersion = 6.0): Promise<{ path: string; version: number } | null> {
  try {
    // First, check if there's a custom path in preferences
    const preferences = getPreferenceValues();
    const customPath = preferences.ffmpeg_path;

    if (customPath && customPath.trim() && fs.existsSync(customPath)) {
      const version = await checkFFmpegVersion(customPath);
      if (version && version >= minimumVersion) {
        // Store the valid custom path
        await LocalStorage.setItem("ffmpeg-path", customPath);
        console.log(`Found custom FFmpeg at: ${customPath} with version: ${version}`);
        return { path: customPath, version };
      }
    }

    // Check stored ffmpeg path (from previous auto-detection or installation)
    const storedPath = await LocalStorage.getItem("ffmpeg-path");
    if (storedPath && typeof storedPath === "string" && fs.existsSync(storedPath)) {
      const version = await checkFFmpegVersion(storedPath);
      if (version && version >= minimumVersion) {
        return { path: storedPath, version };
      }
    }

    // Check common system installation paths directly
    const platform = os.platform();
    const commonPaths = [];

    // On MacOS, the which command is not included in the minimal shell environment that Node.js has access to,
    // so this feature is on hold for now.
    /* try {
      const command = platform === "win32" ? "where ffmpeg" : "which ffmpeg";
      console.log(`Executing command: ${command}`);

      const { stdout } = await execPromise(command);
      console.log(`Command output (raw): "${stdout}"`);
      console.log(`Command output (trimmed): "${stdout.trim()}"`);

      const systemPath = stdout.trim().split("\n")[0];
      console.log(`Found ffmpeg in system PATH: ${systemPath}`);

      if (systemPath && fs.existsSync(systemPath)) {
        console.log(`Path exists, adding to commonPaths: ${systemPath}`);
        commonPaths.push(systemPath);
      } else {
        console.log(
          `Path validation failed - systemPath: "${systemPath}", exists: ${systemPath ? fs.existsSync(systemPath) : false}`,
        );
      }
    } catch (error) {
      console.log(`Command failed with error:`, error);
    } */

    // Note: the following common paths were generated by Claude Sonnet 4, I did not verify them all, but they are likely to be correct.
    // Even if they aren't, the user will be able to specify their custom path in the extension preferences.
    if (platform === "darwin") {
      // macOS common paths
      commonPaths.push(
        // Homebrew (Intel)
        "/usr/local/bin/ffmpeg",
        // Homebrew (Apple Silicon)
        "/opt/homebrew/bin/ffmpeg",
        // System paths
        "/usr/bin/ffmpeg",
        // MacPorts
        "/opt/local/bin/ffmpeg",
        // Nix
        "/nix/store/*/bin/ffmpeg",
        `${os.homedir()}/.nix-profile/bin/ffmpeg`,
        "/run/current-system/sw/bin/ffmpeg",
        // Conda/Miniconda/Anaconda
        `${os.homedir()}/miniconda3/bin/ffmpeg`,
        `${os.homedir()}/anaconda3/bin/ffmpeg`,
        `${os.homedir()}/mambaforge/bin/ffmpeg`,
        "/usr/local/miniconda3/bin/ffmpeg",
        "/usr/local/anaconda3/bin/ffmpeg",
        // Fink
        "/sw/bin/ffmpeg",
        // Manual installations
        "/Applications/ffmpeg",
        "/Applications/FFmpeg/ffmpeg",
        `${os.homedir()}/bin/ffmpeg`,
        `${os.homedir()}/.local/bin/ffmpeg`,
        // pkgsrc
        "/usr/pkg/bin/ffmpeg",
      );
    } else if (platform === "win32") {
      // Windows common paths
      const programFiles = process.env.ProgramFiles || "C:\\Program Files";
      const programFilesX86 = process.env["ProgramFiles(x86)"] || "C:\\Program Files (x86)";
      const userProfile = process.env.USERPROFILE || "C:\\Users\\%USERNAME%";
      const localAppData = process.env.LOCALAPPDATA || `${userProfile}\\AppData\\Local`;

      commonPaths.push(
        // Standard installation paths
        `${programFiles}\\ffmpeg\\bin\\ffmpeg.exe`,
        `${programFilesX86}\\ffmpeg\\bin\\ffmpeg.exe`,
        "C:\\ffmpeg\\bin\\ffmpeg.exe",
        // Chocolatey
        `${programFiles}\\ffmpeg\\ffmpeg.exe`,
        "C:\\ProgramData\\chocolatey\\lib\\ffmpeg\\tools\\ffmpeg\\bin\\ffmpeg.exe",
        "C:\\tools\\ffmpeg\\bin\\ffmpeg.exe",
        // Scoop
        `${userProfile}\\scoop\\apps\\ffmpeg\\current\\bin\\ffmpeg.exe`,
        `${userProfile}\\scoop\\shims\\ffmpeg.exe`,
        // winget
        `${localAppData}\\Microsoft\\WinGet\\Packages\\Gyan.FFmpeg_Microsoft.Winget.Source_*\\ffmpeg-*\\bin\\ffmpeg.exe`,
        // Conda/Miniconda/Anaconda
        `${userProfile}\\miniconda3\\Scripts\\ffmpeg.exe`,
        `${userProfile}\\anaconda3\\Scripts\\ffmpeg.exe`,
        `${userProfile}\\mambaforge\\Scripts\\ffmpeg.exe`,
        "C:\\ProgramData\\Miniconda3\\Scripts\\ffmpeg.exe",
        "C:\\ProgramData\\Anaconda3\\Scripts\\ffmpeg.exe",
        // MSYS2/MinGW
        "C:\\msys64\\usr\\bin\\ffmpeg.exe",
        "C:\\msys64\\mingw64\\bin\\ffmpeg.exe",
        "C:\\msys64\\mingw32\\bin\\ffmpeg.exe",
        // User local installations
        `${userProfile}\\bin\\ffmpeg.exe`,
        `${userProfile}\\Tools\\ffmpeg\\bin\\ffmpeg.exe`,
        `${localAppData}\\Programs\\ffmpeg\\bin\\ffmpeg.exe`,
      );
    } else {
      // Linux & Unix common paths
      const homeDir = os.homedir();

      commonPaths.push(
        // System paths
        "/usr/bin/ffmpeg",
        "/usr/local/bin/ffmpeg",
        "/bin/ffmpeg",
        // Snap
        "/snap/bin/ffmpeg",
        "/var/lib/snapd/snap/bin/ffmpeg",
        // Flatpak
        "/var/lib/flatpak/exports/bin/org.ffmpeg.FFmpeg",
        `${homeDir}/.local/share/flatpak/exports/bin/org.ffmpeg.FFmpeg`,
        // AppImage
        `${homeDir}/Applications/ffmpeg.AppImage`,
        `${homeDir}/.local/bin/ffmpeg.AppImage`,
        // Nix
        "/nix/store/*/bin/ffmpeg",
        `${homeDir}/.nix-profile/bin/ffmpeg`,
        "/run/current-system/sw/bin/ffmpeg",
        // Conda/Miniconda/Anaconda
        `${homeDir}/miniconda3/bin/ffmpeg`,
        `${homeDir}/anaconda3/bin/ffmpeg`,
        `${homeDir}/mambaforge/bin/ffmpeg`,
        "/opt/miniconda3/bin/ffmpeg",
        "/opt/anaconda3/bin/ffmpeg",
        // User local installations
        `${homeDir}/bin/ffmpeg`,
        `${homeDir}/.local/bin/ffmpeg`,
        // Distribution-specific paths
        "/opt/ffmpeg/bin/ffmpeg",
        "/usr/local/ffmpeg/bin/ffmpeg",
        // Build from source common locations
        `${homeDir}/ffmpeg/ffmpeg`,
        `${homeDir}/src/ffmpeg/ffmpeg`,
        "/opt/local/bin/ffmpeg", // MacPorts on some Linux distros
      );
    }

    // Check if any of the common paths exist and meet version requirements
    for (const path of commonPaths) {
      if (fs.existsSync(path)) {
        const version = await checkFFmpegVersion(path);
        if (version && version >= minimumVersion) {
          // Store the found path for future use
          await LocalStorage.setItem("ffmpeg-path", path);
          console.log(`Found FFmpeg at: ${path} with version: ${version}`);
          return { path, version };
        }
      }
    }

    return null;
  } catch (error) {
    console.error("Error finding valid FFmpeg:", error);
    return null;
  }
}

export async function installFFmpegBinary(onProgress?: (progress: number) => void): Promise<void> {
  try {
    const downloadDir = environment.supportPath;

    // Ensure the download directory exists
    if (!fs.existsSync(downloadDir)) {
      fs.mkdirSync(downloadDir, { recursive: true });
    }

    console.log(`Download dir set to: ${downloadDir}`);

    // Get the expected binary path for the custom download directory
    const ffmpegPath = ffmpegStatic.getBinaryPath(downloadDir);

    console.log(`FFmpeg static returned path: ${ffmpegPath}`);

    if (!ffmpegPath) {
      throw new Error("FFmpeg installer did not provide a valid path for this platform");
    }

    // Check if the binary already exists at the returned path (if weird user behavior during download)
    let needsInstallation = !fs.existsSync(ffmpegPath);

    // If binary exists, verify it's working properly
    if (!needsInstallation) {
      try {
        console.log("FFmpeg binary exists, verifying it works...");
        const { stdout } = await execPromise(`"${ffmpegPath}" -version`);
        if (!stdout.includes("ffmpeg version")) {
          console.log("Existing FFmpeg binary is not working properly, will reinstall");
          needsInstallation = true;
        } else {
          console.log("Existing FFmpeg binary is working properly");
        }
      } catch (error) {
        console.log("Existing FFmpeg binary verification failed, will reinstall:", error);
        needsInstallation = true;
      }
    }

    if (needsInstallation) {
      // If binary exists but is corrupted, remove it first
      if (fs.existsSync(ffmpegPath)) {
        console.log("Removing corrupted FFmpeg binary...");
        try {
          fs.unlinkSync(ffmpegPath);
        } catch (error) {
          console.warn("Warning: Could not remove corrupted binary:", error);
          // Continue anyway, the installer might overwrite it
        }
      }

      console.log("FFmpeg binary not found or corrupted, running install process...");
      await ffmpegStatic.installBinary(downloadDir, onProgress);
    }

    // Check again after potential install
    if (!fs.existsSync(ffmpegPath)) {
      throw new Error(`FFmpeg binary not found at expected path: ${ffmpegPath}`);
    }

    // Make it executable (Unix/Linux/macOS only, on Windows .exe files are executable by default)
    const platform = os.platform();
    if (platform !== "win32") {
      try {
        fs.chmodSync(ffmpegPath, 0o755);
      } catch (error) {
        console.warn("Warning: Could not set executable permissions:", error);
        // Continue execution as this might not be critical on some systems
      }
    }

    // Final verification that the binary works (only if we just installed it)
    if (needsInstallation) {
      const { stdout } = await execPromise(`"${ffmpegPath}" -version`);
      if (!stdout.includes("ffmpeg version")) {
        throw new Error("FFmpeg binary installation verification failed");
      }
    }

    // Store the path
    await LocalStorage.setItem("ffmpeg-path", ffmpegPath);
    console.log(`FFmpeg successfully installed to: ${ffmpegPath}`);
  } catch (error) {
    console.error("Error installing FFmpeg:", error);
    throw error;
  }
}
