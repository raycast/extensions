import { SavedWorkflow, WorkflowError } from "../types";
import { PIPEDREAM_BASE_URL } from "./constants";

const now = Date.now();

export const DEMO_WORKFLOWS: SavedWorkflow[] = [
  {
    id: "p_demo1",
    customName: "E-commerce Order Sync",
    folder: "E-commerce",
    url: `${PIPEDREAM_BASE_URL}p_demo1`,
    triggerCount: 1,
    stepCount: 4,
    showInMenuBar: true,
    sortOrder: 0,
    errorResolution: {
      markedAsFixedAt: now - 1000 * 60 * 60 * 2, // 2 hours ago
      lastKnownErrorCount: 5,
      lastKnownErrorTimestamp: now - 1000 * 60 * 60 * 3,
      attempts: 2,
      lastAttemptAt: now - 1000 * 60 * 60 * 2,
      resolutionTime: 1000 * 60 * 30, // 30 minutes
      errorCategories: { "Rate Limit": 3, Timeout: 2 },
    },
  },
  {
    id: "p_demo2",
    customName: "Slack Notifications",
    folder: "Notifications",
    url: `${PIPEDREAM_BASE_URL}p_demo2`,
    triggerCount: 2,
    stepCount: 3,
    showInMenuBar: false,
    sortOrder: 1,
  },
  {
    id: "p_demo3",
    customName: "Critical Payment Processing",
    folder: "Finance",
    url: `${PIPEDREAM_BASE_URL}p_demo3`,
    triggerCount: 1,
    stepCount: 6,
    showInMenuBar: true,
    sortOrder: 2,
  },
  {
    id: "p_demo4",
    customName: "Customer Support Tickets",
    folder: "Support",
    url: `${PIPEDREAM_BASE_URL}p_demo4`,
    triggerCount: 3,
    stepCount: 5,
    showInMenuBar: true,
    sortOrder: 3,
  },
  {
    id: "p_demo5",
    customName: "Data Pipeline Monitor",
    folder: "Analytics",
    url: `${PIPEDREAM_BASE_URL}p_demo5`,
    triggerCount: 1,
    stepCount: 8,
    showInMenuBar: false,
    sortOrder: 4,
  },
];

export const DEMO_ERRORS: Record<string, WorkflowError[]> = {
  p_demo1: [
    {
      id: "err_demo_1",
      indexed_at_ms: now - 1000 * 60 * 30, // 30 minutes ago - NEW ERROR after being marked as fixed
      event: {
        original_event: {
          name: "order_sync",
          site: "shopify.com",
          data: {},
          d: "",
          _id: "ord_123",
          formId: "sync_form",
        },
        original_context: {
          id: "ctx1",
          ts: "",
          pipeline_id: null,
          workflow_id: "p_demo1",
          deployment_id: "prod",
          source_type: "webhook",
          verified: true,
          hops: null,
          test: false,
          replay: false,
          owner_id: "demo-user",
          platform_version: "1",
          workflow_name: "E-commerce Order Sync",
          resume: null,
          emitter_id: "emit1",
          trace_id: "trace1",
        },
        error: {
          code: "RATE_LIMIT",
          msg: "Rate limit exceeded: 100 requests per minute",
          cellId: "c1",
          ts: "",
          stack: "RateLimitError: Too many requests",
        },
      },
      metadata: { emitter_id: "emit1", emit_id: "id1", name: "order_sync" },
    },
    {
      id: "err_demo_1b",
      indexed_at_ms: now - 1000 * 60 * 45,
      event: {
        original_event: {
          name: "order_sync",
          site: "shopify.com",
          data: {},
          d: "",
          _id: "ord_124",
          formId: "sync_form",
        },
        original_context: {
          id: "ctx1b",
          ts: "",
          pipeline_id: null,
          workflow_id: "p_demo1",
          deployment_id: "prod",
          source_type: "webhook",
          verified: true,
          hops: null,
          test: false,
          replay: false,
          owner_id: "demo-user",
          platform_version: "1",
          workflow_name: "E-commerce Order Sync",
          resume: null,
          emitter_id: "emit1b",
          trace_id: "trace1b",
        },
        error: {
          code: "TIMEOUT",
          msg: "Request timeout after 30 seconds",
          cellId: "c1",
          ts: "",
          stack: "TimeoutError: Request timed out",
        },
      },
      metadata: { emitter_id: "emit1b", emit_id: "id1b", name: "order_sync" },
    },
  ],
  p_demo3: [
    {
      id: "err_demo_3a",
      indexed_at_ms: now - 1000 * 60 * 10,
      event: {
        original_event: {
          name: "payment_process",
          site: "stripe.com",
          data: {},
          d: "",
          _id: "pay_456",
          formId: "payment_form",
        },
        original_context: {
          id: "ctx3a",
          ts: "",
          pipeline_id: null,
          workflow_id: "p_demo3",
          deployment_id: "prod",
          source_type: "api",
          verified: true,
          hops: null,
          test: false,
          replay: false,
          owner_id: "demo-user",
          platform_version: "1",
          workflow_name: "Critical Payment Processing",
          resume: null,
          emitter_id: "emit3a",
          trace_id: "trace3a",
        },
        error: {
          code: "AUTH_ERROR",
          msg: "Authentication failed: Invalid API key",
          cellId: "c3",
          ts: "",
          stack: "AuthError: Invalid credentials",
        },
      },
      metadata: { emitter_id: "emit3a", emit_id: "id3a", name: "payment_process" },
    },
    {
      id: "err_demo_3b",
      indexed_at_ms: now - 1000 * 60 * 15,
      event: {
        original_event: {
          name: "payment_process",
          site: "stripe.com",
          data: {},
          d: "",
          _id: "pay_457",
          formId: "payment_form",
        },
        original_context: {
          id: "ctx3b",
          ts: "",
          pipeline_id: null,
          workflow_id: "p_demo3",
          deployment_id: "prod",
          source_type: "api",
          verified: true,
          hops: null,
          test: false,
          replay: false,
          owner_id: "demo-user",
          platform_version: "1",
          workflow_name: "Critical Payment Processing",
          resume: null,
          emitter_id: "emit3b",
          trace_id: "trace3b",
        },
        error: {
          code: "VALIDATION",
          msg: "Invalid payment amount: must be greater than 0",
          cellId: "c3",
          ts: "",
          stack: "ValidationError: Invalid amount",
        },
      },
      metadata: { emitter_id: "emit3b", emit_id: "id3b", name: "payment_process" },
    },
  ],
  p_demo4: [
    {
      id: "err_demo_4a",
      indexed_at_ms: now - 1000 * 60 * 60,
      event: {
        original_event: {
          name: "ticket_create",
          site: "zendesk.com",
          data: {},
          d: "",
          _id: "ticket_789",
          formId: "support_form",
        },
        original_context: {
          id: "ctx4a",
          ts: "",
          pipeline_id: null,
          workflow_id: "p_demo4",
          deployment_id: "prod",
          source_type: "webhook",
          verified: true,
          hops: null,
          test: false,
          replay: false,
          owner_id: "demo-user",
          platform_version: "1",
          workflow_name: "Customer Support Tickets",
          resume: null,
          emitter_id: "emit4a",
          trace_id: "trace4a",
        },
        error: {
          code: "NETWORK",
          msg: "Network error: Unable to connect to api.zendesk.com",
          cellId: "c4",
          ts: "",
          stack: "NetworkError: Connection failed",
        },
      },
      metadata: { emitter_id: "emit4a", emit_id: "id4a", name: "ticket_create" },
    },
  ],
  p_demo5: [
    {
      id: "err_demo_5a",
      indexed_at_ms: now - 1000 * 60 * 90,
      event: {
        original_event: {
          name: "data_sync",
          site: "bigquery.com",
          data: {},
          d: "",
          _id: "data_sync_001",
          formId: "data_form",
        },
        original_context: {
          id: "ctx5a",
          ts: "",
          pipeline_id: null,
          workflow_id: "p_demo5",
          deployment_id: "prod",
          source_type: "scheduled",
          verified: true,
          hops: null,
          test: false,
          replay: false,
          owner_id: "demo-user",
          platform_version: "1",
          workflow_name: "Data Pipeline Monitor",
          resume: null,
          emitter_id: "emit5a",
          trace_id: "trace5a",
        },
        error: {
          code: "SERVER_ERROR",
          msg: "Internal server error 500: Database connection failed",
          cellId: "c5",
          ts: "",
          stack: "ServerError: Database unavailable",
        },
      },
      metadata: { emitter_id: "emit5a", emit_id: "id5a", name: "data_sync" },
    },
  ],
};
