{
  "Accordion": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Accordion/Accordion.tsx",
    "displayName": "@mantine/core/Accordion",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "<AccordionItem /> components only",
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "disableIconRotation": {
        "defaultValue": null,
        "description": "Should icon rotation be disabled, defaults to false",
        "name": "disableIconRotation",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Replace icon on all items",
        "name": "icon",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "iconPosition": {
        "defaultValue": null,
        "description": "Change icon position: left or right, defaults to 'left'",
        "name": "iconPosition",
        "required": false,
        "type": {
          "name": "AccordionIconPosition"
        }
      },
      "iconSize": {
        "defaultValue": null,
        "description": "Icon width in px, defaults to 24",
        "name": "iconSize",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Used to connect accordion items controls to related content",
        "name": "id",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "initialItem": {
        "defaultValue": null,
        "description": "Index of item which is initially opened (uncontrolled component)",
        "name": "initialItem",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "initialState": {
        "defaultValue": null,
        "description": "Initial state (controls opened state of accordion items) for uncontrolled component",
        "name": "initialState",
        "required": false,
        "type": {
          "name": "AccordionState"
        }
      },
      "multiple": {
        "defaultValue": null,
        "description": "Allow multiple items to be opened at the same time, defaults to false",
        "name": "multiple",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "offsetIcon": {
        "defaultValue": null,
        "description": "Should icon be offset with padding, applicable only when iconPosition is right, defaults to true",
        "name": "offsetIcon",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "onChange handler for controlled component",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "(state: AccordionState) => void"
        }
      },
      "order": {
        "defaultValue": null,
        "description": "Heading level used for items, defaults to 3",
        "name": "order",
        "required": false,
        "type": {
          "name": "2 | 3 | 4 | 5 | 6"
        }
      },
      "state": {
        "defaultValue": null,
        "description": "Controlled state (controls opened state of accordion items)",
        "name": "state",
        "required": false,
        "type": {
          "name": "AccordionState"
        }
      },
      "transitionDuration": {
        "defaultValue": null,
        "description": "Open/close item transition duration in ms, defaults to 200",
        "name": "transitionDuration",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "ActionIcon": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/ActionIcon/ActionIcon.tsx",
    "displayName": "@mantine/core/ActionIcon",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Icon rendered inside button",
        "name": "children",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Button hover, active and icon colors from theme, defaults to gray",
        "name": "color",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      },
      "component": {
        "defaultValue": null,
        "description": "Tag or component that should be used as root element",
        "name": "component",
        "required": false,
        "type": {
          "name": "\"symbol\" | \"object\" | \"clipPath\" | \"filter\" | \"mask\" | \"marker\" | \"label\" | \"big\" | \"link\" | \"small\" | \"sub\" | \"sup\" | \"ruby\" | \"table\" | \"div\" | \"a\" | \"abbr\" | \"address\" | \"area\" | ... 157 more ... | FunctionComponent<...>"
        }
      },
      "loaderProps": {
        "defaultValue": null,
        "description": "Props spread to Loader component",
        "name": "loaderProps",
        "required": false,
        "type": {
          "name": "LoaderProps"
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "Indicate loading state",
        "name": "loading",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Button border-radius from theme or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Predefined icon size or number to set width and height in px",
        "name": "size",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Controls appearance",
        "name": "variant",
        "required": false,
        "type": {
          "name": "ActionIconVariant"
        }
      }
    }
  },
  "Affix": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Affix/Affix.tsx",
    "displayName": "@mantine/core/Affix",
    "props": {
      "position": {
        "defaultValue": null,
        "description": "Fixed position in px, defaults to { bottom: 0, right: 0 }",
        "name": "position",
        "required": false,
        "type": {
          "name": "{ top?: string | number; left?: string | number; bottom?: string | number; right?: string | number; }"
        }
      },
      "target": {
        "defaultValue": null,
        "description": "Element where portal should be rendered, by default new div element is created and appended to document.body",
        "name": "target",
        "required": false,
        "type": {
          "name": "HTMLDivElement"
        }
      },
      "zIndex": {
        "defaultValue": null,
        "description": "Root element z-index property",
        "name": "zIndex",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "Alert": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Alert/Alert.tsx",
    "displayName": "@mantine/core/Alert",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Alert message",
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "closeButtonLabel": {
        "defaultValue": null,
        "description": "Close button aria-label",
        "name": "closeButtonLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Color from theme.colors",
        "name": "color",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon displayed next to title",
        "name": "icon",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Called when close button is clicked",
        "name": "onClose",
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Radius from theme.radius, or number to set border-radius in px, defaults to theme.defaultRadius",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "Alert title",
        "name": "title",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Controls Alert background, color and border styles, defaults to light",
        "name": "variant",
        "required": false,
        "type": {
          "name": "AlertVariant"
        }
      },
      "withCloseButton": {
        "defaultValue": null,
        "description": "True to display close button",
        "name": "withCloseButton",
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  "Anchor": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Anchor/Anchor.tsx",
    "displayName": "@mantine/core/Anchor",
    "props": {
      "align": {
        "defaultValue": null,
        "description": "Sets text-align css property",
        "name": "align",
        "required": false,
        "type": {
          "name": "\"left\" | \"right\" | \"center\" | \"justify\""
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Text color from theme or dimmed variant",
        "name": "color",
        "required": false,
        "type": {
          "name": "DefaultMantineColor | \"dimmed\""
        }
      },
      "component": {
        "defaultValue": null,
        "description": "Tag or component that should be used as root element",
        "name": "component",
        "required": false,
        "type": {
          "name": "\"symbol\" | \"object\" | \"clipPath\" | \"filter\" | \"mask\" | \"marker\" | \"label\" | \"big\" | \"link\" | \"small\" | \"sub\" | \"sup\" | \"ruby\" | \"table\" | \"div\" | \"a\" | \"abbr\" | \"address\" | \"area\" | ... 157 more ... | FunctionComponent<...>"
        }
      },
      "gradient": {
        "defaultValue": null,
        "description": "Controls gradient settings in gradient variant only",
        "name": "gradient",
        "required": false,
        "type": {
          "name": "MantineGradient"
        }
      },
      "inherit": {
        "defaultValue": null,
        "description": "Inherit font properties from parent element",
        "name": "inherit",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "inline": {
        "defaultValue": null,
        "description": "Sets line-height to 1 for centering",
        "name": "inline",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "lineClamp": {
        "defaultValue": null,
        "description": "CSS -webkit-line-clamp property",
        "name": "lineClamp",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Predefined font-size from theme.fontSizes",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "transform": {
        "defaultValue": null,
        "description": "Sets text-transform css property",
        "name": "transform",
        "required": false,
        "type": {
          "name": "\"none\" | \"capitalize\" | \"uppercase\" | \"lowercase\""
        }
      },
      "underline": {
        "defaultValue": null,
        "description": "Underline the text",
        "name": "underline",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Link or text variant",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"link\" | \"text\" | \"gradient\""
        }
      },
      "weight": {
        "defaultValue": null,
        "description": "Sets font-weight css property",
        "name": "weight",
        "required": false,
        "type": {
          "name": "FontWeight"
        }
      }
    }
  },
  "AppShell": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/AppShell/AppShell.tsx",
    "displayName": "@mantine/core/AppShell",
    "props": {
      "aside": {
        "defaultValue": null,
        "description": "<Aside /> component",
        "name": "aside",
        "required": false,
        "type": {
          "name": "ReactElement<any, string | JSXElementConstructor<any>>"
        }
      },
      "asideOffsetBreakpoint": {
        "defaultValue": null,
        "description": "Breakpoint at which Aside component should no longer be offset with padding-right, applicable only for fixed position",
        "name": "asideOffsetBreakpoint",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "children": {
        "defaultValue": null,
        "description": "AppShell content",
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "fixed": {
        "defaultValue": null,
        "description": "true to switch from static layout to fixed",
        "name": "fixed",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "footer": {
        "defaultValue": null,
        "description": "<Footer /> component",
        "name": "footer",
        "required": false,
        "type": {
          "name": "ReactElement<any, string | JSXElementConstructor<any>>"
        }
      },
      "header": {
        "defaultValue": null,
        "description": "<Header /> component",
        "name": "header",
        "required": false,
        "type": {
          "name": "ReactElement<any, string | JSXElementConstructor<any>>"
        }
      },
      "navbar": {
        "defaultValue": null,
        "description": "<Navbar /> component",
        "name": "navbar",
        "required": false,
        "type": {
          "name": "ReactElement<any, string | JSXElementConstructor<any>>"
        }
      },
      "navbarOffsetBreakpoint": {
        "defaultValue": null,
        "description": "Breakpoint at which Navbar component should no longer be offset with padding-left, applicable only for fixed position",
        "name": "navbarOffsetBreakpoint",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "padding": {
        "defaultValue": null,
        "description": "Content padding",
        "name": "padding",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "zIndex": {
        "defaultValue": null,
        "description": "zIndex prop passed to Navbar and Header components",
        "name": "zIndex",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "AspectRatio": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/AspectRatio/AspectRatio.tsx",
    "displayName": "@mantine/core/AspectRatio",
    "props": {
      "ratio": {
        "defaultValue": null,
        "description": "Aspect ratio, e.g. 16 / 9, 4 / 3, 1920 / 1080",
        "name": "ratio",
        "required": true,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "Autocomplete": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Autocomplete/Autocomplete.tsx",
    "displayName": "@mantine/core/Autocomplete",
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Select data used to renderer items in dropdown",
        "name": "data",
        "required": true,
        "type": {
          "name": "(string | AutocompleteItem)[]"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Uncontrolled input defaultValue",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Input description, displayed after label",
        "name": "description",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props spread to description element",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disabled input state",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "dropdownComponent": {
        "defaultValue": null,
        "description": "Change dropdown component, can be used to add native scrollbars",
        "name": "dropdownComponent",
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "dropdownPosition": {
        "defaultValue": null,
        "description": "Dropdown positioning behavior",
        "name": "dropdownPosition",
        "required": false,
        "type": {
          "name": "\"bottom\" | \"top\" | \"flip\""
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Displays error message after input",
        "name": "error",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props spread to error element",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "filter": {
        "defaultValue": null,
        "description": "Function based on which items in dropdown are filtered",
        "name": "filter",
        "required": false,
        "type": {
          "name": "(value: string, item: AutocompleteItem) => boolean"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Adds icon on the left side of input",
        "name": "icon",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "iconWidth": {
        "defaultValue": null,
        "description": "Width of icon section in px",
        "name": "iconWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "initiallyOpened": {
        "defaultValue": null,
        "description": "Initial dropdown opened state",
        "name": "initiallyOpened",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "itemComponent": {
        "defaultValue": null,
        "description": "Change item renderer",
        "name": "itemComponent",
        "required": false,
        "type": {
          "name": "FC<any>"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Input label, displayed before input",
        "name": "label",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props spread to label element",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, \"key\" | keyof LabelHTMLAttributes<...>> & { ...; }"
        }
      },
      "limit": {
        "defaultValue": null,
        "description": "Limit amount of items displayed at a time for searchable select",
        "name": "limit",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "maxDropdownHeight": {
        "defaultValue": null,
        "description": "Maximum dropdown height",
        "name": "maxDropdownHeight",
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "nothingFound": {
        "defaultValue": null,
        "description": "Nothing found label",
        "name": "nothingFound",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Controlled input onChange handler",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "(value: string) => void"
        }
      },
      "onDropdownClose": {
        "defaultValue": null,
        "description": "Called when dropdown is closed",
        "name": "onDropdownClose",
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onDropdownOpen": {
        "defaultValue": null,
        "description": "Called when dropdown is opened",
        "name": "onDropdownOpen",
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onItemSubmit": {
        "defaultValue": null,
        "description": "Called when item from dropdown was selected",
        "name": "onItemSubmit",
        "required": false,
        "type": {
          "name": "(item: AutocompleteItem) => void"
        }
      },
      "positionDependencies": {
        "defaultValue": null,
        "description": "useEffect dependencies to force update dropdown position",
        "name": "positionDependencies",
        "required": false,
        "type": {
          "name": "any[]"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Input border-radius from theme or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets required on input element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Right section of input, similar to icon but on the right",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "rightSectionProps": {
        "defaultValue": null,
        "description": "Props spread to rightSection div element",
        "name": "rightSectionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>>"
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Width of right section, is used to calculate input padding-right",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "shadow": {
        "defaultValue": null,
        "description": "Dropdown shadow from theme or any value to set box-shadow",
        "name": "shadow",
        "required": false,
        "type": {
          "name": "MantineShadow"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Input size",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "switchDirectionOnFlip": {
        "defaultValue": null,
        "description": "Whether to switch item order and keyboard navigation on dropdown position flip",
        "name": "switchDirectionOnFlip",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "transition": {
        "defaultValue": null,
        "description": "Dropdown body appear/disappear transition",
        "name": "transition",
        "required": false,
        "type": {
          "name": "MantineTransition"
        }
      },
      "transitionDuration": {
        "defaultValue": null,
        "description": "Dropdown body transition duration",
        "name": "transitionDuration",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "transitionTimingFunction": {
        "defaultValue": null,
        "description": "Dropdown body transition timing function, defaults to theme.transitionTimingFunction",
        "name": "transitionTimingFunction",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Controlled input value",
        "name": "value",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Defines input appearance, defaults to default in light color scheme and filled in dark",
        "name": "variant",
        "required": false,
        "type": {
          "name": "InputVariant"
        }
      },
      "withinPortal": {
        "defaultValue": null,
        "description": "Whether to render the dropdown in a Portal",
        "name": "withinPortal",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Properties spread to root element",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "{ [key: string]: any; }"
        }
      },
      "zIndex": {
        "defaultValue": null,
        "description": "Dropdown z-index",
        "name": "zIndex",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "Avatar": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Avatar/Avatar.tsx",
    "displayName": "@mantine/core/Avatar",
    "props": {
      "alt": {
        "defaultValue": null,
        "description": "Image alt text or title for placeholder variant",
        "name": "alt",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Custom placeholder",
        "name": "children",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Color from theme.colors used for letter and icon placeholders",
        "name": "color",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      },
      "component": {
        "defaultValue": null,
        "description": "Tag or component that should be used as root element",
        "name": "component",
        "required": false,
        "type": {
          "name": "\"symbol\" | \"object\" | \"clipPath\" | \"filter\" | \"mask\" | \"marker\" | \"label\" | \"big\" | \"link\" | \"small\" | \"sub\" | \"sup\" | \"ruby\" | \"table\" | \"div\" | \"a\" | \"abbr\" | \"address\" | \"area\" | ... 157 more ... | FunctionComponent<...>"
        }
      },
      "imageProps": {
        "defaultValue": null,
        "description": "`img` element attributes",
        "name": "imageProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>, \"key\" | keyof ImgHTMLAttributes<...>>"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Value from theme.radius or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Avatar width and height",
        "name": "size",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "src": {
        "defaultValue": null,
        "description": "Image url",
        "name": "src",
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  "Badge": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Badge/Badge.tsx",
    "displayName": "@mantine/core/Badge",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Badge label",
        "name": "children",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Badge color from theme",
        "name": "color",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      },
      "component": {
        "defaultValue": null,
        "description": "Tag or component that should be used as root element",
        "name": "component",
        "required": false,
        "type": {
          "name": "\"symbol\" | \"object\" | \"clipPath\" | \"filter\" | \"mask\" | \"marker\" | \"label\" | \"big\" | \"link\" | \"small\" | \"sub\" | \"sup\" | \"ruby\" | \"table\" | \"div\" | \"a\" | \"abbr\" | \"address\" | \"area\" | ... 157 more ... | FunctionComponent<...>"
        }
      },
      "fullWidth": {
        "defaultValue": null,
        "description": "Sets badge width to 100% of parent element, hides overflow text with text-overflow: ellipsis",
        "name": "fullWidth",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "gradient": {
        "defaultValue": null,
        "description": "Controls gradient settings in gradient variant only",
        "name": "gradient",
        "required": false,
        "type": {
          "name": "MantineGradient"
        }
      },
      "leftSection": {
        "defaultValue": null,
        "description": "Section rendered on the left side of label",
        "name": "leftSection",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Predefined border-radius value from theme.radius or number for border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Section rendered on the right side of label",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Defines badge height and font-size",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Controls badge background, color and border styles",
        "name": "variant",
        "required": false,
        "type": {
          "name": "BadgeVariant"
        }
      }
    }
  },
  "Blockquote": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Blockquote/Blockquote.tsx",
    "displayName": "@mantine/core/Blockquote",
    "props": {
      "cite": {
        "defaultValue": null,
        "description": "Describe a reference to a cited quote",
        "name": "cite",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Icon color from theme",
        "name": "color",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon, defaults to quote icon",
        "name": "icon",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      }
    }
  },
  "Box": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Box/Box.tsx",
    "displayName": "@mantine/core/Box",
    "props": {
      "component": {
        "defaultValue": null,
        "description": "Tag or component that should be used as root element",
        "name": "component",
        "required": false,
        "type": {
          "name": "\"symbol\" | \"object\" | \"clipPath\" | \"filter\" | \"mask\" | \"marker\" | \"label\" | \"big\" | \"link\" | \"small\" | \"sub\" | \"sup\" | \"ruby\" | \"table\" | \"div\" | \"a\" | \"abbr\" | \"address\" | \"area\" | ... 157 more ... | FunctionComponent<...>"
        }
      }
    }
  },
  "Breadcrumbs": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Breadcrumbs/Breadcrumbs.tsx",
    "displayName": "@mantine/core/Breadcrumbs",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "React nodes that should be separated",
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "separator": {
        "defaultValue": null,
        "description": "Separator between breadcrumbs",
        "name": "separator",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      }
    }
  },
  "Burger": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Burger/Burger.tsx",
    "displayName": "@mantine/core/Burger",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "Burger color value, not connected to theme.colors, defaults to theme.black with light color scheme and theme.white with dark",
        "name": "color",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      },
      "opened": {
        "defaultValue": null,
        "description": "Burger state: true for cross, false for burger",
        "name": "opened",
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Predefined burger size or number to set width and height in px",
        "name": "size",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      }
    }
  },
  "Button": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Button/Button.tsx",
    "displayName": "@mantine/core/Button",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Button label",
        "name": "children",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Button color from theme",
        "name": "color",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      },
      "compact": {
        "defaultValue": null,
        "description": "Reduces vertical and horizontal spacing",
        "name": "compact",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "component": {
        "defaultValue": null,
        "description": "Tag or component that should be used as root element",
        "name": "component",
        "required": false,
        "type": {
          "name": "\"symbol\" | \"object\" | \"clipPath\" | \"filter\" | \"mask\" | \"marker\" | \"label\" | \"big\" | \"link\" | \"small\" | \"sub\" | \"sup\" | \"ruby\" | \"table\" | \"div\" | \"a\" | \"abbr\" | \"address\" | \"area\" | ... 157 more ... | FunctionComponent<...>"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disabled state",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "fullWidth": {
        "defaultValue": null,
        "description": "Sets button width to 100% of parent element",
        "name": "fullWidth",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "gradient": {
        "defaultValue": null,
        "description": "Controls gradient settings in gradient variant only",
        "name": "gradient",
        "required": false,
        "type": {
          "name": "MantineGradient"
        }
      },
      "leftIcon": {
        "defaultValue": null,
        "description": "Adds icon before button label",
        "name": "leftIcon",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "loaderPosition": {
        "defaultValue": null,
        "description": "Loader position relative to button label",
        "name": "loaderPosition",
        "required": false,
        "type": {
          "name": "\"left\" | \"right\""
        }
      },
      "loaderProps": {
        "defaultValue": null,
        "description": "Props spread to Loader component",
        "name": "loaderProps",
        "required": false,
        "type": {
          "name": "LoaderProps"
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "Indicate loading state",
        "name": "loading",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Button border-radius from theme or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "rightIcon": {
        "defaultValue": null,
        "description": "Adds icon after button label",
        "name": "rightIcon",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Predefined button size",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "type": {
        "defaultValue": null,
        "description": "Button type attribute",
        "name": "type",
        "required": false,
        "type": {
          "name": "\"button\" | \"reset\" | \"submit\""
        }
      },
      "uppercase": {
        "defaultValue": null,
        "description": "Set text-transform to uppercase",
        "name": "uppercase",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Controls button appearance",
        "name": "variant",
        "required": false,
        "type": {
          "name": "ButtonVariant"
        }
      }
    }
  },
  "Card": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Card/Card.tsx",
    "displayName": "@mantine/core/Card",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Card content",
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "component": {
        "defaultValue": null,
        "description": "Tag or component that should be used as root element",
        "name": "component",
        "required": false,
        "type": {
          "name": "\"symbol\" | \"object\" | \"clipPath\" | \"filter\" | \"mask\" | \"marker\" | \"label\" | \"big\" | \"link\" | \"small\" | \"sub\" | \"sup\" | \"ruby\" | \"table\" | \"div\" | \"a\" | \"abbr\" | \"address\" | \"area\" | ... 157 more ... | FunctionComponent<...>"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Predefined border-radius value from theme.radius or number for border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "shadow": {
        "defaultValue": null,
        "description": "Predefined box-shadow from theme.shadows (xs, sm, md, lg, xl) or any valid css box-shadow property",
        "name": "shadow",
        "required": false,
        "type": {
          "name": "MantineShadow"
        }
      },
      "withBorder": {
        "defaultValue": null,
        "description": "Adds 1px border with theme.colors.gray[2] color in light color scheme and theme.colors.dark[6] in dark color scheme",
        "name": "withBorder",
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  "Center": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Center/Center.tsx",
    "displayName": "@mantine/core/Center",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Content that should be centered vertically and horizontally",
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "component": {
        "defaultValue": null,
        "description": "Tag or component that should be used as root element",
        "name": "component",
        "required": false,
        "type": {
          "name": "\"symbol\" | \"object\" | \"clipPath\" | \"filter\" | \"mask\" | \"marker\" | \"label\" | \"big\" | \"link\" | \"small\" | \"sub\" | \"sup\" | \"ruby\" | \"table\" | \"div\" | \"a\" | \"abbr\" | \"address\" | \"area\" | ... 157 more ... | FunctionComponent<...>"
        }
      },
      "inline": {
        "defaultValue": null,
        "description": "Set to true to use inline-flex instead of flex",
        "name": "inline",
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  "Checkbox": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Checkbox/Checkbox.tsx",
    "displayName": "@mantine/core/Checkbox",
    "props": {
      "__staticSelector": {
        "defaultValue": null,
        "description": "Static selector base",
        "name": "__staticSelector",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Checkbox checked and indeterminate state color from theme, defaults to theme.primaryColor",
        "name": "color",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Replace default icon",
        "name": "icon",
        "required": false,
        "type": {
          "name": "FC<{ indeterminate: boolean; className: string; }>"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id is used to bind input and label, if not passed unique id will be generated for each input",
        "name": "id",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "indeterminate": {
        "defaultValue": null,
        "description": "Indeterminate state of checkbox, overwrites checked",
        "name": "indeterminate",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Checkbox label",
        "name": "label",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Radius from theme.radius, or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Predefined label font-size and checkbox width and height in px",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "transitionDuration": {
        "defaultValue": null,
        "description": "Check/uncheck transition duration, set to 0 to disable all transitions",
        "name": "transitionDuration",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props spread to wrapper element",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "{ [key: string]: any; }"
        }
      }
    }
  },
  "Chips": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Chips/Chips.tsx",
    "displayName": "@mantine/core/Chips",
    "props": {
      "align": {
        "defaultValue": null,
        "description": "Defines align-items css property",
        "name": "align",
        "required": false,
        "type": {
          "name": "AlignItems"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "<Chip /> components only",
        "name": "children",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Active chip color, defaults to theme.primaryColor",
        "name": "color",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Uncontrolled component value",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "string | string[]"
        }
      },
      "direction": {
        "defaultValue": null,
        "description": "Defines flex-direction property, row for horizontal, column for vertical",
        "name": "direction",
        "required": false,
        "type": {
          "name": "\"row\" | \"column\""
        }
      },
      "grow": {
        "defaultValue": null,
        "description": "Defines flex-grow property for each element, true -> 1, false -> 0",
        "name": "grow",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Static id, used to generate inputs names",
        "name": "id",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "multiple": {
        "defaultValue": null,
        "description": "Allow multiple values to be picked",
        "name": "multiple",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "Inputs name attribute",
        "name": "name",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "noWrap": {
        "defaultValue": null,
        "description": "Defined flex-wrap property",
        "name": "noWrap",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called when value changes",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "(value: T extends true ? string[] : string) => void"
        }
      },
      "position": {
        "defaultValue": null,
        "description": "Defines justify-content property",
        "name": "position",
        "required": false,
        "type": {
          "name": "\"right\" | \"center\" | \"left\" | \"apart\""
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Chip border-radius from theme or number to set value in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Predefined chip size",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "spacing": {
        "defaultValue": null,
        "description": "Spacing between chips from theme or number to set value in px",
        "name": "spacing",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Controlled component value",
        "name": "value",
        "required": false,
        "type": {
          "name": "string | string[]"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Controls chip appearance, defaults to filled with dark theme and to outline in light theme",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"outline\" | \"filled\""
        }
      }
    }
  },
  "Code": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Code/Code.tsx",
    "displayName": "@mantine/core/Code",
    "props": {
      "block": {
        "defaultValue": null,
        "description": "True for code block, false for inline code",
        "name": "block",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Code content",
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Code color and background from theme, defaults to gray in light theme and to dark in dark theme",
        "name": "color",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      }
    }
  },
  "Collapse": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Collapse/Collapse.tsx",
    "displayName": "@mantine/core/Collapse",
    "props": {
      "animateOpacity": {
        "defaultValue": null,
        "description": "Should opacity be animated",
        "name": "animateOpacity",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Content that should be collapsed",
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "in": {
        "defaultValue": null,
        "description": "Opened state",
        "name": "in",
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "onTransitionEnd": {
        "defaultValue": null,
        "description": "Called each time transition ends",
        "name": "onTransitionEnd",
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "transitionDuration": {
        "defaultValue": null,
        "description": "Transition duration in ms",
        "name": "transitionDuration",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "transitionTimingFunction": {
        "defaultValue": null,
        "description": "Transition timing function",
        "name": "transitionTimingFunction",
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  "ColorInput": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/ColorInput/ColorInput.tsx",
    "displayName": "@mantine/core/ColorInput",
    "props": {
      "defaultValue": {
        "defaultValue": null,
        "description": "Uncontrolled component default value",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Input description, displayed after label",
        "name": "description",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props spread to description element",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disabled input state",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disallowInput": {
        "defaultValue": null,
        "description": "Disallow free input",
        "name": "disallowInput",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "dropdownZIndex": {
        "defaultValue": null,
        "description": "Dropdown element z-index",
        "name": "dropdownZIndex",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Displays error message after input",
        "name": "error",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props spread to error element",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "fixOnBlur": {
        "defaultValue": null,
        "description": "call onChange with last valid value onBlur",
        "name": "fixOnBlur",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "format": {
        "defaultValue": null,
        "description": "Color format",
        "name": "format",
        "required": false,
        "type": {
          "name": "\"hex\" | \"rgba\" | \"rgb\" | \"hsl\" | \"hsla\""
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Adds icon on the left side of input",
        "name": "icon",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "iconWidth": {
        "defaultValue": null,
        "description": "Width of icon section in px",
        "name": "iconWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Input label, displayed before input",
        "name": "label",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props spread to label element",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, \"key\" | keyof LabelHTMLAttributes<...>> & { ...; }"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called when color changes",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "(color: string) => void"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Input border-radius from theme or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Adds red asterisk on the right side of label",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Right section of input, similar to icon but on the right",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "rightSectionProps": {
        "defaultValue": null,
        "description": "Props spread to rightSection div element",
        "name": "rightSectionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>>"
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Width of right section, is used to calculate input padding-right",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Input size",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "swatches": {
        "defaultValue": null,
        "description": "Predefined colors",
        "name": "swatches",
        "required": false,
        "type": {
          "name": "string[]"
        }
      },
      "swatchesPerRow": {
        "defaultValue": null,
        "description": "Number of swatches displayed in one row",
        "name": "swatchesPerRow",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "transition": {
        "defaultValue": null,
        "description": "Dropdown transition name or object",
        "name": "transition",
        "required": false,
        "type": {
          "name": "MantineTransition"
        }
      },
      "transitionDuration": {
        "defaultValue": null,
        "description": "Dropdown appear/disappear transition duration in ms",
        "name": "transitionDuration",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "transitionTimingFunction": {
        "defaultValue": null,
        "description": "Dropdown transition timing function, defaults to theme.transitionTimingFunction",
        "name": "transitionTimingFunction",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Controlled component value",
        "name": "value",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Defines input appearance, defaults to default in light color scheme and filled in dark",
        "name": "variant",
        "required": false,
        "type": {
          "name": "InputVariant"
        }
      },
      "withPicker": {
        "defaultValue": null,
        "description": "Set to false to display swatches only",
        "name": "withPicker",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "withPreview": {
        "defaultValue": null,
        "description": "Display swatch with color preview on the left side of input",
        "name": "withPreview",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "withinPortal": {
        "defaultValue": null,
        "description": "Whether to render the dropdown in a Portal",
        "name": "withinPortal",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Properties spread to root element",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "{ [key: string]: any; }"
        }
      }
    }
  },
  "ColorPicker": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/ColorPicker/ColorPicker.tsx",
    "displayName": "@mantine/core/ColorPicker",
    "props": {
      "__staticSelector": {
        "defaultValue": null,
        "description": "Static selector base",
        "name": "__staticSelector",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "alphaLabel": {
        "defaultValue": null,
        "description": "Alpha slider aria-label",
        "name": "alphaLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Uncontrolled component default value",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "focusable": {
        "defaultValue": null,
        "description": "Should interactive elements be focusable",
        "name": "focusable",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "format": {
        "defaultValue": null,
        "description": "Color format",
        "name": "format",
        "required": false,
        "type": {
          "name": "\"hex\" | \"rgba\" | \"rgb\" | \"hsl\" | \"hsla\""
        }
      },
      "fullWidth": {
        "defaultValue": null,
        "description": "Force picker to take 100% width of its container",
        "name": "fullWidth",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "hueLabel": {
        "defaultValue": null,
        "description": "Hue slider aria-label",
        "name": "hueLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called when color changes",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "(color: string) => void"
        }
      },
      "saturationLabel": {
        "defaultValue": null,
        "description": "Saturation slider aria-label",
        "name": "saturationLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Predefined component size",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "swatches": {
        "defaultValue": null,
        "description": "Predefined colors",
        "name": "swatches",
        "required": false,
        "type": {
          "name": "string[]"
        }
      },
      "swatchesPerRow": {
        "defaultValue": null,
        "description": "Number of swatches displayed in one row",
        "name": "swatchesPerRow",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Controlled component value",
        "name": "value",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "withPicker": {
        "defaultValue": null,
        "description": "Set to false to display swatches only",
        "name": "withPicker",
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  "ColorSwatch": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/ColorSwatch/ColorSwatch.tsx",
    "displayName": "@mantine/core/ColorSwatch",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "ColorSwatch children",
        "name": "children",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Swatch color value in any css valid format (hex, rgb, etc.)",
        "name": "color",
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "component": {
        "defaultValue": null,
        "description": "Tag or component that should be used as root element",
        "name": "component",
        "required": false,
        "type": {
          "name": "\"symbol\" | \"object\" | \"clipPath\" | \"filter\" | \"mask\" | \"marker\" | \"label\" | \"big\" | \"link\" | \"small\" | \"sub\" | \"sup\" | \"ruby\" | \"table\" | \"div\" | \"a\" | \"abbr\" | \"address\" | \"area\" | ... 157 more ... | FunctionComponent<...>"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Swatch border-radius predefined from theme or number for px value",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Width, height and border-radius in px",
        "name": "size",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "Container": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Container/Container.tsx",
    "displayName": "@mantine/core/Container",
    "props": {
      "fluid": {
        "defaultValue": null,
        "description": "If fluid is set to true, size prop is ignored and Container always take 100% of width",
        "name": "fluid",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Predefined container max-width or number for max-width in px",
        "name": "size",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "sizes": {
        "defaultValue": null,
        "description": "Container sizes",
        "name": "sizes",
        "required": false,
        "type": {
          "name": "Record<MantineSize, number>"
        }
      }
    }
  },
  "Dialog": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Dialog/Dialog.tsx",
    "displayName": "@mantine/core/Dialog",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Dialog content",
        "name": "children",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "component": {
        "defaultValue": null,
        "description": "Tag or component that should be used as root element",
        "name": "component",
        "required": false,
        "type": {
          "name": "\"div\""
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Called when close button is clicked",
        "name": "onClose",
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "opened": {
        "defaultValue": null,
        "description": "Opened state",
        "name": "opened",
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "position": {
        "defaultValue": null,
        "description": "Dialog position (fixed in viewport)",
        "name": "position",
        "required": false,
        "type": {
          "name": "{ top?: string | number; left?: string | number; bottom?: string | number; right?: string | number; }"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Predefined border-radius value from theme.radius or number for border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "shadow": {
        "defaultValue": null,
        "description": "Predefined box-shadow from theme.shadows (xs, sm, md, lg, xl) or any valid css box-shadow property",
        "name": "shadow",
        "required": false,
        "type": {
          "name": "MantineShadow"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Predefined dialog width or number to set width in px",
        "name": "size",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "transition": {
        "defaultValue": null,
        "description": "Appear/disappear transition",
        "name": "transition",
        "required": false,
        "type": {
          "name": "MantineTransition"
        }
      },
      "transitionDuration": {
        "defaultValue": null,
        "description": "Duration in ms of modal transitions, set to 0 to disable all animations",
        "name": "transitionDuration",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "transitionTimingFunction": {
        "defaultValue": null,
        "description": "Transition timing function, defaults to theme.transitionTimingFunction",
        "name": "transitionTimingFunction",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "withBorder": {
        "defaultValue": null,
        "description": "Adds 1px border with theme.colors.gray[2] color in light color scheme and theme.colors.dark[6] in dark color scheme",
        "name": "withBorder",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "withCloseButton": {
        "defaultValue": null,
        "description": "Display close button at the top right corner",
        "name": "withCloseButton",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "zIndex": {
        "defaultValue": {
          "value": "getDefaultZIndex('modal')"
        },
        "description": "Dialog container z-index",
        "name": "zIndex",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "Divider": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Divider/Divider.tsx",
    "displayName": "@mantine/core/Divider",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "Line color from theme, defaults to gray in light color scheme and to dark in dark color scheme",
        "name": "color",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Adds text after line in horizontal orientation",
        "name": "label",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "labelPosition": {
        "defaultValue": null,
        "description": "Label position",
        "name": "labelPosition",
        "required": false,
        "type": {
          "name": "\"left\" | \"right\" | \"center\""
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props spread to Text component in label",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "(SharedTextProps & { component: ElementType<any>; }) | (SharedTextProps & ComponentProp<any> & Omit<Pick<any, string | ... 1 more ... | symbol>, \"component\" | keyof SharedTextProps> & { ...; })"
        }
      },
      "orientation": {
        "defaultValue": null,
        "description": "Line orientation",
        "name": "orientation",
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\""
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Sets height in horizontal orientation and width in vertical",
        "name": "size",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Divider borderStyle",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"dashed\" | \"dotted\" | \"solid\""
        }
      }
    }
  },
  "Drawer": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Drawer/Drawer.tsx",
    "displayName": "@mantine/core/Drawer",
    "props": {
      "closeButtonLabel": {
        "defaultValue": null,
        "description": "Close button aria-label",
        "name": "closeButtonLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "closeOnClickOutside": {
        "defaultValue": null,
        "description": "Disable onClock trigger for outside events",
        "name": "closeOnClickOutside",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "closeOnEscape": {
        "defaultValue": null,
        "description": "Disable onClock trigger for escape key press",
        "name": "closeOnEscape",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "lockScroll": {
        "defaultValue": null,
        "description": "Disables scroll lock",
        "name": "lockScroll",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Called when drawer is closed (Escape key and click outside, depending on options)",
        "name": "onClose",
        "required": true,
        "type": {
          "name": "() => void"
        }
      },
      "opened": {
        "defaultValue": null,
        "description": "If true drawer is mounted to the dom",
        "name": "opened",
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "overlayBlur": {
        "defaultValue": null,
        "description": "Overlay blur in px",
        "name": "overlayBlur",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "overlayColor": {
        "defaultValue": null,
        "description": "Overlay color, for example, #000",
        "name": "overlayColor",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "overlayOpacity": {
        "defaultValue": null,
        "description": "Overlay opacity, number from 0 to 1",
        "name": "overlayOpacity",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "padding": {
        "defaultValue": null,
        "description": "Drawer body padding from theme or number for padding in px",
        "name": "padding",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "position": {
        "defaultValue": null,
        "description": "Drawer body position",
        "name": "position",
        "required": false,
        "type": {
          "name": "DrawerPosition"
        }
      },
      "shadow": {
        "defaultValue": null,
        "description": "Drawer body shadow from theme or any css shadow value",
        "name": "shadow",
        "required": false,
        "type": {
          "name": "MantineShadow"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Drawer body width (right | left position) or height (top | bottom position), cannot exceed 100vh for height and 100% for width",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "target": {
        "defaultValue": null,
        "description": "Target element or selector where drawer portal should be rendered",
        "name": "target",
        "required": false,
        "type": {
          "name": "string | HTMLElement"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "Drawer title, displayed in header before close button",
        "name": "title",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "transition": {
        "defaultValue": null,
        "description": "Drawer appear and disappear transition, see Transition component for full documentation",
        "name": "transition",
        "required": false,
        "type": {
          "name": "MantineTransition"
        }
      },
      "transitionDuration": {
        "defaultValue": null,
        "description": "Transition duration in ms",
        "name": "transitionDuration",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "transitionTimingFunction": {
        "defaultValue": null,
        "description": "Drawer transitionTimingFunction css property",
        "name": "transitionTimingFunction",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "trapFocus": {
        "defaultValue": null,
        "description": "Disables focus trap",
        "name": "trapFocus",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "withCloseButton": {
        "defaultValue": null,
        "description": "Hides close button if set to false, drawer still can be closed with escape key and by clicking outside",
        "name": "withCloseButton",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "withOverlay": {
        "defaultValue": null,
        "description": "Removes overlay entirely",
        "name": "withOverlay",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "withinPortal": {
        "defaultValue": null,
        "description": "Determines whether drawer should be rendered within Portal, defaults to true",
        "name": "withinPortal",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "zIndex": {
        "defaultValue": null,
        "description": "Drawer z-index property",
        "name": "zIndex",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "Grid": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Grid/Grid.tsx",
    "displayName": "@mantine/core/Grid",
    "props": {
      "align": {
        "defaultValue": null,
        "description": "Set grid align-content property",
        "name": "align",
        "required": false,
        "type": {
          "name": "AlignContent"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "<Col /> components only",
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "columns": {
        "defaultValue": null,
        "description": "Amount of columns in each row",
        "name": "columns",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "grow": {
        "defaultValue": null,
        "description": "Should columns in the last row take 100% of grid width",
        "name": "grow",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "gutter": {
        "defaultValue": null,
        "description": "Spacing between columns predefined value from theme.spacing or number for gutter in px",
        "name": "gutter",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "justify": {
        "defaultValue": null,
        "description": "Set grid justify-content property",
        "name": "justify",
        "required": false,
        "type": {
          "name": "JustifyContent"
        }
      }
    }
  },
  "Group": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Group/Group.tsx",
    "displayName": "@mantine/core/Group",
    "props": {
      "align": {
        "defaultValue": null,
        "description": "Defines align-items css property",
        "name": "align",
        "required": false,
        "type": {
          "name": "AlignItems"
        }
      },
      "direction": {
        "defaultValue": null,
        "description": "Defines flex-direction property, row for horizontal, column for vertical",
        "name": "direction",
        "required": false,
        "type": {
          "name": "\"row\" | \"column\""
        }
      },
      "grow": {
        "defaultValue": null,
        "description": "Defines flex-grow property for each element, true -> 1, false -> 0",
        "name": "grow",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "noWrap": {
        "defaultValue": null,
        "description": "Defined flex-wrap property",
        "name": "noWrap",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "position": {
        "defaultValue": null,
        "description": "Defines justify-content property",
        "name": "position",
        "required": false,
        "type": {
          "name": "\"right\" | \"center\" | \"left\" | \"apart\""
        }
      },
      "spacing": {
        "defaultValue": null,
        "description": "Space between elements",
        "name": "spacing",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      }
    }
  },
  "Highlight": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Highlight/Highlight.tsx",
    "displayName": "@mantine/core/Highlight",
    "props": {
      "align": {
        "defaultValue": null,
        "description": "Sets text-align css property",
        "name": "align",
        "required": false,
        "type": {
          "name": "\"left\" | \"right\" | \"center\" | \"justify\""
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Full string part of which will be highlighted",
        "name": "children",
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Text color from theme or dimmed variant",
        "name": "color",
        "required": false,
        "type": {
          "name": "DefaultMantineColor | \"dimmed\""
        }
      },
      "component": {
        "defaultValue": null,
        "description": "Tag or component that should be used as root element",
        "name": "component",
        "required": false,
        "type": {
          "name": "\"symbol\" | \"object\" | \"clipPath\" | \"filter\" | \"mask\" | \"marker\" | \"label\" | \"big\" | \"link\" | \"small\" | \"sub\" | \"sup\" | \"ruby\" | \"table\" | \"div\" | \"a\" | \"abbr\" | \"address\" | \"area\" | ... 157 more ... | FunctionComponent<...>"
        }
      },
      "gradient": {
        "defaultValue": null,
        "description": "Controls gradient settings in gradient variant only",
        "name": "gradient",
        "required": false,
        "type": {
          "name": "MantineGradient"
        }
      },
      "highlight": {
        "defaultValue": null,
        "description": "Substring or an array of substrings to highlight in children",
        "name": "highlight",
        "required": true,
        "type": {
          "name": "string | string[]"
        }
      },
      "highlightColor": {
        "defaultValue": null,
        "description": "Color from theme that is used for highlighting",
        "name": "highlightColor",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      },
      "highlightStyles": {
        "defaultValue": null,
        "description": "Styles applied to highlighted part",
        "name": "highlightStyles",
        "required": false,
        "type": {
          "name": "CSSObject | ((theme: MantineTheme) => CSSObject)"
        }
      },
      "inherit": {
        "defaultValue": null,
        "description": "Inherit font properties from parent element",
        "name": "inherit",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "inline": {
        "defaultValue": null,
        "description": "Sets line-height to 1 for centering",
        "name": "inline",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "lineClamp": {
        "defaultValue": null,
        "description": "CSS -webkit-line-clamp property",
        "name": "lineClamp",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Predefined font-size from theme.fontSizes",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "transform": {
        "defaultValue": null,
        "description": "Sets text-transform css property",
        "name": "transform",
        "required": false,
        "type": {
          "name": "\"none\" | \"capitalize\" | \"uppercase\" | \"lowercase\""
        }
      },
      "underline": {
        "defaultValue": null,
        "description": "Underline the text",
        "name": "underline",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Link or text variant",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"link\" | \"text\" | \"gradient\""
        }
      },
      "weight": {
        "defaultValue": null,
        "description": "Sets font-weight css property",
        "name": "weight",
        "required": false,
        "type": {
          "name": "FontWeight"
        }
      }
    }
  },
  "Image": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Image/Image.tsx",
    "displayName": "@mantine/core/Image",
    "props": {
      "alt": {
        "defaultValue": null,
        "description": "Image alt text, used as title for placeholder if image was not loaded",
        "name": "alt",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "caption": {
        "defaultValue": null,
        "description": "Image figcaption, displayed bellow image",
        "name": "caption",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "fit": {
        "defaultValue": null,
        "description": "Image object-fit property",
        "name": "fit",
        "required": false,
        "type": {
          "name": "\"contain\" | \"cover\""
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Image height, defaults to original image height adjusted to given width",
        "name": "height",
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "imageProps": {
        "defaultValue": null,
        "description": "Props spread to img element",
        "name": "imageProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>, \"key\" | keyof ImgHTMLAttributes<...>>"
        }
      },
      "imageRef": {
        "defaultValue": null,
        "description": "Get image element ref",
        "name": "imageRef",
        "required": false,
        "type": {
          "name": "ForwardedRef<HTMLImageElement>"
        }
      },
      "placeholder": {
        "defaultValue": null,
        "description": "Customize placeholder content",
        "name": "placeholder",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Predefined border-radius value from theme.radius or number for border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "src": {
        "defaultValue": null,
        "description": "Image src",
        "name": "src",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Image width, defaults to 100%, cannot exceed 100%",
        "name": "width",
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "withPlaceholder": {
        "defaultValue": null,
        "description": "Enable placeholder when image is loading and when image fails to load",
        "name": "withPlaceholder",
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  "Indicator": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Indicator/Indicator.tsx",
    "displayName": "@mantine/core/Indicator",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Element that should have an indicator",
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Color from theme.colors or any other valid CSS color value",
        "name": "color",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "When component is disabled it renders children without indicator",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "inline": {
        "defaultValue": null,
        "description": "Determines whether indicator container should be an inline element",
        "name": "inline",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Indicator label",
        "name": "label",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "offset": {
        "defaultValue": null,
        "description": "Changes position offset, usually used when element has border-radius",
        "name": "offset",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "position": {
        "defaultValue": null,
        "description": "Indicator position relative to child element",
        "name": "position",
        "required": false,
        "type": {
          "name": "\"bottom-center\" | \"bottom-end\" | \"bottom-start\" | \"top-center\" | \"top-end\" | \"top-start\" | \"middle-center\" | \"middle-end\" | \"middle-start\""
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "border-radius from theme.radius or number value to set radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Size in px",
        "name": "size",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "withBorder": {
        "defaultValue": null,
        "description": "Determines whether indicator should have border",
        "name": "withBorder",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "zIndex": {
        "defaultValue": null,
        "description": "Indicator z-index",
        "name": "zIndex",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "Input": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Input/Input.tsx",
    "displayName": "@mantine/core/Input",
    "props": {
      "__staticSelector": {
        "defaultValue": null,
        "description": "Static css selector base",
        "name": "__staticSelector",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "component": {
        "defaultValue": null,
        "description": "Tag or component that should be used as root element",
        "name": "component",
        "required": false,
        "type": {
          "name": "\"symbol\" | \"object\" | \"clipPath\" | \"filter\" | \"mask\" | \"marker\" | \"label\" | \"big\" | \"link\" | \"small\" | \"sub\" | \"sup\" | \"ruby\" | \"table\" | \"div\" | \"a\" | \"abbr\" | \"address\" | \"area\" | ... 157 more ... | FunctionComponent<...>"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disabled input state",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Adds icon on the left side of input",
        "name": "icon",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "iconWidth": {
        "defaultValue": null,
        "description": "Width of icon section in px",
        "name": "iconWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "invalid": {
        "defaultValue": null,
        "description": "Sets border color to red and aria-invalid=true on input element",
        "name": "invalid",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "multiline": {
        "defaultValue": null,
        "description": "Will input have multiple lines?",
        "name": "multiline",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Input border-radius from theme or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets required on input element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Right section of input, similar to icon but on the right",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "rightSectionProps": {
        "defaultValue": null,
        "description": "Props spread to rightSection div element",
        "name": "rightSectionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>>"
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Width of right section, is used to calculate input padding-right",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Input size",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Defines input appearance, defaults to default in light color scheme and filled in dark",
        "name": "variant",
        "required": false,
        "type": {
          "name": "InputVariant"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Properties spread to root element",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "{ [key: string]: any; }"
        }
      }
    }
  },
  "InputWrapper": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/InputWrapper/InputWrapper.tsx",
    "displayName": "@mantine/core/InputWrapper",
    "props": {
      "__staticSelector": {
        "defaultValue": null,
        "description": "Static css selector base",
        "name": "__staticSelector",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Input that should be wrapped",
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Input description, displayed after label",
        "name": "description",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props spread to description element",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Displays error message after input",
        "name": "error",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props spread to error element",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "htmlFor label prop",
        "name": "id",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Input label, displayed before input",
        "name": "label",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "labelElement": {
        "defaultValue": null,
        "description": "Render label as label with htmlFor or as div",
        "name": "labelElement",
        "required": false,
        "type": {
          "name": "\"label\" | \"div\""
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props spread to label element",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, \"key\" | keyof LabelHTMLAttributes<...>> & { ...; }"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Adds red asterisk on the right side of label",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Controls all elements font-size",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      }
    }
  },
  "JsonInput": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/JsonInput/JsonInput.tsx",
    "displayName": "@mantine/core/JsonInput",
    "props": {
      "__staticSelector": {
        "defaultValue": null,
        "description": "Static selectors base",
        "name": "__staticSelector",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "autosize": {
        "defaultValue": null,
        "description": "If true textarea will grow with content until maxRows are reached",
        "name": "autosize",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Default value for uncontrolled input",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Input description, displayed after label",
        "name": "description",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props spread to description element",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disabled input state",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Displays error message after input",
        "name": "error",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props spread to error element",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "formatOnBlur": {
        "defaultValue": null,
        "description": "Format json on blur",
        "name": "formatOnBlur",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Adds icon on the left side of input",
        "name": "icon",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "iconWidth": {
        "defaultValue": null,
        "description": "Width of icon section in px",
        "name": "iconWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id is used to bind input and label, if not passed unique id will be generated for each input",
        "name": "id",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Input label, displayed before input",
        "name": "label",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props spread to label element",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, \"key\" | keyof LabelHTMLAttributes<...>> & { ...; }"
        }
      },
      "maxRows": {
        "defaultValue": null,
        "description": "Defines maxRows in autosize variant, not applicable to regular variant",
        "name": "maxRows",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "minRows": {
        "defaultValue": null,
        "description": "Defined minRows in autosize variant and rows in regular variant",
        "name": "minRows",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "onChange value for controlled input",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "(value: string) => void"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Input border-radius from theme or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Adds red asterisk on the right side of label",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Right section of input, similar to icon but on the right",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "rightSectionProps": {
        "defaultValue": null,
        "description": "Props spread to rightSection div element",
        "name": "rightSectionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>>"
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Width of right section, is used to calculate input padding-right",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Input size",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "validationError": {
        "defaultValue": null,
        "description": "Error message shown when json is not valid",
        "name": "validationError",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Value for controlled input",
        "name": "value",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Defines input appearance, defaults to default in light color scheme and filled in dark",
        "name": "variant",
        "required": false,
        "type": {
          "name": "InputVariant"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props passed to root element (InputWrapper component)",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "{ [key: string]: any; }"
        }
      }
    }
  },
  "Kbd": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Kbd/Kbd.tsx",
    "displayName": "@mantine/core/Kbd",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Keyboard key",
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      }
    }
  },
  "List": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/List/List.tsx",
    "displayName": "@mantine/core/List",
    "props": {
      "center": {
        "defaultValue": null,
        "description": "Center items with icon",
        "name": "center",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "<List.Item /> components only",
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon that should replace list item dot",
        "name": "icon",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "listStyleType": {
        "defaultValue": null,
        "description": "List style",
        "name": "listStyleType",
        "required": false,
        "type": {
          "name": "ListStyleType"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Font size from theme or number to set value in px",
        "name": "size",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "spacing": {
        "defaultValue": null,
        "description": "Spacing between items from theme or number to set value in px",
        "name": "spacing",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "type": {
        "defaultValue": null,
        "description": "List type: ol or ul",
        "name": "type",
        "required": false,
        "type": {
          "name": "\"ordered\" | \"unordered\""
        }
      },
      "withPadding": {
        "defaultValue": null,
        "description": "Include padding-left to offset list from main content",
        "name": "withPadding",
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  "Loader": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Loader/Loader.tsx",
    "displayName": "@mantine/core/Loader",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "Loader color from theme",
        "name": "color",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Defines width of loader",
        "name": "size",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Loader appearance",
        "name": "variant",
        "required": false,
        "type": {
          "name": "LoaderType"
        }
      }
    }
  },
  "LoadingOverlay": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/LoadingOverlay/LoadingOverlay.tsx",
    "displayName": "@mantine/core/LoadingOverlay",
    "props": {
      "exitTransitionDuration": {
        "defaultValue": null,
        "description": "Exit transition duration in ms",
        "name": "exitTransitionDuration",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "loader": {
        "defaultValue": null,
        "description": "Provide custom loader",
        "name": "loader",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "loaderProps": {
        "defaultValue": null,
        "description": "Loader component props",
        "name": "loaderProps",
        "required": false,
        "type": {
          "name": "LoaderProps"
        }
      },
      "overlayColor": {
        "defaultValue": null,
        "description": "Sets overlay color, defaults to theme.white in light theme and to theme.colors.dark[5] in dark theme",
        "name": "overlayColor",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "overlayOpacity": {
        "defaultValue": null,
        "description": "Sets overlay opacity",
        "name": "overlayOpacity",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Value from theme.radius or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "transitionDuration": {
        "defaultValue": null,
        "description": "Animation duration in ms",
        "name": "transitionDuration",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "visible": {
        "defaultValue": null,
        "description": "If visible overlay will take 100% width and height of first parent with relative position and overlay all of its content",
        "name": "visible",
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "zIndex": {
        "defaultValue": null,
        "description": "Loading overlay z-index",
        "name": "zIndex",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "Mark": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Mark/Mark.tsx",
    "displayName": "@mantine/core/Mark",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "Background color from theme.colors",
        "name": "color",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      }
    }
  },
  "MediaQuery": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/MediaQuery/MediaQuery.tsx",
    "displayName": "@mantine/core/MediaQuery",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Child that should be shown at given breakpoint, it must accept className prop",
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "largerThan": {
        "defaultValue": null,
        "description": "Styles applied to child when viewport is larger than given breakpoint",
        "name": "largerThan",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "query": {
        "defaultValue": null,
        "description": "Any other media query",
        "name": "query",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "smallerThan": {
        "defaultValue": null,
        "description": "Styles applied to child when viewport is smaller than given breakpoint",
        "name": "smallerThan",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      }
    }
  },
  "Menu": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Menu/Menu.tsx",
    "displayName": "@mantine/core/Menu",
    "props": {
      "arrowDistance": {
        "defaultValue": null,
        "description": "Arrow distance to the left/right * arrowSize",
        "name": "arrowDistance",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "arrowSize": {
        "defaultValue": null,
        "description": "Arrow size in px",
        "name": "arrowSize",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "<MenuItem /> and <Divider /> components only, children are passed to MenuBody component",
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "clickOutsideEvents": {
        "defaultValue": null,
        "description": "Events that should trigger outside clicks",
        "name": "clickOutsideEvents",
        "required": false,
        "type": {
          "name": "string[]"
        }
      },
      "closeOnItemClick": {
        "defaultValue": null,
        "description": "Should menu close on item click",
        "name": "closeOnItemClick",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "closeOnScroll": {
        "defaultValue": null,
        "description": "Close menu on scroll",
        "name": "closeOnScroll",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "control": {
        "defaultValue": null,
        "description": "React element that will be used as menu control",
        "name": "control",
        "required": false,
        "type": {
          "name": "ReactElement<any, string | JSXElementConstructor<any>>"
        }
      },
      "controlRefProp": {
        "defaultValue": null,
        "description": "Control prop to get element ref",
        "name": "controlRefProp",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "delay": {
        "defaultValue": null,
        "description": "Close delay for hover trigger",
        "name": "delay",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "exitTransitionDuration": {
        "defaultValue": null,
        "description": "Unmount transition duration in ms",
        "name": "exitTransitionDuration",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "gutter": {
        "defaultValue": null,
        "description": "Spacing between element and popper in px",
        "name": "gutter",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "menuButtonLabel": {
        "defaultValue": null,
        "description": "Menu button aria-label and title props",
        "name": "menuButtonLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "menuId": {
        "defaultValue": null,
        "description": "Id attribute of menu",
        "name": "menuId",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Called every time menu is closed",
        "name": "onClose",
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onOpen": {
        "defaultValue": null,
        "description": "Called every time menu is opened",
        "name": "onOpen",
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "opened": {
        "defaultValue": null,
        "description": "Use opened and onClose props to setup controlled menu",
        "name": "opened",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "placement": {
        "defaultValue": null,
        "description": "Placement relative to reference element",
        "name": "placement",
        "required": false,
        "type": {
          "name": "\"center\" | \"end\" | \"start\""
        }
      },
      "position": {
        "defaultValue": null,
        "description": "Position relative to reference element",
        "name": "position",
        "required": false,
        "type": {
          "name": "\"bottom\" | \"left\" | \"right\" | \"top\""
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Menu body and items border-radius",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "shadow": {
        "defaultValue": null,
        "description": "Predefined shadow from theme or box-shadow value",
        "name": "shadow",
        "required": false,
        "type": {
          "name": "MantineShadow"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Predefined menu width or number for width in px",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"auto\" | MantineNumberSize"
        }
      },
      "transition": {
        "defaultValue": null,
        "description": "Customize mount/unmount transition",
        "name": "transition",
        "required": false,
        "type": {
          "name": "MantineTransition"
        }
      },
      "transitionDuration": {
        "defaultValue": null,
        "description": "Mount transition duration in ms",
        "name": "transitionDuration",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "transitionTimingFunction": {
        "defaultValue": null,
        "description": "Mount/unmount transition timing function, defaults to theme.transitionTimingFunction",
        "name": "transitionTimingFunction",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "trapFocus": {
        "defaultValue": null,
        "description": "Should focus be trapped when menu is opened",
        "name": "trapFocus",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "trigger": {
        "defaultValue": null,
        "description": "Event which should open menu",
        "name": "trigger",
        "required": false,
        "type": {
          "name": "\"hover\" | \"click\""
        }
      },
      "withArrow": {
        "defaultValue": null,
        "description": "Renders arrow if true",
        "name": "withArrow",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "withinPortal": {
        "defaultValue": null,
        "description": "Whether to render the dropdown in a Portal",
        "name": "withinPortal",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "zIndex": {
        "defaultValue": null,
        "description": "Menu body z-index",
        "name": "zIndex",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "Modal": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Modal/Modal.tsx",
    "displayName": "@mantine/core/Modal",
    "props": {
      "centered": {
        "defaultValue": null,
        "description": "Controls if modal should be centered",
        "name": "centered",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "closeButtonLabel": {
        "defaultValue": null,
        "description": "Close button aria-label",
        "name": "closeButtonLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "closeOnClickOutside": {
        "defaultValue": null,
        "description": "Should modal be closed when outside click was registered?",
        "name": "closeOnClickOutside",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "closeOnEscape": {
        "defaultValue": null,
        "description": "Should modal be closed when escape is pressed?",
        "name": "closeOnEscape",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "id base, used to generate ids to connect modal title and body with aria- attributes, defaults to random id",
        "name": "id",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Called when close button clicked and when escape key is pressed",
        "name": "onClose",
        "required": true,
        "type": {
          "name": "() => void"
        }
      },
      "opened": {
        "defaultValue": null,
        "description": "Mounts modal if true",
        "name": "opened",
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "overflow": {
        "defaultValue": null,
        "description": "Control vertical overflow behavior",
        "name": "overflow",
        "required": false,
        "type": {
          "name": "\"inside\" | \"outside\""
        }
      },
      "overlayBlur": {
        "defaultValue": null,
        "description": "Overlay blur in px",
        "name": "overlayBlur",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "overlayColor": {
        "defaultValue": null,
        "description": "Overlay color",
        "name": "overlayColor",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "overlayOpacity": {
        "defaultValue": null,
        "description": "Overlay opacity",
        "name": "overlayOpacity",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "padding": {
        "defaultValue": null,
        "description": "Modal padding from theme or number value for padding in px",
        "name": "padding",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Modal radius",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "shadow": {
        "defaultValue": null,
        "description": "Modal shadow from theme or css value",
        "name": "shadow",
        "required": false,
        "type": {
          "name": "MantineShadow"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Modal body width",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "target": {
        "defaultValue": null,
        "description": "Target element or selector where modal portal should be rendered",
        "name": "target",
        "required": false,
        "type": {
          "name": "string | HTMLElement"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "Modal title, displayed in header before close button",
        "name": "title",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "transition": {
        "defaultValue": null,
        "description": "Modal body transition",
        "name": "transition",
        "required": false,
        "type": {
          "name": "MantineTransition"
        }
      },
      "transitionDuration": {
        "defaultValue": null,
        "description": "Duration in ms of modal transitions, set to 0 to disable all animations",
        "name": "transitionDuration",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "transitionTimingFunction": {
        "defaultValue": null,
        "description": "Modal body transitionTimingFunction, defaults to theme.transitionTimingFunction",
        "name": "transitionTimingFunction",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "trapFocus": {
        "defaultValue": null,
        "description": "Disables focus trap",
        "name": "trapFocus",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "withCloseButton": {
        "defaultValue": null,
        "description": "Hides close button if set to false, modal still can be closed with escape key and by clicking outside",
        "name": "withCloseButton",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "withinPortal": {
        "defaultValue": null,
        "description": "Determines whether modal should be rendered within Portal, defaults to true",
        "name": "withinPortal",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "zIndex": {
        "defaultValue": null,
        "description": "Modal z-index property",
        "name": "zIndex",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "MultiSelect": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/MultiSelect/MultiSelect.tsx",
    "displayName": "@mantine/core/MultiSelect",
    "props": {
      "clearButtonLabel": {
        "defaultValue": null,
        "description": "aria-label for clear button",
        "name": "clearButtonLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "clearButtonTabIndex": {
        "defaultValue": null,
        "description": "Set the clear button tab index to disabled or default after input field",
        "name": "clearButtonTabIndex",
        "required": false,
        "type": {
          "name": "0 | -1"
        }
      },
      "clearSearchOnBlur": {
        "defaultValue": null,
        "description": "Clear search field value on blur",
        "name": "clearSearchOnBlur",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "clearSearchOnChange": {
        "defaultValue": null,
        "description": "Clear search value when item is selected",
        "name": "clearSearchOnChange",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "clearable": {
        "defaultValue": null,
        "description": "Allow to clear item",
        "name": "clearable",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "creatable": {
        "defaultValue": null,
        "description": "Allow creatable option",
        "name": "creatable",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Select data used to renderer items in dropdown",
        "name": "data",
        "required": true,
        "type": {
          "name": "(string | SelectItem)[]"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Uncontrolled input defaultValue",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "string[]"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Input description, displayed after label",
        "name": "description",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props spread to description element",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disabled input state",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "dropdownComponent": {
        "defaultValue": null,
        "description": "Change dropdown component, can be used to add custom scrollbars",
        "name": "dropdownComponent",
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "dropdownPosition": {
        "defaultValue": null,
        "description": "Dropdown positioning behavior",
        "name": "dropdownPosition",
        "required": false,
        "type": {
          "name": "\"bottom\" | \"top\" | \"flip\""
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Displays error message after input",
        "name": "error",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props spread to error element",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "filter": {
        "defaultValue": null,
        "description": "Function based on which items in dropdown are filtered",
        "name": "filter",
        "required": false,
        "type": {
          "name": "(value: string, selected: boolean, item: SelectItem) => boolean"
        }
      },
      "getCreateLabel": {
        "defaultValue": null,
        "description": "Function to get create Label",
        "name": "getCreateLabel",
        "required": false,
        "type": {
          "name": "(query: string) => ReactNode"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Adds icon on the left side of input",
        "name": "icon",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "iconWidth": {
        "defaultValue": null,
        "description": "Width of icon section in px",
        "name": "iconWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "initiallyOpened": {
        "defaultValue": null,
        "description": "Initial dropdown opened state",
        "name": "initiallyOpened",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "itemComponent": {
        "defaultValue": null,
        "description": "Change item renderer",
        "name": "itemComponent",
        "required": false,
        "type": {
          "name": "FC<any>"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Input label, displayed before input",
        "name": "label",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props spread to label element",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, \"key\" | keyof LabelHTMLAttributes<...>> & { ...; }"
        }
      },
      "limit": {
        "defaultValue": null,
        "description": "Limit amount of items displayed at a time for searchable select",
        "name": "limit",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "maxDropdownHeight": {
        "defaultValue": null,
        "description": "Maximum dropdown height in px",
        "name": "maxDropdownHeight",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "maxSelectedValues": {
        "defaultValue": null,
        "description": "Limit amount of items selected",
        "name": "maxSelectedValues",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "nothingFound": {
        "defaultValue": null,
        "description": "Nothing found label",
        "name": "nothingFound",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Controlled input onChange handler",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "(value: string[]) => void"
        }
      },
      "onCreate": {
        "defaultValue": null,
        "description": "Called when create option is selected",
        "name": "onCreate",
        "required": false,
        "type": {
          "name": "(query: string) => void"
        }
      },
      "onDropdownClose": {
        "defaultValue": null,
        "description": "Called when dropdown is closed",
        "name": "onDropdownClose",
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onDropdownOpen": {
        "defaultValue": null,
        "description": "Called when dropdown is opened",
        "name": "onDropdownOpen",
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onSearchChange": {
        "defaultValue": null,
        "description": "Called each time search query changes",
        "name": "onSearchChange",
        "required": false,
        "type": {
          "name": "(query: string) => void"
        }
      },
      "positionDependencies": {
        "defaultValue": null,
        "description": "useEffect dependencies to force update dropdown position",
        "name": "positionDependencies",
        "required": false,
        "type": {
          "name": "any[]"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Input border-radius from theme or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Adds red asterisk on the right side of label\nSets required on input element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Right section of input, similar to icon but on the right",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "rightSectionProps": {
        "defaultValue": null,
        "description": "Props spread to rightSection div element",
        "name": "rightSectionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>>"
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Width of right section, is used to calculate input padding-right",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "searchable": {
        "defaultValue": null,
        "description": "Enable items searching",
        "name": "searchable",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "selectOnBlur": {
        "defaultValue": null,
        "description": "Select highlighted item on blur",
        "name": "selectOnBlur",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "shadow": {
        "defaultValue": null,
        "description": "Dropdown shadow from theme or any value to set box-shadow",
        "name": "shadow",
        "required": false,
        "type": {
          "name": "MantineShadow"
        }
      },
      "shouldCreate": {
        "defaultValue": null,
        "description": "Function to determine if create label should be displayed",
        "name": "shouldCreate",
        "required": false,
        "type": {
          "name": "(query: string, data: SelectItem[]) => boolean"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Input size",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "switchDirectionOnFlip": {
        "defaultValue": null,
        "description": "Whether to switch item order and keyboard navigation on dropdown position flip",
        "name": "switchDirectionOnFlip",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "transition": {
        "defaultValue": null,
        "description": "Dropdown body appear/disappear transition",
        "name": "transition",
        "required": false,
        "type": {
          "name": "MantineTransition"
        }
      },
      "transitionDuration": {
        "defaultValue": null,
        "description": "Dropdown body transition duration",
        "name": "transitionDuration",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "transitionTimingFunction": {
        "defaultValue": null,
        "description": "Dropdown body transition timing function, defaults to theme.transitionTimingFunction",
        "name": "transitionTimingFunction",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Controlled input value",
        "name": "value",
        "required": false,
        "type": {
          "name": "string[]"
        }
      },
      "valueComponent": {
        "defaultValue": null,
        "description": "Component used to render values",
        "name": "valueComponent",
        "required": false,
        "type": {
          "name": "FC<any>"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Defines input appearance, defaults to default in light color scheme and filled in dark",
        "name": "variant",
        "required": false,
        "type": {
          "name": "InputVariant"
        }
      },
      "withinPortal": {
        "defaultValue": null,
        "description": "Whether to render the dropdown in a Portal",
        "name": "withinPortal",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Properties spread to root element",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "{ [key: string]: any; }"
        }
      },
      "zIndex": {
        "defaultValue": null,
        "description": "Dropdown z-index",
        "name": "zIndex",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "NativeSelect": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/NativeSelect/NativeSelect.tsx",
    "displayName": "@mantine/core/NativeSelect",
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Data used to render options",
        "name": "data",
        "required": true,
        "type": {
          "name": "(string | SelectItem)[]"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Input description, displayed after label",
        "name": "description",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props spread to description element",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disabled input state",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Displays error message after input",
        "name": "error",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props spread to error element",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Adds icon on the left side of input",
        "name": "icon",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "iconWidth": {
        "defaultValue": null,
        "description": "Width of icon section in px",
        "name": "iconWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "id is used to bind input and label, if not passed unique id will be generated for each input",
        "name": "id",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inputStyle": {
        "defaultValue": null,
        "description": "Style properties added to select element",
        "name": "inputStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Input label, displayed before input",
        "name": "label",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props spread to label element",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, \"key\" | keyof LabelHTMLAttributes<...>> & { ...; }"
        }
      },
      "placeholder": {
        "defaultValue": null,
        "description": "Adds hidden option to select and sets it as selected if value is not present",
        "name": "placeholder",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Input border-radius from theme or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Adds red asterisk on the right side of label",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Right section of input, similar to icon but on the right",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "rightSectionProps": {
        "defaultValue": null,
        "description": "Props spread to rightSection div element",
        "name": "rightSectionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>>"
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Width of right section, is used to calculate input padding-right",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Input size",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Defines input appearance, defaults to default in light color scheme and filled in dark",
        "name": "variant",
        "required": false,
        "type": {
          "name": "InputVariant"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props passed to root element (InputWrapper component)",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "{ [key: string]: any; }"
        }
      }
    }
  },
  "Notification": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Notification/Notification.tsx",
    "displayName": "@mantine/core/Notification",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Notification body, place main text here",
        "name": "children",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "closeButtonProps": {
        "defaultValue": null,
        "description": "Props spread to close button",
        "name": "closeButtonProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, \"key\" | keyof ButtonHTMLAttributes<...>> & { ...; }"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Notification line or icon color",
        "name": "color",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      },
      "disallowClose": {
        "defaultValue": null,
        "description": "Removes close button",
        "name": "disallowClose",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Notification icon, replaces color line",
        "name": "icon",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "Replaces colored line or icon with Loader component",
        "name": "loading",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Called when close button is clicked",
        "name": "onClose",
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Radius from theme.radius, or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "Notification title, displayed before body",
        "name": "title",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      }
    }
  },
  "NumberInput": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/NumberInput/NumberInput.tsx",
    "displayName": "@mantine/core/NumberInput",
    "props": {
      "__staticSelector": {
        "defaultValue": null,
        "description": "Static css selector base",
        "name": "__staticSelector",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "decimalSeparator": {
        "defaultValue": null,
        "description": "The decimal separator",
        "name": "decimalSeparator",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Default value for uncontrolled variant only",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Input description, displayed after label",
        "name": "description",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props spread to description element",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disabled input state",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Displays error message after input",
        "name": "error",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props spread to error element",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "formatter": {
        "defaultValue": null,
        "description": "Formats the number into the input",
        "name": "formatter",
        "required": false,
        "type": {
          "name": "Formatter"
        }
      },
      "handlersRef": {
        "defaultValue": null,
        "description": "Get increment/decrement handlers",
        "name": "handlersRef",
        "required": false,
        "type": {
          "name": "ForwardedRef<NumberInputHandlers>"
        }
      },
      "hideControls": {
        "defaultValue": null,
        "description": "Removes increment/decrement controls",
        "name": "hideControls",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Adds icon on the left side of input",
        "name": "icon",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "iconWidth": {
        "defaultValue": null,
        "description": "Width of icon section in px",
        "name": "iconWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "id is used to bind input and label, if not passed unique id will be generated for each input",
        "name": "id",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Input label, displayed before input",
        "name": "label",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props spread to label element",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, \"key\" | keyof LabelHTMLAttributes<...>> & { ...; }"
        }
      },
      "max": {
        "defaultValue": null,
        "description": "Maximum possible value",
        "name": "max",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "min": {
        "defaultValue": null,
        "description": "Minimal possible value",
        "name": "min",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "noClampOnBlur": {
        "defaultValue": null,
        "description": "Prevent value clamp on blur",
        "name": "noClampOnBlur",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "onChange input handler for controlled variant, note that input event is not exposed. It will return undefined if the input is empty, otherwise it'll return a number",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "(value: number) => void"
        }
      },
      "parser": {
        "defaultValue": null,
        "description": "Parses the value from formatter, should be used with formatter at the same time",
        "name": "parser",
        "required": false,
        "type": {
          "name": "Parser"
        }
      },
      "precision": {
        "defaultValue": null,
        "description": "Amount of digits after the decimal point",
        "name": "precision",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Input border-radius from theme or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets required on input element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Right section of input, similar to icon but on the right",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "rightSectionProps": {
        "defaultValue": null,
        "description": "Props spread to rightSection div element",
        "name": "rightSectionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>>"
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Width of right section, is used to calculate input padding-right",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Input size",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "step": {
        "defaultValue": null,
        "description": "Number by which value will be incremented/decremented with controls and up/down arrows",
        "name": "step",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "stepHoldDelay": {
        "defaultValue": null,
        "description": "Initial delay in milliseconds before stepping the value.",
        "name": "stepHoldDelay",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "stepHoldInterval": {
        "defaultValue": null,
        "description": "Delay before stepping the value. Can be a number of milliseconds or a function that receives the current step count and returns the delay in milliseconds.",
        "name": "stepHoldInterval",
        "required": false,
        "type": {
          "name": "number | ((stepCount: number) => number)"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Input value for controlled variant",
        "name": "value",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Defines input appearance, defaults to default in light color scheme and filled in dark",
        "name": "variant",
        "required": false,
        "type": {
          "name": "InputVariant"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props passed to root element (InputWrapper component)",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "{ [key: string]: any; }"
        }
      }
    }
  },
  "Overlay": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Overlay/Overlay.tsx",
    "displayName": "@mantine/core/Overlay",
    "props": {
      "blur": {
        "defaultValue": null,
        "description": "Overlay background blur in px",
        "name": "blur",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Overlay background-color",
        "name": "color",
        "required": false,
        "type": {
          "name": "BackgroundColor"
        }
      },
      "component": {
        "defaultValue": null,
        "description": "Tag or component that should be used as root element",
        "name": "component",
        "required": false,
        "type": {
          "name": "\"symbol\" | \"object\" | \"clipPath\" | \"filter\" | \"mask\" | \"marker\" | \"label\" | \"big\" | \"link\" | \"small\" | \"sub\" | \"sup\" | \"ruby\" | \"table\" | \"div\" | \"a\" | \"abbr\" | \"address\" | \"area\" | ... 157 more ... | FunctionComponent<...>"
        }
      },
      "gradient": {
        "defaultValue": null,
        "description": "Use gradient instead of background-color",
        "name": "gradient",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "opacity": {
        "defaultValue": null,
        "description": "Overlay opacity",
        "name": "opacity",
        "required": false,
        "type": {
          "name": "Opacity"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Value from theme.radius or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "zIndex": {
        "defaultValue": null,
        "description": "Overlay z-index",
        "name": "zIndex",
        "required": false,
        "type": {
          "name": "ZIndex"
        }
      }
    }
  },
  "Pagination": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Pagination/Pagination.tsx",
    "displayName": "@mantine/core/Pagination",
    "props": {
      "align": {
        "defaultValue": null,
        "description": "Defines align-items css property",
        "name": "align",
        "required": false,
        "type": {
          "name": "AlignItems"
        }
      },
      "boundaries": {
        "defaultValue": null,
        "description": "Amount of elements visible on left/right edges",
        "name": "boundaries",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Active item color from theme, defaults to theme.primaryColor",
        "name": "color",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      },
      "direction": {
        "defaultValue": null,
        "description": "Defines flex-direction property, row for horizontal, column for vertical",
        "name": "direction",
        "required": false,
        "type": {
          "name": "\"row\" | \"column\""
        }
      },
      "getItemAriaLabel": {
        "defaultValue": null,
        "description": "Callback to control aria-labels",
        "name": "getItemAriaLabel",
        "required": false,
        "type": {
          "name": "(page: number | \"dots\" | \"first\" | \"last\" | \"next\" | \"prev\") => string"
        }
      },
      "grow": {
        "defaultValue": null,
        "description": "Defines flex-grow property for each element, true -> 1, false -> 0",
        "name": "grow",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "initialPage": {
        "defaultValue": null,
        "description": "Active initial page for uncontrolled component",
        "name": "initialPage",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "itemComponent": {
        "defaultValue": null,
        "description": "Change item component",
        "name": "itemComponent",
        "required": false,
        "type": {
          "name": "FC<PaginationItemProps>"
        }
      },
      "noWrap": {
        "defaultValue": null,
        "description": "Defined flex-wrap property",
        "name": "noWrap",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Callback fired after change of each page",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "(page: number) => void"
        }
      },
      "page": {
        "defaultValue": null,
        "description": "Controlled active page number",
        "name": "page",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "position": {
        "defaultValue": null,
        "description": "Defines justify-content property",
        "name": "position",
        "required": false,
        "type": {
          "name": "\"right\" | \"center\" | \"left\" | \"apart\""
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Predefined item radius or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "siblings": {
        "defaultValue": null,
        "description": "Siblings amount on left/right side of selected page",
        "name": "siblings",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Predefined item size or number to set width and height in px",
        "name": "size",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "spacing": {
        "defaultValue": null,
        "description": "Spacing between items from theme or number to set value in px, defaults to theme.spacing.xs / 2",
        "name": "spacing",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "total": {
        "defaultValue": null,
        "description": "Total amount of pages",
        "name": "total",
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "withControls": {
        "defaultValue": null,
        "description": "Show/hide prev/next controls",
        "name": "withControls",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "withEdges": {
        "defaultValue": null,
        "description": "Show/hide jump to start/end controls",
        "name": "withEdges",
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  "Paper": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Paper/Paper.tsx",
    "displayName": "@mantine/core/Paper",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Paper children",
        "name": "children",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "component": {
        "defaultValue": null,
        "description": "Tag or component that should be used as root element",
        "name": "component",
        "required": false,
        "type": {
          "name": "\"symbol\" | \"object\" | \"clipPath\" | \"filter\" | \"mask\" | \"marker\" | \"label\" | \"big\" | \"link\" | \"small\" | \"sub\" | \"sup\" | \"ruby\" | \"table\" | \"div\" | \"a\" | \"abbr\" | \"address\" | \"area\" | ... 157 more ... | FunctionComponent<...>"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Predefined border-radius value from theme.radius or number for border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "shadow": {
        "defaultValue": null,
        "description": "Predefined box-shadow from theme.shadows (xs, sm, md, lg, xl) or any valid css box-shadow property",
        "name": "shadow",
        "required": false,
        "type": {
          "name": "MantineShadow"
        }
      },
      "withBorder": {
        "defaultValue": null,
        "description": "Adds 1px border with theme.colors.gray[2] color in light color scheme and theme.colors.dark[6] in dark color scheme",
        "name": "withBorder",
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  "PasswordInput": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/PasswordInput/PasswordInput.tsx",
    "displayName": "@mantine/core/PasswordInput",
    "props": {
      "__staticSelector": {
        "defaultValue": null,
        "description": "Static css selector base",
        "name": "__staticSelector",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Input description, displayed after label",
        "name": "description",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props spread to description element",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disabled input state",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Displays error message after input",
        "name": "error",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props spread to error element",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Adds icon on the left side of input",
        "name": "icon",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "iconWidth": {
        "defaultValue": null,
        "description": "Width of icon section in px",
        "name": "iconWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "id is used to bind input and label, if not passed unique id will be generated for each input",
        "name": "id",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Input label, displayed before input",
        "name": "label",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props spread to label element",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, \"key\" | keyof LabelHTMLAttributes<...>> & { ...; }"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Input border-radius from theme or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets required on input element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Right section of input, similar to icon but on the right",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "rightSectionProps": {
        "defaultValue": null,
        "description": "Props spread to rightSection div element",
        "name": "rightSectionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>>"
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Width of right section, is used to calculate input padding-right",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Input size",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "toggleTabIndex": {
        "defaultValue": null,
        "description": "Toggle button tabIndex, set to 0 to make button focusable with tab key",
        "name": "toggleTabIndex",
        "required": false,
        "type": {
          "name": "0 | -1"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "Input element type",
        "name": "type",
        "required": false,
        "type": {
          "name": "\"number\" | \"search\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"password\""
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Defines input appearance, defaults to default in light color scheme and filled in dark",
        "name": "variant",
        "required": false,
        "type": {
          "name": "InputVariant"
        }
      },
      "visibilityToggleIcon": {
        "defaultValue": null,
        "description": "Provide your own visibility toggle icon",
        "name": "visibilityToggleIcon",
        "required": false,
        "type": {
          "name": "FC<{ reveal: boolean; size: number; }>"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props passed to root element (InputWrapper component)",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "{ [key: string]: any; }"
        }
      }
    }
  },
  "Popover": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Popover/Popover.tsx",
    "displayName": "@mantine/core/Popover",
    "props": {
      "arrowDistance": {
        "defaultValue": null,
        "description": "Arrow distance to the left/right * arrowSize",
        "name": "arrowDistance",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "arrowSize": {
        "defaultValue": null,
        "description": "Arrow size in px",
        "name": "arrowSize",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Content inside popover",
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "clickOutsideEvents": {
        "defaultValue": null,
        "description": "Events that should trigger outside clicks",
        "name": "clickOutsideEvents",
        "required": false,
        "type": {
          "name": "string[]"
        }
      },
      "closeButtonLabel": {
        "defaultValue": null,
        "description": "aria-label for close button",
        "name": "closeButtonLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "closeOnClickOutside": {
        "defaultValue": null,
        "description": "Defines whether Popover can be closed with outside click, defaults to true",
        "name": "closeOnClickOutside",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "closeOnEscape": {
        "defaultValue": null,
        "description": "Defines whether Popover can be closed with Escape key, defaults to true",
        "name": "closeOnEscape",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "True to disable popover",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "exitTransitionDuration": {
        "defaultValue": null,
        "description": "Unmount transition duration in ms",
        "name": "exitTransitionDuration",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "gutter": {
        "defaultValue": null,
        "description": "Spacing between element and popper in px",
        "name": "gutter",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Called when popover closes",
        "name": "onClose",
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "opened": {
        "defaultValue": null,
        "description": "True to display popover",
        "name": "opened",
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "placement": {
        "defaultValue": null,
        "description": "Placement relative to reference element",
        "name": "placement",
        "required": false,
        "type": {
          "name": "\"center\" | \"end\" | \"start\""
        }
      },
      "position": {
        "defaultValue": null,
        "description": "Position relative to reference element",
        "name": "position",
        "required": false,
        "type": {
          "name": "\"bottom\" | \"left\" | \"right\" | \"top\""
        }
      },
      "positionDependencies": {
        "defaultValue": null,
        "description": "useEffect dependencies to force update tooltip position",
        "name": "positionDependencies",
        "required": false,
        "type": {
          "name": "any[]"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Popover body radius, value from theme.radius or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "shadow": {
        "defaultValue": null,
        "description": "Popover shadow, value from theme.shadows or string to set box-shadow to any value",
        "name": "shadow",
        "required": false,
        "type": {
          "name": "MantineShadow"
        }
      },
      "spacing": {
        "defaultValue": null,
        "description": "Popover body padding, value from theme.spacing or number to set padding in px",
        "name": "spacing",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "target": {
        "defaultValue": null,
        "description": "Element which is used to position popover",
        "name": "target",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "Popover title",
        "name": "title",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "transition": {
        "defaultValue": null,
        "description": "Customize mount/unmount transition",
        "name": "transition",
        "required": false,
        "type": {
          "name": "MantineTransition"
        }
      },
      "transitionDuration": {
        "defaultValue": null,
        "description": "Mount transition duration in ms",
        "name": "transitionDuration",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "transitionTimingFunction": {
        "defaultValue": null,
        "description": "Mount/unmount transition timing function, defaults to theme.transitionTimingFunction",
        "name": "transitionTimingFunction",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "trapFocus": {
        "defaultValue": null,
        "description": "Defines whether Popover should trap focus, defaults to true",
        "name": "trapFocus",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Popover body width",
        "name": "width",
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "withArrow": {
        "defaultValue": null,
        "description": "Renders arrow if true",
        "name": "withArrow",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "withCloseButton": {
        "defaultValue": null,
        "description": "Displays close button",
        "name": "withCloseButton",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "withinPortal": {
        "defaultValue": null,
        "description": "Whether to render the popover in a Portal",
        "name": "withinPortal",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "zIndex": {
        "defaultValue": null,
        "description": "Popper z-index",
        "name": "zIndex",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "Popper": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Popper/Popper.tsx",
    "displayName": "@mantine/core/Popper",
    "props": {
      "arrowClassName": {
        "defaultValue": null,
        "description": "Arrow class name",
        "name": "arrowClassName",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "arrowDistance": {
        "defaultValue": {
          "value": "2"
        },
        "description": "Arrow distance to the left/right * arrowSize",
        "name": "arrowDistance",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "arrowSize": {
        "defaultValue": {
          "value": "2"
        },
        "description": "Arrow size in px",
        "name": "arrowSize",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "arrowStyle": {
        "defaultValue": null,
        "description": "Arrow inline styles",
        "name": "arrowStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Popper content",
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "exitTransitionDuration": {
        "defaultValue": null,
        "description": "Unmount transition duration in ms",
        "name": "exitTransitionDuration",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "forceUpdateDependencies": {
        "defaultValue": {
          "value": "[]"
        },
        "description": "useEffect dependencies to force update popper position",
        "name": "forceUpdateDependencies",
        "required": false,
        "type": {
          "name": "any[]"
        }
      },
      "gutter": {
        "defaultValue": {
          "value": "5"
        },
        "description": "Spacing between element and popper in px",
        "name": "gutter",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "modifiers": {
        "defaultValue": {
          "value": "[]"
        },
        "description": "Popperjs modifiers array",
        "name": "modifiers",
        "required": false,
        "type": {
          "name": "StrictModifier<StrictModifierNames>[]"
        }
      },
      "mounted": {
        "defaultValue": null,
        "description": "True to show popper, false to hide",
        "name": "mounted",
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "onTransitionEnd": {
        "defaultValue": null,
        "description": "Called when transition ends",
        "name": "onTransitionEnd",
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "placement": {
        "defaultValue": {
          "value": "center"
        },
        "description": "Placement relative to reference element",
        "name": "placement",
        "required": false,
        "type": {
          "name": "\"center\" | \"end\" | \"start\""
        }
      },
      "position": {
        "defaultValue": {
          "value": "top"
        },
        "description": "Position relative to reference element",
        "name": "position",
        "required": false,
        "type": {
          "name": "\"bottom\" | \"left\" | \"right\" | \"top\""
        }
      },
      "referenceElement": {
        "defaultValue": null,
        "description": "Element at which popper should be attached",
        "name": "referenceElement",
        "required": true,
        "type": {
          "name": "HTMLElement"
        }
      },
      "transition": {
        "defaultValue": {
          "value": "pop-top-left"
        },
        "description": "Customize mount/unmount transition",
        "name": "transition",
        "required": false,
        "type": {
          "name": "MantineTransition"
        }
      },
      "transitionDuration": {
        "defaultValue": null,
        "description": "Mount transition duration in ms",
        "name": "transitionDuration",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "transitionTimingFunction": {
        "defaultValue": null,
        "description": "Mount/unmount transition timing function, defaults to theme.transitionTimingFunction",
        "name": "transitionTimingFunction",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "withArrow": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Renders arrow if true",
        "name": "withArrow",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "withinPortal": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether to render the target element in a Portal",
        "name": "withinPortal",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "zIndex": {
        "defaultValue": {
          "value": "getDefaultZIndex('popover')"
        },
        "description": "Popper z-index",
        "name": "zIndex",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "Portal": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Portal/Portal.tsx",
    "displayName": "@mantine/core/Portal",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Portal children, for example, modal or popover",
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "position": {
        "defaultValue": null,
        "description": "Root element position property",
        "name": "position",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "target": {
        "defaultValue": null,
        "description": "Element where portal should be rendered, by default new div element is created and appended to document.body",
        "name": "target",
        "required": false,
        "type": {
          "name": "string | HTMLElement"
        }
      },
      "zIndex": {
        "defaultValue": null,
        "description": "Root element z-index property",
        "name": "zIndex",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "Progress": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Progress/Progress.tsx",
    "displayName": "@mantine/core/Progress",
    "props": {
      "animate": {
        "defaultValue": null,
        "description": "Whether to animate striped progress bars",
        "name": "animate",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Progress color from theme",
        "name": "color",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Text to be placed inside the progress bar",
        "name": "label",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Predefined progress radius from theme.radius or number for height in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "sections": {
        "defaultValue": null,
        "description": "Replaces value if present, renders multiple sections instead of single one",
        "name": "sections",
        "required": false,
        "type": {
          "name": "{ value: number; color: DefaultMantineColor; label?: string; }[]"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Predefined progress height or number for height in px",
        "name": "size",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "striped": {
        "defaultValue": null,
        "description": "Adds stripes",
        "name": "striped",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Percent of filled bar (0-100)",
        "name": "value",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "RadioGroup": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/RadioGroup/RadioGroup.tsx",
    "displayName": "@mantine/core/RadioGroup",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "<Radio /> components only",
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Active radio color from theme.colors",
        "name": "color",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Initial value for uncontrolled component",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Input description, displayed after label",
        "name": "description",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props spread to description element",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Displays error message after input",
        "name": "error",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props spread to error element",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Input label, displayed before input",
        "name": "label",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props spread to label element",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, \"key\" | keyof LabelHTMLAttributes<...>> & { ...; }"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "Input name attribute, used to bind radios in one group, by default generated randomly with use-id hook",
        "name": "name",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called when value changes",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "(value: string) => void"
        }
      },
      "orientation": {
        "defaultValue": null,
        "description": "Horizontal or vertical orientation",
        "name": "orientation",
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\""
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Adds red asterisk on the right side of label",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Predefined label fontSize, radio width, height and border-radius",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "spacing": {
        "defaultValue": null,
        "description": "Spacing between radios in horizontal orientation",
        "name": "spacing",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Value of currently selected radio",
        "name": "value",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props spread to InputWrapper",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "{ [key: string]: any; }"
        }
      }
    }
  },
  "RingProgress": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/RingProgress/RingProgress.tsx",
    "displayName": "@mantine/core/RingProgress",
    "props": {
      "label": {
        "defaultValue": null,
        "description": "Label displayed in the center of the ring",
        "name": "label",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "roundCaps": {
        "defaultValue": null,
        "description": "Sets whether the edges of the progress circle are rounded",
        "name": "roundCaps",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "sections": {
        "defaultValue": null,
        "description": "Ring sections",
        "name": "sections",
        "required": true,
        "type": {
          "name": "{ value: number; color: DefaultMantineColor; }[]"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Width and height of the progress ring in px",
        "name": "size",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "thickness": {
        "defaultValue": null,
        "description": "Ring thickness",
        "name": "thickness",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "ScrollArea": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/ScrollArea/ScrollArea.tsx",
    "displayName": "@mantine/core/ScrollArea",
    "props": {
      "dir": {
        "defaultValue": null,
        "description": "Reading direction of the scroll area",
        "name": "dir",
        "required": false,
        "type": {
          "name": "\"ltr\" | \"rtl\""
        }
      },
      "offsetScrollbars": {
        "defaultValue": null,
        "description": "Should scrollbars be offset with padding",
        "name": "offsetScrollbars",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onScrollPositionChange": {
        "defaultValue": null,
        "description": "Subscribe to scroll position changes",
        "name": "onScrollPositionChange",
        "required": false,
        "type": {
          "name": "(position: { x: number; y: number; }) => void"
        }
      },
      "scrollHideDelay": {
        "defaultValue": null,
        "description": "Scroll hide delay in ms, for scroll and hover types only",
        "name": "scrollHideDelay",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "scrollbarSize": {
        "defaultValue": null,
        "description": "Scrollbar size in px",
        "name": "scrollbarSize",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "Scrollbars type",
        "name": "type",
        "required": false,
        "type": {
          "name": "\"auto\" | \"scroll\" | \"always\" | \"hover\""
        }
      },
      "viewportRef": {
        "defaultValue": null,
        "description": "Get viewport ref",
        "name": "viewportRef",
        "required": false,
        "type": {
          "name": "ForwardedRef<HTMLDivElement>"
        }
      }
    }
  },
  "SegmentedControl": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/SegmentedControl/SegmentedControl.tsx",
    "displayName": "@mantine/core/SegmentedControl",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "Active control color from theme.colors, defaults to white in light color scheme and theme.colors.dark[9] in dark",
        "name": "color",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Data based on which controls are rendered",
        "name": "data",
        "required": true,
        "type": {
          "name": "string[] | SegmentedControlItem[]"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Default value for uncontrolled component",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disabled input state",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "fullWidth": {
        "defaultValue": null,
        "description": "True if component should have 100% width",
        "name": "fullWidth",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "Name of the radio group, default to random id",
        "name": "name",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called when value changes",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "(value: string) => void"
        }
      },
      "orientation": {
        "defaultValue": null,
        "description": "Display Vertically",
        "name": "orientation",
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\""
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Border-radius from theme or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Controls font-size, paddings and height",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "transitionDuration": {
        "defaultValue": null,
        "description": "Transition duration in ms, set to 0 to turn off transitions",
        "name": "transitionDuration",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "transitionTimingFunction": {
        "defaultValue": null,
        "description": "Transition timing function for all transitions, defaults to theme.transitionTimingFunction",
        "name": "transitionTimingFunction",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Current selected value",
        "name": "value",
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  "Select": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Select/Select.tsx",
    "displayName": "@mantine/core/Select",
    "props": {
      "allowDeselect": {
        "defaultValue": null,
        "description": "Allow deselecting items on click",
        "name": "allowDeselect",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "clearButtonLabel": {
        "defaultValue": null,
        "description": "aria-label for clear button",
        "name": "clearButtonLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "clearButtonTabIndex": {
        "defaultValue": null,
        "description": "Set the clear button tab index to disabled or default after input field",
        "name": "clearButtonTabIndex",
        "required": false,
        "type": {
          "name": "0 | -1"
        }
      },
      "clearable": {
        "defaultValue": null,
        "description": "Allow to clear item",
        "name": "clearable",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "creatable": {
        "defaultValue": null,
        "description": "Allow creatable option",
        "name": "creatable",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Select data used to renderer items in dropdown",
        "name": "data",
        "required": true,
        "type": {
          "name": "(string | SelectItem)[]"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Uncontrolled input defaultValue",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Input description, displayed after label",
        "name": "description",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props spread to description element",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disabled input state",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "dropdownComponent": {
        "defaultValue": null,
        "description": "Change dropdown component, can be used to add native scrollbars",
        "name": "dropdownComponent",
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "dropdownPosition": {
        "defaultValue": null,
        "description": "Dropdown positioning behavior",
        "name": "dropdownPosition",
        "required": false,
        "type": {
          "name": "\"bottom\" | \"top\" | \"flip\""
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Displays error message after input",
        "name": "error",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props spread to error element",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "filter": {
        "defaultValue": null,
        "description": "Function based on which items in dropdown are filtered",
        "name": "filter",
        "required": false,
        "type": {
          "name": "(value: string, item: SelectItem) => boolean"
        }
      },
      "filterDataOnExactSearchMatch": {
        "defaultValue": null,
        "description": "Should data be filtered when search value exactly matches selected item",
        "name": "filterDataOnExactSearchMatch",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "getCreateLabel": {
        "defaultValue": null,
        "description": "Function to get create Label",
        "name": "getCreateLabel",
        "required": false,
        "type": {
          "name": "(query: string) => ReactNode"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Adds icon on the left side of input",
        "name": "icon",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "iconWidth": {
        "defaultValue": null,
        "description": "Width of icon section in px",
        "name": "iconWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "initiallyOpened": {
        "defaultValue": null,
        "description": "Initial dropdown opened state",
        "name": "initiallyOpened",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "itemComponent": {
        "defaultValue": null,
        "description": "Change item renderer",
        "name": "itemComponent",
        "required": false,
        "type": {
          "name": "FC<any>"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Input label, displayed before input",
        "name": "label",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props spread to label element",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, \"key\" | keyof LabelHTMLAttributes<...>> & { ...; }"
        }
      },
      "limit": {
        "defaultValue": null,
        "description": "Limit amount of items displayed at a time for searchable select",
        "name": "limit",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "maxDropdownHeight": {
        "defaultValue": null,
        "description": "Maximum dropdown height in px",
        "name": "maxDropdownHeight",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "nothingFound": {
        "defaultValue": null,
        "description": "Nothing found label",
        "name": "nothingFound",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Controlled input onChange handler",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "(value: string) => void"
        }
      },
      "onCreate": {
        "defaultValue": null,
        "description": "Called when create option is selected",
        "name": "onCreate",
        "required": false,
        "type": {
          "name": "(query: string) => void"
        }
      },
      "onDropdownClose": {
        "defaultValue": null,
        "description": "Called when dropdown is closed",
        "name": "onDropdownClose",
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onDropdownOpen": {
        "defaultValue": null,
        "description": "Called when dropdown is opened",
        "name": "onDropdownOpen",
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onSearchChange": {
        "defaultValue": null,
        "description": "Called each time search value changes",
        "name": "onSearchChange",
        "required": false,
        "type": {
          "name": "(query: string) => void"
        }
      },
      "positionDependencies": {
        "defaultValue": null,
        "description": "useEffect dependencies to force update dropdown position",
        "name": "positionDependencies",
        "required": false,
        "type": {
          "name": "any[]"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Input border-radius from theme or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Adds red asterisk on the right side of label\nSets required on input element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Right section of input, similar to icon but on the right",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "rightSectionProps": {
        "defaultValue": null,
        "description": "Props spread to rightSection div element",
        "name": "rightSectionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>>"
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Width of right section, is used to calculate input padding-right",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "searchable": {
        "defaultValue": null,
        "description": "Set to true to enable search",
        "name": "searchable",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "selectOnBlur": {
        "defaultValue": null,
        "description": "Select highlighted item on blur",
        "name": "selectOnBlur",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "shadow": {
        "defaultValue": null,
        "description": "Dropdown shadow from theme or any value to set box-shadow",
        "name": "shadow",
        "required": false,
        "type": {
          "name": "MantineShadow"
        }
      },
      "shouldCreate": {
        "defaultValue": null,
        "description": "Function to determine if create label should be displayed",
        "name": "shouldCreate",
        "required": false,
        "type": {
          "name": "(query: string, data: SelectItem[]) => boolean"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Input size",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "switchDirectionOnFlip": {
        "defaultValue": null,
        "description": "Whether to switch item order and keyboard navigation on dropdown position flip",
        "name": "switchDirectionOnFlip",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "transition": {
        "defaultValue": null,
        "description": "Dropdown body appear/disappear transition",
        "name": "transition",
        "required": false,
        "type": {
          "name": "MantineTransition"
        }
      },
      "transitionDuration": {
        "defaultValue": null,
        "description": "Dropdown body transition duration",
        "name": "transitionDuration",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "transitionTimingFunction": {
        "defaultValue": null,
        "description": "Dropdown body transition timing function, defaults to theme.transitionTimingFunction",
        "name": "transitionTimingFunction",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Controlled input value",
        "name": "value",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Defines input appearance, defaults to default in light color scheme and filled in dark",
        "name": "variant",
        "required": false,
        "type": {
          "name": "InputVariant"
        }
      },
      "withinPortal": {
        "defaultValue": null,
        "description": "Whether to render the dropdown in a Portal",
        "name": "withinPortal",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Properties spread to root element",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "{ [key: string]: any; }"
        }
      },
      "zIndex": {
        "defaultValue": null,
        "description": "Dropdown z-index",
        "name": "zIndex",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "SimpleGrid": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/SimpleGrid/SimpleGrid.tsx",
    "displayName": "@mantine/core/SimpleGrid",
    "props": {
      "breakpoints": {
        "defaultValue": null,
        "description": "Breakpoints data to change items per row and spacing based on max-width",
        "name": "breakpoints",
        "required": false,
        "type": {
          "name": "SimpleGridBreakpoint[]"
        }
      },
      "cols": {
        "defaultValue": null,
        "description": "Default amount of columns, used when none of breakpoints can be applied",
        "name": "cols",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "spacing": {
        "defaultValue": null,
        "description": "Default spacing between columns, used when none of breakpoints can be applied",
        "name": "spacing",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      }
    }
  },
  "Skeleton": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Skeleton/Skeleton.tsx",
    "displayName": "@mantine/core/Skeleton",
    "props": {
      "animate": {
        "defaultValue": null,
        "description": "Whether to show the animation effect",
        "name": "animate",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "circle": {
        "defaultValue": null,
        "description": "If Skeleton is a circle, it's width and border-radius will be equal to height",
        "name": "circle",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Skeleton height",
        "name": "height",
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Radius from theme.radius or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "visible": {
        "defaultValue": null,
        "description": "Should skeleton overlay be displayed",
        "name": "visible",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Skeleton width",
        "name": "width",
        "required": false,
        "type": {
          "name": "string | number"
        }
      }
    }
  },
  "Space": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Space/Space.tsx",
    "displayName": "@mantine/core/Space",
    "props": {
      "h": {
        "defaultValue": null,
        "description": "Height, set to add vertical spacing",
        "name": "h",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "w": {
        "defaultValue": null,
        "description": "Width, set to add horizontal spacing",
        "name": "w",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      }
    }
  },
  "Spoiler": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Spoiler/Spoiler.tsx",
    "displayName": "@mantine/core/Spoiler",
    "props": {
      "controlRef": {
        "defaultValue": null,
        "description": "Get ref of spoiler toggle button",
        "name": "controlRef",
        "required": false,
        "type": {
          "name": "ForwardedRef<HTMLButtonElement>"
        }
      },
      "hideLabel": {
        "defaultValue": null,
        "description": "Label for close spoiler action",
        "name": "hideLabel",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "initialState": {
        "defaultValue": null,
        "description": "Initial spoiler state, true to wrap content in spoiler, false to show content without spoiler, opened state will be updated on mount",
        "name": "initialState",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "maxHeight": {
        "defaultValue": null,
        "description": "Max height of visible content, when this point is reached spoiler appears",
        "name": "maxHeight",
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "showLabel": {
        "defaultValue": null,
        "description": "Label for open spoiler action",
        "name": "showLabel",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "transitionDuration": {
        "defaultValue": null,
        "description": "Spoiler reveal transition duration in ms, 0 or null to turn off animation",
        "name": "transitionDuration",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "Stack": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Stack/Stack.tsx",
    "displayName": "@mantine/core/Stack",
    "props": {
      "align": {
        "defaultValue": null,
        "description": "",
        "name": "align",
        "required": false,
        "type": {
          "name": "AlignItems"
        }
      },
      "justify": {
        "defaultValue": null,
        "description": "",
        "name": "justify",
        "required": false,
        "type": {
          "name": "JustifyContent"
        }
      },
      "spacing": {
        "defaultValue": null,
        "description": "",
        "name": "spacing",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      }
    }
  },
  "Stepper": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Stepper/Stepper.tsx",
    "displayName": "@mantine/core/Stepper",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Active step index",
        "name": "active",
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "breakpoint": {
        "defaultValue": null,
        "description": "Breakpoint at which orientation will change from horizontal to vertical",
        "name": "breakpoint",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "children": {
        "defaultValue": null,
        "description": "<Stepper.Step /> components only",
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Active and progress Step colors from theme.colors",
        "name": "color",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      },
      "completedIcon": {
        "defaultValue": null,
        "description": "Step icon displayed when step is completed",
        "name": "completedIcon",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "contentPadding": {
        "defaultValue": null,
        "description": "Content padding-top from theme.spacing or number to set value in px",
        "name": "contentPadding",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "iconPosition": {
        "defaultValue": null,
        "description": "Icon position relative to step body",
        "name": "iconPosition",
        "required": false,
        "type": {
          "name": "\"left\" | \"right\""
        }
      },
      "iconSize": {
        "defaultValue": null,
        "description": "Step icon size in px",
        "name": "iconSize",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "onStepClick": {
        "defaultValue": null,
        "description": "Called when step is clicked",
        "name": "onStepClick",
        "required": false,
        "type": {
          "name": "(stepIndex: number) => void"
        }
      },
      "orientation": {
        "defaultValue": null,
        "description": "Component orientation",
        "name": "orientation",
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\""
        }
      },
      "progressIcon": {
        "defaultValue": null,
        "description": "Step icon displayed when step is in progress",
        "name": "progressIcon",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Radius from theme.radius, or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Component size",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      }
    }
  },
  "Switch": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Switch/Switch.tsx",
    "displayName": "@mantine/core/Switch",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "Switch checked state color from theme.colors, defaults to theme.primaryColor",
        "name": "color",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id is used to bind input and label, if not passed unique id will be generated for each input",
        "name": "id",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Switch label",
        "name": "label",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "offLabel": {
        "defaultValue": null,
        "description": "Inner label when Switch is in unchecked state",
        "name": "offLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onLabel": {
        "defaultValue": null,
        "description": "Inner label when Switch is in checked state",
        "name": "onLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Radius from theme.radius or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Predefined size value",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props spread to wrapper element",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "{ [key: string]: any; }"
        }
      }
    }
  },
  "Table": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Table/Table.tsx",
    "displayName": "@mantine/core/Table",
    "props": {
      "captionSide": {
        "defaultValue": null,
        "description": "Table caption position",
        "name": "captionSide",
        "required": false,
        "type": {
          "name": "\"bottom\" | \"top\""
        }
      },
      "fontSize": {
        "defaultValue": null,
        "description": "Sets font size of all text inside table",
        "name": "fontSize",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "highlightOnHover": {
        "defaultValue": null,
        "description": "If true row will have hover color",
        "name": "highlightOnHover",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "horizontalSpacing": {
        "defaultValue": null,
        "description": "Horizontal cells spacing from theme.spacing or number to set value in px",
        "name": "horizontalSpacing",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "striped": {
        "defaultValue": null,
        "description": "If true every odd row of table will have gray background color",
        "name": "striped",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "verticalSpacing": {
        "defaultValue": null,
        "description": "Vertical cells spacing from theme.spacing or number to set value in px",
        "name": "verticalSpacing",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      }
    }
  },
  "Tabs": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Tabs/Tabs.tsx",
    "displayName": "@mantine/core/Tabs",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Index of active tab, overrides internal state",
        "name": "active",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "<Tab /> components only",
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Active tab color from theme.colors",
        "name": "color",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      },
      "grow": {
        "defaultValue": null,
        "description": "True if tabs should take all available space",
        "name": "grow",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "initialTab": {
        "defaultValue": null,
        "description": "Index of initial tab",
        "name": "initialTab",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "onTabChange": {
        "defaultValue": null,
        "description": "Called when tab control is clicked with tab index",
        "name": "onTabChange",
        "required": false,
        "type": {
          "name": "(tabIndex: number, tabKey?: string) => void"
        }
      },
      "orientation": {
        "defaultValue": null,
        "description": "Controls tab orientation",
        "name": "orientation",
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\""
        }
      },
      "position": {
        "defaultValue": null,
        "description": "Tab controls position",
        "name": "position",
        "required": false,
        "type": {
          "name": "\"right\" | \"center\" | \"left\" | \"apart\""
        }
      },
      "tabPadding": {
        "defaultValue": null,
        "description": "Controls tab content padding-top",
        "name": "tabPadding",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Controls appearance",
        "name": "variant",
        "required": false,
        "type": {
          "name": "TabsVariant"
        }
      }
    }
  },
  "Text": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Text/Text.tsx",
    "displayName": "@mantine/core/Text",
    "props": {
      "align": {
        "defaultValue": null,
        "description": "Sets text-align css property",
        "name": "align",
        "required": false,
        "type": {
          "name": "\"left\" | \"right\" | \"center\" | \"justify\""
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Text color from theme or dimmed variant",
        "name": "color",
        "required": false,
        "type": {
          "name": "DefaultMantineColor | \"dimmed\""
        }
      },
      "component": {
        "defaultValue": null,
        "description": "Tag or component that should be used as root element",
        "name": "component",
        "required": false,
        "type": {
          "name": "\"symbol\" | \"object\" | \"clipPath\" | \"filter\" | \"mask\" | \"marker\" | \"label\" | \"big\" | \"link\" | \"small\" | \"sub\" | \"sup\" | \"ruby\" | \"table\" | \"div\" | \"a\" | \"abbr\" | \"address\" | \"area\" | ... 157 more ... | FunctionComponent<...>"
        }
      },
      "gradient": {
        "defaultValue": null,
        "description": "Controls gradient settings in gradient variant only",
        "name": "gradient",
        "required": false,
        "type": {
          "name": "MantineGradient"
        }
      },
      "inherit": {
        "defaultValue": null,
        "description": "Inherit font properties from parent element",
        "name": "inherit",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "inline": {
        "defaultValue": null,
        "description": "Sets line-height to 1 for centering",
        "name": "inline",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "lineClamp": {
        "defaultValue": null,
        "description": "CSS -webkit-line-clamp property",
        "name": "lineClamp",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Predefined font-size from theme.fontSizes",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "transform": {
        "defaultValue": null,
        "description": "Sets text-transform css property",
        "name": "transform",
        "required": false,
        "type": {
          "name": "\"none\" | \"capitalize\" | \"uppercase\" | \"lowercase\""
        }
      },
      "underline": {
        "defaultValue": null,
        "description": "Underline the text",
        "name": "underline",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Link or text variant",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"link\" | \"text\" | \"gradient\""
        }
      },
      "weight": {
        "defaultValue": null,
        "description": "Sets font-weight css property",
        "name": "weight",
        "required": false,
        "type": {
          "name": "FontWeight"
        }
      }
    }
  },
  "TextInput": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/TextInput/TextInput.tsx",
    "displayName": "@mantine/core/TextInput",
    "props": {
      "__staticSelector": {
        "defaultValue": null,
        "description": "Static css selector base",
        "name": "__staticSelector",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Input description, displayed after label",
        "name": "description",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props spread to description element",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disabled input state",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Displays error message after input",
        "name": "error",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props spread to error element",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Adds icon on the left side of input",
        "name": "icon",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "iconWidth": {
        "defaultValue": null,
        "description": "Width of icon section in px",
        "name": "iconWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "id is used to bind input and label, if not passed unique id will be generated for each input",
        "name": "id",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Input label, displayed before input",
        "name": "label",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props spread to label element",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, \"key\" | keyof LabelHTMLAttributes<...>> & { ...; }"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Input border-radius from theme or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets required on input element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Right section of input, similar to icon but on the right",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "rightSectionProps": {
        "defaultValue": null,
        "description": "Props spread to rightSection div element",
        "name": "rightSectionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>>"
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Width of right section, is used to calculate input padding-right",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Input size",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "type": {
        "defaultValue": null,
        "description": "Input element type",
        "name": "type",
        "required": false,
        "type": {
          "name": "\"number\" | \"search\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"password\""
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Defines input appearance, defaults to default in light color scheme and filled in dark",
        "name": "variant",
        "required": false,
        "type": {
          "name": "InputVariant"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props passed to root element (InputWrapper component)",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "{ [key: string]: any; }"
        }
      }
    }
  },
  "Textarea": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Textarea/Textarea.tsx",
    "displayName": "@mantine/core/Textarea",
    "props": {
      "__staticSelector": {
        "defaultValue": null,
        "description": "Static selectors base",
        "name": "__staticSelector",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "autosize": {
        "defaultValue": null,
        "description": "If true textarea will grow with content until maxRows are reached",
        "name": "autosize",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Input description, displayed after label",
        "name": "description",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props spread to description element",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disabled input state",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Displays error message after input",
        "name": "error",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props spread to error element",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Adds icon on the left side of input",
        "name": "icon",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "iconWidth": {
        "defaultValue": null,
        "description": "Width of icon section in px",
        "name": "iconWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id is used to bind input and label, if not passed unique id will be generated for each input",
        "name": "id",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Input label, displayed before input",
        "name": "label",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props spread to label element",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, \"key\" | keyof LabelHTMLAttributes<...>> & { ...; }"
        }
      },
      "maxRows": {
        "defaultValue": null,
        "description": "Defines maxRows in autosize variant, not applicable to regular variant",
        "name": "maxRows",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "minRows": {
        "defaultValue": null,
        "description": "Defined minRows in autosize variant and rows in regular variant",
        "name": "minRows",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Input border-radius from theme or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Adds red asterisk on the right side of label",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Right section of input, similar to icon but on the right",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "rightSectionProps": {
        "defaultValue": null,
        "description": "Props spread to rightSection div element",
        "name": "rightSectionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>>"
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Width of right section, is used to calculate input padding-right",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Input size",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Defines input appearance, defaults to default in light color scheme and filled in dark",
        "name": "variant",
        "required": false,
        "type": {
          "name": "InputVariant"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props passed to root element (InputWrapper component)",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "{ [key: string]: any; }"
        }
      }
    }
  },
  "ThemeIcon": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/ThemeIcon/ThemeIcon.tsx",
    "displayName": "@mantine/core/ThemeIcon",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Icon",
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Icon color from theme",
        "name": "color",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      },
      "gradient": {
        "defaultValue": null,
        "description": "Controls gradient settings in gradient variant only",
        "name": "gradient",
        "required": false,
        "type": {
          "name": "MantineGradient"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Predefined border-radius from theme.radius or number for border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Predefined width and height or number for width and height in px",
        "name": "size",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Controls appearance",
        "name": "variant",
        "required": false,
        "type": {
          "name": "ThemeIconVariant"
        }
      }
    }
  },
  "Timeline": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Timeline/Timeline.tsx",
    "displayName": "@mantine/core/Timeline",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Index of active element",
        "name": "active",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "align": {
        "defaultValue": null,
        "description": "Timeline alignment",
        "name": "align",
        "required": false,
        "type": {
          "name": "\"left\" | \"right\""
        }
      },
      "bulletSize": {
        "defaultValue": null,
        "description": "Bullet size in px",
        "name": "bulletSize",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "<Timeline.Item /> components only",
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Active color from theme",
        "name": "color",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      },
      "lineWidth": {
        "defaultValue": null,
        "description": "Line width in px",
        "name": "lineWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Radius from theme.radius, or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "reverseActive": {
        "defaultValue": null,
        "description": "Reverse active direction without reversing items",
        "name": "reverseActive",
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  "Title": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Title/Title.tsx",
    "displayName": "@mantine/core/Title",
    "props": {
      "align": {
        "defaultValue": null,
        "description": "Defined text-align",
        "name": "align",
        "required": false,
        "type": {
          "name": "\"left\" | \"right\" | \"center\" | \"justify\""
        }
      },
      "order": {
        "defaultValue": null,
        "description": "Defines component and styles which will be used",
        "name": "order",
        "required": false,
        "type": {
          "name": "TitleOrder"
        }
      }
    }
  },
  "Tooltip": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Tooltip/Tooltip.tsx",
    "displayName": "@mantine/core/Tooltip",
    "props": {
      "allowPointerEvents": {
        "defaultValue": null,
        "description": "Allow pointer events on tooltip, warning: this may break some animations",
        "name": "allowPointerEvents",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "arrowDistance": {
        "defaultValue": null,
        "description": "Arrow distance to the left/right * arrowSize",
        "name": "arrowDistance",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "arrowSize": {
        "defaultValue": null,
        "description": "Arrow size in px",
        "name": "arrowSize",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Any react node that should trigger tooltip",
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "closeDelay": {
        "defaultValue": null,
        "description": "Close delay in ms, 0 to disable delay",
        "name": "closeDelay",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Any color from theme.colors, defaults to gray in light color scheme and dark in dark colors scheme",
        "name": "color",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "True to disable tooltip",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "exitTransitionDuration": {
        "defaultValue": null,
        "description": "Unmount transition duration in ms",
        "name": "exitTransitionDuration",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "gutter": {
        "defaultValue": null,
        "description": "Spacing between element and popper in px",
        "name": "gutter",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Tooltip content",
        "name": "label",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "openDelay": {
        "defaultValue": null,
        "description": "Open delay in ms, 0 to disable delay",
        "name": "openDelay",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "opened": {
        "defaultValue": null,
        "description": "Tooltip opened state for controlled variant",
        "name": "opened",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "placement": {
        "defaultValue": null,
        "description": "Placement relative to reference element",
        "name": "placement",
        "required": false,
        "type": {
          "name": "\"center\" | \"end\" | \"start\""
        }
      },
      "position": {
        "defaultValue": null,
        "description": "Position relative to reference element",
        "name": "position",
        "required": false,
        "type": {
          "name": "\"bottom\" | \"left\" | \"right\" | \"top\""
        }
      },
      "positionDependencies": {
        "defaultValue": null,
        "description": "useEffect dependencies to force update tooltip position",
        "name": "positionDependencies",
        "required": false,
        "type": {
          "name": "any[]"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Radius from theme.radius, or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "tooltipId": {
        "defaultValue": null,
        "description": "Tooltip id to bind aria-describedby",
        "name": "tooltipId",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "tooltipRef": {
        "defaultValue": null,
        "description": "Get tooltip ref",
        "name": "tooltipRef",
        "required": false,
        "type": {
          "name": "ForwardedRef<HTMLDivElement>"
        }
      },
      "transition": {
        "defaultValue": null,
        "description": "Customize mount/unmount transition",
        "name": "transition",
        "required": false,
        "type": {
          "name": "MantineTransition"
        }
      },
      "transitionDuration": {
        "defaultValue": null,
        "description": "Mount transition duration in ms",
        "name": "transitionDuration",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "transitionTimingFunction": {
        "defaultValue": null,
        "description": "Mount/unmount transition timing function, defaults to theme.transitionTimingFunction",
        "name": "transitionTimingFunction",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Tooltip width in px or auto",
        "name": "width",
        "required": false,
        "type": {
          "name": "number | \"auto\""
        }
      },
      "withArrow": {
        "defaultValue": null,
        "description": "Renders arrow if true",
        "name": "withArrow",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "withinPortal": {
        "defaultValue": null,
        "description": "Whether to render the target element in a Portal",
        "name": "withinPortal",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "wrapLines": {
        "defaultValue": null,
        "description": "Allow multiline tooltip content",
        "name": "wrapLines",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "zIndex": {
        "defaultValue": null,
        "description": "Popper z-index",
        "name": "zIndex",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "TransferList": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/TransferList/TransferList.tsx",
    "displayName": "@mantine/core/TransferList",
    "props": {
      "breakpoint": {
        "defaultValue": null,
        "description": "Breakpoint at which list will collapse to single column layout",
        "name": "breakpoint",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "filter": {
        "defaultValue": null,
        "description": "Function to filter search results",
        "name": "filter",
        "required": false,
        "type": {
          "name": "(query: string, item: TransferListItem) => boolean"
        }
      },
      "initialSelection": {
        "defaultValue": null,
        "description": "Initial items selection",
        "name": "initialSelection",
        "required": false,
        "type": {
          "name": "Selection"
        }
      },
      "itemComponent": {
        "defaultValue": null,
        "description": "Custom item component",
        "name": "itemComponent",
        "required": false,
        "type": {
          "name": "TransferListItemComponent"
        }
      },
      "limit": {
        "defaultValue": null,
        "description": "Limit amount of items showed at a time",
        "name": "limit",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "listComponent": {
        "defaultValue": null,
        "description": "Change list component, can be used to add custom scrollbars",
        "name": "listComponent",
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "listHeight": {
        "defaultValue": null,
        "description": "List items height",
        "name": "listHeight",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "nothingFound": {
        "defaultValue": null,
        "description": "Nothing found message",
        "name": "nothingFound",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called when value changes",
        "name": "onChange",
        "required": true,
        "type": {
          "name": "(value: TransferListData) => void"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Predefined border-radius value from theme.radius or number for border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "searchPlaceholder": {
        "defaultValue": null,
        "description": "Search fields placeholder",
        "name": "searchPlaceholder",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "showTransferAll": {
        "defaultValue": null,
        "description": "Whether to hide the transfer all button",
        "name": "showTransferAll",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "titles": {
        "defaultValue": null,
        "description": "Lists titles",
        "name": "titles",
        "required": false,
        "type": {
          "name": "[string, string]"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Current value",
        "name": "value",
        "required": true,
        "type": {
          "name": "TransferListData"
        }
      }
    }
  },
  "Transition": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Transition/Transition.tsx",
    "displayName": "@mantine/core/Transition",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Render function with transition styles argument",
        "name": "children",
        "required": true,
        "type": {
          "name": "(styles: CSSProperties) => ReactElement<any, any>"
        }
      },
      "duration": {
        "defaultValue": {
          "value": "250"
        },
        "description": "Transition duration in ms",
        "name": "duration",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "exitDuration": {
        "defaultValue": {
          "value": "250"
        },
        "description": "Exit transition duration in ms",
        "name": "exitDuration",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "mounted": {
        "defaultValue": null,
        "description": "When true, component will be mounted",
        "name": "mounted",
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "onEnter": {
        "defaultValue": null,
        "description": "Calls when enter transition starts",
        "name": "onEnter",
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onEntered": {
        "defaultValue": null,
        "description": "Calls when enter transition ends",
        "name": "onEntered",
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onExit": {
        "defaultValue": null,
        "description": "Calls when exit transition starts",
        "name": "onExit",
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onExited": {
        "defaultValue": null,
        "description": "Calls when exit transition ends",
        "name": "onExited",
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "timingFunction": {
        "defaultValue": null,
        "description": "Transition timing function, defaults to theme.transitionTimingFunction",
        "name": "timingFunction",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "transition": {
        "defaultValue": null,
        "description": "Predefined transition name or transition styles",
        "name": "transition",
        "required": true,
        "type": {
          "name": "MantineTransition"
        }
      }
    }
  },
  "TypographyStylesProvider": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/TypographyStylesProvider/TypographyStylesProvider.tsx",
    "displayName": "@mantine/core/TypographyStylesProvider",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Render any content to add Mantine typography styles",
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      }
    }
  },
  "Calendar": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-dates/src/components/Calendar/Calendar.tsx",
    "displayName": "@mantine/dates/Calendar",
    "props": {
      "__staticSelector": {
        "defaultValue": null,
        "description": "Static selector base",
        "name": "__staticSelector",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "allowLevelChange": {
        "defaultValue": null,
        "description": "Allow to change level (date – month – year)",
        "name": "allowLevelChange",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "amountOfMonths": {
        "defaultValue": null,
        "description": "Amount of months",
        "name": "amountOfMonths",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "dayClassName": {
        "defaultValue": null,
        "description": "Adds className to day button based on date and modifiers",
        "name": "dayClassName",
        "required": false,
        "type": {
          "name": "(date: Date, modifiers: DayModifiers) => string"
        }
      },
      "dayStyle": {
        "defaultValue": null,
        "description": "Adds style to day button based on date and modifiers",
        "name": "dayStyle",
        "required": false,
        "type": {
          "name": "(date: Date, modifiers: DayModifiers) => CSSProperties"
        }
      },
      "disableOutsideEvents": {
        "defaultValue": null,
        "description": "When true dates that are outside of given month cannot be clicked or focused",
        "name": "disableOutsideEvents",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "excludeDate": {
        "defaultValue": null,
        "description": "Callback function to determine if day should be disabled",
        "name": "excludeDate",
        "required": false,
        "type": {
          "name": "(date: Date) => boolean"
        }
      },
      "firstDayOfWeek": {
        "defaultValue": null,
        "description": "Set first day of the week",
        "name": "firstDayOfWeek",
        "required": false,
        "type": {
          "name": "FirstDayOfWeek"
        }
      },
      "focusable": {
        "defaultValue": null,
        "description": "Should focusable days have tabIndex={0}?",
        "name": "focusable",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "fullWidth": {
        "defaultValue": null,
        "description": "Set to true to make calendar take 100% of container width",
        "name": "fullWidth",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "hideOutsideDates": {
        "defaultValue": null,
        "description": "Remove outside dates",
        "name": "hideOutsideDates",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "hideWeekdays": {
        "defaultValue": null,
        "description": "Set to false to remove weekdays row",
        "name": "hideWeekdays",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "initialLevel": {
        "defaultValue": null,
        "description": "Initial date selection level",
        "name": "initialLevel",
        "required": false,
        "type": {
          "name": "\"date\" | \"month\" | \"year\""
        }
      },
      "initialMonth": {
        "defaultValue": null,
        "description": "Initial month for uncontrolled calendar",
        "name": "initialMonth",
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "isDateFirstInRange": {
        "defaultValue": null,
        "description": "Should date be displayed as first in range",
        "name": "isDateFirstInRange",
        "required": false,
        "type": {
          "name": "(date: Date, modifiers: DayModifiers) => boolean"
        }
      },
      "isDateInRange": {
        "defaultValue": null,
        "description": "Should date be displayed as in range",
        "name": "isDateInRange",
        "required": false,
        "type": {
          "name": "(date: Date, modifiers: DayModifiers) => boolean"
        }
      },
      "isDateLastInRange": {
        "defaultValue": null,
        "description": "Should date be displayed as last in range",
        "name": "isDateLastInRange",
        "required": false,
        "type": {
          "name": "(date: Date, modifiers: DayModifiers) => boolean"
        }
      },
      "labelFormat": {
        "defaultValue": null,
        "description": "dayjs label format",
        "name": "labelFormat",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "locale": {
        "defaultValue": null,
        "description": "Locale used for labels formatting, defaults to theme.datesLocale",
        "name": "locale",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "maxDate": {
        "defaultValue": null,
        "description": "Maximum possible date",
        "name": "maxDate",
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "minDate": {
        "defaultValue": null,
        "description": "Minimum possible date",
        "name": "minDate",
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "month": {
        "defaultValue": null,
        "description": "Month for controlled calendar",
        "name": "month",
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "multiple": {
        "defaultValue": null,
        "description": "",
        "name": "multiple",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "nextDecadeLabel": {
        "defaultValue": null,
        "description": "Next decade control aria-label",
        "name": "nextDecadeLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "nextMonthLabel": {
        "defaultValue": null,
        "description": "Next month control aria-label",
        "name": "nextMonthLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "nextYearLabel": {
        "defaultValue": null,
        "description": "Next year control aria-label",
        "name": "nextYearLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "(value: Multiple extends true ? Date[] : Date) => void"
        }
      },
      "onDayMouseEnter": {
        "defaultValue": null,
        "description": "Called when onMouseEnter event fired on day button",
        "name": "onDayMouseEnter",
        "required": false,
        "type": {
          "name": "(date: Date, event: MouseEvent<Element, MouseEvent>) => void"
        }
      },
      "onMonthChange": {
        "defaultValue": null,
        "description": "Called when month changes",
        "name": "onMonthChange",
        "required": false,
        "type": {
          "name": "(month: Date) => void"
        }
      },
      "preventFocus": {
        "defaultValue": null,
        "description": "Prevent focusing upon clicking",
        "name": "preventFocus",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "previousDecadeLabel": {
        "defaultValue": null,
        "description": "Previous decade control aria-label",
        "name": "previousDecadeLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "previousMonthLabel": {
        "defaultValue": null,
        "description": "Previous month control aria-label",
        "name": "previousMonthLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "previousYearLabel": {
        "defaultValue": null,
        "description": "Previous year control aria-label",
        "name": "previousYearLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "range": {
        "defaultValue": null,
        "description": "Selected range",
        "name": "range",
        "required": false,
        "type": {
          "name": "[Date, Date]"
        }
      },
      "renderDay": {
        "defaultValue": null,
        "description": "Render day based on the date",
        "name": "renderDay",
        "required": false,
        "type": {
          "name": "(date: Date) => ReactNode"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Calendar size",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "required": false,
        "type": {
          "name": "Date | Date[]"
        }
      },
      "weekdayLabelFormat": {
        "defaultValue": null,
        "description": "dayjs label format for weekday heading",
        "name": "weekdayLabelFormat",
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  "CalendarBase": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-dates/src/components/CalendarBase/CalendarBase.tsx",
    "displayName": "@mantine/dates/CalendarBase",
    "props": {
      "__staticSelector": {
        "defaultValue": {
          "value": "CalendarBase"
        },
        "description": "Static selector base",
        "name": "__staticSelector",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "allowLevelChange": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Allow to change level (date – month – year)",
        "name": "allowLevelChange",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "amountOfMonths": {
        "defaultValue": {
          "value": "1"
        },
        "description": "Amount of months",
        "name": "amountOfMonths",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "dayClassName": {
        "defaultValue": null,
        "description": "Adds className to day button based on date and modifiers",
        "name": "dayClassName",
        "required": false,
        "type": {
          "name": "(date: Date, modifiers: DayModifiers) => string"
        }
      },
      "dayStyle": {
        "defaultValue": null,
        "description": "Adds style to day button based on date and modifiers",
        "name": "dayStyle",
        "required": false,
        "type": {
          "name": "(date: Date, modifiers: DayModifiers) => CSSProperties"
        }
      },
      "disableOutsideEvents": {
        "defaultValue": null,
        "description": "When true dates that are outside of given month cannot be clicked or focused",
        "name": "disableOutsideEvents",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "excludeDate": {
        "defaultValue": null,
        "description": "Callback function to determine if day should be disabled",
        "name": "excludeDate",
        "required": false,
        "type": {
          "name": "(date: Date) => boolean"
        }
      },
      "firstDayOfWeek": {
        "defaultValue": {
          "value": "monday"
        },
        "description": "Set first day of the week",
        "name": "firstDayOfWeek",
        "required": false,
        "type": {
          "name": "FirstDayOfWeek"
        }
      },
      "focusable": {
        "defaultValue": null,
        "description": "Should focusable days have tabIndex={0}?",
        "name": "focusable",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "fullWidth": {
        "defaultValue": null,
        "description": "Set to true to make calendar take 100% of container width",
        "name": "fullWidth",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "hideOutsideDates": {
        "defaultValue": null,
        "description": "Remove outside dates",
        "name": "hideOutsideDates",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "hideWeekdays": {
        "defaultValue": null,
        "description": "Set to false to remove weekdays row",
        "name": "hideWeekdays",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "initialLevel": {
        "defaultValue": {
          "value": "date"
        },
        "description": "Initial date selection level",
        "name": "initialLevel",
        "required": false,
        "type": {
          "name": "\"date\" | \"month\" | \"year\""
        }
      },
      "initialMonth": {
        "defaultValue": null,
        "description": "Initial month for uncontrolled calendar",
        "name": "initialMonth",
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "isDateFirstInRange": {
        "defaultValue": null,
        "description": "Should date be displayed as first in range",
        "name": "isDateFirstInRange",
        "required": false,
        "type": {
          "name": "(date: Date, modifiers: DayModifiers) => boolean"
        }
      },
      "isDateInRange": {
        "defaultValue": null,
        "description": "Should date be displayed as in range",
        "name": "isDateInRange",
        "required": false,
        "type": {
          "name": "(date: Date, modifiers: DayModifiers) => boolean"
        }
      },
      "isDateLastInRange": {
        "defaultValue": null,
        "description": "Should date be displayed as last in range",
        "name": "isDateLastInRange",
        "required": false,
        "type": {
          "name": "(date: Date, modifiers: DayModifiers) => boolean"
        }
      },
      "labelFormat": {
        "defaultValue": {
          "value": "MMMM YYYY"
        },
        "description": "dayjs label format",
        "name": "labelFormat",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "locale": {
        "defaultValue": null,
        "description": "Locale used for labels formatting, defaults to theme.datesLocale",
        "name": "locale",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "maxDate": {
        "defaultValue": null,
        "description": "Maximum possible date",
        "name": "maxDate",
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "minDate": {
        "defaultValue": null,
        "description": "Minimum possible date",
        "name": "minDate",
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "month": {
        "defaultValue": null,
        "description": "Month for controlled calendar",
        "name": "month",
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "nextDecadeLabel": {
        "defaultValue": null,
        "description": "Next decade control aria-label",
        "name": "nextDecadeLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "nextMonthLabel": {
        "defaultValue": null,
        "description": "Next month control aria-label",
        "name": "nextMonthLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "nextYearLabel": {
        "defaultValue": null,
        "description": "Next year control aria-label",
        "name": "nextYearLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called when day is selected",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "(value: Date | Date[]) => void"
        }
      },
      "onDayMouseEnter": {
        "defaultValue": null,
        "description": "Called when onMouseEnter event fired on day button",
        "name": "onDayMouseEnter",
        "required": false,
        "type": {
          "name": "(date: Date, event: MouseEvent<Element, MouseEvent>) => void"
        }
      },
      "onMonthChange": {
        "defaultValue": null,
        "description": "Called when month changes",
        "name": "onMonthChange",
        "required": false,
        "type": {
          "name": "(month: Date) => void"
        }
      },
      "preventFocus": {
        "defaultValue": null,
        "description": "Prevent focusing upon clicking",
        "name": "preventFocus",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "previousDecadeLabel": {
        "defaultValue": null,
        "description": "Previous decade control aria-label",
        "name": "previousDecadeLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "previousMonthLabel": {
        "defaultValue": null,
        "description": "Previous month control aria-label",
        "name": "previousMonthLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "previousYearLabel": {
        "defaultValue": null,
        "description": "Previous year control aria-label",
        "name": "previousYearLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "range": {
        "defaultValue": null,
        "description": "Selected range",
        "name": "range",
        "required": false,
        "type": {
          "name": "[Date, Date]"
        }
      },
      "renderDay": {
        "defaultValue": null,
        "description": "Render day based on the date",
        "name": "renderDay",
        "required": false,
        "type": {
          "name": "(date: Date) => ReactNode"
        }
      },
      "size": {
        "defaultValue": {
          "value": "sm"
        },
        "description": "Calendar size",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Selected value",
        "name": "value",
        "required": false,
        "type": {
          "name": "Date | Date[]"
        }
      },
      "weekdayLabelFormat": {
        "defaultValue": null,
        "description": "dayjs label format for weekday heading",
        "name": "weekdayLabelFormat",
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  "DatePicker": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-dates/src/components/DatePicker/DatePicker.tsx",
    "displayName": "@mantine/dates/DatePicker",
    "props": {
      "__staticSelector": {
        "defaultValue": null,
        "description": "Static selector base",
        "name": "__staticSelector",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "allowFreeInput": {
        "defaultValue": null,
        "description": "Allow free input",
        "name": "allowFreeInput",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "allowLevelChange": {
        "defaultValue": null,
        "description": "Allow to change level (date – month – year)",
        "name": "allowLevelChange",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "amountOfMonths": {
        "defaultValue": null,
        "description": "Amount of months",
        "name": "amountOfMonths",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "clearButtonLabel": {
        "defaultValue": null,
        "description": "aria-label for clear button",
        "name": "clearButtonLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "clearButtonTabIndex": {
        "defaultValue": null,
        "description": "Set the clear button tab index to disabled or default after input field",
        "name": "clearButtonTabIndex",
        "required": false,
        "type": {
          "name": "0 | -1"
        }
      },
      "clearable": {
        "defaultValue": null,
        "description": "Allow to clear value",
        "name": "clearable",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "clickOutsideEvents": {
        "defaultValue": null,
        "description": "Events that should trigger outside clicks",
        "name": "clickOutsideEvents",
        "required": false,
        "type": {
          "name": "string[]"
        }
      },
      "closeCalendarOnChange": {
        "defaultValue": null,
        "description": "Set to false to force dropdown to stay open after date was selected",
        "name": "closeCalendarOnChange",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "closeDropdownOnScroll": {
        "defaultValue": null,
        "description": "Set to true to disable dropdown closing on scroll",
        "name": "closeDropdownOnScroll",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "dateParser": {
        "defaultValue": null,
        "description": "Parser function for date provided by input typing",
        "name": "dateParser",
        "required": false,
        "type": {
          "name": "(value: string) => Date"
        }
      },
      "dayClassName": {
        "defaultValue": null,
        "description": "Adds className to day button based on date and modifiers",
        "name": "dayClassName",
        "required": false,
        "type": {
          "name": "(date: Date, modifiers: DayModifiers) => string"
        }
      },
      "dayStyle": {
        "defaultValue": null,
        "description": "Adds style to day button based on date and modifiers",
        "name": "dayStyle",
        "required": false,
        "type": {
          "name": "(date: Date, modifiers: DayModifiers) => CSSProperties"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Default value for uncontrolled input",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Input description, displayed after label",
        "name": "description",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props spread to description element",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "disableOutsideEvents": {
        "defaultValue": null,
        "description": "When true dates that are outside of given month cannot be clicked or focused",
        "name": "disableOutsideEvents",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disabled input state",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "dropdownType": {
        "defaultValue": null,
        "description": "Where to show calendar in modal or popover",
        "name": "dropdownType",
        "required": false,
        "type": {
          "name": "\"modal\" | \"popover\""
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Displays error message after input",
        "name": "error",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props spread to error element",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "excludeDate": {
        "defaultValue": null,
        "description": "Callback function to determine if day should be disabled",
        "name": "excludeDate",
        "required": false,
        "type": {
          "name": "(date: Date) => boolean"
        }
      },
      "firstDayOfWeek": {
        "defaultValue": null,
        "description": "Set first day of the week",
        "name": "firstDayOfWeek",
        "required": false,
        "type": {
          "name": "FirstDayOfWeek"
        }
      },
      "fixOnBlur": {
        "defaultValue": null,
        "description": "call onChange with last valid value onBlur",
        "name": "fixOnBlur",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "focusable": {
        "defaultValue": null,
        "description": "Should focusable days have tabIndex={0}?",
        "name": "focusable",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "fullWidth": {
        "defaultValue": null,
        "description": "Set to true to make calendar take 100% of container width",
        "name": "fullWidth",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "hideOutsideDates": {
        "defaultValue": null,
        "description": "Remove outside dates",
        "name": "hideOutsideDates",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "hideWeekdays": {
        "defaultValue": null,
        "description": "Set to false to remove weekdays row",
        "name": "hideWeekdays",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Adds icon on the left side of input",
        "name": "icon",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "iconWidth": {
        "defaultValue": null,
        "description": "Width of icon section in px",
        "name": "iconWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "initialLevel": {
        "defaultValue": null,
        "description": "Initial date selection level",
        "name": "initialLevel",
        "required": false,
        "type": {
          "name": "\"date\" | \"month\" | \"year\""
        }
      },
      "initialMonth": {
        "defaultValue": null,
        "description": "Initial month for uncontrolled calendar",
        "name": "initialMonth",
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "initiallyOpened": {
        "defaultValue": null,
        "description": "Control initial dropdown opened state",
        "name": "initiallyOpened",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "inputFormat": {
        "defaultValue": null,
        "description": "dayjs input format",
        "name": "inputFormat",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "isDateFirstInRange": {
        "defaultValue": null,
        "description": "Should date be displayed as first in range",
        "name": "isDateFirstInRange",
        "required": false,
        "type": {
          "name": "(date: Date, modifiers: DayModifiers) => boolean"
        }
      },
      "isDateInRange": {
        "defaultValue": null,
        "description": "Should date be displayed as in range",
        "name": "isDateInRange",
        "required": false,
        "type": {
          "name": "(date: Date, modifiers: DayModifiers) => boolean"
        }
      },
      "isDateLastInRange": {
        "defaultValue": null,
        "description": "Should date be displayed as last in range",
        "name": "isDateLastInRange",
        "required": false,
        "type": {
          "name": "(date: Date, modifiers: DayModifiers) => boolean"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Input label, displayed before input",
        "name": "label",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "labelFormat": {
        "defaultValue": null,
        "description": "dayjs label format",
        "name": "labelFormat",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props spread to label element",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, \"key\" | keyof LabelHTMLAttributes<...>> & { ...; }"
        }
      },
      "locale": {
        "defaultValue": null,
        "description": "Locale used for labels formatting, defaults to theme.datesLocale",
        "name": "locale",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "maxDate": {
        "defaultValue": null,
        "description": "Maximum possible date",
        "name": "maxDate",
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "minDate": {
        "defaultValue": null,
        "description": "Minimum possible date",
        "name": "minDate",
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "modalZIndex": {
        "defaultValue": null,
        "description": "Modal z-index",
        "name": "modalZIndex",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "month": {
        "defaultValue": null,
        "description": "Month for controlled calendar",
        "name": "month",
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "Input name, useful for uncontrolled variant to capture data with native form",
        "name": "name",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "nextDecadeLabel": {
        "defaultValue": null,
        "description": "Next decade control aria-label",
        "name": "nextDecadeLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "nextMonthLabel": {
        "defaultValue": null,
        "description": "Next month control aria-label",
        "name": "nextMonthLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "nextYearLabel": {
        "defaultValue": null,
        "description": "Next year control aria-label",
        "name": "nextYearLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called when date changes",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "(value: Date) => void"
        }
      },
      "onDayMouseEnter": {
        "defaultValue": null,
        "description": "Called when onMouseEnter event fired on day button",
        "name": "onDayMouseEnter",
        "required": false,
        "type": {
          "name": "(date: Date, event: MouseEvent<Element, MouseEvent>) => void"
        }
      },
      "onDropdownClose": {
        "defaultValue": null,
        "description": "Called when dropdown closes",
        "name": "onDropdownClose",
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onDropdownOpen": {
        "defaultValue": null,
        "description": "Called when dropdown opens",
        "name": "onDropdownOpen",
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "openDropdownOnClear": {
        "defaultValue": null,
        "description": "Set to true to open dropdown on clear",
        "name": "openDropdownOnClear",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "placeholder": {
        "defaultValue": null,
        "description": "Placeholder, displayed when date is not selected",
        "name": "placeholder",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "positionDependencies": {
        "defaultValue": null,
        "description": "useEffect dependencies to force update dropdown position",
        "name": "positionDependencies",
        "required": false,
        "type": {
          "name": "any[]"
        }
      },
      "preventFocus": {
        "defaultValue": null,
        "description": "Prevent focusing upon clicking",
        "name": "preventFocus",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "previousDecadeLabel": {
        "defaultValue": null,
        "description": "Previous decade control aria-label",
        "name": "previousDecadeLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "previousMonthLabel": {
        "defaultValue": null,
        "description": "Previous month control aria-label",
        "name": "previousMonthLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "previousYearLabel": {
        "defaultValue": null,
        "description": "Previous year control aria-label",
        "name": "previousYearLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Input border-radius from theme or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "range": {
        "defaultValue": null,
        "description": "Selected range",
        "name": "range",
        "required": false,
        "type": {
          "name": "[Date, Date]"
        }
      },
      "renderDay": {
        "defaultValue": null,
        "description": "Render day based on the date",
        "name": "renderDay",
        "required": false,
        "type": {
          "name": "(date: Date) => ReactNode"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets required on input element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Right section of input, similar to icon but on the right",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "rightSectionProps": {
        "defaultValue": null,
        "description": "Props spread to rightSection div element",
        "name": "rightSectionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>>"
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Width of right section, is used to calculate input padding-right",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "shadow": {
        "defaultValue": null,
        "description": "Dropdown shadow from theme or css value for custom box-shadow",
        "name": "shadow",
        "required": false,
        "type": {
          "name": "MantineShadow"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Input size",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "transition": {
        "defaultValue": null,
        "description": "Dropdown appear/disappear transition",
        "name": "transition",
        "required": false,
        "type": {
          "name": "MantineTransition"
        }
      },
      "transitionDuration": {
        "defaultValue": null,
        "description": "Dropdown appear/disappear transition duration",
        "name": "transitionDuration",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "transitionTimingFunction": {
        "defaultValue": null,
        "description": "Dropdown appear/disappear transition timing function, defaults to theme.transitionTimingFunction",
        "name": "transitionTimingFunction",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Selected date, required with controlled input",
        "name": "value",
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Defines input appearance, defaults to default in light color scheme and filled in dark",
        "name": "variant",
        "required": false,
        "type": {
          "name": "InputVariant"
        }
      },
      "weekdayLabelFormat": {
        "defaultValue": null,
        "description": "dayjs label format for weekday heading",
        "name": "weekdayLabelFormat",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "withinPortal": {
        "defaultValue": null,
        "description": "Whether to render the dropdown in a Portal",
        "name": "withinPortal",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props spread to root element (InputWrapper)",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>>"
        }
      },
      "zIndex": {
        "defaultValue": null,
        "description": "Popper zIndex",
        "name": "zIndex",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "DatePickerBase": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-dates/src/components/DatePickerBase/DatePickerBase.tsx",
    "displayName": "@mantine/dates/DatePickerBase",
    "props": {
      "__staticSelector": {
        "defaultValue": {
          "value": "DatePickerBase"
        },
        "description": "Static css selector base",
        "name": "__staticSelector",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "allowFreeInput": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Allow free input",
        "name": "allowFreeInput",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "amountOfMonths": {
        "defaultValue": {
          "value": "1"
        },
        "description": "Amount of months",
        "name": "amountOfMonths",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "clearButtonLabel": {
        "defaultValue": null,
        "description": "aria-label for clear button",
        "name": "clearButtonLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "clearButtonTabIndex": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Set the clear button tab index to disabled or default after input field",
        "name": "clearButtonTabIndex",
        "required": false,
        "type": {
          "name": "0 | -1"
        }
      },
      "clearable": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Allow to clear value",
        "name": "clearable",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "clickOutsideEvents": {
        "defaultValue": {
          "value": "['mousedown', 'touchstart']"
        },
        "description": "Events that should trigger outside clicks",
        "name": "clickOutsideEvents",
        "required": false,
        "type": {
          "name": "string[]"
        }
      },
      "closeDropdownOnScroll": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Set to true to disable dropdown closing on scroll",
        "name": "closeDropdownOnScroll",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Input description, displayed after label",
        "name": "description",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props spread to description element",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disabled input state",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "dropdownOpened": {
        "defaultValue": null,
        "description": "Controls dropdown opened state",
        "name": "dropdownOpened",
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "dropdownType": {
        "defaultValue": {
          "value": "popover"
        },
        "description": "Where to show calendar in modal or popover",
        "name": "dropdownType",
        "required": false,
        "type": {
          "name": "\"modal\" | \"popover\""
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Displays error message after input",
        "name": "error",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props spread to error element",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "fixOnBlur": {
        "defaultValue": null,
        "description": "call onChange with last valid value onBlur",
        "name": "fixOnBlur",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Adds icon on the left side of input",
        "name": "icon",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "iconWidth": {
        "defaultValue": null,
        "description": "Width of icon section in px",
        "name": "iconWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "inputLabel": {
        "defaultValue": null,
        "description": "Internal prop to set input label",
        "name": "inputLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Input label, displayed before input",
        "name": "label",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props spread to label element",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, \"key\" | keyof LabelHTMLAttributes<...>> & { ...; }"
        }
      },
      "modalZIndex": {
        "defaultValue": null,
        "description": "Modal z-index",
        "name": "modalZIndex",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "name": {
        "defaultValue": {
          "value": "date"
        },
        "description": "Input name, useful fon uncontrolled variant to capture data with native form",
        "name": "name",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onClear": {
        "defaultValue": null,
        "description": "Called when clear button in clicked",
        "name": "onClear",
        "required": true,
        "type": {
          "name": "() => void"
        }
      },
      "onDropdownClose": {
        "defaultValue": null,
        "description": "Called when dropdown closes",
        "name": "onDropdownClose",
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onDropdownOpen": {
        "defaultValue": null,
        "description": "Called when dropdown opens",
        "name": "onDropdownOpen",
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "placeholder": {
        "defaultValue": null,
        "description": "Placeholder, displayed when date is not selected",
        "name": "placeholder",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "positionDependencies": {
        "defaultValue": {
          "value": "[]"
        },
        "description": "useEffect dependencies to force update dropdown position",
        "name": "positionDependencies",
        "required": false,
        "type": {
          "name": "any[]"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Input border-radius from theme or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets required on input element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Right section of input, similar to icon but on the right",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "rightSectionProps": {
        "defaultValue": null,
        "description": "Props spread to rightSection div element",
        "name": "rightSectionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>>"
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Width of right section, is used to calculate input padding-right",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "setDropdownOpened": {
        "defaultValue": null,
        "description": "Called when dropdown opened state changes",
        "name": "setDropdownOpened",
        "required": true,
        "type": {
          "name": "(opened: boolean) => void"
        }
      },
      "shadow": {
        "defaultValue": {
          "value": "sm"
        },
        "description": "Dropdown shadow from theme or css value for custom box-shadow",
        "name": "shadow",
        "required": false,
        "type": {
          "name": "MantineShadow"
        }
      },
      "size": {
        "defaultValue": {
          "value": "sm"
        },
        "description": "Input size",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "transition": {
        "defaultValue": {
          "value": "pop-top-left"
        },
        "description": "Dropdown appear/disappear transition",
        "name": "transition",
        "required": false,
        "type": {
          "name": "MantineTransition"
        }
      },
      "transitionDuration": {
        "defaultValue": {
          "value": "200"
        },
        "description": "Dropdown appear/disappear transition duration",
        "name": "transitionDuration",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "transitionTimingFunction": {
        "defaultValue": null,
        "description": "Dropdown appear/disappear transition timing function, defaults to theme.transitionTimingFunction",
        "name": "transitionTimingFunction",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Defines input appearance, defaults to default in light color scheme and filled in dark",
        "name": "variant",
        "required": false,
        "type": {
          "name": "InputVariant"
        }
      },
      "withinPortal": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether to render the dropdown in a Portal",
        "name": "withinPortal",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props spread to root element (InputWrapper)",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>>"
        }
      },
      "zIndex": {
        "defaultValue": {
          "value": "getDefaultZIndex('popover')"
        },
        "description": "Popper zIndex",
        "name": "zIndex",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "DateRangePicker": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-dates/src/components/DateRangePicker/DateRangePicker.tsx",
    "displayName": "@mantine/dates/DateRangePicker",
    "props": {
      "__staticSelector": {
        "defaultValue": null,
        "description": "Static selector base",
        "name": "__staticSelector",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "allowLevelChange": {
        "defaultValue": null,
        "description": "Allow to change level (date – month – year)",
        "name": "allowLevelChange",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "allowSingleDateInRange": {
        "defaultValue": null,
        "description": "Allow one date to be selected as range",
        "name": "allowSingleDateInRange",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "amountOfMonths": {
        "defaultValue": null,
        "description": "Allows to show multiple months",
        "name": "amountOfMonths",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "clearButtonLabel": {
        "defaultValue": null,
        "description": "aria-label for clear button",
        "name": "clearButtonLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "clearButtonTabIndex": {
        "defaultValue": null,
        "description": "Set the clear button tab index to disabled or default after input field",
        "name": "clearButtonTabIndex",
        "required": false,
        "type": {
          "name": "0 | -1"
        }
      },
      "clearable": {
        "defaultValue": null,
        "description": "Allow to clear value",
        "name": "clearable",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "clickOutsideEvents": {
        "defaultValue": null,
        "description": "Events that should trigger outside clicks",
        "name": "clickOutsideEvents",
        "required": false,
        "type": {
          "name": "string[]"
        }
      },
      "closeCalendarOnChange": {
        "defaultValue": null,
        "description": "Set to false to force dropdown to stay open after date was selected",
        "name": "closeCalendarOnChange",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "closeDropdownOnScroll": {
        "defaultValue": null,
        "description": "Set to true to disable dropdown closing on scroll",
        "name": "closeDropdownOnScroll",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "dayClassName": {
        "defaultValue": null,
        "description": "Adds className to day button based on date and modifiers",
        "name": "dayClassName",
        "required": false,
        "type": {
          "name": "(date: Date, modifiers: DayModifiers) => string"
        }
      },
      "dayStyle": {
        "defaultValue": null,
        "description": "Adds style to day button based on date and modifiers",
        "name": "dayStyle",
        "required": false,
        "type": {
          "name": "(date: Date, modifiers: DayModifiers) => CSSProperties"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Default value for uncontrolled input",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "[Date, Date]"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Input description, displayed after label",
        "name": "description",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props spread to description element",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "disableOutsideEvents": {
        "defaultValue": null,
        "description": "When true dates that are outside of given month cannot be clicked or focused",
        "name": "disableOutsideEvents",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disabled input state",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "dropdownType": {
        "defaultValue": null,
        "description": "Where to show calendar in modal or popover",
        "name": "dropdownType",
        "required": false,
        "type": {
          "name": "\"modal\" | \"popover\""
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Displays error message after input",
        "name": "error",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props spread to error element",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "excludeDate": {
        "defaultValue": null,
        "description": "Callback function to determine if day should be disabled",
        "name": "excludeDate",
        "required": false,
        "type": {
          "name": "(date: Date) => boolean"
        }
      },
      "firstDayOfWeek": {
        "defaultValue": null,
        "description": "Set first day of the week",
        "name": "firstDayOfWeek",
        "required": false,
        "type": {
          "name": "FirstDayOfWeek"
        }
      },
      "focusable": {
        "defaultValue": null,
        "description": "Should focusable days have tabIndex={0}?",
        "name": "focusable",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "fullWidth": {
        "defaultValue": null,
        "description": "Set to true to make calendar take 100% of container width",
        "name": "fullWidth",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "hideOutsideDates": {
        "defaultValue": null,
        "description": "Remove outside dates",
        "name": "hideOutsideDates",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "hideWeekdays": {
        "defaultValue": null,
        "description": "Set to false to remove weekdays row",
        "name": "hideWeekdays",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Adds icon on the left side of input",
        "name": "icon",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "iconWidth": {
        "defaultValue": null,
        "description": "Width of icon section in px",
        "name": "iconWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "initialLevel": {
        "defaultValue": null,
        "description": "Initial date selection level",
        "name": "initialLevel",
        "required": false,
        "type": {
          "name": "\"date\" | \"month\" | \"year\""
        }
      },
      "initialMonth": {
        "defaultValue": null,
        "description": "Initial month for uncontrolled calendar",
        "name": "initialMonth",
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "initiallyOpened": {
        "defaultValue": null,
        "description": "Control initial dropdown opened state",
        "name": "initiallyOpened",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "inputFormat": {
        "defaultValue": null,
        "description": "dayjs input format",
        "name": "inputFormat",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "isDateFirstInRange": {
        "defaultValue": null,
        "description": "Should date be displayed as first in range",
        "name": "isDateFirstInRange",
        "required": false,
        "type": {
          "name": "(date: Date, modifiers: DayModifiers) => boolean"
        }
      },
      "isDateInRange": {
        "defaultValue": null,
        "description": "Should date be displayed as in range",
        "name": "isDateInRange",
        "required": false,
        "type": {
          "name": "(date: Date, modifiers: DayModifiers) => boolean"
        }
      },
      "isDateLastInRange": {
        "defaultValue": null,
        "description": "Should date be displayed as last in range",
        "name": "isDateLastInRange",
        "required": false,
        "type": {
          "name": "(date: Date, modifiers: DayModifiers) => boolean"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Input label, displayed before input",
        "name": "label",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "labelFormat": {
        "defaultValue": null,
        "description": "dayjs label format",
        "name": "labelFormat",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props spread to label element",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, \"key\" | keyof LabelHTMLAttributes<...>> & { ...; }"
        }
      },
      "labelSeparator": {
        "defaultValue": null,
        "description": "Separator between dates",
        "name": "labelSeparator",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "locale": {
        "defaultValue": null,
        "description": "Locale used for labels formatting, defaults to theme.datesLocale",
        "name": "locale",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "maxDate": {
        "defaultValue": null,
        "description": "Maximum possible date",
        "name": "maxDate",
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "minDate": {
        "defaultValue": null,
        "description": "Minimum possible date",
        "name": "minDate",
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "modalZIndex": {
        "defaultValue": null,
        "description": "Modal z-index",
        "name": "modalZIndex",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "month": {
        "defaultValue": null,
        "description": "Month for controlled calendar",
        "name": "month",
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "Input name, useful fon uncontrolled variant to capture data with native form",
        "name": "name",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "nextDecadeLabel": {
        "defaultValue": null,
        "description": "Next decade control aria-label",
        "name": "nextDecadeLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "nextMonthLabel": {
        "defaultValue": null,
        "description": "Next month control aria-label",
        "name": "nextMonthLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "nextYearLabel": {
        "defaultValue": null,
        "description": "Next year control aria-label",
        "name": "nextYearLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called when date range changes",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "(value: [Date, Date]) => void"
        }
      },
      "onDayMouseEnter": {
        "defaultValue": null,
        "description": "Called when onMouseEnter event fired on day button",
        "name": "onDayMouseEnter",
        "required": false,
        "type": {
          "name": "(date: Date, event: MouseEvent<Element, MouseEvent>) => void"
        }
      },
      "onDropdownClose": {
        "defaultValue": null,
        "description": "Called when dropdown closes",
        "name": "onDropdownClose",
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onDropdownOpen": {
        "defaultValue": null,
        "description": "Called when dropdown opens",
        "name": "onDropdownOpen",
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "openDropdownOnClear": {
        "defaultValue": null,
        "description": "Set to true to open dropdown on clear",
        "name": "openDropdownOnClear",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "placeholder": {
        "defaultValue": null,
        "description": "Placeholder, displayed when date is not selected",
        "name": "placeholder",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "positionDependencies": {
        "defaultValue": null,
        "description": "useEffect dependencies to force update dropdown position",
        "name": "positionDependencies",
        "required": false,
        "type": {
          "name": "any[]"
        }
      },
      "preventFocus": {
        "defaultValue": null,
        "description": "Prevent focusing upon clicking",
        "name": "preventFocus",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "previousDecadeLabel": {
        "defaultValue": null,
        "description": "Previous decade control aria-label",
        "name": "previousDecadeLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "previousMonthLabel": {
        "defaultValue": null,
        "description": "Previous month control aria-label",
        "name": "previousMonthLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "previousYearLabel": {
        "defaultValue": null,
        "description": "Previous year control aria-label",
        "name": "previousYearLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Input border-radius from theme or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "range": {
        "defaultValue": null,
        "description": "Selected range",
        "name": "range",
        "required": false,
        "type": {
          "name": "[Date, Date]"
        }
      },
      "renderDay": {
        "defaultValue": null,
        "description": "Render day based on the date",
        "name": "renderDay",
        "required": false,
        "type": {
          "name": "(date: Date) => ReactNode"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets required on input element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Right section of input, similar to icon but on the right",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "rightSectionProps": {
        "defaultValue": null,
        "description": "Props spread to rightSection div element",
        "name": "rightSectionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>>"
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Width of right section, is used to calculate input padding-right",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "shadow": {
        "defaultValue": null,
        "description": "Dropdown shadow from theme or css value for custom box-shadow",
        "name": "shadow",
        "required": false,
        "type": {
          "name": "MantineShadow"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Input size",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "transition": {
        "defaultValue": null,
        "description": "Dropdown appear/disappear transition",
        "name": "transition",
        "required": false,
        "type": {
          "name": "MantineTransition"
        }
      },
      "transitionDuration": {
        "defaultValue": null,
        "description": "Dropdown appear/disappear transition duration",
        "name": "transitionDuration",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "transitionTimingFunction": {
        "defaultValue": null,
        "description": "Dropdown appear/disappear transition timing function, defaults to theme.transitionTimingFunction",
        "name": "transitionTimingFunction",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Selected date, required with controlled input",
        "name": "value",
        "required": false,
        "type": {
          "name": "[Date, Date]"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Defines input appearance, defaults to default in light color scheme and filled in dark",
        "name": "variant",
        "required": false,
        "type": {
          "name": "InputVariant"
        }
      },
      "weekdayLabelFormat": {
        "defaultValue": null,
        "description": "dayjs label format for weekday heading",
        "name": "weekdayLabelFormat",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "withinPortal": {
        "defaultValue": null,
        "description": "Whether to render the dropdown in a Portal",
        "name": "withinPortal",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props spread to root element (InputWrapper)",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>>"
        }
      },
      "zIndex": {
        "defaultValue": null,
        "description": "Popper zIndex",
        "name": "zIndex",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "Month": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-dates/src/components/Month/Month.tsx",
    "displayName": "@mantine/dates/Month",
    "props": {
      "__staticSelector": {
        "defaultValue": null,
        "description": "Static css selector base",
        "name": "__staticSelector",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "dayClassName": {
        "defaultValue": null,
        "description": "Adds className to day button based on date and modifiers",
        "name": "dayClassName",
        "required": false,
        "type": {
          "name": "(date: Date, modifiers: DayModifiers) => string"
        }
      },
      "dayStyle": {
        "defaultValue": null,
        "description": "Adds style to day button based on date and modifiers",
        "name": "dayStyle",
        "required": false,
        "type": {
          "name": "(date: Date, modifiers: DayModifiers) => CSSProperties"
        }
      },
      "daysRefs": {
        "defaultValue": null,
        "description": "Get days buttons refs",
        "name": "daysRefs",
        "required": false,
        "type": {
          "name": "HTMLButtonElement[][]"
        }
      },
      "disableOutsideEvents": {
        "defaultValue": null,
        "description": "When true dates that are outside of given month cannot be clicked or focused",
        "name": "disableOutsideEvents",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "excludeDate": {
        "defaultValue": null,
        "description": "Callback function to determine if day should be disabled",
        "name": "excludeDate",
        "required": false,
        "type": {
          "name": "(date: Date) => boolean"
        }
      },
      "firstDayOfWeek": {
        "defaultValue": null,
        "description": "Set first day of the week",
        "name": "firstDayOfWeek",
        "required": false,
        "type": {
          "name": "FirstDayOfWeek"
        }
      },
      "focusable": {
        "defaultValue": null,
        "description": "Should focusable days have tabIndex={0}?",
        "name": "focusable",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "fullWidth": {
        "defaultValue": null,
        "description": "Set to true to make calendar take 100% of container width",
        "name": "fullWidth",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "hideOutsideDates": {
        "defaultValue": null,
        "description": "Remove outside dates",
        "name": "hideOutsideDates",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "hideWeekdays": {
        "defaultValue": null,
        "description": "Set to false to remove weekdays row",
        "name": "hideWeekdays",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "isDateFirstInRange": {
        "defaultValue": null,
        "description": "Should date be displayed as first in range",
        "name": "isDateFirstInRange",
        "required": false,
        "type": {
          "name": "(date: Date, modifiers: DayModifiers) => boolean"
        }
      },
      "isDateInRange": {
        "defaultValue": null,
        "description": "Should date be displayed as in range",
        "name": "isDateInRange",
        "required": false,
        "type": {
          "name": "(date: Date, modifiers: DayModifiers) => boolean"
        }
      },
      "isDateLastInRange": {
        "defaultValue": null,
        "description": "Should date be displayed as last in range",
        "name": "isDateLastInRange",
        "required": false,
        "type": {
          "name": "(date: Date, modifiers: DayModifiers) => boolean"
        }
      },
      "locale": {
        "defaultValue": null,
        "description": "Locale is used to get weekdays names with dayjs format",
        "name": "locale",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "maxDate": {
        "defaultValue": null,
        "description": "Maximum possible date",
        "name": "maxDate",
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "minDate": {
        "defaultValue": null,
        "description": "Minimum possible date",
        "name": "minDate",
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "month": {
        "defaultValue": null,
        "description": "Date at which month should be shown",
        "name": "month",
        "required": true,
        "type": {
          "name": "Date"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called when day is selected",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "(value: Date) => void"
        }
      },
      "onDayKeyDown": {
        "defaultValue": null,
        "description": "Called when keydown event is registered on day",
        "name": "onDayKeyDown",
        "required": false,
        "type": {
          "name": "(payload: DayKeydownPayload, event: KeyboardEvent<HTMLButtonElement>) => void"
        }
      },
      "onDayMouseEnter": {
        "defaultValue": null,
        "description": "Called when onMouseEnter event fired on day button",
        "name": "onDayMouseEnter",
        "required": false,
        "type": {
          "name": "(date: Date, event: MouseEvent<Element, MouseEvent>) => void"
        }
      },
      "preventFocus": {
        "defaultValue": null,
        "description": "Prevent focusing upon clicking",
        "name": "preventFocus",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "range": {
        "defaultValue": null,
        "description": "Selected range",
        "name": "range",
        "required": false,
        "type": {
          "name": "[Date, Date]"
        }
      },
      "renderDay": {
        "defaultValue": null,
        "description": "Render day based on the date",
        "name": "renderDay",
        "required": false,
        "type": {
          "name": "(date: Date) => ReactNode"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Controls month days font-size and height",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Selected date or an array of selected dates",
        "name": "value",
        "required": false,
        "type": {
          "name": "Date | Date[]"
        }
      },
      "weekdayLabelFormat": {
        "defaultValue": null,
        "description": "dayjs label format for weekday heading",
        "name": "weekdayLabelFormat",
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  "RangeCalendar": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-dates/src/components/RangeCalendar/RangeCalendar.tsx",
    "displayName": "@mantine/dates/RangeCalendar",
    "props": {
      "__staticSelector": {
        "defaultValue": null,
        "description": "Static selector base",
        "name": "__staticSelector",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "allowLevelChange": {
        "defaultValue": null,
        "description": "Allow to change level (date – month – year)",
        "name": "allowLevelChange",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "allowSingleDateInRange": {
        "defaultValue": null,
        "description": "Allow one date to be selected as range",
        "name": "allowSingleDateInRange",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "amountOfMonths": {
        "defaultValue": null,
        "description": "Amount of months",
        "name": "amountOfMonths",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "dayClassName": {
        "defaultValue": null,
        "description": "Adds className to day button based on date and modifiers",
        "name": "dayClassName",
        "required": false,
        "type": {
          "name": "(date: Date, modifiers: DayModifiers) => string"
        }
      },
      "dayStyle": {
        "defaultValue": null,
        "description": "Adds style to day button based on date and modifiers",
        "name": "dayStyle",
        "required": false,
        "type": {
          "name": "(date: Date, modifiers: DayModifiers) => CSSProperties"
        }
      },
      "disableOutsideEvents": {
        "defaultValue": null,
        "description": "When true dates that are outside of given month cannot be clicked or focused",
        "name": "disableOutsideEvents",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "excludeDate": {
        "defaultValue": null,
        "description": "Callback function to determine if day should be disabled",
        "name": "excludeDate",
        "required": false,
        "type": {
          "name": "(date: Date) => boolean"
        }
      },
      "firstDayOfWeek": {
        "defaultValue": null,
        "description": "Set first day of the week",
        "name": "firstDayOfWeek",
        "required": false,
        "type": {
          "name": "FirstDayOfWeek"
        }
      },
      "focusable": {
        "defaultValue": null,
        "description": "Should focusable days have tabIndex={0}?",
        "name": "focusable",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "fullWidth": {
        "defaultValue": null,
        "description": "Set to true to make calendar take 100% of container width",
        "name": "fullWidth",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "hideOutsideDates": {
        "defaultValue": null,
        "description": "Remove outside dates",
        "name": "hideOutsideDates",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "hideWeekdays": {
        "defaultValue": null,
        "description": "Set to false to remove weekdays row",
        "name": "hideWeekdays",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "initialLevel": {
        "defaultValue": null,
        "description": "Initial date selection level",
        "name": "initialLevel",
        "required": false,
        "type": {
          "name": "\"date\" | \"month\" | \"year\""
        }
      },
      "initialMonth": {
        "defaultValue": null,
        "description": "Initial month for uncontrolled calendar",
        "name": "initialMonth",
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "isDateFirstInRange": {
        "defaultValue": null,
        "description": "Should date be displayed as first in range",
        "name": "isDateFirstInRange",
        "required": false,
        "type": {
          "name": "(date: Date, modifiers: DayModifiers) => boolean"
        }
      },
      "isDateInRange": {
        "defaultValue": null,
        "description": "Should date be displayed as in range",
        "name": "isDateInRange",
        "required": false,
        "type": {
          "name": "(date: Date, modifiers: DayModifiers) => boolean"
        }
      },
      "isDateLastInRange": {
        "defaultValue": null,
        "description": "Should date be displayed as last in range",
        "name": "isDateLastInRange",
        "required": false,
        "type": {
          "name": "(date: Date, modifiers: DayModifiers) => boolean"
        }
      },
      "labelFormat": {
        "defaultValue": null,
        "description": "dayjs label format",
        "name": "labelFormat",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "locale": {
        "defaultValue": null,
        "description": "Locale used for labels formatting, defaults to theme.datesLocale",
        "name": "locale",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "maxDate": {
        "defaultValue": null,
        "description": "Maximum possible date",
        "name": "maxDate",
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "minDate": {
        "defaultValue": null,
        "description": "Minimum possible date",
        "name": "minDate",
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "month": {
        "defaultValue": null,
        "description": "Month for controlled calendar",
        "name": "month",
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "nextDecadeLabel": {
        "defaultValue": null,
        "description": "Next decade control aria-label",
        "name": "nextDecadeLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "nextMonthLabel": {
        "defaultValue": null,
        "description": "Next month control aria-label",
        "name": "nextMonthLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "nextYearLabel": {
        "defaultValue": null,
        "description": "Next year control aria-label",
        "name": "nextYearLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called when selected date changes",
        "name": "onChange",
        "required": true,
        "type": {
          "name": "(value: [Date, Date]) => void"
        }
      },
      "onDayMouseEnter": {
        "defaultValue": null,
        "description": "Called when onMouseEnter event fired on day button",
        "name": "onDayMouseEnter",
        "required": false,
        "type": {
          "name": "(date: Date, event: MouseEvent<Element, MouseEvent>) => void"
        }
      },
      "onMonthChange": {
        "defaultValue": null,
        "description": "Called when month changes",
        "name": "onMonthChange",
        "required": false,
        "type": {
          "name": "(month: Date) => void"
        }
      },
      "preventFocus": {
        "defaultValue": null,
        "description": "Prevent focusing upon clicking",
        "name": "preventFocus",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "previousDecadeLabel": {
        "defaultValue": null,
        "description": "Previous decade control aria-label",
        "name": "previousDecadeLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "previousMonthLabel": {
        "defaultValue": null,
        "description": "Previous month control aria-label",
        "name": "previousMonthLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "previousYearLabel": {
        "defaultValue": null,
        "description": "Previous year control aria-label",
        "name": "previousYearLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "range": {
        "defaultValue": null,
        "description": "Selected range",
        "name": "range",
        "required": false,
        "type": {
          "name": "[Date, Date]"
        }
      },
      "renderDay": {
        "defaultValue": null,
        "description": "Render day based on the date",
        "name": "renderDay",
        "required": false,
        "type": {
          "name": "(date: Date) => ReactNode"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Calendar size",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Selected dates",
        "name": "value",
        "required": true,
        "type": {
          "name": "[Date, Date]"
        }
      },
      "weekdayLabelFormat": {
        "defaultValue": null,
        "description": "dayjs label format for weekday heading",
        "name": "weekdayLabelFormat",
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  "TimeInput": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-dates/src/components/TimeInput/TimeInput.tsx",
    "displayName": "@mantine/dates/TimeInput",
    "props": {
      "amPmLabel": {
        "defaultValue": null,
        "description": "aria-label for am/pm input",
        "name": "amPmLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "amPmPlaceholder": {
        "defaultValue": null,
        "description": "Placeholder for am/pm input",
        "name": "amPmPlaceholder",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "clearButtonLabel": {
        "defaultValue": null,
        "description": "aria-label for clear button",
        "name": "clearButtonLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "clearable": {
        "defaultValue": null,
        "description": "Allow to clear item",
        "name": "clearable",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Uncontrolled input default value",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Input description, displayed after label",
        "name": "description",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props spread to description element",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disable field",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Displays error message after input",
        "name": "error",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props spread to error element",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "format": {
        "defaultValue": null,
        "description": "Time format",
        "name": "format",
        "required": false,
        "type": {
          "name": "\"12\" | \"24\""
        }
      },
      "hoursLabel": {
        "defaultValue": null,
        "description": "aria-label for hours input",
        "name": "hoursLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Adds icon on the left side of input",
        "name": "icon",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "iconWidth": {
        "defaultValue": null,
        "description": "Width of icon section in px",
        "name": "iconWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Input label, displayed before input",
        "name": "label",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props spread to label element",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, \"key\" | keyof LabelHTMLAttributes<...>> & { ...; }"
        }
      },
      "minutesLabel": {
        "defaultValue": null,
        "description": "aria-label for minutes input",
        "name": "minutesLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "Uncontrolled input name",
        "name": "name",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "nextRef": {
        "defaultValue": null,
        "description": "Ref to focus after final TimeInput field. Used by TimeRangeInput",
        "name": "nextRef",
        "required": false,
        "type": {
          "name": "RefObject<HTMLInputElement>"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Controlled input onChange handler",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "(value: Date) => void"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Input border-radius from theme or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets required on input element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Right section of input, similar to icon but on the right",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "rightSectionProps": {
        "defaultValue": null,
        "description": "Props spread to rightSection div element",
        "name": "rightSectionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>>"
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Width of right section, is used to calculate input padding-right",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "secondsLabel": {
        "defaultValue": null,
        "description": "aria-label for seconds input",
        "name": "secondsLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Input size",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "timePlaceholder": {
        "defaultValue": null,
        "description": "Placeholder for hours/minutes/seconds inputs",
        "name": "timePlaceholder",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Controlled input value",
        "name": "value",
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Defines input appearance, defaults to default in light color scheme and filled in dark",
        "name": "variant",
        "required": false,
        "type": {
          "name": "InputVariant"
        }
      },
      "withSeconds": {
        "defaultValue": null,
        "description": "Display seconds input",
        "name": "withSeconds",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Properties spread to root element",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "{ [key: string]: any; }"
        }
      }
    }
  },
  "TimeRangeInput": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-dates/src/components/TimeRangeInput/TimeRangeInput.tsx",
    "displayName": "@mantine/dates/TimeRangeInput",
    "props": {
      "amPmLabel": {
        "defaultValue": null,
        "description": "aria-label for am/pm input",
        "name": "amPmLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "amPmPlaceholder": {
        "defaultValue": null,
        "description": "placeholder for am/pm input",
        "name": "amPmPlaceholder",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "clearButtonLabel": {
        "defaultValue": null,
        "description": "aria-label for clear button",
        "name": "clearButtonLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "clearable": {
        "defaultValue": null,
        "description": "Allow to clear item",
        "name": "clearable",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Uncontrolled input default value",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "[Date, Date]"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Input description, displayed after label",
        "name": "description",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props spread to description element",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disable field",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Displays error message after input",
        "name": "error",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props spread to error element",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "format": {
        "defaultValue": null,
        "description": "The time format",
        "name": "format",
        "required": false,
        "type": {
          "name": "\"12\" | \"24\""
        }
      },
      "hoursLabel": {
        "defaultValue": null,
        "description": "aria-label for hours input",
        "name": "hoursLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Adds icon on the left side of input",
        "name": "icon",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "iconWidth": {
        "defaultValue": null,
        "description": "Width of icon section in px",
        "name": "iconWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Input label, displayed before input",
        "name": "label",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props spread to label element",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, \"key\" | keyof LabelHTMLAttributes<...>> & { ...; }"
        }
      },
      "labelSeparator": {
        "defaultValue": null,
        "description": "Separator between time inputs",
        "name": "labelSeparator",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "minutesLabel": {
        "defaultValue": null,
        "description": "aria-label for minutes input",
        "name": "minutesLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "Uncontrolled input name",
        "name": "name",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Controlled input onChange handler",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "(value: [Date, Date]) => void"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Input border-radius from theme or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets required on input element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Right section of input, similar to icon but on the right",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "rightSectionProps": {
        "defaultValue": null,
        "description": "Props spread to rightSection div element",
        "name": "rightSectionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>>"
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Width of right section, is used to calculate input padding-right",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "secondsLabel": {
        "defaultValue": null,
        "description": "aria-label for seconds input",
        "name": "secondsLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Input size",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "timePlaceholder": {
        "defaultValue": null,
        "description": "placeholder for time input",
        "name": "timePlaceholder",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Controlled input value",
        "name": "value",
        "required": false,
        "type": {
          "name": "[Date, Date]"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Defines input appearance, defaults to default in light color scheme and filled in dark",
        "name": "variant",
        "required": false,
        "type": {
          "name": "InputVariant"
        }
      },
      "withSeconds": {
        "defaultValue": null,
        "description": "Display seconds input",
        "name": "withSeconds",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Properties spread to root element",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "{ [key: string]: any; }"
        }
      }
    }
  },
  "Dropzone": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-dropzone/src/Dropzone/Dropzone.tsx",
    "displayName": "@mantine/dropzone/Dropzone",
    "props": {
      "accept": {
        "defaultValue": null,
        "description": "File types to accept",
        "name": "accept",
        "required": false,
        "type": {
          "name": "string[]"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Render children based on dragging state",
        "name": "children",
        "required": true,
        "type": {
          "name": "(status: DropzoneStatus) => ReactNode"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disable files capturing",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "Display loading overlay over dropzone",
        "name": "loading",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "maxSize": {
        "defaultValue": null,
        "description": "Set maximum file size in bytes",
        "name": "maxSize",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "multiple": {
        "defaultValue": null,
        "description": "Allow selection of multiple files",
        "name": "multiple",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "Name of the form control. Submitted with the form as part of a name/value pair.",
        "name": "name",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onDrop": {
        "defaultValue": null,
        "description": "Called when files are dropped into dropzone",
        "name": "onDrop",
        "required": true,
        "type": {
          "name": "(files: File[]) => void"
        }
      },
      "onReject": {
        "defaultValue": null,
        "description": "Called when selected files don't meet file restrictions",
        "name": "onReject",
        "required": false,
        "type": {
          "name": "(fileRejections: FileRejection[]) => void"
        }
      },
      "openRef": {
        "defaultValue": null,
        "description": "Get open function as ref",
        "name": "openRef",
        "required": false,
        "type": {
          "name": "ForwardedRef<() => void>"
        }
      },
      "padding": {
        "defaultValue": null,
        "description": "Padding from theme.spacing, or number to set padding in px",
        "name": "padding",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Border radius from theme.radius or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      }
    }
  },
  "FullScreenDropzone": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-dropzone/src/FullScreenDropzone/FullScreenDropzone.tsx",
    "displayName": "@mantine/dropzone/FullScreenDropzone",
    "props": {
      "accept": {
        "defaultValue": null,
        "description": "Accepted mime types",
        "name": "accept",
        "required": true,
        "type": {
          "name": "string[]"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Render children based on dragging state",
        "name": "children",
        "required": true,
        "type": {
          "name": "(status: DropzoneStatus) => ReactNode"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disable dropzone",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "offset": {
        "defaultValue": null,
        "description": "Space between dropzone and viewport edges",
        "name": "offset",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "onDrop": {
        "defaultValue": null,
        "description": "Called when files are dropped to document",
        "name": "onDrop",
        "required": true,
        "type": {
          "name": "(files: File[]) => void"
        }
      },
      "padding": {
        "defaultValue": null,
        "description": "Dropzone padding from theme or number to set padding in px",
        "name": "padding",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Dropzone radius from theme or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "zIndex": {
        "defaultValue": null,
        "description": "Overlay z-index",
        "name": "zIndex",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "PinInput": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-labs/src/PinInput/PinInput.tsx",
    "displayName": "@mantine/core/PinInput",
    "props": {
      "autoFocus": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If `true`, the pin input receives focus on mount",
        "name": "autoFocus",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Active input color from theme.colors",
        "name": "color",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Initial value for uncontrolled component",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "direction": {
        "defaultValue": {
          "value": "horizontal"
        },
        "description": "Input direction position",
        "name": "direction",
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\""
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "input disabled state",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Adds icon on the left side of input",
        "name": "icon",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "iconWidth": {
        "defaultValue": null,
        "description": "Width of icon section in px",
        "name": "iconWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "The top-level id string that will be applied to the input fields",
        "name": "id",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "invalid": {
        "defaultValue": null,
        "description": "input invalid state",
        "name": "invalid",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "length": {
        "defaultValue": {
          "value": "4"
        },
        "description": "amount of input boxes",
        "name": "length",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "manageFocus": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If `true`, focus will move automatically to the next input once filled",
        "name": "manageFocus",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "mask": {
        "defaultValue": null,
        "description": "If `true`, the input's value will be masked just like `type=password`",
        "name": "mask",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "Input name attribute, used to bind inputs in one group, by default generated randomly with use-id hook",
        "name": "name",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Function called on input change",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "(value: string) => void"
        }
      },
      "onComplete": {
        "defaultValue": null,
        "description": "Function called when all inputs have valid values",
        "name": "onComplete",
        "required": false,
        "type": {
          "name": "(value: string) => void"
        }
      },
      "oneTimeCode": {
        "defaultValue": null,
        "description": "If `true`, the pin input component signals to its fields that they should use `autocomplete=\"one-time-code\"`.",
        "name": "oneTimeCode",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "placeholder": {
        "defaultValue": {
          "value": "●"
        },
        "description": "The placeholder for the pin input",
        "name": "placeholder",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "md"
        },
        "description": "Input border radius",
        "name": "radius",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets required on input element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Right section of input, similar to icon but on the right",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "rightSectionProps": {
        "defaultValue": null,
        "description": "Props spread to rightSection div element",
        "name": "rightSectionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>>"
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Width of right section, is used to calculate input padding-right",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "size": {
        "defaultValue": {
          "value": "sm"
        },
        "description": "Predefined label fontSize, radio width, height and border-radius",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "spacing": {
        "defaultValue": {
          "value": "sm"
        },
        "description": "Spacing between inputs",
        "name": "spacing",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "type": {
        "defaultValue": {
          "value": "alphanumeric"
        },
        "description": "The type of values the pin-input should allow",
        "name": "type",
        "required": false,
        "type": {
          "name": "\"number\" | RegExp | \"alphanumeric\""
        }
      },
      "value": {
        "defaultValue": null,
        "description": "The value of the the pin input",
        "name": "value",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Defines input appearance, defaults to default in light color scheme and filled in dark",
        "name": "variant",
        "required": false,
        "type": {
          "name": "InputVariant"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Properties spread to root element",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "{ [key: string]: any; }"
        }
      }
    }
  },
  "TagInput": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-labs/src/TagInput/TagInput.tsx",
    "displayName": "@mantine/labs/TagInput",
    "props": {
      "addOnPaste": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Allow to paste item",
        "name": "addOnPaste",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "clearButtonLabel": {
        "defaultValue": null,
        "description": "aria-label for clear button",
        "name": "clearButtonLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "clearInputOnBlur": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Clear input field value on blur",
        "name": "clearInputOnBlur",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "clearable": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Allow to clear item",
        "name": "clearable",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Uncontrolled input defaultValue",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "string[]"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Input description, displayed after label",
        "name": "description",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props spread to description element",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "disabled": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Disabled input state",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "elementRef": {
        "defaultValue": null,
        "description": "Get input ref",
        "name": "elementRef",
        "required": false,
        "type": {
          "name": "ForwardedRef<HTMLInputElement>"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Displays error message after input",
        "name": "error",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props spread to error element",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Adds icon on the left side of input",
        "name": "icon",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "iconWidth": {
        "defaultValue": null,
        "description": "Width of icon section in px",
        "name": "iconWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Input label, displayed before input",
        "name": "label",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props spread to label element",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, \"key\" | keyof LabelHTMLAttributes<...>> & { ...; }"
        }
      },
      "maxTags": {
        "defaultValue": null,
        "description": "Limit amount of tags",
        "name": "maxTags",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "onChange": {
        "defaultValue": {
          "value": "() => {}"
        },
        "description": "Controlled input onChange handler",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "(value: string[]) => void"
        }
      },
      "onChangeInput": {
        "defaultValue": null,
        "description": "Called each time search query changes",
        "name": "onChangeInput",
        "required": false,
        "type": {
          "name": "(query: string) => void"
        }
      },
      "onValidationReject": {
        "defaultValue": {
          "value": "() => {}"
        },
        "description": "Called when validationRegex reject tags",
        "name": "onValidationReject",
        "required": false,
        "type": {
          "name": "(data: string[]) => void"
        }
      },
      "onlyUnique": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Allow to only unique",
        "name": "onlyUnique",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "pasteSplit": {
        "defaultValue": {
          "value": "(data: string): string[] => {\n  const separators = [',', ';', '\\\\(', '\\\\)', '\\\\*', '/', ':', '\\\\?', '\\n', '\\r'];\n  return data.split(new RegExp(separators.join('|'))).map((d) => d.trim());\n}"
        },
        "description": "Called to split after onPaste",
        "name": "pasteSplit",
        "required": false,
        "type": {
          "name": "(data: any) => string[]"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "sm"
        },
        "description": "Input border-radius from theme or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Adds red asterisk on the right side of label\nSets required on input element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Component used to render right section",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "rightSectionProps": {
        "defaultValue": null,
        "description": "Props spread to rightSection div element",
        "name": "rightSectionProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>>"
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Width of right section, is used to calculate input padding-right",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "size": {
        "defaultValue": {
          "value": "sm"
        },
        "description": "Input size",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "validationRegex": {
        "defaultValue": {
          "value": "/.*/"
        },
        "description": "Called for validation when add tags",
        "name": "validationRegex",
        "required": false,
        "type": {
          "name": "RegExp"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Controlled input value",
        "name": "value",
        "required": false,
        "type": {
          "name": "string[]"
        }
      },
      "valueComponent": {
        "defaultValue": null,
        "description": "Component used to render values",
        "name": "valueComponent",
        "required": false,
        "type": {
          "name": "FC<any>"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Defines input appearance, defaults to default in light color scheme and filled in dark",
        "name": "variant",
        "required": false,
        "type": {
          "name": "InputVariant"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Properties spread to root element (InputWrapper component)",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }"
        }
      }
    }
  },
  "NotificationsProvider": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-notifications/src/NotificationsProvider/NotificationsProvider.tsx",
    "displayName": "@mantine/notifications/NotificationsProvider",
    "props": {
      "autoClose": {
        "defaultValue": {
          "value": "4000"
        },
        "description": "Auto close timeout for all notifications, false to disable auto close, can be overwritten for individual notifications by showNotification function",
        "name": "autoClose",
        "required": false,
        "type": {
          "name": "number | false"
        }
      },
      "containerWidth": {
        "defaultValue": {
          "value": "440"
        },
        "description": "Notification width in px, cannot exceed 100%",
        "name": "containerWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "limit": {
        "defaultValue": {
          "value": "5"
        },
        "description": "Maximum amount of notifications displayed at a time, other new notifications will be added to queue",
        "name": "limit",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "notificationMaxHeight": {
        "defaultValue": {
          "value": "200"
        },
        "description": "Notification max-height in px, used for transitions",
        "name": "notificationMaxHeight",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "position": {
        "defaultValue": {
          "value": "bottom-right"
        },
        "description": "Notifications position",
        "name": "position",
        "required": false,
        "type": {
          "name": "\"bottom-center\" | \"top-center\" | \"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\""
        }
      },
      "transitionDuration": {
        "defaultValue": {
          "value": "250"
        },
        "description": "Notification transitions duration, 0 to turn transitions off",
        "name": "transitionDuration",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "zIndex": {
        "defaultValue": {
          "value": "getDefaultZIndex('overlay')"
        },
        "description": "Notifications container z-index",
        "name": "zIndex",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "Chip": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Chips/Chip/Chip.tsx",
    "displayName": "@mantine/core/Chip",
    "props": {
      "__staticSelector": {
        "defaultValue": null,
        "description": "Static selector base",
        "name": "__staticSelector",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "checked": {
        "defaultValue": null,
        "description": "Checked state for controlled component",
        "name": "checked",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Chip label",
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Active color from theme, defaults to theme.primaryColor",
        "name": "color",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      },
      "defaultChecked": {
        "defaultValue": null,
        "description": "Default value for uncontrolled component",
        "name": "defaultChecked",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Static id to bind input with label",
        "name": "id",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Calls when checked state changes",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "(checked: boolean) => void"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Chip radius from theme or number to set value in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Predefined chip size",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "type": {
        "defaultValue": null,
        "description": "Chip input type",
        "name": "type",
        "required": false,
        "type": {
          "name": "\"checkbox\" | \"radio\""
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Controls chip appearance, defaults to filled with dark theme and to outline in light theme",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"outline\" | \"filled\""
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props spread to wrapper element",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "{ [key: string]: any; }"
        }
      }
    }
  },
  "TimelineItem": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Timeline/TimelineItem/TimelineItem.tsx",
    "displayName": "@mantine/core/TimelineItem",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Should this item be highlighted, controlled by Timeline component",
        "name": "active",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "align": {
        "defaultValue": null,
        "description": "Line and bullet position relative to item content, controlled by Timeline component",
        "name": "align",
        "required": false,
        "type": {
          "name": "\"left\" | \"right\""
        }
      },
      "bullet": {
        "defaultValue": null,
        "description": "React node that should be rendered inside bullet – icon, image, avatar, etc.",
        "name": "bullet",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "bulletSize": {
        "defaultValue": {
          "value": "20"
        },
        "description": "Bullet width, height and border-radius in px, controlled by Timeline component",
        "name": "bulletSize",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "React node that will be rendered after title",
        "name": "children",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Highlight color for active item",
        "name": "color",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      },
      "lineActive": {
        "defaultValue": null,
        "description": "Should line of this item be highlighted, controlled by Timeline component",
        "name": "lineActive",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "lineVariant": {
        "defaultValue": {
          "value": "solid"
        },
        "description": "Line border style",
        "name": "lineVariant",
        "required": false,
        "type": {
          "name": "\"dashed\" | \"dotted\" | \"solid\""
        }
      },
      "lineWidth": {
        "defaultValue": {
          "value": "4"
        },
        "description": "Line border width in px, controlled by Timeline component",
        "name": "lineWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "xl"
        },
        "description": "Radius from theme.radius, or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "Item title, rendered next to bullet",
        "name": "title",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      }
    }
  },
  "Slider": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Slider/Slider/Slider.tsx",
    "displayName": "@mantine/core/Slider",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "Color from theme.colors",
        "name": "color",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Default value for uncontrolled slider",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables slider",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Function to generate label or any react node to render instead, set to null to disable label",
        "name": "label",
        "required": false,
        "type": {
          "name": "ReactNode | ((value: number) => ReactNode)"
        }
      },
      "labelAlwaysOn": {
        "defaultValue": null,
        "description": "If true label will be not be hidden when user stops dragging",
        "name": "labelAlwaysOn",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "labelTransition": {
        "defaultValue": null,
        "description": "Label appear/disappear transition",
        "name": "labelTransition",
        "required": false,
        "type": {
          "name": "MantineTransition"
        }
      },
      "labelTransitionDuration": {
        "defaultValue": null,
        "description": "Label appear/disappear transition duration in ms",
        "name": "labelTransitionDuration",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "labelTransitionTimingFunction": {
        "defaultValue": null,
        "description": "Label appear/disappear transition timing function, defaults to theme.transitionRimingFunction",
        "name": "labelTransitionTimingFunction",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "marks": {
        "defaultValue": null,
        "description": "Marks which will be placed on the track",
        "name": "marks",
        "required": false,
        "type": {
          "name": "{ value: number; label?: ReactNode; }[]"
        }
      },
      "max": {
        "defaultValue": null,
        "description": "Maximum possible value",
        "name": "max",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "min": {
        "defaultValue": null,
        "description": "Minimal possible value",
        "name": "min",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "Hidden input name, use with uncontrolled variant",
        "name": "name",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called each time value changes",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "(value: number) => void"
        }
      },
      "onChangeEnd": {
        "defaultValue": null,
        "description": "Called when user stops dragging slider or changes value with arrows",
        "name": "onChangeEnd",
        "required": false,
        "type": {
          "name": "(value: number) => void"
        }
      },
      "precision": {
        "defaultValue": null,
        "description": "Amount of digits after the decimal point",
        "name": "precision",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Track border-radius from theme or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "showLabelOnHover": {
        "defaultValue": null,
        "description": "If true slider label will appear on hover",
        "name": "showLabelOnHover",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Predefined track and thumb size, number to set sizes in px",
        "name": "size",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "step": {
        "defaultValue": null,
        "description": "Number by which value will be incremented/decremented with thumb drag and arrows",
        "name": "step",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "thumbChildren": {
        "defaultValue": null,
        "description": "Thumb children, can be used to add icon",
        "name": "thumbChildren",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "thumbLabel": {
        "defaultValue": null,
        "description": "Thumb aria-label",
        "name": "thumbLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Current value for controlled slider",
        "name": "value",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "RangeSlider": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Slider/RangeSlider/RangeSlider.tsx",
    "displayName": "@mantine/core/RangeSlider",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "Color from theme.colors",
        "name": "color",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Default value for uncontrolled slider",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "Value"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables slider",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Function to generate label or any react node to render instead, set to null to disable label",
        "name": "label",
        "required": false,
        "type": {
          "name": "ReactNode | ((value: number) => ReactNode)"
        }
      },
      "labelAlwaysOn": {
        "defaultValue": null,
        "description": "If true label will be not be hidden when user stops dragging",
        "name": "labelAlwaysOn",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "labelTransition": {
        "defaultValue": null,
        "description": "Label appear/disappear transition",
        "name": "labelTransition",
        "required": false,
        "type": {
          "name": "MantineTransition"
        }
      },
      "labelTransitionDuration": {
        "defaultValue": null,
        "description": "Label appear/disappear transition duration in ms",
        "name": "labelTransitionDuration",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "labelTransitionTimingFunction": {
        "defaultValue": null,
        "description": "Label appear/disappear transition timing function, defaults to theme.transitionRimingFunction",
        "name": "labelTransitionTimingFunction",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "marks": {
        "defaultValue": null,
        "description": "Marks which will be placed on the track",
        "name": "marks",
        "required": false,
        "type": {
          "name": "{ value: number; label?: ReactNode; }[]"
        }
      },
      "max": {
        "defaultValue": null,
        "description": "Maximum possible value",
        "name": "max",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "min": {
        "defaultValue": null,
        "description": "Minimal possible value",
        "name": "min",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "minRange": {
        "defaultValue": null,
        "description": "Minimal range interval",
        "name": "minRange",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "Hidden input name, use with uncontrolled variant",
        "name": "name",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called each time value changes",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "(value: Value) => void"
        }
      },
      "onChangeEnd": {
        "defaultValue": null,
        "description": "Called when user stops dragging slider or changes value with arrows",
        "name": "onChangeEnd",
        "required": false,
        "type": {
          "name": "(value: Value) => void"
        }
      },
      "precision": {
        "defaultValue": null,
        "description": "Amount of digits after the decimal point",
        "name": "precision",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Track border-radius from theme or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "showLabelOnHover": {
        "defaultValue": null,
        "description": "If true slider label will appear on hover",
        "name": "showLabelOnHover",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Predefined track and thumb size, number to set sizes in px",
        "name": "size",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "step": {
        "defaultValue": null,
        "description": "Number by which value will be incremented/decremented with thumb drag and arrows",
        "name": "step",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "thumbChildren": {
        "defaultValue": null,
        "description": "Thumbs children, can be used to add icons",
        "name": "thumbChildren",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "thumbFromLabel": {
        "defaultValue": null,
        "description": "First thumb aria-label",
        "name": "thumbFromLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "thumbToLabel": {
        "defaultValue": null,
        "description": "Second thumb aria-label",
        "name": "thumbToLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Current value for controlled slider",
        "name": "value",
        "required": false,
        "type": {
          "name": "Value"
        }
      }
    }
  },
  "Step": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Stepper/Step/Step.tsx",
    "displayName": "@mantine/core/Step",
    "props": {
      "__staticSelector": {
        "defaultValue": {
          "value": "Step"
        },
        "description": "Static selector base",
        "name": "__staticSelector",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "allowStepClick": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Set to false to disable clicks on step",
        "name": "allowStepClick",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "allowStepSelect": {
        "defaultValue": null,
        "description": "Should step selection be allowed",
        "name": "allowStepSelect",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Step color from theme.colors",
        "name": "color",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      },
      "completedIcon": {
        "defaultValue": null,
        "description": "Step icon displayed when step is completed",
        "name": "completedIcon",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Step description",
        "name": "description",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Step icon, defaults to step index + 1 when rendered within Stepper",
        "name": "icon",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "iconPosition": {
        "defaultValue": {
          "value": "left"
        },
        "description": "Icon position relative to step body",
        "name": "iconPosition",
        "required": false,
        "type": {
          "name": "\"left\" | \"right\""
        }
      },
      "iconSize": {
        "defaultValue": null,
        "description": "Icon wrapper size in px",
        "name": "iconSize",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Step label, render after icon",
        "name": "label",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "Indicates loading state on step",
        "name": "loading",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "progressIcon": {
        "defaultValue": null,
        "description": "Step icon displayed when step is in progress",
        "name": "progressIcon",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "xl"
        },
        "description": "Radius from theme.radius, or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "size": {
        "defaultValue": {
          "value": "md"
        },
        "description": "Component size",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "state": {
        "defaultValue": null,
        "description": "Step state, controlled by Steps component",
        "name": "state",
        "required": false,
        "type": {
          "name": "\"stepProgress\" | \"stepCompleted\" | \"stepInactive\""
        }
      },
      "withIcon": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Should icon be displayed",
        "name": "withIcon",
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  "AvatarsGroup": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Avatar/AvatarsGroup/AvatarsGroup.tsx",
    "displayName": "@mantine/core/AvatarsGroup",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "<Avatar /> components only",
        "name": "children",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "limit": {
        "defaultValue": null,
        "description": "Maximum amount of <Avatar /> components rendered, everything after limit is truncated",
        "name": "limit",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Child <Avatar /> radius",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Child <Avatar /> components width and height",
        "name": "size",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "spacing": {
        "defaultValue": null,
        "description": "Spacing between avatars",
        "name": "spacing",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "total": {
        "defaultValue": null,
        "description": "Total number of child <Avatar />, overrides the truncated amount",
        "name": "total",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "Navbar": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/AppShell/Navbar/Navbar.tsx",
    "displayName": "@mantine/core/Navbar",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Navbar content",
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "fixed": {
        "defaultValue": null,
        "description": "Set position to fixed",
        "name": "fixed",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Component height",
        "name": "height",
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "hidden": {
        "defaultValue": null,
        "description": "Set to true to hide component at hiddenBreakpoint",
        "name": "hidden",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "hiddenBreakpoint": {
        "defaultValue": null,
        "description": "Breakpoint at which component will be hidden if hidden prop is true",
        "name": "hiddenBreakpoint",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "position": {
        "defaultValue": null,
        "description": "Position for fixed variant",
        "name": "position",
        "required": false,
        "type": {
          "name": "HorizontalSectionPosition"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Component width with breakpoints",
        "name": "width",
        "required": false,
        "type": {
          "name": "Partial<Record<string, string | number>>"
        }
      },
      "zIndex": {
        "defaultValue": null,
        "description": "z-index",
        "name": "zIndex",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "Header": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/AppShell/Header/Header.tsx",
    "displayName": "@mantine/core/Header",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Header content",
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "fixed": {
        "defaultValue": null,
        "description": "Changes position to fixed, controlled by AppShell component if rendered inside",
        "name": "fixed",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Section height",
        "name": "height",
        "required": true,
        "type": {
          "name": "string | number"
        }
      },
      "position": {
        "defaultValue": null,
        "description": "Control top, left, right or bottom position values, controlled by AppShell component if rendered inside",
        "name": "position",
        "required": false,
        "type": {
          "name": "VerticalSectionPosition"
        }
      },
      "zIndex": {
        "defaultValue": null,
        "description": "z-index",
        "name": "zIndex",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "Footer": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/AppShell/Footer/Footer.tsx",
    "displayName": "@mantine/core/Footer",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Footer content",
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "fixed": {
        "defaultValue": null,
        "description": "Changes position to fixed, controlled by AppShell component if rendered inside",
        "name": "fixed",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Section height",
        "name": "height",
        "required": true,
        "type": {
          "name": "string | number"
        }
      },
      "position": {
        "defaultValue": null,
        "description": "Control top, left, right or bottom position values, controlled by AppShell component if rendered inside",
        "name": "position",
        "required": false,
        "type": {
          "name": "VerticalSectionPosition"
        }
      },
      "zIndex": {
        "defaultValue": null,
        "description": "z-index",
        "name": "zIndex",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "Aside": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/AppShell/Aside/Aside.tsx",
    "displayName": "@mantine/core/Aside",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Aside content",
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "fixed": {
        "defaultValue": null,
        "description": "Set position to fixed",
        "name": "fixed",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Component height",
        "name": "height",
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "hidden": {
        "defaultValue": null,
        "description": "Set to true to hide component at hiddenBreakpoint",
        "name": "hidden",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "hiddenBreakpoint": {
        "defaultValue": null,
        "description": "Breakpoint at which component will be hidden if hidden prop is true",
        "name": "hiddenBreakpoint",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "position": {
        "defaultValue": null,
        "description": "Position for fixed variant",
        "name": "position",
        "required": false,
        "type": {
          "name": "HorizontalSectionPosition"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Component width with breakpoints",
        "name": "width",
        "required": false,
        "type": {
          "name": "Partial<Record<string, string | number>>"
        }
      },
      "zIndex": {
        "defaultValue": null,
        "description": "z-index",
        "name": "zIndex",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "Col": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-core/src/components/Grid/Col/Col.tsx",
    "displayName": "@mantine/core/Col",
    "props": {
      "lg": {
        "defaultValue": null,
        "description": "Col span at (min-width: theme.breakpoints.lg)",
        "name": "lg",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "md": {
        "defaultValue": null,
        "description": "Col span at (min-width: theme.breakpoints.md)",
        "name": "md",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "offset": {
        "defaultValue": null,
        "description": "Column left offset",
        "name": "offset",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "offsetLg": {
        "defaultValue": null,
        "description": "Column left offset at (min-width: theme.breakpoints.lg)",
        "name": "offsetLg",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "offsetMd": {
        "defaultValue": null,
        "description": "Column left offset at (min-width: theme.breakpoints.md)",
        "name": "offsetMd",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "offsetSm": {
        "defaultValue": null,
        "description": "Column left offset at (min-width: theme.breakpoints.sm)",
        "name": "offsetSm",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "offsetXl": {
        "defaultValue": null,
        "description": "Column left offset at (min-width: theme.breakpoints.xl)",
        "name": "offsetXl",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "offsetXs": {
        "defaultValue": null,
        "description": "Column left offset at (min-width: theme.breakpoints.xs)",
        "name": "offsetXs",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "sm": {
        "defaultValue": null,
        "description": "Col span at (min-width: theme.breakpoints.sm)",
        "name": "sm",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "span": {
        "defaultValue": null,
        "description": "Default col span",
        "name": "span",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "xl": {
        "defaultValue": null,
        "description": "Col span at (min-width: theme.breakpoints.xl)",
        "name": "xl",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "xs": {
        "defaultValue": null,
        "description": "Col span at (min-width: theme.breakpoints.xs)",
        "name": "xs",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "Prism": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-prism/src/Prism.tsx",
    "displayName": "@mantine/prism/Prism",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "",
        "name": "active",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Code which will be highlighted",
        "name": "children",
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      },
      "colorScheme": {
        "defaultValue": null,
        "description": "Force color scheme, defaults to theme.colorScheme",
        "name": "colorScheme",
        "required": false,
        "type": {
          "name": "\"light\" | \"dark\""
        }
      },
      "copiedLabel": {
        "defaultValue": null,
        "description": "Copy button tooltip in copied state",
        "name": "copiedLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "copyLabel": {
        "defaultValue": null,
        "description": "Copy button tooltip",
        "name": "copyLabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "elementRef": {
        "defaultValue": null,
        "description": "",
        "name": "elementRef",
        "required": false,
        "type": {
          "name": "ForwardedRef<HTMLButtonElement>"
        }
      },
      "highlightLines": {
        "defaultValue": null,
        "description": "Highlight line at given line number with color from theme.colors",
        "name": "highlightLines",
        "required": false,
        "type": {
          "name": "Record<string, { color: DefaultMantineColor; label?: string; }>"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "",
        "name": "icon",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "",
        "name": "label",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "language": {
        "defaultValue": null,
        "description": "Programming language that should be highlighted",
        "name": "language",
        "required": true,
        "type": {
          "name": "Language"
        }
      },
      "noCopy": {
        "defaultValue": null,
        "description": "True to remove copy to clipboard button",
        "name": "noCopy",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "orientation": {
        "defaultValue": null,
        "description": "",
        "name": "orientation",
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\""
        }
      },
      "scrollAreaComponent": {
        "defaultValue": null,
        "description": "Change scroll area component",
        "name": "scrollAreaComponent",
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "tabKey": {
        "defaultValue": null,
        "description": "",
        "name": "tabKey",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "trim": {
        "defaultValue": null,
        "description": "Defines whether the code should be trimmed, defaults to true",
        "name": "trim",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "",
        "name": "variant",
        "required": false,
        "type": {
          "name": "TabsVariant"
        }
      },
      "withLineNumbers": {
        "defaultValue": null,
        "description": "Display line numbers",
        "name": "withLineNumbers",
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  "SpotlightProvider": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-spotlight/src/SpotlightProvider.tsx",
    "displayName": "@mantine/spotlight/SpotlightProvider",
    "props": {
      "actionComponent": {
        "defaultValue": null,
        "description": "Component that is used to render actions",
        "name": "actionComponent",
        "required": false,
        "type": {
          "name": "FC<DefaultActionProps>"
        }
      },
      "actions": {
        "defaultValue": null,
        "description": "Actions list",
        "name": "actions",
        "required": true,
        "type": {
          "name": "SpotlightAction[] | ((query: string) => SpotlightAction[])"
        }
      },
      "actionsWrapperComponent": {
        "defaultValue": null,
        "description": "Component that is used to wrap actions list",
        "name": "actionsWrapperComponent",
        "required": false,
        "type": {
          "name": "string | FC<{ children: ReactNode; }>"
        }
      },
      "centered": {
        "defaultValue": null,
        "description": "Should spotlight be rendered in the center of the screen",
        "name": "centered",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Your application",
        "name": "children",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "cleanQueryOnClose": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Should search be cleared when spotlight closes",
        "name": "cleanQueryOnClose",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "closeOnActionTrigger": {
        "defaultValue": null,
        "description": "Should spotlight be closed when action is triggered",
        "name": "closeOnActionTrigger",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "filter": {
        "defaultValue": null,
        "description": "Function used to determine how actions will be filtered based on user input",
        "name": "filter",
        "required": false,
        "type": {
          "name": "(query: string, actions: SpotlightAction[]) => SpotlightAction[]"
        }
      },
      "highlightColor": {
        "defaultValue": null,
        "description": "The highlight color",
        "name": "highlightColor",
        "required": false,
        "type": {
          "name": "MantineColor"
        }
      },
      "highlightQuery": {
        "defaultValue": null,
        "description": "Should user query be highlighted in actions title",
        "name": "highlightQuery",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "limit": {
        "defaultValue": null,
        "description": "Number of actions displayed at a time",
        "name": "limit",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "maxWidth": {
        "defaultValue": null,
        "description": "Max spotlight width",
        "name": "maxWidth",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "nothingFoundMessage": {
        "defaultValue": null,
        "description": "Message displayed when actions were not found",
        "name": "nothingFoundMessage",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "onQueryChange": {
        "defaultValue": null,
        "description": "Called when user enters text in search input",
        "name": "onQueryChange",
        "required": false,
        "type": {
          "name": "(query: string) => void"
        }
      },
      "onSpotlightClose": {
        "defaultValue": null,
        "description": "Called when spotlight closes",
        "name": "onSpotlightClose",
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onSpotlightOpen": {
        "defaultValue": null,
        "description": "Called when spotlight opens",
        "name": "onSpotlightOpen",
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "overlayBlur": {
        "defaultValue": null,
        "description": "Backdrop overlay blur in px",
        "name": "overlayBlur",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "overlayColor": {
        "defaultValue": null,
        "description": "Backdrop overlay color, e.g. #000",
        "name": "overlayColor",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "overlayOpacity": {
        "defaultValue": null,
        "description": "Backdrop overlay opacity (0-1), e.g. 0.65",
        "name": "overlayOpacity",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Radius from theme.radius, or number to set border-radius in px, defaults to theme.defaultRadius",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "searchIcon": {
        "defaultValue": null,
        "description": "Search input icon",
        "name": "searchIcon",
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "searchPlaceholder": {
        "defaultValue": null,
        "description": "Search input placeholder",
        "name": "searchPlaceholder",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "shadow": {
        "defaultValue": null,
        "description": "Value from theme.shadows or any valid css box-shadow value",
        "name": "shadow",
        "required": false,
        "type": {
          "name": "MantineShadow"
        }
      },
      "shortcut": {
        "defaultValue": {
          "value": "mod + K"
        },
        "description": "Keyboard shortcut or list of shortcuts to trigger spotlight",
        "name": "shortcut",
        "required": false,
        "type": {
          "name": "string | string[]"
        }
      },
      "topOffset": {
        "defaultValue": null,
        "description": "Top offset when spotlight is not centered",
        "name": "topOffset",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "transition": {
        "defaultValue": null,
        "description": "Premade transition or transition object",
        "name": "transition",
        "required": false,
        "type": {
          "name": "MantineTransition"
        }
      },
      "transitionDuration": {
        "defaultValue": {
          "value": "150"
        },
        "description": "Transition duration in ms, set to 0 to disable all transitions",
        "name": "transitionDuration",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "withinPortal": {
        "defaultValue": null,
        "description": "Should spotlight be rendered within Portal",
        "name": "withinPortal",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "zIndex": {
        "defaultValue": null,
        "description": "Spotlight z-index",
        "name": "zIndex",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "ModalsProvider": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-modals/src/ModalsProvider.tsx",
    "displayName": "ModalsProvider",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Your app",
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "labels": {
        "defaultValue": null,
        "description": "Confirm modal labels",
        "name": "labels",
        "required": false,
        "type": {
          "name": "ConfirmLabels"
        }
      },
      "modalProps": {
        "defaultValue": null,
        "description": "Shared Modal component props, applied for every modal",
        "name": "modalProps",
        "required": false,
        "type": {
          "name": "Partial<Omit<ModalProps, \"opened\">>"
        }
      },
      "modals": {
        "defaultValue": null,
        "description": "Predefined modals",
        "name": "modals",
        "required": false,
        "type": {
          "name": "Record<string, FC<ContextModalProps<any>>>"
        }
      }
    }
  },
  "RichTextEditor": {
    "filePath": "/Users/misit/Desktop/dev/mantine-fork/src/mantine-rte/src/components/RichTextEditor/RichTextEditor.tsx",
    "displayName": "@mantine/rte/RichTextEditor",
    "props": {
      "controls": {
        "defaultValue": null,
        "description": "Toolbar controls divided into groups",
        "name": "controls",
        "required": false,
        "type": {
          "name": "(\"bold\" | \"link\" | \"strike\" | \"sub\" | \"sup\" | \"blockquote\" | \"code\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"video\" | \"image\" | \"underline\" | \"italic\" | \"clean\" | \"codeBlock\" | ... 4 more ... | \"alignRight\")[][]"
        }
      },
      "labels": {
        "defaultValue": null,
        "description": "Labels used in toolbar button titles and assets insertion popovers",
        "name": "labels",
        "required": false,
        "type": {
          "name": "RichTextEditorLabels"
        }
      },
      "mentions": {
        "defaultValue": null,
        "description": "Quill mentions plugin setting",
        "name": "mentions",
        "required": false,
        "type": {
          "name": "Record<string, any>"
        }
      },
      "modules": {
        "defaultValue": null,
        "description": "Extra modules for react-quill",
        "name": "modules",
        "required": false,
        "type": {
          "name": "Record<string, any>"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called each time value changes",
        "name": "onChange",
        "required": true,
        "type": {
          "name": "(value: string, delta: Delta, sources: Sources, editor: UnprivilegedEditor) => void"
        }
      },
      "onImageUpload": {
        "defaultValue": null,
        "description": "Called when image image is inserted in editor",
        "name": "onImageUpload",
        "required": false,
        "type": {
          "name": "(image: File) => Promise<string>"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Radius from theme.radius, or number to set border-radius in px",
        "name": "radius",
        "required": false,
        "type": {
          "name": "number | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "readOnly": {
        "defaultValue": null,
        "description": "Make quill editor read only",
        "name": "readOnly",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "sticky": {
        "defaultValue": null,
        "description": "Make toolbar sticky",
        "name": "sticky",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "stickyOffset": {
        "defaultValue": null,
        "description": "Top toolbar position in any valid css value",
        "name": "stickyOffset",
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "HTML content, value not forced as quill works in uncontrolled mode",
        "name": "value",
        "required": true,
        "type": {
          "name": "string | Delta"
        }
      }
    }
  }
}
