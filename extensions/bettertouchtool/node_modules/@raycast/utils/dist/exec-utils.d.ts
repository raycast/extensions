/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import childProcess from "node:child_process";
export declare type SpawnedPromise = Promise<{
    exitCode: number | null;
    error?: Error;
    signal: NodeJS.Signals | null;
    timedOut: boolean;
}>;
export declare function getSpawnedPromise(spawned: childProcess.ChildProcessWithoutNullStreams, { timeout }?: {
    timeout?: number;
}): SpawnedPromise;
export declare function getSpawnedResult<T extends string | Buffer>({ stdout, stderr }: childProcess.ChildProcessWithoutNullStreams, { encoding }: {
    encoding: BufferEncoding | "buffer";
}, processDone: SpawnedPromise): Promise<[{
    exitCode: number | null;
    error?: Error | undefined;
    signal: NodeJS.Signals | null;
    timedOut: boolean;
}, Awaited<T>, Awaited<T>]>;
//# sourceMappingURL=exec-utils.d.ts.map