/// <reference types="node" />
import { MutableRefObject } from "react";
import { FunctionReturningPromise, AsyncStateFromFunctionReturningPromise } from "./types";
/**
 * React hook that resolves an async function or a function that returns a promise;
 * @remark This hook assumes that the function is constant
 */
export declare function useAsyncValue<T extends FunctionReturningPromise<[]>>(fn: T): AsyncStateFromFunctionReturningPromise<T>;
export declare function useAsyncValue<T extends FunctionReturningPromise>(fn: T, args: Parameters<T>, config?: {
    /**
     * A reference to an `AbortController` to cancel a previous call when triggering a new one
     */
    abortable?: MutableRefObject<AbortController | null>;
}): AsyncStateFromFunctionReturningPromise<T>;
//# sourceMappingURL=useAsyncValue.d.ts.map