"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.usePromise = void 0;
const strict_1 = __importDefault(require("assert/strict"));
const promiseCaches = [];
function usePromise(fn, args, lifespan = 0) {
    for (const promiseCache of promiseCaches) {
        let found;
        try {
            strict_1.default.deepStrictEqual(args, promiseCache.args);
            found = true;
        }
        catch (err) {
            found = false;
        }
        if (found) {
            if (Object.prototype.hasOwnProperty.call(promiseCache, "error")) {
                // If an error occurred,
                throw promiseCache.error;
            }
            // If a response was successful,
            if (Object.prototype.hasOwnProperty.call(promiseCache, "response")) {
                return promiseCache.response;
            }
            throw promiseCache.promise;
        }
    }
    // The request is new or has changed.
    const promiseCache = {
        promise: 
        // Make the promise request.
        fn(...args)
            .then((response) => {
            promiseCache.response = response;
        })
            .catch((e) => {
            promiseCache.error = e;
        })
            .then(() => {
            if (lifespan > 0) {
                setTimeout(() => {
                    const index = promiseCaches.indexOf(promiseCache);
                    if (index !== -1) {
                        promiseCaches.splice(index, 1);
                    }
                }, lifespan);
            }
        }),
        args,
    };
    promiseCaches.push(promiseCache);
    throw promiseCache.promise;
}
exports.usePromise = usePromise;
