"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCachedPromise = void 0;
const react_1 = require("react");
const object_hash_1 = __importDefault(require("object-hash"));
const useCachedState_1 = require("./useCachedState");
const usePromise_1 = require("./usePromise");
const useLatest_1 = require("./useLatest");
// Symbol to differentiate an empty cache from `undefined`
const emptyCache = Symbol();
function useCachedPromise(fn, args, options) {
    const { initialData, keepPreviousData, ...usePromiseOptions } = options || {};
    const lastUpdateFrom = (0, react_1.useRef)();
    const [cachedData, mutateCache] = (0, useCachedState_1.useCachedState)((0, object_hash_1.default)(args || []), emptyCache, {
        cacheNamespace: (0, object_hash_1.default)(fn),
    });
    // Use a ref to store previous returned data. Use the inital data as its inital value from the cache.
    const laggyDataRef = (0, react_1.useRef)(cachedData !== emptyCache ? cachedData : initialData);
    const { mutate: _mutate, revalidate, ...state
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
     } = (0, usePromise_1.usePromise)(fn, args || [], {
        ...usePromiseOptions,
        onData(data) {
            if (usePromiseOptions.onData) {
                usePromiseOptions.onData(data);
            }
            // update the cache when we fetch new values
            lastUpdateFrom.current = "promise";
            laggyDataRef.current = data;
            mutateCache(data);
        },
    });
    // data returned if there are no special cases
    const data = cachedData !== emptyCache ? cachedData : initialData;
    const returnedData = 
    // if the latest update if from the Promise, we keep it
    lastUpdateFrom.current === "promise"
        ? laggyDataRef.current
        : // if we want to keep the latest data, we pick the cache but only if it's not empty
            keepPreviousData
                ? cachedData !== emptyCache
                    ? cachedData
                    : // if the cache is empty, we will return the previous data
                        laggyDataRef.current
                : data;
    const latestData = (0, useLatest_1.useLatest)(returnedData);
    // we rewrite the mutate function to update the cache instead
    const mutate = (0, react_1.useCallback)(async (asyncUpdate, options) => {
        let dataBeforeOptimisticUpdate;
        try {
            if (options?.optimisticUpdate) {
                if (typeof options?.rollbackOnError !== "function" && options?.rollbackOnError !== false) {
                    // keep track of the data before the optimistic update,
                    // but only if we need it (eg. only when we want to automatically rollback after)
                    dataBeforeOptimisticUpdate = structuredClone(latestData.current);
                }
                const data = options.optimisticUpdate(latestData.current);
                lastUpdateFrom.current = "cache";
                laggyDataRef.current = data;
                mutateCache(data);
            }
            return await _mutate(asyncUpdate, { shouldRevalidateAfter: options?.shouldRevalidateAfter });
        }
        catch (err) {
            if (typeof options?.rollbackOnError === "function") {
                const data = options.rollbackOnError(latestData.current);
                lastUpdateFrom.current = "cache";
                laggyDataRef.current = data;
                mutateCache(data);
            }
            else if (options?.optimisticUpdate && options?.rollbackOnError !== false) {
                lastUpdateFrom.current = "cache";
                // @ts-expect-error when undefined, it's expected
                laggyDataRef.current = dataBeforeOptimisticUpdate;
                // @ts-expect-error when undefined, it's expected
                mutateCache(dataBeforeOptimisticUpdate);
            }
            throw err;
        }
    }, [mutateCache, _mutate, latestData, laggyDataRef, lastUpdateFrom]);
    (0, react_1.useEffect)(() => {
        if (cachedData !== emptyCache) {
            lastUpdateFrom.current = "cache";
            laggyDataRef.current = cachedData;
        }
    }, [cachedData]);
    return {
        data: returnedData,
        isLoading: state.isLoading,
        error: state.error,
        mutate,
        revalidate,
    };
}
exports.useCachedPromise = useCachedPromise;
