#!/bin/bash

# Determine the path for dist folder
# Using 'readlink -f' is not an option as '-f' it's not available on older macOS versions
source=${BASH_SOURCE:-$0}
# resolve $source until the file is no longer a symlink
while [ -L "$source" ]; do
  dir=$( cd -P "$( dirname "$source" )" >/dev/null 2>&1 && pwd )
  source=$(readlink "$source")
  # if $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  [[ $source != /* ]] && source=$dir/$source
done
bin_dir=$( cd -P "$( dirname "$source" )" >/dev/null 2>&1 && pwd )
dist_dir=$(dirname "$bin_dir")

if [ -z "$bin_dir" ]; then
	echo "Unable to determine CLI path for source: ${BASH_SOURCE:-$0}"
	exit 1
fi

# Read API version from package.json from current NPM, which will define the CLI version
api_version=$(sed -n 's|.*"version": "\([^"]*\)".*|\1|p' < "$dist_dir/package.json")
if [ -z "$api_version" ]; then
    echo "Fail parsing version"
    exit 1
fi

# CLI installation subroutine, using custom version and path for the CLI
function install_cli { 
	if ! curl -f -sL https://raycast.com/get-cli/ | VERSION="$api_version" INSTALL_PATH="$ray_path" bash; then
		exit 1
	fi
}

# Define the architecture directory in /dist folder to pick the right CLI version
os="$(uname)"
architecture="$(uname -m)"
architecture_dir="x86"
if [[ "${os}" = "Darwin" && "${architecture}" = "arm64" ]]; then
	architecture_dir="arm64"
elif [ "${os}" = "Linux" ]; then
	architecture_dir="linux"
fi

# Define the path for CLI for current architecture
ray_path="$bin_dir/$architecture_dir/ray"

# If there is no CLI for current architecture, download it
if [ ! -f "$ray_path" ]; then
	install_cli;
else
	# If version of the CLI for current architecture is outdated, re-download the CLI
	ray_version=$("$ray_path" version)
	if [ "$ray_version" != "$api_version" ]; then
		install_cli;
	fi
fi

# For npm-post-install script, we don't execute the CLI
if [ "$1" == "npm-post-install" ]; then
	exit 0
fi

# Execute the CLI passing all parameters to it
"$ray_path" "$@"