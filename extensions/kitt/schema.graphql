schema {
  query: RootQuery
  mutation: Mutation
  subscription: Subscription
}

type Access {
  device: Device
  id: String!
  lat: Float!
  lng: Float!
  location: Location
  locationId: String!
  managed: Boolean!
  name: String!
  network: NetworkConfig
  relay: String!
  type: AccessType
  user: User
}

type AccessBeingConfigured {
  id: String!
  user: User
}

type AccessConfigured {
  id: String!
  user: User
}

type AccessCreated {
  id: String!
  user: User
}

type AccessDeleted {
  id: String!
  user: User
}

input AccessInput {
  lng: Float!
  id: String!
  lat: Float!
  relay: String!
  type: AccessType
  name: String!
  locationId: String!
  network: NetworkConfigInput
  managed: Boolean!
  device: Device
}

type AccessLog {
  access: Access
  accessId: String!
  id: String!
  internalOpenerName: String!
  name: String
  openedAt: Timestamp
  openerCompanyId: String!
  openerCompanyType: Int!
  openerName: String!
}

type AccessLogEdge {
  cursor: String!
  node: AccessLog
}

enum AccessMethod {
  LANDLORD_CONTACT
  MANAGING_AGENT_CONTACT
  ONSITE_ACCESS_SYSTEM
  ONSITE_RECEPTIONIST
  KEYBOX_IN_KITT_OFFICE
  KEYBOX_ON_SITE
  KITT_APP
}

type AccessMethodOptional {
  accessMethod: AccessMethod
  user: User
}

input AccessMethodOptionalInput {
  accessMethod: AccessMethod
}

enum AccessType {
  DOOR
  LIFT
}

type AccessUpdated {
  id: String!
  user: User
}

type AccountRecoveryStarted {
  email: String!
  user: User
}

type Activity {
  assignee: User
  assigneeId: String
  brokerContact: Profile
  brokerContactId: String
  clientIds: [String!]
  clients: [Profile]
  completedAt: Timestamp
  createdAt: Timestamp
  createdBy: String
  deal(unscoped: Boolean = false): Deal
  dealId: String
  deletedAt: Timestamp
  dueDate: String
  dueTime: String
  id: String
  kittCollaboratorIds: [String!]
  kittCollaborators: [Profile]
  locationIds: [String!]
  notes: String
  parentActivityId: String
  reportingAssignee: User
  reportingAssigneeId: String
  selections: [Selection]
  startDate: String
  startTime: String
  status: DealActivityStatus
  title: String
  type: ActivityType
  typeId: String
  unitGroupIds: [String!]
  unitIds: [String!]
  updatedAt: Timestamp
  user: User
}

type ActivityCompleted {
  activity: Activity
  user: User
}

type ActivityConnection {
  edges: [ActivityEdge!]
  pageInfo: ActivityPageInfo
  totalCount: Int!
  user: User
}

type ActivityCreated {
  activity: Activity
  id: String!
  user: User
}

type ActivityDeleted {
  id: String!
  user: User
}

type ActivityEdge {
  cursor: String!
  node: Activity
  user: User
}

input ActivityInput {
  dealId: String
  reportingAssigneeId: String
  assigneeId: String
  startDate: String
  startTime: String
  createdBy: String
  status: DealActivityStatus
  updatedAt: TimestampInput
  createdAt: TimestampInput
  type: ActivityTypeInput
  parentActivityId: String
  dueDate: String
  clientIds: [String!]
  completedAt: TimestampInput
  notes: String
  unitIds: [String!]
  typeId: String
  id: String
  brokerContactId: String
  unitGroupIds: [String!]
  title: String
  deletedAt: TimestampInput
  dueTime: String
  locationIds: [String!]
  kittCollaboratorIds: [String!]
}

enum ActivityOrder {
  TITLE_ASC
  TITLE_DESC
  DUE_FIRST
  DUE_LAST
}

type ActivityPageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  user: User
}

type ActivityType {
  createdAt: Timestamp
  deletedAt: Timestamp
  id: String!
  label: String!
  updatedAt: Timestamp
  user: User
}

input ActivityTypeInput {
  id: String!
  label: String!
  createdAt: TimestampInput
  updatedAt: TimestampInput
  deletedAt: TimestampInput
}

type ActivityUpdated {
  activity: Activity
  user: User
}

type Addon {
  allowMultiple: Boolean!
  description: String!
  id: String!
  imageUploadIds: [String!]!
  images: [UploadMessage]
  name: String!
  pricePennies: Int!
  pricePeriod: AddonPeriod
}

type AddonCreated {
  id: String!
}

type AddonDeleted {
  id: String!
}

type AddonEdge {
  cursor: String!
  node: Addon
}

input AddonInput {
  pricePeriod: AddonPeriod
  id: String!
  name: String!
  description: String!
  allowMultiple: Boolean!
  imageUploadIds: [String!]!
  pricePennies: Int!
}

enum AddonPeriod {
  ANNUALLY
  DAILY
  HOURLY
  MONTHLY
  ONCE
  WEEKLY
}

type AddonsConnection {
  edges: [AddonEdge!]
  pageInfo: PageInfo
}

type AddonUpdated {
  id: String!
}

type Address {
  country: String!
  postalCode: String!
  streetAddress: String!
  town: String!
}

input AddressInput {
  streetAddress: String!
  town: String!
  country: String!
  postalCode: String!
}

type AddSelectionsCommand {
  brokerSearchId: String
  selections: [Selection!]
  shortlistId: String
  user: User
}

type AddShortlistsToDealCommand {
  dealId: String!
  shortlistIds: [String!]!
  user: User
}

type AddUserToLeadTenantsGroupCommand {
  user: User
  userId: String!
}

type AgenciesForLocationUpdated {
  locationId: String!
  user: User
}

type AgencyDomain {
  company: Company
  companyId: String!
  domainRegex: String!
  domainSubstring: String!
  id: String!
  user: User
}

type AgencyDomainAndCompanyCreated {
  agencyDomain: AgencyDomain
  company: Company
  user: User
}

enum AgentSetUp {
  SOLE_AGENT
  BOLT_ON_SERVICE
  ENTERPRISE_CLIENT
  JOINT_AGENT
}

type AgentSetUpOptional {
  agentSetUp: AgentSetUp
  user: User
}

input AgentSetUpOptionalInput {
  agentSetUp: AgentSetUp
}

type Alarm {
  id: String!
  locationId: String!
  name: String!
  user: User
}

type Amenity {
  entityIds(tenancyId: String = "", floorplanId: String = "", teamIds: [String] = ["[]"]): [String]
  global: Boolean!
  id: String!
  name: String!
  user: User
}

type AmenityDeleted {
  amenity: Amenity
  user: User
}

type AmenityList {
  amenities: [Amenity!]
  user: User
}

type AmenitySaved {
  amenity: Amenity
  user: User
}

type AnnualPricingBreakdown {
  annualAdvertisedPricePsf: Money
  annualBrokerCommission: Money
  annualFitoutCostPsf: Money
  annualKittFeePsf: Money
  annualNetRentPsf: Money
  annualOpsCostPsf: Money
  annualRatesPsf: Money
  annualServiceChargePsf: Money
  annualUtilitiesCostPsf: Money
}

type AnswerSession {
  answeredBy: String!
  sessionId: String!
  user: User
}

enum App {
  Search
  Tenant
}

type AppHeaderUploadForTenancySet {
  tenancyId: String!
  uploadId: String!
}

type ApproveFloorplan {
  floorplanId: String!
  user: User
}

type ApproveShortlistCommand {
  brokerSearchId: String
  shortlistId: String
  user: User
}

type ArchiveLocationCommand {
  id: String!
  user: User
}

type ArchiveRequestCommand {
  requestId: String!
  user: User
}

type ArchiveTemplateCommand {
  id: String!
  user: User
}

type Area {
  areaType: AreaType
  centerPoint: Coordinate
  id: String!
  name: String!
  northeastPoint: Coordinate
  polygon: [Coordinate!]
  southwestPoint: Coordinate
  user: User
}

type AreaGeoPoint {
  lat: Float!
  lng: Float!
}

input AreaGeoPointInput {
  lat: Float!
  lng: Float!
}

enum AreaType {
  CITY
  DUPLICATE_SUBMARKET
  SUBMARKET
}

type Assignment {
  categoryId: String!
  id: String!
  locationId: String!
  user: User
  userId: String!
}

type AssignSalesTeamToBrokerCompanyCommand {
  brokerCompanyId: String!
  salesTeamId: String!
  user: User
}

type AssignUserToDeskCommand {
  deskId: String!
  user: User
  userId: String!
}

"""The associated resource entity of an permission"""
union AssociatedResource = Access | Room

enum AttachedEntity {
  Enquiry
  Issue
  NONE
}

type AttachedEntityData {
  entity: VisitAttachedEntity
  id: String!
  type: AttachedEntity
}

input AttachedEntityDataInput {
  id: String!
  type: AttachedEntity
}

type AttachTaskToRequestCommand {
  requestId: String!
  taskId: String!
  user: User
}

type AttachToRequestCommand {
  attachmentId: String!
  id: String!
  user: User
}

type Attendance {
  company: Company
  companyId: String!
  date: Date
  id: String!
  user: User
  userId: String!
}

type AttendanceBatchSet {
  _null: Boolean
  user: User
}

type AttendanceCreated {
  _null: Boolean
  user: User
}

type AttendanceDeleted {
  _null: Boolean
  user: User
}

type AttendancePoliciesList {
  breakdown: AttendancePolicyBreakdown
  items: [AttendancePolicy!]
  user: User
}

type AttendancePolicy {
  position: Int!
  type: AttendancePolicyType
  user: User
}

type AttendancePolicyBreakdown {
  details: PolicyDetails
  numOfCompulsoryDays: Int!
  numOfFlexibleDays: Int!
  numOfOptionalDays: Int!
  user: User
}

input AttendancePolicyInput {
  position: Int!
  type: AttendancePolicyType
}

enum AttendancePolicyType {
  Optional
  Compulsory
  Flexible
}

type AttendanceStateForDate {
  attendeeCount: Int
  attendeeUserIds: [String!]!
  attendees: [User]
  date: Date
  isAtCapacity: Boolean
  isUserAttending: Boolean!
  percentageOfCapacity: Float
  totalCapacity: Int!
  user: User
}

type AttendanceValue {
  entityId: String!
  value: Int!
}

type AuthenticationFactorSelected {
  email: String!
  type: AuthenticationFactorType
  user: User
}

enum AuthenticationFactorType {
  NONE
  SMS
}

enum AvailabilityStatus {
  COMING_AVAILABLE
  LET_AGREED
  NOT_AVAILABLE
  UNDER_OFFER
  UNKNOWN
  AVAILABLE
}

type AverageAccessesByDay {
  averageAccesses: [AverageAccessLog!]
  day: Int!
  id: String!
}

type AverageAccessLog {
  count: Int!
  day: Int!
  id: String!
  timeInterval: Int!
}

"""bank holiday field types"""
type BankHoliday {
  bankHolidays: [RegionalData]
}

type BatchAmenityResponse {
  _null: Boolean
  user: User
}

type BatchBookingsResponse {
  _null: Boolean
  user: User
}

type BatchDeskPermanentlyAssignedUserIdResponse {
  _null: Boolean
  user: User
}

type BatchDeskResponse {
  _null: Boolean
  user: User
}

type BatchEntitiesForAmenityResponse {
  _null: Boolean
  user: User
}

type BatchFloorplanResponse {
  _null: Boolean
  user: User
}

type BatchFloorplanZoneResponse {
  _null: Boolean
  user: User
}

type BatchGeometryResponse {
  _null: Boolean
  user: User
}

type BatchRoomResponse {
  _null: Boolean
  user: User
}

type BatchSetAttendanceCommand {
  dates: [Date!]
  user: User
}

type BatchTotalDesksForTeamResponse {
  _null: Boolean
  user: User
}

enum BookableEntity {
  DeskEntity
  RoomEntity
  Unknown
}

type Booking {
  bookedBy: User
  bookedById: String!
  cancelledBy: User
  cancelledById: String!
  createdAt: String!
  description: String!
  email: String!
  end: Timestamp
  endDatetime: DateTime
  endLocal: Timestamp
  endLocalFull: String!
  endLocalReadable: String!
  endLocalTime: String!
  id: String!
  img: String!
  name: String!
  people: Int!
  room: Room!
  roomId: String!
  start: Timestamp
  startDatetime: DateTime
  startLocal: Timestamp
  startLocalFull: String!
  startLocalReadable: String!
  startLocalTime: String!
  user: User
  userId: String!
}

type BookingCancelled {
  bookingId: String!
  user: User
  userId: String!
}

type BookingConfirmed {
  bookingId: String!
  user: User
  userId: String!
}

type BookingCreated {
  booking: RoomOrDeskBooking
  user: User
}

type BookingDeleted {
  booking: RoomOrDeskBooking
  user: User
}

type BookingEdge {
  cursor: String!
  node: Booking
  user: User
}

type BookingFailed {
  roomId: String!
  user: User
  userId: String!
}

type BookingList {
  bookings: [RoomOrDeskBooking!]
  user: User
}

type BookingRoomCreatedEffect {
  room: MeetingRoom
  user: User
}

type BookingRoomDeletedEffect {
  room: MeetingRoom
  user: User
}

type BookingRoomUpdatedEffect {
  room: MeetingRoom
  user: User
}

type BookingsCancelledByPermanentDeskAssignment {
  assignedToDeskId: String!
  assignedToUserId: String!
  bookings: [RoomOrDeskBooking!]
  reassignedFromUserId: String!
  user: User
}

type BookingsConnection {
  edges: [BookingEdge!]
  pageInfo: PageInfo
  user: User
}

enum BookingSortBy {
  CREATED_AT
  START_DATE
}

type Bookingsvc_GetBookingRequest {
  id: String!
  user: User
}

type Bookingsvc_GetBookingResponse {
  booking: RoomOrDeskBooking
  user: User
}

type Bookingsvc_GetRoomsRequest {
  ids: [String!]!
  locationIds: [String!]!
  user: User
}

type Bookingsvc_GetRoomsResponse {
  rooms: [MeetingRoom!]
  user: User
}

type BookingTimeInput {
  date: String!
  time: String!
  user: User
}

input BookingTimeInputInput {
  time: String!
  date: String!
}

type BookingTimelineConnection {
  edges: [BookingTimelineEdge!]
  pageInfo: PageInfo
}

type BookingTimelineEdge {
  cursor: String!
  node: BookingTimelineEvent
}

type BookingTimelineEvent {
  entity: BookingTimelineEventUnion
  id: String!
  type: BookingTimelineEventType
}

enum BookingTimelineEventType {
  ATTENDANCE
  GUEST
  ROOM
  UNKNOWN
}

union BookingTimelineEventUnion = Booking | Guest | Attendance

type BookRoomResponse {
  success: Boolean!
  user: User
}

type Boundary {
  id: String!
  level: Int!
  name: String!
  polygon: [AreaGeoPoint!]
}

type BreakClause {
  completed: Boolean!
  date: Timestamp
  exercised: Boolean!
  exercisedAt: Date
  exercisedBy: String
  id: String!
  optionDate: Timestamp
}

type BreakClauseExercised {
  breakClauseId: String!
  exercisedAt: Date
}

input BreakClauseInput {
  optionDate: TimestampInput
  exercised: Boolean!
  completed: Boolean!
  exercisedAt: DateInput
  exercisedBy: String
  id: String!
  date: TimestampInput
}

type Breakdown {
  advertisedPrice: Money
  brokerCommission: Money
  businessRates: Money
  fitoutCost: Money
  kittFee: Money
  netRent: Money
  opsCost: Money
  serviceCharge: Money
  user: User
  utilitiesCost: Money
}

type Brochure {
  createdBy: String!
  entities: [BrochureEntity!]
  entityGroupId: String!
  id: String!
  stateJson: String!
  templateForEntityId: String
  type: BrochureType
  updatedBy: String!
  user: User
}

type BrochureCreated {
  brochure: Brochure
  user: User
}

type BrochureDeleted {
  brochure: Brochure
  user: User
}

type BrochureEntity {
  brochureId: String
  entity: EntityUnion
  entityId: String!
  id: String
  type: BrochureEntityType
  user: User
}

input BrochureEntityInput {
  brochureId: String
  id: String
  type: BrochureEntityType
  entityId: String!
}

enum BrochureEntityType {
  Unknown
  BrokerSearch
  Location
  Selection
  Shortlist
  Unit
  UnitGroup
}

type BrochureTemplateCloned {
  brochure: Brochure
  user: User
}

enum BrochureType {
  COMPILED_BROCHURE
  MASTER_TEMPLATE
}

type BrochureUpdated {
  brochure: Brochure
  user: User
}

type BrokerCommunication {
  createdBy: String!
  createdByUser: User
  email: String!
  selectionId: String!
  user: User
}

type BrokerEnquiriesFulfilled {
  enquiries: [BrokerEnquiry!]
  user: User
}

type BrokerEnquiry {
  brokerSearchId: String!
  brokerUserId: String!
  createdAt: Timestamp
  enquiryId: String!
  unitGroupId: String!
  unitIds: [String!]!
  user: User
}

type BrokerEnquiryCreated {
  brokerId: String!
  unitGroupId: String!
  user: User
}

enum BrokerPayee {
  KITT
  LANDLORD
}

input BrokerPayeeOptionalInput {
  brokerPayee: BrokerPayee
}

enum BrokerPlatformRegistrationFailureReason {
  COMPANY_NOT_WHITELISTED
  EMAIL_ALREADY_EXISTS
  UNKOWN_FAILURE
}

type BrokerSearch {
  approvedAt: Timestamp
  approvedBy: String!
  approver: Profile
  clientName: String!
  createdAt: Timestamp
  createdByCompanyId: String!
  createdByUserId: String!
  dealId: String
  desiredLocation: String!
  dismissedRecommendations: [DismissedRecommendation!]
  id: String!
  kittChoicesOnly: Boolean!
  name: String!
  requirements: DealRequirements
  selections: [Selection!]
  updatedAt: Timestamp
  user: User
  viewingRequests: [ViewingRequest!]
  viewings: Viewings
}

type BrokerSearchCreated {
  id: String!
  user: User
}

type BrokerSearchDeleted {
  id: String!
  user: User
}

type BrokerSearchesBatchResponse {
  _null: Boolean
  user: User
}

type BrokerSearchPolygonUpdated {
  brokerSearchId: String!
  user: User
}

type BrokerSearchUpdated {
  id: String!
  user: User
}

type Building {
  agents: [Profile]
  archivedAt: Date
  baselinesMetFrom: Date
  createdAt: Date
  details: BuildingDetails
  displayId: String!
  id: String!
  isLiveOnSearch: Boolean!
  liveFrom: Date
  nonRejectedTenancies: [Tenancy]
  photos: [UploadMessage]
  priority: PriorityType
  traits: [BuildingTrait!]
  units: [BuildingUnit]
  updatedAt: Date
  user: User
}

type BuildingDetails {
  address: Address
  coordinates: Coordinate
  currency: String
  description: String
  name: String
  photoUploadIds: [String!]!
  primaryAccessMethod: String
  serviceChargePsf: Money
  timezoneId: String
  urls: [BuildingSourceUrl!]
  user: User
  withinBidLevyArea: Boolean
}

input BuildingDetailsInput {
  photoUploadIds: [String!]!
  name: String
  urls: [BuildingSourceUrlInput!]
  serviceChargePsf: MoneyInput
  address: AddressInput
  currency: String
  description: String
  withinBidLevyArea: Boolean
  primaryAccessMethod: String
  coordinates: CoordinateInput
  timezoneId: String
}

type BuildingInput {
  archive: Boolean
  delete: Boolean
  details: BuildingDetails
  id: String
  traits: [BuildingTraitInput!]
  user: User
}

input BuildingInputInput {
  id: String
  details: BuildingDetailsInput
  traits: [BuildingTraitInputInput!]
  archive: Boolean
  delete: Boolean
}

type BuildingSaved {
  building: Building
  units: [BuildingUnit!]
  user: User
}

type BuildingsMerged {
  mergeIntoId: String!
  user: User
}

type BuildingSourceUrl {
  agency: Company
  agent: Profile
  agentProfileId: String
  companyId: String!
  url: String!
  user: User
}

input BuildingSourceUrlInput {
  companyId: String!
  agentProfileId: String
  url: String!
}

type BuildingSubmitted {
  id: String!
  url: String!
  user: User
}

type BuildingTrait {
  iconId: String!
  id: String!
  name: String!
  notPresent: Boolean!
  type: BuildingTraitType
  upload: UploadMessage
  uploadId: String!
  user: User
}

type BuildingTraitCreated {
  trait: BuildingTrait
  user: User
}

type BuildingTraitInput {
  id: String!
  notPresent: Boolean!
  user: User
}

input BuildingTraitInputInput {
  id: String!
  notPresent: Boolean!
}

enum BuildingTraitType {
  EssentialFacility
  OptionalFacility
  BREEAM
  Compliance
  CustomFacility
}

type BuildingUnit {
  archivedAt: Date
  baselinesMetFrom: Date
  building: Building
  combinationDetails: CombinationDetails
  createdAt: Date
  details: BuildingUnitDetails
  displayId: String!
  floorplans: [UploadMessage]
  id: String!
  liveFrom: Date
  locationId: String!
  photos: [UploadMessage]
  pricing(overrideMinTermMonths: Int = 0, estimatePrice: Boolean = false): GetDetailsForUnitsResponse
  priority: PriorityType
  updatedAt: Date
  user: User
}

type BuildingUnitDetails {
  breakDate: Date
  businessRatesPsf: Money
  fitoutStatus: UnitFitoutState
  floorNumbers: [Float!]!
  floorplanUploadIds: [String!]!
  isKittFlexSpace: Boolean
  isKittSpace: Boolean
  isMarketedByKitt: Boolean
  legalStructureType: BuildingUnitLegalStructureType
  marketingPrice: Money
  minimumTermMonths: Int
  name: String
  notes: String
  photoUploadIds: [String!]!
  publishedOnWebsite: Boolean
  rateableValue: Money
  rentFreeMonths: Int
  rentPsf: Money
  squareFootage: Int
  status: UnitAvailabilityStatus
  unitType: BuildingUnitType
  user: User
  virtualTourUrl: String
}

input BuildingUnitDetailsInput {
  rentFreeMonths: Int
  breakDate: DateInput
  floorNumbers: [Float!]!
  rateableValue: MoneyInput
  rentPsf: MoneyInput
  isKittFlexSpace: Boolean
  virtualTourUrl: String
  photoUploadIds: [String!]!
  publishedOnWebsite: Boolean
  squareFootage: Int
  unitType: BuildingUnitType
  legalStructureType: BuildingUnitLegalStructureType
  fitoutStatus: UnitFitoutState
  businessRatesPsf: MoneyInput
  isKittSpace: Boolean
  name: String
  status: UnitAvailabilityStatus
  notes: String
  marketingPrice: MoneyInput
  isMarketedByKitt: Boolean
  minimumTermMonths: Int
  floorplanUploadIds: [String!]!
}

type BuildingUnitInput {
  archive: Boolean
  delete: Boolean
  details: BuildingUnitDetails
  id: String
  user: User
}

input BuildingUnitInputInput {
  delete: Boolean
  archive: Boolean
  id: String
  details: BuildingUnitDetailsInput
}

enum BuildingUnitLegalStructureType {
  LicenseAgreement
  CoLease
  LeasePlusMSA
}

type BuildingUnitRestored {
  unit: BuildingUnit
  unitId: String!
  user: User
}

type BuildingUnits {
  units: [BuildingUnit!]
  user: User
}

enum BuildingUnitType {
  TwoFloor
  SelfContainedBuilding
  SingleFloor
  ThreeFloor
}

type BusynessInsight {
  dayPosition: Int!
  entityId: String!
}

type BusynessInsights {
  companyWide: BusynessInsight
  perTeam: [BusynessInsight!]
}

type CallMade {
  contactUri: String!
  user: User
}

type CancelBookingCommand {
  bookingId: String!
  user: User
  userId: String
}

type CanShowFeaturesToUserResponse {
  showableFeatures: [TenantAppFeature!]
}

type CapacityInsights {
  capacity: Int!
  daysOverCapacity: Int!
}

type CapacitySet {
  _null: Boolean
  user: User
}

type Category {
  id: String!
  name: String!
  user: User
}

type CategoryGroup {
  id: String!
  name: String!
}

type ChangePassword {
  password: String!
  passwordConfirm: String!
  user: User
}

type ChangeUserEmailCommand {
  email: String!
  user: User
  userId: String
}

type ChangeUserPasswordCommand {
  password: String!
  passwordConfirm: String!
  user: User
  userId: String
}

type Chat {
  archived: Boolean!

  """All users on a chat"""
  chatMembers: [User]
  companyId: String!
  contextUserHasUnreadMessages: Boolean!
  id: String!
  lastMessage: String!
  messages: [ChatMessage]
  type: ChatType
  unreadMessagesCount: Int
  updatedAt: Timestamp
  uploadIds: [String!]!

  """All uploads on a chat"""
  uploads: [UploadMessage]
  user: User
  userId: String!
}

type ChatBatchLoaderResponse {
  _null: Boolean
  user: User
}

type ChatCreated {
  chat: Chat
  createdAt: Timestamp
  id: String!
  name: String!
  user: User
  userId: String!
}

type ChatDeleted {
  chatId: String!
  tenantOwnerUserId: String!
  user: User
}

type ChatMarkedAsReadEffect {
  chatId: String!
  lastMessageId: String!
  readAt: String!
  readByUserId: String!
  user: User
}

type ChatMemberCreated {
  addedByUserId: String!
  chatId: String!
  message: ChatMessage
  noNotification: Boolean
  user: User
  userId: String!
}

type ChatMemberDeleted {
  chatId: String!
  user: User
  userId: String!
}

type ChatMemberIds {
  user: User
  userIds: [String!]!
}

type ChatMessage {
  associatedEntityId: String
  chat: Chat
  chatId: String!
  createdAt: Timestamp
  editedFromMessageId: String
  id: String!
  issue: Issue
  issueId: String
  message: String!
  messageHtml: String!
  parentMessageId: String
  readByList: [User]
  selfAuthored: Boolean
  taggedUserIds: [String!]!

  """All tagged users on a chat message"""
  taggedUsers: [User]
  thread: MessageList
  threadReplyCount: Int
  todo: TenancyTodo
  type: MessageType
  uploadIds: [String!]!

  """All uploads on a chat message"""
  uploads: [UploadMessage]
  user: User
  userId: String!
}

type ChatMessageConnection {
  edges: [ChatMessageEdge!]
  pageInfo: PageInfo
  user: User
}

type ChatMessageCreated {
  associatedEntityId: String
  chatId: String!
  chatInitiated: Boolean!
  chatMessage: ChatMessage
  chatTenantOwnerUserId: String
  chatType: ChatType
  createdAt: Timestamp
  id: String!
  message: String!
  messageHtml: String!
  notify: Boolean!
  taggedUsers: [String!]!
  user: User
  userId: String!
}

type ChatMessageDeletedEffect {
  messageId: String!
  user: User
}

type ChatMessageEdge {
  cursor: String!
  node: ChatMessage
  user: User
}

type ChatMessageUpdated {
  messages: [ChatMessage!]
  user: User
}

enum ChatType {
  Tenancy
  Tenant
  ExternalIssue
  Issue
}

type CheckAndUpdateListedLocationsCommand {
  locationIds: [String!]
  user: User
}

type CheckAvailabilityRequest {
  minutes: Int!
  roomId: String!
  start: Timestamp
  user: User
}

type CheckAvailabilityResponse {
  isAvailable: Boolean!
  user: User
}

type CloneTemplateCommand {
  brochureId: String!
  user: User
}

type CodeRotated {
  code: String!
  subjectId: String!
  user: User
}

type CombinationDetails {
  availabilityStatus: UnitAvailabilityStatus
  fitoutDescription: String!
  fitoutState: UnitFitoutState
  isKittFlexSpace: Boolean
  isKittSpace: Boolean
  isMarketedByKitt: Boolean!
  minTermMonths: Int!
  name: String!
  sqft: Int!
  user: User
}

type Comment {
  commenterId: String!
  createdAt: Timestamp
  id: String!
  message: String!
  sender: User
  user: User
}

type CommercialModelBreakdown {
  agentFee: Float!
  buildPeriodRecovery: Float!
  buildingInsurance: Float!
  businessRates: Float!
  demiseElectricity: Float!
  fitout: Float!
  kittServiceFeeWithTopup: Float!
  ops: MinMax
  rent: Float!
  serviceCharge: Float!
  total: MinMax
  user: User
}

type CommercialModelInputs {
  buildingInsurance: Float!
  businessRates: Float!
  fitoutMonths: Float!
  fitoutState: UnitFitoutState
  minTermMonthsExcludingFitout: Float!
  rent: Float!
  rentFreeMonths: Float!
  serviceCharge: Float!
  sqft: Float!
  user: User
}

input CommercialModelInputsInput {
  sqft: Float!
  fitoutMonths: Float!
  fitoutState: UnitFitoutState
  minTermMonthsExcludingFitout: Float!
  businessRates: Float!
  rentFreeMonths: Float!
  rent: Float!
  serviceCharge: Float!
  buildingInsurance: Float!
}

type Communication {
  channel: String!
  id: String!
  profileId: String!
  resource: CommunicationResourceUnion
  resourceId: String!
  sentToProfile: Profile
  user: User
  userId: String!
}

enum CommunicationFrequency {
  Weekly
  Daily
  Ignore
  Immediate
  InvalidCommunicationFrequency
}

type CommunicationPreferenceSet {
  communicationClass: String!
  frequency: CommunicationFrequency
  user: User
}

union CommunicationResourceUnion = Activity

type CompaniesConnection {
  edges: [Edge!]
  endCursor: String!
  hasNextPage: Boolean!
  pageInfo: PageInfo
  totalCount: Int!
  user: User
}

type CompaniesMerged {
  fromId: String!
  toId: String!
  user: User
}

type Company {
  accessCode: String
  accountManager: User
  activeDeal: Deal
  activeTenancy: Tenancy
  address: String!
  allUsers: GetCompanyUsersResponse
  archived: Boolean!
  attendancePolicies: AttendancePoliciesList
  clientServicesManager: User
  clientSupportSpecialist: User
  companyNumber: String!
  contacts: [Profile]
  contractorCategory: OrderCategory
  cultureData: CompanyCultureData
  currentTenancies: [Tenancy]
  details: details
  displayId: String!
  enquiries: [Enquiry]
  id: String!
  industries: [Industry!]

  """The 'main' access for this company"""
  ingresses: [Access]
  leadTenants: [User]
  location: Location
  logo: UploadMessage
  logoUploadId: String!
  name: String!
  onboardingTenancies: GetTenanciesList
  onboardingTenancy: Tenancy
  primaryColorHex: String!
  researchNotes: String!
  secondaryColorHex: String!
  teams: [CompanyTeam]
  tenancies: GetTenanciesList
  type: CompanyType
  user: User
  whiteLabelLogo: UploadMessage
}

type CompanyCreated {
  id: String!
  name: String!
  user: User
  userId: String!
}

type CompanyCultureData {
  companySize: CompanySize
  completedAt: Timestamp
  cultureValues: [CultureValue!]
  industries: [Industry!]
  officeValueOtherDetails: String!
  officeValues: [OfficeValue!]
  teams: [CompanyTeam!]
  user: User
  workplaceGoals: [WorkplaceGoal!]
}

type CompanyCultureDataInput {
  companySizeId: String
  cultureIds: [String!]
  industryIds: [String!]
  officeValueIds: [String!]
  officeValueOtherDetails: String
  teams: [TeamPayload!]
  user: User
  workplaceGoalIds: [String!]
}

input CompanyCultureDataInputInput {
  companySizeId: String
  teams: [TeamPayloadInput!]
  cultureIds: [String!]
  officeValueIds: [String!]
  workplaceGoalIds: [String!]
  officeValueOtherDetails: String
  industryIds: [String!]
}

type CompanyCultureSaved {
  data: CompanyCultureDataInput
  user: User
}

type CompanyDeleted {
  id: String!
  user: User
  userId: String!
}

type CompanyIndustriesUpdated {
  companyId: String!
  industryIds: [String!]!
  user: User
}

type CompanyIngress {
  accessId: String!
  companyId: String!
  user: User
}

type CompanyIngresses {
  companyIngresses: [CompanyIngress!]
  user: User
}

input CompanyIngressInput {
  accessId: String!
  companyId: String!
}

enum CompanyIssueGroup {
  Incomplete
  Kitt_Assigned
  Landlord_Assigned
  Recently_Active
  Recently_Completed
  Tenant_Assigned
  Unknown
  Completed
}

type CompanyRestored {
  id: String!
  user: User
  userId: String!
}

type CompanySize {
  id: String!
  max: Int!
  min: Int!
  text: String!
  user: User
}

type CompanyTeam {
  attendancePolicies: AttendancePoliciesList
  companyId: String!
  createdAt: Date
  deletedAt: Date
  id: String!
  teamName: String!
  updatedAt: Date
  user: User
}

type CompanyTeamDeleted {
  companyTeamId: String!
  user: User
}

input CompanyTeamInput {
  deletedAt: DateInput
  id: String!
  companyId: String!
  teamName: String!
  createdAt: DateInput
  updatedAt: DateInput
}

type CompanyTeamsCreated {
  companyTeams: [CompanyTeam!]
  user: User
}

type CompanyTeamsList {
  teams: [CompanyTeam!]
  user: User
}

type CompanyTeamUpdated {
  companyTeam: CompanyTeam
  user: User
}

enum CompanyType {
  CONTRACTOR
  KITT
  LANDLORD
  MANAGING_AGENT
  TECH_ONLY
  TENANT
  TENANT_BROKER
}

type CompanyUpdated {
  id: String!
  user: User
  userId: String!
}

type CompletedTaskMessageCreated {
  chatId: String!
  messageId: String!
  user: User
}

type CompleteOnboardingCommand {
  jobTitle: String
  name: String!
  password: String!
  profilePictureUploadId: String
  teamId: String
  token: String!
  user: User
}

type ConfiguratorSession {
  createdAt: Timestamp
  deal: Deal
  dealId: String!
  deletedAt: Timestamp
  desks: Int!
  floorplan: Document
  floorplanDocumentId: String!
  floorplanDrawing: String!
  id: String!
  isBespoke: Boolean!
  lookAndFeel: Document
  lookAndFeelDocumentId: String!
  markupJson: String!
  meetingRooms: Int!
  notes: String!
  pdfSummary: UploadMessage
  pdfSummaryUploadId: String!
  unit: Unit
  unitId: String!
  updatedAt: Timestamp
}

type ConfiguratorSessionCreated {
  session: ConfiguratorSession
}

type ConfiguratorSessionUpdated {
  session: ConfiguratorSession
}

type ConfigureAccessCommand {
  id: String!
  user: User
}

type Contact {
  email: String!
  name: String!
  phone: String!
}

input ContactInput {
  name: String!
  email: String!
  phone: String!
}

type ContractorCompany {
  orderCategoryId: String!
  user: User
}

input ContractorCompanyInput {
  orderCategoryId: String!
}

type Coordinate {
  lat: Float!
  lng: Float!
}

input CoordinateInput {
  lat: Float!
  lng: Float!
}

type Coords {
  lat: Float!
  lng: Float!
  user: User
}

enum CostOwner {
  Client
  Invalid
  Kitt
  NoOwner
  BuildingManagement
}

type CreateAccessCommand {
  access: Access
  user: User
}

type CreateActivityCommand {
  activity: Activity
  user: User
}

type CreateAgencyDomainAndCompanyCommand {
  name: String!
  url: String!
  user: User
}

type CreateAssignmentCommand {
  categoryId: String!
  locationId: String!
  user: User
  userId: String!
}

type CreateAttendanceCommand {
  date: Date
  user: User
}

type CreateBooking {
  attendeeEmailAddresses: [String!]
  end: DateTime
  entityId: String!
  entityType: BookableEntity
  id: String
  start: DateTime
  user: User
  userId: String
}

type CreateBookingCommand {
  bookedById: String
  dateTime: BookingTimeInput
  email: String
  minutes: Int!
  name: String
  roomId: String!
  start: Timestamp
  user: User
  userId: String
}

type CreateBrochureCommand {
  entities: [BrochureEntity!]
  id: String
  stateJson: String!
  templateForEntityId: String
  user: User
}

type CreateBrokerEnquiryCommand {
  brokerSearchId: String!
  unitGroup: Selection
  user: User
}

type CreateBrokerSearchCommand {
  dealId: String
  desiredLocation: String
  id: String
  kittChoicesOnly: Boolean
  name: String!
  requirements: DealRequirements
  unitGroups: [Selection!]
  user: User
}

type CreateBuildingTraitCommand {
  iconId: String
  name: String!
  type: BuildingTraitType
  uploadId: String
  user: User
}

type CreateChatCommand {
  companyId: String
  id: String
  type: ChatType
  user: User
  userId: String
}

type CreateChatMemberCommand {
  chatId: String!
  message: CreateChatMessageCommand
  noNotification: Boolean
  user: User
  userId: String!
}

type CreateChatMessageCommand {
  associatedEntityId: String
  chatId: String!
  editedFromMessageId: String
  id: String
  issueId: String
  message: String
  messageHtml: String
  notify: Boolean
  parentMessageId: String
  taggedUserIds: [String!]
  type: MessageType
  uploadIds: [String!]
  user: User
  userId: String
}

input CreateChatMessageCommandInput {
  issueId: String
  editedFromMessageId: String
  id: String
  message: String
  notify: Boolean
  userId: String
  taggedUserIds: [String!]
  uploadIds: [String!]
  associatedEntityId: String
  type: MessageType
  parentMessageId: String
  chatId: String!
  messageHtml: String
}

type CreateCompanyCommand {
  address: String
  companyNumber: String
  contractorCompany: ContractorCompany
  landlordFinancials: LandlordFinancials
  logoUploadId: String
  name: String!
  primaryColorHex: String
  secondaryColorHex: String
  tenantCompany: TenantCompany
  type: OptionalCompanyType
  user: User
}

type CreateCompanyTeamsCommand {
  companyId: String!
  companyTeams: [String!]!
  user: User
}

type CreateCompletedTaskMessageCommand {
  chatId: String!
  message: CreateChatMessageCommand
  messageId: String!
  user: User
}

type CreateDealCommand {
  deal: Deal
  note: Note
  user: User
}

type CreateDealSpaceMatchCommand {
  dealId: String!
  desiredTerm: Int
  overriddenPrice: Int!
  unitIds: [String!]!
  user: User
}

type CreateDesk {
  amenityIds: [String!]!
  floorplanId: String!
  id: String
  name: String!
  user: User
}

type CreateDismissedRecommendationsCommand {
  brokerSearchId: String!
  selections: [Selection!]
  user: User
}

type CreateEventCommand {
  detail: String!
  message: [String!]!
  requestId: String!
  tags: [String!]!
  user: User
  userId: String!
}

type CreateIndustryCommand {
  text: String!
  user: User
}

type CreateListedBuildingsDatasetCommand {
  _null: Boolean
  user: User
}

type CreateLocationCommand {
  address: Address
  areaId: String
  coordinates: Coordinate
  data: LocationMutableData
  financialData: LocationMutableFinancialModel
  financialModel: LocationFinancialModelMutation
  id: String
  landlordCompanyId: String
  name: String
  owningCompany: String
  owningCompanyNumber: String
  primaryAccessMethod: String
  published: Boolean
  slug: String
  spacePartnerId: String
  sqFt: Int
  type: String
  user: User
}

type CreateLocationFacilityCommand {
  iconUploadId: String
  name: String!
  rank: Int
  user: User
}

type CreateLocationSellingPoint {
  iconUploadId: String
  name: String!
  user: User
}

type CreateNoteOnDealCommand {
  note: Note
  user: User
}

type CreatePrinterQueue {
  queue: String!
  user: User
  userId: String!
}

type CreateProfileCommand {
  addresses: [ProfileAddress!]
  birthday: Date
  companyId: String!
  companyTeamId: String
  emails: [String!]!
  hideBirthday: Boolean
  img: String!
  jobTitle: String!
  linkedInUrl: String!
  name: String!
  phoneNumbers: [String!]!
  profilePhotoUploadId: String!
  tags: [String!]!
  user: User
  userId: String!
  website: String
}

type CreateRequestCommand {
  categoryId: String!
  chatIds: [String!]!
  detail: String!
  fileIds: [String!]!
  locationId: String!
  priority: String!
  summary: String!
  techRequest: Boolean
  unitId: String!
  user: User
  userId: String!
}

type CreateRoom {
  amenityIds: [String!]!
  capacity: Int!
  id: String
  locationId: String!
  name: String!
  price: String!
  shared: Boolean!
  user: User
}

type CreateRoomAction {
  description: String!
  imageUploadId: String!
  locationId: String!
  name: String!
  numberOfPeople: Int!
  timezone: String!
  user: User
}

type CreateScrapedLocationsCommand {
  locations: [ScrapedLocation!]
  user: User
}

type CreateSelectionFeedbacksCommand {
  feedbacks: [SelectionFeedback!]
  user: User
}

type CreateShortlistCommand {
  description: String
  name: String!
  user: User
}

type CreateShortlistViewingRequestsCommand {
  brokerSearchId: String
  company: String!
  notes: String!
  shortlistId: String
  user: User
  viewingRequests: [ViewingRequest!]
}

type CreateTemplateCommand {
  content: String!
  createdBy: String!
  name: String!
  tags: [String!]!
  type: TemplateType
  user: User
}

type CreateTemporaryPinCommand {
  accessId: String!
  email: String!
  from: Timestamp
  to: Timestamp
  user: User
  userId: String!
}

type CreateUserCommand {
  email: String!
  password: String!
  user: User
}

type CreateViewingRequestCommand {
  user: User
  viewingRequest: ShortlistViewingRequest
}

type CreateWebPushSubscription {
  authSecret: String!
  endpoint: String!
  p256dh: String!
  user: User
  userAgentString: String!
  userId: String!
}

type CultureValue {
  id: String!
  text: String!
  user: User
}

type DailyOfficeAttendance {
  attendance: Int!
  attendeeUserIds: [String!]!
  capacity: Int!
  date: Date
}

type Date {
  day: Int!
  month: Int!
  year: Int!
}

input DateInput {
  year: Int!
  month: Int!
  day: Int!
}

type DateRange {
  max: Date
  min: Date
}

input DateRangeInput {
  min: DateInput
  max: DateInput
}

type DateTime {
  ISOString: String
  day: Int!

  """
  https://golang.org/pkg/time/#Time.Format Use Format() from Go's time package
  to format dates and times easily using the reference time "Mon Jan 2 15:04:05
  -0700 MST 2006" (https://gotime.agardner.me/)
  """
  format(
    """Mon Jan 2 15:04:05 -0700 MST 2006"""
    layout: String
  ): String
  hours: Int!
  minutes: Int!
  month: Int!
  nanos: Int
  seconds: Int!
  timeZone: String
  unix: Int
  utcOffsetSeconds: Int!
  year: Int!
}

input DateTimeFullObjectInput {
  year: Int!
  day: Int!
  utcOffsetSeconds: Int
  timeZone: String
  hours: Int!
  seconds: Int!
  minutes: Int!
  nanos: Int!
  month: Int!
}

input DateTimeInput {
  ISOString: String
  dateTime: DateTimeFullObjectInput
}

type Deal {
  activityStatuses: [DealActivityStatus!]
  alternativeBrokerContactIds: [String!]
  alternativeBrokerContacts: [Profile]
  assignee: User
  assigneeId: String
  brokerCompany: Company
  brokerCompanyId: String
  brokerSearch: BrokerSearch
  brokerSearchId: String
  clientCompany: Company
  clientCompanyId: String
  confidential: Boolean
  createdAt: Timestamp
  createdById: String
  dealGenerationSource: DealGenerationSource
  dealType: DealTypeOptional
  deferredUntil: Date
  deletedAt: Timestamp
  expectedCloseDate: Timestamp
  heat: Int
  highCovenantRisk: Boolean
  id: String
  insights: DealInsight
  leadType: LeadType
  lostReason: String
  offerIds: [String!]
  ownerId: String
  pipelineStage: PipelineStage
  pipelineStageId: String
  primaryBrokerContact: Profile
  primaryBrokerContactId: String
  primaryBrokerUser: User
  primaryClientContact: Profile
  primaryClientContactId: String
  rankedProducts(locationIds: [String] = ["[]"], first: Int = 50, after: String = ""): ProductsConnection
  requirements: DealRequirements
  requirementsId: String
  salesTeam: SalesTeam
  salesTeamId: String
  secondaryAssignee: User
  secondaryAssigneeId: String
  shortlists: [DealShortlist]
  source: String
  threadId: String
  title: String
  updatedAt: Timestamp
  user: User
  viewingRequestIds: [String!]
}

enum DealActivityStatus {
  ActivityScheduledAndDueToday
  NoActivityScheduled
  ScheduledAndOverdue
  StatusUnknown
  ActivityScheduledAndDueFromTomorrow
}

type DealConnection {
  edges: [DealEdge!]
  pageInfo: DealPageInfo
  totalCount: Int!
  user: User
}

type DealCreated {
  deal: Deal
  id: String!
  user: User
}

type DealDeleted {
  id: String!
  user: User
}

type DealEdge {
  cursor: String!
  node: Deal
  user: User
}

type DealFilters {
  areaIds: [String!]!
  assigneeIds: [String!]!
  brokerCompanyIds: [String!]!
  brokerIds: [String!]!
  clientCompanyIds: [String!]!
  companyIds: [String!]!
  createdAfter: Timestamp
  createdBefore: Timestamp
  desks: DealNumericRange
  heat: Int32OptionalRange
  includeArchived: Boolean!
  includeDeferred: Boolean!
  onlyDirect: Boolean!
  onlyLostOrArchived: Boolean!
  price: DealMoneyRange
  profileIds: [String!]!
  salesTeamIds: [String!]!
  sources: [String!]!
  spaceMatchedAfter: Timestamp
  spaceMatchedBefore: Timestamp
  sqFt: DealNumericRange
  user: User
}

input DealFiltersInput {
  salesTeamIds: [String!]!
  sqFt: DealNumericRangeInput
  brokerCompanyIds: [String!]!
  profileIds: [String!]!
  spaceMatchedAfter: TimestampInput
  desks: DealNumericRangeInput
  clientCompanyIds: [String!]!
  createdAfter: TimestampInput
  spaceMatchedBefore: TimestampInput
  includeArchived: Boolean!
  onlyLostOrArchived: Boolean!
  onlyDirect: Boolean!
  areaIds: [String!]!
  includeDeferred: Boolean!
  assigneeIds: [String!]!
  heat: Int32OptionalRangeInput
  brokerIds: [String!]!
  createdBefore: TimestampInput
  companyIds: [String!]!
  sources: [String!]!
  price: DealMoneyRangeInput
}

enum DealGenerationSource {
  BROCHURE_REQUEST
  CRM
  VIEWING_REQUEST
}

input DealInput {
  updatedAt: TimestampInput
  deferredUntil: DateInput
  source: String
  dealType: DealTypeOptionalInput
  primaryBrokerContactId: String
  requirementsId: String
  lostReason: String
  leadType: LeadType
  requirements: DealRequirementsInput
  alternativeBrokerContactIds: [String!]
  clientCompanyId: String
  viewingRequestIds: [String!]
  confidential: Boolean
  offerIds: [String!]
  ownerId: String
  pipelineStageId: String
  salesTeamId: String
  title: String
  heat: Int
  activityStatuses: [DealActivityStatus!]
  primaryClientContactId: String
  brokerSearchId: String
  expectedCloseDate: TimestampInput
  secondaryAssigneeId: String
  createdAt: TimestampInput
  threadId: String
  brokerCompanyId: String
  assigneeId: String
  highCovenantRisk: Boolean
  id: String
  createdById: String
  deletedAt: TimestampInput
  dealGenerationSource: DealGenerationSource
}

type DealInsight {
  approxRevenuePennies: Float
  approxSqft: Float
}

type DealList {
  deals: [Deal!]
  user: User
}

type DealMoney {
  currencySymbol: String!
  formatted: String!
  pennies: Int!
  user: User
}

input DealMoneyInput {
  pennies: Int!
  currencySymbol: String!
  formatted: String!
}

type DealMoneyRange {
  from: DealMoney
  to: DealMoney
  user: User
}

input DealMoneyRangeInput {
  from: DealMoneyInput
  to: DealMoneyInput
}

type DealNumericRange {
  from: Int
  to: Int
  user: User
}

input DealNumericRangeInput {
  from: Int
  to: Int
}

enum DealOrder {
  ASC
  DESC
}

type DealPageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  user: User
}

type DealPaginationData {
  hasMoreItems: Boolean!
  limit: Int!
  totalCount: Int!
  totalPages: Int!
  user: User
}

type DealPipelineStage {
  autoMovedBy: String!
  current: PipelineStage
  enterTime: DateTime
  exitTime: DateTime
  movedBy: String!
  movedByUser: User
  next: PipelineStage
  user: User
}

type DealPipelineStageInsight {
  approxRevenuePennies: Float
  approxSqft: Float
  stageId: String!
  weightedApproxRevenuePennies: Float
}

type DealRequirements {
  areaIds: [String!]!
  areas: [Boundary]
  facilityIds: [String!]
  floorFilters: FloorFilters
  freeTextRequirements: String!
  freeTextRequirementsDraftState: String!
  id: String!
  monthlyBudget: DealMoneyRange
  numOfDesks: DealNumericRange
  numOfLargeMeetingRooms: Int
  numOfMediumMeetingRooms: Int
  numOfSmallMeetingRooms: Int
  polygon: String
  squareFootage: DealNumericRange
  startDateASAP: Boolean!
  startDates: DealTimestampRange
  termMonths: DealNumericRange
  user: User
}

input DealRequirementsInput {
  areaIds: [String!]!
  startDateASAP: Boolean!
  numOfMediumMeetingRooms: Int
  monthlyBudget: DealMoneyRangeInput
  id: String!
  termMonths: DealNumericRangeInput
  squareFootage: DealNumericRangeInput
  polygon: String
  startDates: DealTimestampRangeInput
  numOfDesks: DealNumericRangeInput
  freeTextRequirementsDraftState: String!
  facilityIds: [String!]
  numOfLargeMeetingRooms: Int
  floorFilters: FloorFiltersInput
  numOfSmallMeetingRooms: Int
  freeTextRequirements: String!
}

type DealsBatchResponse {
  _null: Boolean
  user: User
}

type DealsConnection {
  edges: [DealEdge!]
  pageInfo: PageInfo
  user: User
}

type DealShortlist {
  dealId: String!
  id: String!
  linkedByUserId: String!
  name: String
  shortlist: Shortlist
  shortlistId: String!
  user: User
}

type DealsManyBatchResponse {
  _null: Boolean
  user: User
}

type DealsMerged {
  from: Deal
  to: Deal
  user: User
}

type DealSpaceMatch {
  dealId: String!
  desiredTerm: Int!
  id: String!
  location: Location
  matchedAt: Timestamp
  orderIndex: String!
  overriddenPrice: Int!
  salesBlurb: String!
  starred: Boolean!
  unitGroupDetails(overrideMinTermMonths: Int = 0, estimatePrice: Boolean = false): GetDetailsForUnitsResponse
  unitIds: [String!]!
  units: [Unit]!
  user: User
}

type DealSpaceMatchDeleted {
  id: String!
  user: User
}

type DealSpaceMatched {
  match: DealSpaceMatch
  user: User
}

type DealSpaceMatchUpdated {
  match: DealSpaceMatch
  user: User
}

type DealStageEvent {
  entered: Timestamp
  isCurrent: Boolean!
  pipelineStageId: String!
  timeInStageMilliseconds: Int!
  timeInStageSeconds: Int!
  user: User
}

enum DealTimelineEventType {
  PIPELINE_STAGE_MOVE
  SHORTLIST_EMAIL
  VIEWING_EMAIL
  EMAIL
  NOTE
  SHORTLIST_APPROVED
  TENANCY
  ACTIVITY
  SHORTLISTED
}

union DealTimelineEventUnion = Note | Activity | Email | Tenancy | DealPipelineStage | BrokerCommunication | Selection | BrokerSearch | Communication

type DealTimestampRange {
  from: Timestamp
  to: Timestamp
  user: User
}

input DealTimestampRangeInput {
  from: TimestampInput
  to: TimestampInput
}

enum DealType {
  KITT_SPACES
  KITT_SEARCH
}

type DealTypeOptional {
  type: DealType
  user: User
}

input DealTypeOptionalInput {
  type: DealType
}

type DealUpdated {
  id: String!
  pipelineStageId: String!
  user: User
}

type DeleteAccessCommand {
  id: String!
  user: User
}

type DeleteActivityCommand {
  id: String!
  user: User
}

type DeleteAmenity {
  id: String!
  user: User
}

type DeleteAssignmentCommand {
  assignmentId: String!
  user: User
}

type DeleteAttendanceCommand {
  date: Date
  id: String
  user: User
}

type DeleteBooking {
  id: String!
  user: User
}

type DeleteBrochureCommand {
  id: String!
  user: User
}

type DeleteBrokerSearchCommand {
  id: String!
  user: User
}

type DeleteChatCommand {
  chatId: String!
  reason: String
  user: User
}

type DeleteChatMemberCommand {
  chatId: String!
  user: User
  userId: String!
}

type DeleteChatMessageAction {
  messageId: String!
  user: User
}

type DeleteCompanyCommand {
  id: String!
  user: User
}

type DeleteCompanyTeamCommand {
  companyTeamId: String!
  user: User
}

type DeleteDealCommand {
  id: String!
  lostReason: String!
  user: User
}

type DeleteDealSpaceMatchCommand {
  id: String!
  user: User
}

type DeleteDesk {
  id: String!
  user: User
}

type DeleteEventCommand {
  eventId: String!
  user: User
  userId: String!
}

type DeleteFloorplan {
  id: String!
  user: User
}

type DeleteGuestCommand {
  guestId: String!
  user: User
}

type DeleteIndustryCommand {
  id: String!
  user: User
}

type DeleteLocationCommand {
  id: String!
  user: User
}

type DeleteLocationSellingPoint {
  sellingPointId: String!
  user: User
}

type DeleteMatchedSpace {
  id: String!
  productId: String!
  reasonUnmatched: String!
  user: User
}

type DeleteNoteOnDealCommand {
  dealId: String!
  noteId: String!
  user: User
}

type DeleteProfileCommand {
  id: String!
  user: User
}

type DeleteRequestAttachmentCommand {
  attachmentId: String!
  requestId: String!
  user: User
}

type DeleteRequestCommand {
  id: String!
  user: User
}

type DeleteRoom {
  id: String!
  user: User
}

type DeleteRoomAction {
  id: String!
  user: User
}

type DeleteShortlistCommand {
  archive: Boolean
  shortlistId: String!
  user: User
}

type DeleteUploadCommand {
  id: String!
  user: User
}

type DeleteUserCommand {
  UserId: String!
  user: User
}

type DeleteUserPushTokenCommand {
  deviceId: String!
  user: User
}

type DeleteUsersInCompanies {
  companyIds: [String!]!
  user: User
}

type DeleteUsersInCompany {
  companyId: String!
  user: User
}

type DeleteWebPushSubscription {
  id: String!
  user: User
}

type DeployFinished {
  affectedProjects: [String!]!
  branch: String!
  deployedByUserId: String!
  user: User
}

type Deployment {
  dev: String!
  service: String!
}

type DeployPreviewCommand {
  branch: String!
  user: User
}

type DeployStarted {
  affectedProjects: [String!]!
  branch: String!
  deployedByUserId: String!
  id: String!
  user: User
}

type Desk {
  amenities: [Amenity]
  assignedTo: Profile
  bookings(end: DateTimeInput!, start: DateTimeInput!): [RoomOrDeskBooking]
  floorplanId: String!
  id: String!
  name: String!
  teamIds: [String!]!
  teams: [CompanyTeam]
  user: User
}

type DeskBookingFeatureEnquired {
  _null: Boolean
  user: User
}

type DeskCreated {
  desk: Desk
  user: User
}

type DeskDeleted {
  desk: Desk
  user: User
}

type DesksOnTeamSet {
  deskIds: [String!]!
  teamId: String!
  user: User
}

type DeskUpdated {
  desk: Desk
  user: User
}

type DetachTaskFromRequestCommand {
  requestId: String!
  taskId: String!
  user: User
}

union details = ContractorCompany | LandlordFinancials | TenantCompany

enum Device {
  AXIS
  DOORBIRD
}

type Dimensions {
  heightInches: Float!
  user: User
  widthInches: Float!
}

input DimensionsInput {
  widthInches: Float!
  heightInches: Float!
}

type DiscardSourcedLocationCommand {
  locationId: String!
  user: User
}

type DismissedRecommendation {
  brokerSearchId: String!
  createdAt: Timestamp
  id: String!
  selection: Selection
  shortlistId: String!
  user: User
}

type DismissedRecommendationsCreated {
  selections: [Selection!]
  user: User
}

type DisqualifyLocation {
  id: String!
  user: User
}

type Document {
  id: String!
  metadata: [Metadata!]
  type: DocumentType
  upload: UploadMessage
  uploadId: String!
  uploadedAt: Timestamp
  uploadedBy: User
  uploadedUserId: String!
}

type DocumentAddedToTenancy {
  documentId: String!
  tenancyId: String!
}

type DocumentCreated {
  document: Document
  documentId: String!
}

type DocumentType {
  allowMultiple: Boolean!
  id: String!
  metadata: [Metadata!]
  name: String!
  required: Boolean!
  signatureRequired: Boolean!
  template: UploadMessage
  templateUploadId: String!
}

type DoesOrderMeetMSABaselineResponse {
  failingCategoryIds: [String!]!
  meetsBaseline: Boolean!
}

type DoorOpened {
  accessId: String!
  code: String!
  user: User
}

type DoorOpenedForGuest {
  accessId: String!
  guestId: String!
  name: String!
  requesterId: String!
  user: User
}

type DoorRestarted {
  accessId: String!
  user: User
}

type Edge {
  cursor: String!
  node: Company
  user: User
}

type EditLocation {
  address: Address
  bidLevy: Boolean!
  buildingInsurance: Money
  coordinates: Coordinate
  facilityIds: [String!]
  isKittChoice: Boolean
  locationId: String!
  notes: String!
  salesBlurb: String
  serviceCharge: Money
  surveyPhotoUploadIds: [String!]
  urls: [String!]
  user: User
  withinCityOfLondon: Boolean!
}

type EditLocationCommand {
  editLocation: EditLocation
  editUnits: [EditUnit!]
  user: User
}

input EditLocationInput {
  isKittChoice: Boolean
  salesBlurb: String
  locationId: String!
  address: AddressInput
  surveyPhotoUploadIds: [String!]
  withinCityOfLondon: Boolean!
  coordinates: CoordinateInput
  buildingInsurance: MoneyInput
  notes: String!
  facilityIds: [String!]
  urls: [String!]
  bidLevy: Boolean!
  serviceCharge: MoneyInput
}

type EditUnit {
  availabilityStatus: UnitAvailabilityStatusOptional
  businessRatesPsf: Money
  fitoutState: UnitFitoutState
  floor: String!
  floorNumbers: [Float!]
  floorplanUploadId: String!
  floorplanUploadIds: [String!]
  isAvailable: Boolean!
  landlordCoversFitout: Boolean
  minAvailableFrom: Timestamp
  minTermMonths: Int!
  name: String!
  netRent: Money
  rateableValue: Money
  ratesLink: String!
  rentFreeMonths: Int!
  sqFt: Int!
  surveyPhotoUploadIds: [String!]
  threeDimensionalModelUrl: String
  totalRentFreeMonths: Float
  unitId: String
  user: User
}

input EditUnitInput {
  totalRentFreeMonths: Float
  rentFreeMonths: Int!
  businessRatesPsf: MoneyInput
  floorNumbers: [Float!]
  floor: String!
  sqFt: Int!
  minTermMonths: Int!
  unitId: String
  rateableValue: MoneyInput
  ratesLink: String!
  landlordCoversFitout: Boolean
  threeDimensionalModelUrl: String
  fitoutState: UnitFitoutState
  surveyPhotoUploadIds: [String!]
  isAvailable: Boolean!
  floorplanUploadId: String!
  name: String!
  availabilityStatus: UnitAvailabilityStatusOptionalInput
  minAvailableFrom: TimestampInput
  netRent: MoneyInput
  floorplanUploadIds: [String!]
}

type Email {
  bcc: [EmailContact!]
  cc: [EmailContact!]
  emailAddress: String!
  from: EmailContact
  fromEmail: String!
  fromName: String!
  gmailThreadId: String!
  id: String!
  labels: [String!]!
  receivedAt: Timestamp
  subject: String!
  to: [EmailContact!]
  user: User
}

type EmailAction {
  button: EmailButton
  instructions: String!
  user: User
}

input EmailActionInput {
  instructions: String!
  button: EmailButtonInput
}

type EmailBody {
  actions: [EmailAction!]
  dictionary: [EmailEntry!]
  greeting: String
  intros: [String!]
  name: String!
  outros: [String!]
  signature: String
  table: EmailTable
  title: String
  user: User
}

input EmailBodyInput {
  name: String!
  dictionary: [EmailEntryInput!]
  intros: [String!]
  actions: [EmailActionInput!]
  outros: [String!]
  signature: String
  greeting: String
  title: String
  table: EmailTableInput
}

type EmailButton {
  color: String!
  link: String!
  text: String!
  textColor: String!
  user: User
}

input EmailButtonInput {
  text: String!
  link: String!
  color: String!
  textColor: String!
}

type EmailContact {
  emailAddress: String!
  name: String!
  user: User
}

type EmailContent {
  htmlMessage: String!
  plainMessage: String!
  user: User
}

type EmailCreated {
  email: Email
  user: User
}

type EmailEntry {
  key: String!
  user: User
  value: String!
}

input EmailEntryInput {
  key: String!
  value: String!
}

type EmailMetadata {
  key: String!
  user: User
  value: String!
}

input EmailMetadataInput {
  key: String!
  value: String!
}

type EmailSent {
  emailId: String!
  metadata: [EmailMetadata!]
  threadId: String!
  user: User
}

type EmailSentEvent {
  body: EmailBody
  subject: String!
  user: User
  userIds: [String!]!
}

type EmailTable {
  data: [EmailTableData!]
  user: User
}

type EmailTableData {
  entries: [EmailEntry!]
  user: User
}

input EmailTableDataInput {
  entries: [EmailEntryInput!]
}

input EmailTableInput {
  data: [EmailTableDataInput!]
}

type EmailUpdated {
  email: Email
  user: User
}

type EndSession {
  sessionId: String!
  user: User
}

type EnquireAboutDeskBooking {
  _null: Boolean
  user: User
}

type Enquiry {
  assignee: Profile
  clientCompany: Company
  createdAt: Timestamp
  createdBy: String!
  createdByUser: User
  deletedAt: Timestamp
  id: String!
  mutableData: EnquiryMutableData
  quotes: [Quote!]
  status: EnquiryStatus
  updatedAt: Timestamp
  updatedBy: String!
  visits: [Visit]
}

type EnquiryColumnDetails {
  enquiriesCount: Int!
  statusId: String!
  totalKittFeePennies: Float!
  totalValuePennies: Float!
}

type EnquiryCreated {
  id: String!
}

type EnquiryDeleted {
  id: String!
}

type EnquiryEdge {
  cursor: String!
  node: Enquiry
}

input EnquiryFiltersInput {
  companyIds: [String!]
  onlyMine: Boolean
  enquiryStatusIds: [String!]
}

type EnquiryMutableData {
  assigneeId: String
  clientCompanyId: String
  dealId: String
  description: String
  priority: EnquiryPriority
  source: EnquirySource
  statusId: String
  title: String
}

input EnquiryMutableDataInput {
  title: String
  description: String
  statusId: String
  priority: EnquiryPriority
  clientCompanyId: String
  dealId: String
  source: EnquirySource
  assigneeId: String
}

enum EnquiryPriority {
  HIGH_PRIORITY_ENQUIRY
  LOW_PRIORITY_ENQUIRY
  MEDIUM_PRIORITY_ENQUIRY
  UNKNOWN_PRIORITY_ENQUIRY
}

enum EnquirySource {
  PHONE_AM
  UNKNOWN
  AUDIT_CSS_CSE
  BUSINESS_REVIEW_MEETING
  CHAT
  EMAIL_TO_AM
  EMAIL_TO_CSM
  MARKETING_EMAIL
  CLIENT_SERVICES_CHAT
}

type EnquiryStatus {
  id: String!
  name: String!
  position: Int!
}

type EnquiryUpdated {
  data: EnquiryMutableData
  id: String!
}

type EntityIdsList {
  entityIds: [String!]!
  user: User
}

union EntityUnion = Unit | Location | Selection | ShortlistSummary

enum EstimationType {
  MIN_TERM_MONTHS
  PRODUCT_ADVERTISED_PRICE
  SERVICE_CHARGE
  UNIT_BUSINESS_RATES
  AREA_BUSINESS_RATES
  FITOUT_STATE
}

type Event {
  createdAt: Timestamp
  detail: String!
  id: String!
  requestId: String!
  user: User
  userId: String!
}

type EventCreated {
  Id: String!
  Message: String!
  RequestId: String!
  Tags: [String!]!
  user: User
}

type EventDeleted {
  Id: String!
  user: User
}

type ExchangeTokenRequest {
  cookie: String!
  user: User
}

type ExternalMedia {
  label: String!
  unitId: String!
  url: String!
}

type FacilityIcon {
  id: String!
  name: String!
  uploadId: String!
  user: User
}

type FailedToScrapeSite {
  url: String!
}

type FavouriteAdded {
  productId: String!
}

type FavouriteRemoved {
  productId: String!
}

type FeaturesMarkedAsRead {
  features: [TenantAppFeature!]
}

type Feedback {
  additionalInfoJson: String!
  app: App
  createdByUserId: String!
  entityId: String!
  entityType: FeedbackEntityType
  id: String!
  message: String!
  rating: Int!
}

type FeedbackCreated {
  feedback: Feedback
}

enum FeedbackEntityType {
  FeedbackEntityTypeChat
  FeedbackEntityTypeIssue
  FeedbackEntityTypeUnknown
  FeedbackEntityTypeVisit
}

type FilterOptions {
  area: [String!]!
  desk: [Int!]!
  facility: [String!]!
  price: [Int!]!
  sqFt: [Int!]!
}

input FiltersInput {
  occupiedFilter: OccupiedFilterInput
  type: UnitTypeValueInput
  excludeLocationIds: [String!]!
  allowCombinations: Boolean!
  desk: RangeFilterInput
  squareFoot: RangeFilterInput
  availableFrom: TimestampInput
  price: RangeFilterInput
  facility: [String!]!
  area: [String!]!
  onlyArchived: Boolean
  publishedState: Boolean
  locationIds: [String!]!
}

enum FitoutTier {
  HIGH_FITOUT_TIER
  LOW_FITOUT_TIER
  MEDIUM_FITOUT_TIER
  UNKNOWN_FITOUT_TIER
}

type FloorFilters {
  includeGround: Boolean
  includeUnderground: Boolean
  user: User
}

input FloorFiltersInput {
  includeGround: Boolean
  includeUnderground: Boolean
}

type Floorplan {
  deskCount: Int!
  geometries: [Geometry!]
  id: String!
  name: String!
  user: User
}

type FloorplanApproved {
  floorplanId: String!
  user: User
}

type FloorplanDeleted {
  id: String!
  user: User
}

type FloorplanGenerated {
  custom: Boolean!
  floorplan: Floorplan
  floorplanId: String!
  id: String!
  index: Int!
  user: User
}

type FloorplanIngested {
  _null: Boolean
  user: User
}

type FloorplansGenerationStarted {
  id: String!
  user: User
}

type FloorplanUpdated {
  id: String!
  user: User
}

type FloorplanZone {
  floorplanId: String!
  id: String!
  name: String!
  user: User
}

type FloorplanZoneUpdated {
  user: User
  zone: FloorplanZone
}

type GenerateFloorplans {
  name: String!
  optimise: Boolean
  quality: Float
  src: String!
  tenancyId: String!
  user: User
}

type GeneratePdfRequest {
  dimensions: Dimensions
  fileName: String!
  url: String!
  user: User
  waitForSelectors: [String!]
}

type GeneratePdfRequestSubmitted {
  dimensions: Dimensions
  fileName: String!
  requestId: String!
  url: String!
  user: User
  waitForSelectors: [String!]
}

type GeometricPoint {
  user: User
  x: Float!
  y: Float!
}

type Geometry {
  entity: GeometryEntity
  entityId: String!
  entityType: GeometryEntityType
  floorplanId: String!
  id: String!
  innerRectangle: Rectangle
  user: User
  vertices: [GeometricPoint!]
}

union GeometryEntity = MeetingRoom | Desk | FloorplanZone

enum GeometryEntityType {
  GeometryEntityType_ColabArea
  GeometryEntityType_Desk
  GeometryEntityType_MeetingRoom
  GeometryEntityType_Unknown
  GeometryEntityType_Wall
  GeometryEntityType_ZoneOfInterest
}

type GeoPoint {
  lat: Float!
  lng: Float!
}

input GeoPointInput {
  lat: Float!
  lng: Float!
}

type GetAccessCodeBatchResponse {
  _null: Boolean
  user: User
}

type GetAccessCodeRequest {
  subjectId: String!
  user: User
}

type GetAccessCodeResponse {
  pin: String!
  user: User
}

type GetAccessesBatchResponse {
  _null: Boolean
  user: User
}

type GetAccessesRequest {
  ids: [String!]
  lat: Float
  lng: Float
  locationIds: [String!]
  managed: Boolean
  testtestetst: String
  user: User
}

type GetAccessesResponse {
  accesses: [Access!]
  user: User
}

type GetAccessLogsResponse {
  edges: [AccessLogEdge!]
  pageInfo: PageInfo
}

type GetAccessRequest {
  id: String!
  user: User
}

type GetAccessResponse {
  access: Access
  user: User
}

type GetActiveSessionsResponse {
  sessions: [Session!]
  user: User
}

type GetActivitiesBatchResponse {
  _null: Boolean
  user: User
}

type GetActivitiesRequest {
  assigneeIds: [String!]!
  collaboratorIds: [String!]!
  completedAfter: Timestamp
  completedBefore: Timestamp
  dealIds: [String!]!
  dueAfter: Timestamp
  dueBefore: Timestamp
  googleCalendarIds: [String!]!
  ids: [String!]!
  includeCompleted: Boolean!
  limit: Int!
  order: ActivityOrder
  page: Int!
  startingAfter: Timestamp
  startingBefore: Timestamp
  titleQuery: String!
  types: [String!]!
  user: User
}

type GetActivitiesResponse {
  activities: [Activity!]
  totalCount: Int!
  user: User
}

type GetActivityIdsForSelectionRequest {
  unitGroupId: String!
  user: User
}

type GetActivityIdsForSelectionResponse {
  activityIds: [String!]!
  user: User
}

type GetActivityRequest {
  id: String!
  user: User
}

type GetActivityResponse {
  activity: Activity
  user: User
}

type GetActivityTypesRequest {
  _null: Boolean
  user: User
}

type GetActivityTypesResponse {
  types: [ActivityType!]
  user: User
}

type GetAddonResponse {
  addon: Addon
}

type GetAdminRoomBookingsRequest {
  after: String
  end: DateTime
  first: Int
  locationIds: [String!]
  roomIds: [String!]
  start: DateTime
  user: User
  userIds: [String!]
}

type GetAgencyCompanyForUrlRequest {
  url: String!
  user: User
}

type GetAgencyCompanyForUrlResponse {
  agencyDomain: AgencyDomain
  company: Company
  user: User
}

type GetAgencyDomainsRequest {
  _null: Boolean
  user: User
}

type GetAgencyDomainsResponse {
  domains: [AgencyDomain!]
  user: User
}

type GetAlarmsRequest {
  locationIds: [String!]!
  user: User
}

type GetAlarmsResponse {
  alarms: [Alarm!]
  user: User
}

type GetAllEnquiriesResponse {
  enquiries: [Enquiry!]
}

type GetAllEnquiryStatusesResponse {
  enquiryStatuses: [EnquiryStatus!]
}

type GetAllQuoteStatusesResponse {
  quoteStatuses: [QuoteStatus!]
}

type GetAllSalesTeamsRequest {
  _null: Boolean
  user: User
}

type GetAllSalesTeamsResponse {
  salesTeams: [SalesTeam!]
  user: User
}

type GetAmenitiesRequest {
  companyId: String
  entityTypes: [BookableEntity!]
  user: User
}

type GetAmenitiesResponse {
  amenities: [Amenity!]
  user: User
}

type GetArchivedMessagesResponse {
  messages: [Message!]
}

type GetAreasRequest {
  _null: Boolean
  user: User
}

type GetAreasResponse {
  areas: [Area!]
  user: User
}

type GetAssigneeRequest {
  categoryId: String!
  locationId: String!
  user: User
}

type GetAssigneeResponse {
  user: User
  userId: String!
}

type GetAssignmentsRequest {
  _null: Boolean
  user: User
}

type GetAssignmentsResponse {
  files: [Assignment!]
  user: User
}

type GetAttendancePoliciesByEntityIdResponse {
  _null: Boolean
  user: User
}

type GetAttendancesBatchResponse {
  _null: Boolean
  user: User
}

type GetAttendanceStateRequest {
  timezone: String
  user: User
}

type GetAttendanceStateResponse {
  dates: [AttendanceStateForDate!]
  user: User
}

type GetAverageAccessesByCompanyResponse {
  averageAccessesByDay: [AverageAccessesByDay!]
  companyId: String!
}

type GetAverageAttendancePerWeekResponse {
  averageDaysInOffice: Float!
}

type GetBookableRoomsRequest {
  amenityIds: [String!]
  bookingEnd: DateTime
  bookingStart: DateTime
  locationIds: [String!]
  roomIds: [String!]
  user: User
}

type GetBookableRoomsResponse {
  rooms: [MeetingRoom!]
  user: User
}

type GetBookingBatchResponse {
  _null: Boolean
  user: User
}

type GetBookingRequest {
  bookingId: String!
  user: User
}

type GetBookingResponse {
  booking: Booking
  user: User
}

type GetBookingsBatchResponse {
  _null: Boolean
  user: User
}

type GetBookingsForEntity {
  end: DateTime
  entityId: String!
  start: DateTime
  user: User
}

type GetBookingsForEntityBatchRequest {
  GetBookingsForEntity: [GetBookingsForEntity!]
  user: User
}

type GetBookingsRequest {
  bookingIds: [String!]!
  descending: Boolean!
  endDate: Timestamp
  locationIds: [String!]!
  page: Int!
  roomIds: [String!]!
  scopeByUser: Boolean!
  sortBy: SortBy
  startDate: Timestamp
  user: User
  userIds: [String!]!
}

type GetBookingsResponse {
  bookings: [Booking!]
  pages: Int!
  total: Int!
  user: User
}

type GetBoundariesResponse {
  _null: Boolean
}

type GetBoundaryListResponse {
  boundaries: [Boundary!]
}

type GetBoundaryResponse {
  boundary: Boundary
}

type GetBrochureBatchResponse {
  _null: Boolean
  user: User
}

type GetBrochureRequest {
  id: String!
  user: User
}

type GetBrochureResponse {
  brochure: Brochure
  user: User
}

type GetBrokerCommunicationsBatchResponse {
  _null: Boolean
  user: User
}

type GetBrokerSearchRequest {
  id: String!
  user: User
}

type GetBrokerSearchResponse {
  search: BrokerSearch
  user: User
}

type GetBuildingRequest {
  id: String!
  user: User
}

type GetBuildingResponse {
  building: Building
  user: User
}

type GetBuildingsBatchResponse {
  _null: Boolean
  user: User
}

type GetBuildingTimeZoneBatchRequest {
  requests: [GetBuildingTimeZoneRequest!]
  user: User
}

type GetBuildingTimeZoneBatchResponse {
  _null: Boolean
  user: User
}

type GetBuildingTimeZoneRequest {
  companyId: String!
  locationId: String!
  tenancyId: String!
  user: User
}

type GetBuildingTraitsRequest {
  types: [BuildingTraitType!]
  user: User
}

type GetBuildingTraitsResponse {
  traits: [BuildingTrait!]
  user: User
}

type GetBuildingUnitsBatchResponse {
  _null: Boolean
  user: User
}

type GetBusiestDayOfTheWeekResponse {
  day: String!
}

type GetBusinessRatesForUnitResponse {
  businessRates: Money
}

type GetCapacityRequest {
  companyId: String
  user: User
}

type GetCapacityResponse {
  capacity: Int!
  user: User
}

type GetCategoriesRequest {
  categoryIds: [String!]!
  user: User
}

type GetCategoriesResponse {
  _null: Boolean
  user: User
}

enum GetChatHistoryOrder {
  ASC
  DESC
}

type GetChatHistoryRequest {
  after: String
  first: Int
  order: GetChatHistoryOrder
  user: User
  userId: String
}

type GetChatMembersResponse {
  _null: Boolean
  user: User
}

type GetChatRequest {
  chatId: String!
  showArchived: Boolean
  user: User
}

type GetChatResponse {
  chat: Chat
  user: User
}

type GetChatsForUserRequest {
  types: [ChatType!]
  user: User
}

type GetChatsForUserResponse {
  chats: [Chat!]
  user: User
}

type GetChatsRequest {
  chatIds: [String!]
  companyIds: [String!]
  page: Int
  showArchived: Boolean
  types: [ChatType!]
  user: User
  userId: String
  userIds: [String!]
}

type GetChatsResponse {
  chats: [Chat!]
  pages: Int!
  total: Int!
  user: User
}

type GetClientChatsSinceRequest {
  companyIds: [String!]
  since: DateTime
  user: User
}

type GetClientChatsSinceResponse {
  chats: [Chat!]
  user: User
}

type GetCombinationDetailsBatchRequest {
  combinationRequests: [GetCombinationDetailsRequest!]
  user: User
}

type GetCombinationDetailsBatchResponse {
  _null: Boolean
  user: User
}

type GetCombinationDetailsRequest {
  unitIds: [String!]!
  user: User
}

type GetCombinationDetailsResponse {
  details: CombinationDetails
  user: User
}

type GetCommercialModelRequest {
  inputs: CommercialModelInputs
  user: User
}

type GetCommercialModelResponse {
  lumpSums: LumpSums
  monthly: CommercialModelBreakdown
  psfYr: CommercialModelBreakdown
  user: User
}

type GetCommunicationsBatchResponse {
  _null: Boolean
  user: User
}

type GetCompaniesByIdResponse {
  _null: Boolean
  user: User
}

type GetCompaniesForAccountManagerRequest {
  accountManagerUserId: String!
  user: User
}

type GetCompaniesForAccountManagerResponse {
  companies: [Company!]
  user: User
}

type GetCompaniesForClientSupportSpecialistsRequest {
  clientSupportSpecialistUserIds: [String!]!
  user: User
}

type GetCompaniesForClientSupportSpecialistsResponse {
  companies: [Company!]
  user: User
}

type GetCompaniesRequest {
  after: String
  archived: Boolean
  first: Int
  ids: [String!]
  priorityIds: [String!]
  query: String
  types: [CompanyType!]
  user: User
}

type GetCompaniesResponse {
  connection: CompaniesConnection
  user: User
}

type GetCompanyGuestsRequest {
  companyId: String!
  locationIds: [String!]!
  registeredBetween: GuestDateRange
  user: User
}

type GetCompanyGuestsResponse {
  guests: [Guest!]
  user: User
}

type GetCompanyIngressesBatchResponse {
  _null: Boolean
  user: User
}

type GetCompanyOfficeAttendanceResponse {
  periods: [OfficeAttendancePeriod!]
}

type GetCompanyRequest {
  companyId: String!
  user: User
}

type GetCompanySizesRequest {
  _null: Boolean
  user: User
}

type GetCompanySizesResponse {
  companySizes: [CompanySize!]
  user: User
}

type GetCompanyTeamBatchResponse {
  _null: Boolean
  user: User
}

type GetCompanyTeamsByCompanyIdRequest {
  companyId: String!
  user: User
}

type GetCompanyTeamsByCompanyIdResponse {
  _null: Boolean
  user: User
}

type GetCompanyUsersRequest {
  user: User
  userIds: [String!]!
}

type GetCompanyUsersResponse {
  user: User
  users: [User!]
}

type GetCompanyWeeklyOfficeAttendanceResponse {
  weeklyAttendance: [DailyOfficeAttendance!]
}

type GetConfiguratorSessionResponse {
  session: ConfiguratorSession
}

type GetCultureValuesRequest {
  _null: Boolean
  user: User
}

type GetCultureValuesResponse {
  culureValues: [CultureValue!]
  user: User
}

type GetDealByClientCompanyIdResponse {
  _null: Boolean
  user: User
}

type GetDealFromBrokerSearchRequest {
  brokerSearchId: String!
  user: User
}

type GetDealFromBrokerSearchResponse {
  deal: Deal
  user: User
}

type GetDealInsightsResponse {
  stages: [DealPipelineStageInsight!]
}

type GetDealNotesRequest {
  dealId: String!
  ids: [String!]!
  user: User
}

type GetDealNotesResponse {
  notes: [Note!]
  user: User
}

type GetDealPipelineStagesBatchResponse {
  _null: Boolean
  user: User
}

type GetDealRequest {
  id: String!
  user: User
}

type GetDealResponse {
  deal: Deal
  user: User
}

type GetDealShortlistsBatchResponse {
  _null: Boolean
  user: User
}

type GetDealShortlistsRequest {
  dealId: String
  primaryBrokerContactId: String
  user: User
  userId: String
}

type GetDealShortlistsResponse {
  dealShortlists: [DealShortlist!]
  user: User
}

type GetDealsListRequest {
  after: String
  first: Int
  user: User
}

type GetDealSpaceMatchesRequest {
  dealId: String!
  user: User
}

type GetDealSpaceMatchesResponse {
  dealSpaceMatches: [DealSpaceMatch!]
  user: User
}

type GetDealSpaceMatchRequest {
  id: String!
  user: User
}

type GetDealSpaceMatchResponse {
  dealSpaceMatch: DealSpaceMatch
  user: User
}

type GetDealsRequest {
  filters: DealFilters
  ids: [String!]!
  limit: Int!
  order: DealOrder
  page: Int!
  stageId: String!
  stageIds: [String!]!
  user: User
}

type GetDealsResponse {
  deals: [Deal!]
  paginationData: DealPaginationData
  stages: [PipelineStage!]
  user: User
}

type GetDeploymentsResponse {
  deployments: [Deployment!]
}

type GetDeploymentStatusRequest {
  _null: Boolean
  user: User
}

type GetDeploymentStatusResponse {
  id: String!
  user: User
}

type GetDeskBookingsRequest {
  companyIds: [String!]
  startUtcMax: DateTime
  startUtcMin: DateTime
  user: User
}

type GetDeskBookingsResponse {
  bookings: [RoomOrDeskBooking!]
  user: User
}

type GetDetailsForUnitsResponse {
  annualAdvertisedPricePsfPennies: Int!
  annualBreakdown: AnnualPricingBreakdown
  annualBrokerFeesPsfPennies: Int!
  annualFitoutCostPsfPennies: Int!
  annualKittFeePsfPennies: Int!
  annualNetRentPsfPennies: Int!
  annualOpsCostPsfPennies: Int!
  annualServiceChargePsfPennies: Int!
  availabilityStatus: AvailabilityStatus
  brokerFeeLumpSumPennies: Int!
  combinedUnitsFitoutStatesDescription: String!
  combinedUnitsName: String!
  estimations: [EstimationType!]
  fitoutState: Unitsvc_UnitFitoutState

  """Does the detail response have pricing estimations in it?"""
  hasPricingEstimations: Boolean
  minTermMonths: Int!
  monthlyAdvertisedPricePennies: Int!
  monthlyBreakdown: MonthlyPricingBreakdown
  monthlyRatesPsfPennies: Int!
  productId: String!
  sqft: Int!
}

type GetDocumentResponse {
  document: Document
}

type GetDocumentsResponse {
  documents: [Document!]
}

type GetDocumentTypesResponse {
  documentTypes: [DocumentType!]
}

type GetEmailContentRequest {
  ids: [String!]!
  user: User
}

type GetEmailContentResponse {
  contentsList: [EmailContent!]
  user: User
}

type GetEmailRequest {
  id: String!
  user: User
}

type GetEmailResponse {
  email: Email
  user: User
}

type GetEmailsRequest {
  emailAddress: [String!]!
  gmailThreadId: [String!]!
  ids: [String!]!
  user: User
}

type GetEmailsResponse {
  _null: Boolean
  user: User
}

type GetEnquiriesPaginatedResponse {
  columnDetails: [EnquiryColumnDetails!]
  enquiries: [Enquiry!]
}

type GetEnquiryResponse {
  enquiry: Enquiry
}

type GetEntitiesForAmenityBatchRequest {
  requests: [GetEntitiesForAmenityRequest!]
  user: User
}

type GetEntitiesForAmenityRequest {
  amenityId: String!
  floorplanId: String!
  teamIds: [String!]!
  tenancyId: String!
  user: User
}

type GetEventRequest {
  id: String!
  user: User
}

type GetEventResponse {
  events: Event
  user: User
}

type GetEventsRequest {
  id: String!
  user: User
}

type GetEventsResponse {
  events: [Event!]
  user: User
}

type GetFacilityIconsRequest {
  _null: Boolean
  user: User
}

type GetFacilityIconsResponse {
  icons: [FacilityIcon!]
  user: User
}

type GetFavouritesResponse {
  productIds: [String!]!
}

type GetFieldsRequiredForNextStatusRequest {
  locationId: String!
  status: StatusOptional
  user: User
}

type GetFieldsRequiredForNextStatusResponse {
  requiredFields: LocationRequiredFields
  user: User
}

type GetFirstViewingActivitiesByUnitIdsBatchResponse {
  _null: Boolean
  user: User
}

type GetFloorplansForTenancyRequest {
  tenancyIds: [String!]
  user: User
}

type GetFloorplansForTenancyResponse {
  floorplans: [Floorplan!]
  user: User
}

type GetFloorplanZonesForTenancyResponse {
  floorplanZones: [TenancyFloorplanZone!]
}

type GetFloorplanZonesRequest {
  tenancyId: String!
  user: User
}

type GetFloorplanZonesResponse {
  user: User
  zones: [FloorplanZone!]
}

type GetGoogleAccessTokenRequest {
  user: User
  userId: String!
}

type GetGoogleAccessTokenResponse {
  accessToken: String!
  scopes: [String!]!
  user: User
}

type GetGuestAccessesRequest {
  token: String!
  user: User
}

type GetGuestAccessesResponse {
  accessId: [String!]!
  accesses: [Access]
  user: User
}

type GetGuestRequest {
  guestId: String
  token: String
  user: User
}

type GetGuestResponse {
  guest: Guest
  user: User
}

type GetGuestsBatchResponse {
  _null: Boolean
  user: User
}

type GetGuestsRequest {
  locationIds: [String!]!
  registeredBetween: GuestDateRange
  user: User
}

type GetGuestsResponse {
  guests: [Guest!]
  user: User
}

type GetHasUserReadNotificationResponse {
  _null: Boolean
  user: User
}

type GetHybridWorkInformationRequest {
  companyId: String!
  user: User
}

type GetHybridWorkInformationResponse {
  companyId: String!
  inputs: [PolicyInput!]
  user: User
}

type GetIndexKeyResponse {
  appId: String!
  key: String!
}

type GetIndustriesRequest {
  _null: Boolean
  user: User
}

type GetIndustriesResponse {
  industries: [Industry!]
  user: User
}

type GetIndustryInsightsResponse {
  currentCompanyPercentages: WeekdayInsights
  industryCompanyWithHighestPolicySuccessRate: String!
  industryPercentages: WeekdayInsights
  mostSuccessfulAttendancePolicy: AttendancePoliciesList
}

type GetIssueCategoriesResponse {
  categories: [IssueCategory!]
}

type GetIssuePrioritiesResponse {
  priorities: [IssuePriority!]
}

type GetIssueResponse {
  issue: Issue
}

type GetIssueStatusesResponse {
  statuses: [IssueStatus!]
}

type GetIssueUpdatesResponse {
  updates: [IssueUpdate!]
}

type GetIssueUpdateWorkflowsResponse {
  templates: [IssueUpdateWorkflow!]
}

type GetKittTemplateForEntityGroupRequest {
  entityIds: [String!]!
  user: User
}

type GetKittTemplateForEntityGroupResponse {
  brochures: [Brochure!]
  user: User
}

type GetLeadSourcesRequest {
  _null: Boolean
  user: User
}

type GetLeadSourcesResponse {
  sources: [LeadSource!]
  user: User
}

type GetLocationFacilitiesRequest {
  _null: Boolean
  user: User
}

type GetLocationFacilitiesResponse {
  facilities: [LocationFacility!]
  user: User
}

type GetLocationFinancialModelBatchResponse {
  _null: Boolean
  user: User
}

type GetLocationFinancialModelResponse {
  financialModel: LocationFinancialModel
  user: User
}

type GetLocationRequest {
  id: String
  user: User
}

type GetLocationResponse {
  location: Location
  user: User
}

type GetLocationScrapedStatusResponse {
  _null: Boolean
  user: User
}

type GetLocationSellingPointsRequest {
  _null: Boolean
  user: User
}

type GetLocationSellingPointsResponse {
  sellingPoints: [LocationSellingPoint!]
  user: User
}

enum GetLocationsFilterOperand {
  AND
  INVALID
  OR
}

type GetLocationsPaginatedResponse {
  locations: LocationsConnection
  user: User
  viewport: LocationViewport
}

type GetLocationsRequest {
  address: Address
  after: String
  archived: Boolean
  descending: Boolean
  facilityIds: [String!]
  first: Int
  hideExistingOffer: Boolean
  ids: [String!]
  includeArchived: Boolean
  isKittChoice: Boolean
  onMarket: Boolean
  onlyLiveOnSearch: Boolean
  onlyVisibleOnWebsite: Boolean
  polygonArray: [Coordinate!]
  potentialProductFilters: PotentialProductFilters
  productFilters: LocationProductFilters
  publishedState: Boolean
  qualifiedBetween: DateRange
  query: String
  sortBy: LocationSortBy
  sortByCoordinates: Coordinate
  statuses: [LocationStatus!]
  unitFilters: UnitFilters
  unqualified: Boolean
  unverified: Boolean
  user: User
  verifiedBetween: DateRange
}

type GetLostReasonsRequest {
  _null: Boolean
  user: User
}

type GetLostReasonsResponse {
  lostReasons: [LostReason!]
  user: User
}

type GetManyProfilesBatchResponse {
  _null: Boolean
  user: User
}

type GetMarketingContentResponse {
  marketingContent: MarketingContent
}

type GetMarketingContentsResponse {
  _null: Boolean
}

type GetMatchedSpacesRequest {
  dealId: String!
  includeDeleted: Boolean!
  requirementsId: String!
  user: User
}

type GetMatchedSpacesResponse {
  matches: [MatchedSpace!]
  user: User
}

type GetMeanAgeForCompanyResponse {
  meanAge: Int!
}

type GetMessagesByChatIdResponse {
  _null: Boolean
  user: User
}

type GetMessagesInThread {
  parentMessageId: String!
  user: User
}

type GetMessagesInThreadResponse {
  messages: [ChatMessage!]
  user: User
}

type GetMessagesRequest {
  chatId: String!
  user: User
}

type GetMessagesResponse {
  messages: [ChatMessage!]
  user: User
}

type GetMinSafeCapacityRequest {
  _null: Boolean
  user: User
}

type GetMinSafeCapacityResponse {
  minSafeCapacity: Int!
  user: User
}

type GetModelResponse {
  model: String!
}

type GetMyAttendancePolicyRequest {
  _null: Boolean
  user: User
}

type GetMyAttendancePolicyResponse {
  policy: AttendancePoliciesList
  user: User
}

type GetMyBookingsPaginatedRequest {
  after: String
  afterDate: Timestamp
  ascending: Boolean
  beforeDate: Timestamp
  first: Int
  ids: [String!]
  includeOngoing: Boolean
  query: String
  sortBy: BookingSortBy
  user: User
}

type GetMyBookingsRequest {
  _null: Boolean
  user: User
}

type GetMyCompanyDesksRequest {
  tenancyIds: [String!]!
  user: User
}

type GetMyCompanyDesksResponse {
  desks: [Desk!]
  user: User
}

type GetMyCompanyEnquiriesResponse {
  count: Int!
  edges: [EnquiryEdge!]
  pageInfo: PageInfo
}

type GetMyDeskBookingsRequest {
  after: String
  end: DateTime
  first: Int
  start: DateTime
  user: User
}

type GetMyGuestsPaginated {
  after: String
  first: Int
  user: User
  visitAfter: Timestamp
  visitBefore: Timestamp
}

type GetMyNotificationPreferencesRequest {
  metadata: [NotificationPreferenceMetadata!]
  user: User
}

type GetMyNotificationPreferencesResponse {
  preferences: [Preference!]
  user: User
}

type GetMyOfficeAttendanceResponse {
  attendances: Int!
  attendeeUserIds: [String!]!
  attendees: [User]
  capacity: Int!
}

type GetMyRoomBookingsRequest {
  after: String
  end: DateTime
  first: Int
  roomIds: [String!]
  start: DateTime
  user: User
}

type GetMyRoomsRequest {
  roomIds: [String!]
  user: User
}

type GetNoteRequest {
  noteId: String!
  user: User
}

type GetNoteResponse {
  note: Note
  user: User
}

type GetNotesBatchResponse {
  _null: Boolean
  user: User
}

type GetNotificationsPaginatedRequest {
  after: String
  first: Int
  ids: [String!]
  orderByUnread: Boolean
  query: String
  user: User
}

type GetNotificationsRequest {
  limit: Int!
  offset: Int!
  onlyUnread: Boolean
  user: User
}

type GetNotificationsResponse {
  notifications: [Notification!]
  user: User
}

type GetNumberOfUsersInCompanyResponse {
  _null: Boolean
  user: User
}

type GetOfficeAttendanceResponse {
  attendeeUserIds: [String!]!
}

type GetOfficeInsightsResponse {
  alignmentRates: PolicySuccessRates
  capacityInsights: CapacityInsights
  mandatoryWeekdaysSatisfiedRates: PolicySuccessRates
  meanDaysInPerWeekInsights: MeanDaysInPerWeekInsights
  rawInsights: RawInsights
  requiredDaysInTimeframeSatisfiedRates: PolicySuccessRates
  weekdayInsights: WeekdayInsights
}

type GetOfficeValuesRequest {
  _null: Boolean
  user: User
}

type GetOfficeValuesResponse {
  officeValues: [OfficeValue!]
  user: User
}

type GetOrderCategoriesResponse {
  categories: [OrderCategory!]
}

type GetOrderedPrioritiesResponse {
  priorities: [Priority!]
  user: User
}

type GetOrderedUsersResponse {
  user: User
  users: [User!]
}

type GetPermissionKeysResponse {
  permissions: [String!]!
}

type GetPermissionsResponse {
  permission: [Permission!]
}

type GetPhoneNumbersRequest {
  accessIds: [String!]!
  user: User
}

type GetPhoneNumbersResponse {
  phoneNumbers: [PhoneNumber!]
  user: User
}

type GetPhotoRequest {
  accessId: String!
  user: User
}

type GetPhotoResponse {
  photo: String!
  user: User
}

type GetPipelineStagesBatchResponse {
  _null: Boolean
  user: User
}

type GetPlaceResponse {
  place: Place
}

type GetPlacesResponse {
  _null: Boolean
}

type GetPoliciesResponse {
  casbinPolicyLineFormat: [String!]!
}

type GetPreviewRequest {
  attachmentId: String!
  color: Boolean!
  landscape: Boolean!
  size: String!
  user: User
}

type GetPreviewResponse {
  attachmentId: String!
  message: String!
  status: Boolean!
  user: User
}

type GetPricingRequest {
  overrideMinTermMonths: Int
  tierInputs: TierInputs
  unitIds: [String!]!
  user: User
}

type GetPricingResponse {
  allPermutations: [Pricing!]
  fixedPricing: Pricing
  maxPricing: Pricing
  minPricing: Pricing
  specifiedPricing: Pricing
  user: User
}

type GetPricingsBatchRequest {
  getPricingRequests: [GetPricingRequest!]
  user: User
}

type GetPricingsBatchResponse {
  _null: Boolean
  user: User
}

type GetPrintersRequest {
  printerIds: [String!]!
  user: User
}

type GetPrintersResponse {
  _null: Boolean
  user: User
}

type GetPrioritiesRequest {
  _null: Boolean
  user: User
}

type GetPrioritiesResponse {
  _null: Boolean
  user: User
}

type GetProductResponse {
  product: Product
}

type GetProductsResponse {
  filterOptions: ProductFilterOptions
  products: ProductsConnection
  viewport: ProductViewport
}

type GetProfileForEmailRequest {
  email: String!
  user: User
}

type GetProfileRequest {
  id: String
  user: User
  userId: String
}

type GetProfileResponse {
  profile: Profile
  user: User
}

type GetProfilesBatchResponse {
  _null: Boolean
  user: User
}

type GetProfilesListRequest {
  after: String
  companyId: String
  first: Int
  ids: [String!]
  query: String
  tags: [String!]
  user: User
  userIds: [String!]
}

type GetProfilesRequest {
  companyId: String
  companyIds: [String!]
  ids: [String!]
  limit: Int
  query: String
  tags: [String!]
  user: User
  userIds: [String!]
}

type GetProfilesResponse {
  allProfiles: [Profile!]
  user: User
}

type GetPurchaseResponse {
  purchase: Purchase
}

type GetQueueRequest {
  user: User
  userId: String!
}

type GetQueueResponse {
  queue: String!
  user: User
}

type GetQuietestDayOfTheWeekResponse {
  day: String!
}

type GetReadinessStateRequest {
  _null: Boolean
  user: User
}

type GetReadinessStateResponse {
  state: ReadyStatus
  user: User
}

type GetReadMessageUsersResponse {
  _null: Boolean
  user: User
}

type GetRequestRequest {
  id: String!
  user: User
}

type GetRequestResponse {
  request: Request
  user: User
}

type GetRequestsRequest {
  assigneeIds: [String!]
  categories: [String!]
  ids: [String!]
  ignoreStatuses: [String!]
  includeArchived: Boolean
  locationIds: [String!]
  onlyArchived: Boolean
  page: Int
  priorities: [String!]
  query: String
  reporters: [String!]
  scheduledForDay: String
  sortBy: String
  status: String
  statuses: [String!]
  techRequest: Boolean
  unassigned: Boolean
  unitIds: [String!]
  user: User
}

type GetRequestsResponse {
  pages: Int!
  requests: [Request!]
  total: Int!
  user: User
}

type GetRoomAvailabilityRequest {
  date: Timestamp
  duration: Int!
  roomId: String!
  user: User
}

type GetRoomAvailabilityResponse {
  slots: [Interval!]
  user: User
}

type GetRoomBookingsRequest {
  after: String
  end: DateTime
  filterToMyCompany: Boolean
  first: Int
  roomIds: [String!]
  start: DateTime
  user: User
}

type GetRoomByIdRequest {
  id: String!
  user: User
}

type GetRoomRequest {
  roomId: String!
  user: User
}

type GetRoomsPaginatedRequest {
  after: String
  first: Int
  query: String
  user: User
}

type GetRoomsRequest {
  companyId: String!
  locationId: String!
  user: User
  userId: String!
}

type GetRoomsResponse {
  myRooms: [Room!]
  user: User
}

type GetSalesTeamRequest {
  brokerCompanyId: String
  id: String
  user: User
}

type GetSalesTeamResponse {
  salesTeam: SalesTeam
  user: User
}

type GetSalesTeamsBatchResponse {
  _null: Boolean
  user: User
}

type GetSchedulesResponse {
  scheduleList: [Schedule!]
}

type GetSearchRequirementsRequest {
  id: String
  user: User
}

type GetSearchRequirementsResponse {
  searchRequirements: SearchRequirements
  user: User
}

type GetSelectionFromUnitGroupIdRequest {
  brokerSearchId: String
  unitGroupId: String!
  user: User
}

type GetSelectionsBatchResponse {
  _null: Boolean
  user: User
}

type GetSelectionsFromUnitGroupIdsBatchResponse {
  _null: Boolean
  user: User
}

type GetServiceActivitiesResponse {
  edges: [ServiceActivityEdge!]
  pageInfo: PageInfo
}

type GetSessionRequest {
  id: String!
  user: User
}

type GetSessionResponse {
  session: Session
  user: User
}

type GetSessionsRequest {
  accessId: String!
  answeredOnly: Boolean!
  excludeAnswered: Boolean!
  inLastMinutes: Int!
  includeEnded: Boolean!
  limit: Int!
  page: Int!
  user: User
}

type GetSessionsResponse {
  hasNextPage: Boolean!
  numOfPages: Int!
  page: Int!
  sessions: [Session!]
  user: User
}

type GetSettingsRequest {
  locationId: String!
  user: User
  userId: String!
}

type GetSettingsResponse {
  color: String!
  printer: Printer
  user: User
}

type GetSharedInboxesRequest {
  _null: Boolean
  user: User
}

type GetSharedInboxesResponse {
  emailAddress: [String!]!
  user: User
}

type GetShortlistRequest {
  id: String!
  user: User
}

type GetShortlistResponse {
  shortlist: Shortlist
  user: User
}

type GetShortlistSummaryRequest {
  id: String!
  user: User
}

type GetShortlistSummaryResponse {
  summary: ShortlistSummary
  user: User
}

type GetSpaceMatchLocationsResponse {
  edges: [LocationSpaceMatchEdge!]
  pageInfo: PageInfo
  user: User
}

type GetStagesRequest {
  _null: Boolean
  user: User
}

type GetStagesResponse {
  stages: [PipelineStage!]
  user: User
}

type GetStatusesRequest {
  alarmIds: [String!]!
  user: User
}

type GetStatusesResponse {
  _null: Boolean
  user: User
}

type GetStatusRequest {
  alarmId: String!
  user: User
}

type GetStatusResponse {
  armed: Boolean!
  user: User
}

type GetSubscribedCategoryGroupsForTenancyResponse {
  categoryGroups: [CategoryGroup!]
}

type GetTemplateBrochureBatchResponse {
  _null: Boolean
  user: User
}

type GetTemplateRequest {
  id: String!
  user: User
}

type GetTemplateResponse {
  template: Template
  user: User
}

type GetTemplatesRequest {
  createdBy: [String!]!
  ids: [String!]!
  query: String!
  tags: [String!]!
  types: [TemplateType!]
  user: User
}

type GetTemplatesResponse {
  templates: [Template!]
  user: User
}

type GetTenanciesList {
  tenancies: [Tenancy!]
}

type GetTenanciesResponse {
  tenancies: [Tenancy!]
}

type GetTenancyFinancialModelResponse {
  financialModel: TenancyFinancialModel
}

type GetTenancyResponse {
  tenancy: Tenancy
}

type GetTenantPrioritiesRequest {
  _null: Boolean
  user: User
}

type GetTenantPrioritiesResponse {
  priorities: [TenantPriority!]
  user: User
}

type GetThreadDealsRequest {
  threadIds: [String!]!
  user: User
}

type GetThreadDealsResponse {
  _null: Boolean
  user: User
}

type GetThreadResponse {
  _null: Boolean
  user: User
}

type GetThreadsResponse {
  threadList: [Thread!]
}

type GetTimelineStageCountsResponse {
  counts: [TimelineStageCount!]
}

type GetTotalDesksForTeamBatchRequest {
  requests: [GetTotalDesksForTeamRequest!]
  user: User
}

type GetTotalDesksForTeamRequest {
  floorplanId: String!
  teamId: String!
  user: User
}

type GetTrainStationsForLocationRequest {
  locationId: String!
  user: User
}

type GetTrainStationsForLocationResponse {
  stations: [LocationStation!]
  user: User
}

type GetUnitFinancialModelResponse {
  financialModel: UnitFinancialModel
}

type GetUnitResponse {
  unit: Unit
}

type GetUnitsForBuildingsBatchResponse {
  _null: Boolean
  user: User
}

type GetUnitsResponse {
  combinationDetails: CombinationDetails
  location: Location
  metaData: FilterOptions
  paginationData: PaginationData
  pricing(overrideMinTermMonths: Int = 0): GetPricingResponse
  unitGroupDetails(overrideMinTermMonths: Int = 0, estimatePrice: Boolean = false): GetDetailsForUnitsResponse
  units: [Unit!]
}

type GetUnitTenanciesResponse {
  _null: Boolean
}

type GetUnreadMessageCountResponse {
  _null: Boolean
  user: User
}

type GetUnreadMessagesRequest {
  chatIds: [String!]!
  limit: Int
  user: User
  userIds: [String!]!
}

type GetUploadRequest {
  height: Int
  id: String!
  quality: Int
  user: User
  width: Int
}

type GetUploadResponse {
  upload: UploadMessage
  user: User
}

type GetUploadsBatchRequest {
  reqs: [GetUploadRequest!]
  user: User
}

type GetUploadsBatchResponse {
  _null: Boolean
  user: User
}

type GetUploadsRequest {
  ids: [String!]!
  user: User
}

type GetUploadsResponse {
  _null: Boolean
  user: User
}

type GetUserBrokerSearchesRequest {
  user: User
  userId: String
}

type GetUserBrokerSearchesResponse {
  searches: [BrokerSearch!]
  user: User
}

type GetUserIdRequest {
  queue: String!
  user: User
}

type GetUserIdResponse {
  user: User
  userId: String!
}

type GetUserIdsWithNoTeamRequest {
  _null: Boolean
  user: User
}

type GetUserIdsWithNoTeamResponse {
  user: User
  userIds: [String!]!
}

type GetUserRequest {
  cookie: String!
  id: String!
  user: User
  verificationToken: String!
}

type GetUsersByCompanyIdResponse {
  _null: Boolean
  user: User
}

type GetUsersByIdResponse {
  _null: Boolean
  user: User
}

type GetUserShortlistsRequest {
  containingUnitGroupIds: [String!]
  descending: Boolean
  excludeUnitGroupIds: [String!]
  first: Int
  includeShortlistsByProfileId: String
  onlyArchived: Boolean
  onlyShared: Boolean
  onlyUserMade: Boolean
  page: Int
  query: String
  sortBy: String
  user: User
}

type GetUserShortlistsResponse {
  shortlists: ShortlistConnection
  user: User
}

type GetUsersRequest {
  companyIds: [String!]!
  cookie: String!
  emails: [String!]!
  ids: [String!]!
  query: String!
  user: User
}

type GetUsersResponse {
  _null: Boolean
  user: User
}

type GetUsersUnreadChatMessagesRequest {
  _null: Boolean
  user: User
}

type GetUsersUnreadChatMessagesResponse {
  _null: Boolean
  user: User
}

type GetUserViewingRequestsRequest {
  onlyUpcoming: Boolean
  user: User
}

type GetUserViewingRequestsResponse {
  user: User
  viewingRequests: [ShortlistViewingRequest!]
}

type GetUserViewingsRequest {
  includeViewingsByProfileId: String
  user: User
}

type GetUserViewingsResponse {
  user: User
  viewings: [Activity!]
}

type GetVersionedDocumentsResponse {
  versionedDocuments: [VersionedDocument!]
}

type GetVideoTokenRequest {
  accessId: String!
  user: User
}

type GetVideoTokenResponse {
  token: String!
  user: User
}

type GetViewingRequestsForShortlistRequest {
  shortlistId: String!
  user: User
}

type GetViewingRequestsForShortlistResponse {
  user: User
  viewingRequests: [ViewingRequest!]
}

type GetViewingsForShortlistBatchResponse {
  _null: Boolean
  user: User
}

type GetWebhookRequest {
  from: String!
  path: String!
  recordingUrl: String!
  to: String!
  user: User
}

type GetWebhookResponse {
  response: String!
  user: User
}

type GetWhitelistedCompanyForEmailRequest {
  email: String!
  user: User
}

type GetWhitelistedCompanyForEmailResponse {
  company: Company
  user: User
}

type GetWorkplaceGoalsRequest {
  _null: Boolean
  user: User
}

type GetWorkplaceGoalsResponse {
  user: User
  workplaceGoals: [WorkplaceGoal!]
}

type GetWorkspaceStatusesRequest {
  _null: Boolean
  user: User
}

type GetWorkspaceStatusesResponse {
  user: User
  workspaceStatuses: [WorkspaceStatus!]
}

type GoogleLoginRequest {
  code: String!
  redirectUrl: String!
  user: User
}

type GoogleLoginResponse {
  token: String!
  user: User
}

enum GreySpace {
  CAT_A
  CAT_B_GREY
  CAT_B_NEW
}

input GreySpaceOptionalInput {
  greySpace: GreySpace
}

type Guest {
  accessIds: [String!]!
  accesses: [Access]
  checkedInAt: Timestamp
  date: Timestamp
  dateUtc: DateTime
  email: String!
  expiryDateUtc: DateTime
  id: String!
  location: Location
  locationId: String!
  name: String!
  note: String!
  permissionExpiry: Timestamp
  permissionExpiryActual: Timestamp
  requester: User
  requesterCompanyId: String!
  requesterId: String!
  token: String!
  user: User
}

type GuestArrived {
  accessId: String!
  id: String!
  locationId: String!
  name: String!
  requesterId: String!
  user: User
}

type GuestArrivedCommand {
  accessId: String
  guestId: String!
  user: User
}

type GuestConnection {
  edges: [GuestEdge!]
  pageInfo: PageInfo
  user: User
}

type GuestDateRange {
  end: Timestamp
  start: Timestamp
  user: User
}

input GuestDateRangeInput {
  start: TimestampInput
  end: TimestampInput
}

type GuestDayPassResent {
  guestId: String!
  user: User
}

type GuestDeleted {
  guestId: String!
  user: User
}

type GuestEdge {
  cursor: String!
  node: Guest
  user: User
}

type GuestRegistered {
  accessIds: [String!]!
  accesses: [Access]
  date: Timestamp
  dateUtc: DateTime
  email: String!
  expiryDate: Timestamp
  expiryDateUtc: DateTime
  id: String!
  locationId: String!
  name: String!
  note: String!
  token: String!
  user: User
}

type Holiday {
  bunting: Boolean
  date: Date
  name: String
  notes: String
}

type HuddleUsersChased {
  oneWeekOldUsers: [User!]
  twoWeeksOldUsers: [User!]
  user: User
}

type HybridWorkInformationSaved {
  inputs: [PolicyInput!]
  user: User
}

type IndexRebuilt {
  index: String!
}

type Industry {
  id: String!
  text: String!
  user: User
}

type IndustryCreated {
  id: String!
  text: String!
  user: User
}

type IndustryDeleted {
  id: String!
  text: String!
  user: User
}

input IndustryInput {
  id: String!
  text: String!
}

type IngestFloorplan {
  json: String!
  name: String
  tenancyId: String!
  user: User
}

type Int32OptionalRange {
  max: Int
  min: Int
}

input Int32OptionalRangeInput {
  min: Int
  max: Int
}

type IntercomPressed {
  AccessId: String!
  SessionId: String!
  user: User
}

type Interval {
  end: ISOString
  start: ISOString
  user: User
}

type ISOString {
  ISOString: String!
  user: User
}

type Issue {
  addon: Addon
  archivedAt: Timestamp
  assigneeUser: User
  category: IssueCategory
  chat: Chat
  chatId: String!
  closureSlaUtc: DateTime
  contractorAssigneeUser: User
  contractorCompanies: [Company] @deprecated(reason: "Use contractorAssigneeUser")
  coordinator: User
  createdAt: Timestamp
  createdByUser: User
  createdByUserId: String!
  data: IssueMutableData
  deletedAt: Timestamp
  displayId: String!
  externalChat: Chat
  externalChatId: String!
  feedback: Feedback
  firstNextStepSlaUtc: DateTime
  id: String!
  location: Location
  nextStep: IssueUpdate
  order: Order
  orderCategory: OrderCategory
  previousStatus: IssueStatus
  priority: IssuePriority
  priorityStatus: String!
  purchaseOrderNumber: String!
  raisedByChat: Chat
  raisedByUser: User
  relevantSla: RelevantSla
  status: IssueStatus
  statusUpdates: [IssueStatusUpdate]
  subjectCompany: Company
  tenancyFloorplanZone: TenancyFloorplanZone
  units: [Unit]
  updatedAt: Timestamp
  uploadIds: [String!]!
  uploads: [UploadMessage]
  url: String!
  visits: [Visit]

  """Get all the users that are watching this issue"""
  watchers: [User]
}

type IssueArchived {
  id: String!
  issue: Issue
}

type IssueCategory {
  id: String!
  name: String!
  priorityId: String!
}

type IssueClosed {
  id: String!
  issue: Issue
}

type IssueCreated {
  issue: Issue
}

type IssueDeleted {
  id: String!
  issue: Issue
}

type IssueEdge {
  cursor: String!
  node: Issue
}

input IssueFiltersInput {
  onlyArchived: Boolean
  watcherIds: [String!]
  detailIncludes: String
  cssOwnerIds: [String!]
  locationIds: [String!]
  categoryIds: [String!]
  priorities: [String!]
  unitIds: [String!]
  summaryIncludes: String
  createdAfter: TimestampInput
  purchaseOrderNumbers: [String!]
  createdBefore: TimestampInput
  statuses: [String!]
  includeDeleted: Boolean
  includeArchived: Boolean
  coordinatorUserIds: [String!]
  contractorAssigneeUserId: String
  assigneeIds: [String!]
  companyIds: [String!]
  onlyTenantVisible: Boolean
}

type IssueMutableData {
  addonId: String
  assigneeUserId: String
  categoryId: String
  contractorAssigneeUserId: String
  contractorCompanyId: String
  contractorCompanyIds: [String!]
  coordinatorUserId: String
  cost: String
  costOwner: CostOwner
  daysUntilSla: Int
  detail: String
  dueDate: Timestamp
  hideFromTenant: Boolean
  icon: String
  locationId: String
  orderCategoryId: String
  orderId: String
  priorityId: String
  proactive: Boolean
  purchaseOrderNumber: String
  raisedByChatId: String
  raisedByUserId: String
  snagging: Boolean
  statusId: String
  subjectCompanyId: String
  summary: String
  tenancyFloorplanZoneId: String
  unitIds: [String!]
  updates: [IssueUpdate!]
  uploadIds: [String!]
  watcherUserIds: [String!]
}

input IssueMutableDataInput {
  uploadIds: [String!]
  contractorCompanyIds: [String!]
  costOwner: CostOwner
  orderId: String
  cost: String
  unitIds: [String!]
  orderCategoryId: String
  hideFromTenant: Boolean
  categoryId: String
  addonId: String
  detail: String
  dueDate: TimestampInput
  locationId: String
  daysUntilSla: Int
  statusId: String
  contractorCompanyId: String
  watcherUserIds: [String!]
  raisedByUserId: String
  subjectCompanyId: String
  proactive: Boolean
  assigneeUserId: String
  raisedByChatId: String
  coordinatorUserId: String
  summary: String
  icon: String
  purchaseOrderNumber: String
  updates: [IssueUpdateInput!]
  contractorAssigneeUserId: String
  tenancyFloorplanZoneId: String
  priorityId: String
  snagging: Boolean
}

type IssuePriority {
  id: String!
  name: String!
  sla: Int!
}

type IssueReOpened {
  id: String!
  issue: Issue
}

type IssuesConnection {
  edges: [IssueEdge!]
  newIssues: Int!
  openIssues: Int!
  pageInfo: PageInfo
}

enum IssuesSortBy {
  RelevantSlaAsc
  RelevantSlaDesc
}

type IssueStatus {
  id: String!
  name: String!
}

type IssueStatusUpdate {
  createdAt: Timestamp
  deletedAt: Timestamp
  id: String!
  issueId: String!
  statusId: String!
}

type IssueUpdate {
  completedAt: Date
  createdAt: Timestamp
  dueDate: Timestamp
  hideFromTenant: Boolean!
  id: String
  isComplete: Boolean
  owner: User
  ownerUserId: String
  text: String!
  title: String!
  type: IssueUpdateType
}

type IssueUpdateCreated {
  createdAt: Timestamp
  id: String!
  issueId: String!
  text: String!
  title: String!
}

type IssueUpdated {
  changelogJson: String!
  changes: [KeyValuePair!]
  id: String!
  issue: Issue
  newContractorAssigneeUserId: String!
  newNextStepOwners: [String!]!
  watcherIds: [String!]!
}

type IssueUpdateDeleted {
  id: String!
}

input IssueUpdateInput {
  isComplete: Boolean
  type: IssueUpdateType
  dueDate: TimestampInput
  title: String!
  createdAt: TimestampInput
  id: String
  ownerUserId: String
  hideFromTenant: Boolean!
  completedAt: DateInput
  text: String!
}

enum IssueUpdateOwnerFetchKey {
  FromCSSAssignee
}

enum IssueUpdateType {
  Default
  SubmitForReview
}

type IssueUpdateUpdated {
  id: String!
  text: String!
  title: String!
  update: IssueUpdate
}

type IssueUpdateWorkflow {
  templateName: String!
  updateDueSecondsFromNow: Int
  updateHideFromTenant: Boolean!
  updateOwnerFetchKey: IssueUpdateOwnerFetchKey
  updateText: String!
  updateTitle: String!
  updateType: IssueUpdateType
}

type IssueUploadDeleted {
  issue: Issue
  issueId: String!
  uploadId: String!
}

type IssueUploadsCleared {
  issue: Issue
  issueId: String!
}

"""The `JSON` scalar type represents JSON values"""
scalar JSON

type KeyValuePair {
  key: String!
  value: String!
}

type KitchenSinkSent {
  _null: Boolean
  user: User
}

type LandlordFinancials {
  definedServicesRollback: Boolean!
  legalEntity: String!
  user: User
  whoCollectsRent: CompanyType
  whoProcuresFitout: CompanyType
}

input LandlordFinancialsInput {
  legalEntity: String!
  definedServicesRollback: Boolean!
  whoCollectsRent: CompanyType
  whoProcuresFitout: CompanyType
}

type LeadSource {
  id: String!
  text: String!
  user: User
}

type LeadTenantsRemindedAboutIssue {
  issueId: String!
}

enum LeadType {
  DIRECT_LEAD_TYPE
  RENEWAL_LEAD_TYPE
  UNKNOWN_LEAD_TYPE
  BROKER_LEAD_TYPE
}

type LineItem {
  id: String!
  orderId: String!
  pause: LineItemPause
  product: OrderProduct
  productId: String!
  quantity: Int!
}

input LineItemInputInput {
  quantity: Int!
  description: String
  productId: String!
}

type LineItemPause {
  dateRange: DateRange
  id: String!
  lineItemId: String!
  reason: String!
}

type LineItemPauseCreated {
  lineItemPause: LineItemPause
}

type LineItemPauseDeleted {
  lineItemPauseId: String!
}

enum LineMode {
  OVERGROUND
  TUBE
  UNKNOWN_LINE_MODE
  DLR
  ELIZABETH_LINE
  NATIONAL_RAIL
}

type ListedBuildingsDatasetCreated {
  count: Int!
  user: User
}

type ListedLocationsCheckedAndUpdated {
  countPotentiallyListed: Int!
  user: User
}

type ListenForEmailsCommand {
  user: User
  userId: String!
}

type ListeningForEmails {
  user: User
  userId: String!
}

type Location {
  accessNotes: String!
  activeTenancies: GetTenanciesList
  address: Address
  agencies: [Company]
  agentProfileIds: [String!]!
  approvedToMarketAt: Timestamp
  archivedAt: Timestamp
  area: [Boundary]
  buildingUnits: [BuildingUnit]
  content: JSON
  coordinates: Coordinate
  createdAt: Timestamp
  currencyCode: String!
  data: LocationMutableData
  deletedAt: Timestamp
  displayId: String!
  displayOnWebsite: Boolean!
  facilities: [LocationFacility!]
  facilityIds: [String!]!
  financialData: LocationMutableFinancialModel
  financialModel: LocationFinancialModel
  googleDriveFileId: String!
  googleDriveFileLink: String!
  id: String!
  isKittChoice: Boolean!
  isLiveOnSearch: Boolean
  isRiskWarning: Boolean!
  kittTemplateBrochure: GetKittTemplateForEntityGroupResponse
  landlordCompany: Company @deprecated(reason: "Use landlordProfile instead")
  landlordCompanyId: String!
  landlordCoversEntireFitout: Boolean
  landlordProfile: Profile
  landlordProfileId: String!
  locationAgencies: [LocationAgency!]
  locationSourceUrls: [LocationSourceUrl!]
  marketingContent: MarketingContent
  name: String!
  notes: String!
  onboardedAt: Timestamp
  primaryAccessMethod: String!
  primaryAccessMethodType: AccessMethodOptional
  productDetails: LocationProductDetails
  products: [Product]
  qualifiedAt: Timestamp
  qualifiedByUser: User
  qualifiedByUserId: String!
  requiredFields: LocationRequiredFields
  salesBlurb: String!
  scrapedStatus: ScrapedStatus
  sellingPointIds: [String!]
  sellingPoints: [LocationSellingPoint]
  spacePartner: User
  spacePartnerId: String!
  status: LocationStatus
  strapiLocationUrl: String
  surveyPhotoUploadIds: [String!]!
  surveyPhotos(quality: Int = 0, width: Int = 0, height: Int = 0): [UploadMessage]
  templateBrochure: Brochure
  templateBrochureId: String
  tflStopTypes(radius: Int = 1500, limit: Int = 10): tflStopTypes @deprecated(reason: "use trainStations instead")
  timezoneId: String
  trainStations: [LocationStation]
  traits: [BuildingTrait!]
  units(includeArchived: Boolean = false): UnitsByLocation
  updatedAt: Timestamp
  urls: [String!]!
  user: User
  verifiedAt: Timestamp
  verifiedByUser: User
  verifiedByUserId: String!
  virtualTourLinks: [String!]!
}

type LocationAgency {
  agencyCompanyId: String!
  locationId: String!
  user: User
}

input LocationAgencyInput {
  locationId: String!
  agencyCompanyId: String!
}

type LocationArchived {
  location: Location
  user: User
}

type LocationCreated {
  locationId: String!
  name: String!
  user: User
  userId: String!
}

type LocationDateRange {
  max: Timestamp
  min: Timestamp
  user: User
}

input LocationDateRangeInput {
  min: TimestampInput
  max: TimestampInput
}

type LocationDeleted {
  location: Location
  user: User
}

type LocationDisqualified {
  location: Location
  user: User
}

type LocationEdge {
  cursor: String!
  node: Location
  user: User
}

type LocationEdited {
  location: Location
  unitIds: [String!]!
  user: User
}

type LocationFacility {
  icon: UploadMessage
  iconUploadId: String!
  id: String!
  name: String!
  rank: Int!
  user: User
}

type LocationFacilityCreated {
  facility: LocationFacility
  user: User
}

type LocationFinancialModel {
  aflUsed: Boolean!
  agentSetUp: AgentSetUp
  bidLevy: Boolean!
  buildingInsurance: LocationMoney
  buildingInsuranceRenewalDate: Timestamp
  serviceCharge: LocationMoney
  serviceChargeYearEnd: Timestamp
  user: User
  utilitiesRechargedFromLandlord: Boolean!
  withinCityOfLondon: Boolean!
}

type LocationFinancialModelMutation {
  aflUsed: Boolean
  agentSetUp: AgentSetUpOptional
  bidLevy: Boolean
  buildingInsurancePennies: Int
  buildingInsuranceRenewalDate: Timestamp
  serviceChargePennies: Int
  serviceChargeYearEnd: Timestamp
  user: User
  utilitiesRechargedFromLandlord: Boolean
  withinCityOfLondon: Boolean
}

input LocationFinancialModelMutationInput {
  serviceChargeYearEnd: TimestampInput
  withinCityOfLondon: Boolean
  bidLevy: Boolean
  agentSetUp: AgentSetUpOptionalInput
  aflUsed: Boolean
  serviceChargePennies: Int
  buildingInsuranceRenewalDate: TimestampInput
  buildingInsurancePennies: Int
  utilitiesRechargedFromLandlord: Boolean
}

type LocationMoney {
  currencySymbol: String!
  formatted: String!
  pennies: Int!
  user: User
}

type LocationMutableData {
  accessNotes: String
  address: Address
  agentProfileIds: [String!]
  coordinates: Coordinate
  displayOnWebsite: Boolean
  facilityIds: [String!]
  isKittChoice: Boolean
  landlordCompanyId: String
  landlordProfileId: String
  name: String!
  primaryAccessMethod: String
  primaryAccessMethodType: AccessMethodOptional
  salesBlurb: String
  spacePartnerId: String
  surveyPhotoUploadIds: [String!]
  urls: [String!]
  user: User
  virtualTourLinks: [String!]
}

input LocationMutableDataInput {
  address: AddressInput
  displayOnWebsite: Boolean
  virtualTourLinks: [String!]
  facilityIds: [String!]
  agentProfileIds: [String!]
  surveyPhotoUploadIds: [String!]
  primaryAccessMethod: String
  coordinates: CoordinateInput
  urls: [String!]
  isKittChoice: Boolean
  accessNotes: String
  name: String!
  landlordProfileId: String
  landlordCompanyId: String
  primaryAccessMethodType: AccessMethodOptionalInput
  salesBlurb: String
  spacePartnerId: String
}

type LocationMutableFinancialModel {
  agentSetUp: AgentSetUpOptional
  bidLevy: Boolean
  buildingInsurance: Money
  buildingInsuranceRenewalDate: Timestamp
  serviceCharge: Money
  serviceChargeIncInsurance: Boolean
  serviceChargeIncMAndE: Boolean
  serviceChargeIncUtilities: Boolean
  serviceChargeYearEnd: Timestamp
  user: User
  utilitiesRechargedFromLandlord: Boolean
  withinCityOfLondon: Boolean
}

input LocationMutableFinancialModelInput {
  withinCityOfLondon: Boolean
  serviceCharge: MoneyInput
  bidLevy: Boolean
  serviceChargeIncUtilities: Boolean
  serviceChargeYearEnd: TimestampInput
  utilitiesRechargedFromLandlord: Boolean
  serviceChargeIncInsurance: Boolean
  buildingInsurance: MoneyInput
  buildingInsuranceRenewalDate: TimestampInput
  agentSetUp: AgentSetUpOptionalInput
  serviceChargeIncMAndE: Boolean
}

type LocationNameUpdated {
  locationId: String!
  name: String!
  user: User
}

type LocationProductDetails {
  desks: Range
  price: ProductPriceRange
  sqFt: Range
}

type LocationProductFilters {
  availableFrom: Timestamp
  desk: LocationRangeFilter
  facility: [String!]
  minTerm: LocationRange
  polygon: [Coordinate!]
  price: LocationRangeFilter
  squareFoot: LocationRangeFilter
  startDate: LocationDateRange
  user: User
  viewport: LocationViewport
}

input LocationProductFiltersInput {
  startDate: LocationDateRangeInput
  viewport: LocationViewportInput
  minTerm: LocationRangeInput
  polygon: [CoordinateInput!]
  price: LocationRangeFilterInput
  desk: LocationRangeFilterInput
  squareFoot: LocationRangeFilterInput
  facility: [String!]
  availableFrom: TimestampInput
}

type LocationQualified {
  location: Location
  user: User
}

type LocationRange {
  max: Int!
  min: Int!
  user: User
}

type LocationRangeFilter {
  max: String!
  min: String!
  user: User
}

input LocationRangeFilterInput {
  min: String!
  max: String!
}

input LocationRangeInput {
  max: Int!
  min: Int!
}

type LocationRequiredFields {
  location: RequiredFields
  units: [RequiredFields!]
  user: User
}

type LocationsBatchResponse {
  _null: Boolean
  user: User
}

type LocationsConnection {
  edges: [LocationEdge!]
  endCursor: String!
  hasNextPage: Boolean!
  pageInfo: PageInfo
  totalCount: Int!
  user: User
}

type LocationSellingPoint {
  icon: UploadMessage
  iconUploadId: String!
  id: String!
  name: String!
  user: User
}

type LocationSellingPointCreated {
  sellingPointId: String!
  user: User
}

type LocationSellingPointDeleted {
  sellingPointId: String!
  user: User
}

type LocationsInboxEntity {
  entity: LocationsInboxEntityUnion
  id: String!
  totalUnits: Int
  type: LocationsInboxEntityType
  viewsThisMonth: Int!
}

enum LocationsInboxEntityType {
  LOCATION_INBOX_LOCATION
  LOCATION_INBOX_UNIT
}

union LocationsInboxEntityUnion = Building | BuildingUnit

input LocationsInboxSortByInput {
  type: LocationsInboxSortByType
  descending: Boolean
}

enum LocationsInboxSortByType {
  LOCATION_INBOX_SORT_BY_ENTITY_NAME
  LOCATION_INBOX_SORT_BY_ENTITY_TYPE
  LOCATION_INBOX_SORT_BY_PRIORITY
  LOCATION_INBOX_SORT_BY_TOTAL_UNITS
  LOCATION_INBOX_SORT_BY_VIEWS_THIS_MONTH
  LOCATION_INBOX_SORT_BY_BASELINES_MET_FROM
}

type LocationsInboxTabCounts {
  allCount: Int!
  archivedCount: Int!
  liveCount: Int!
  pendingCount: Int!
}

type LocationsMerged {
  deletedUnitIds: [String!]!
  fromId: String!
  mergedUnitIds: [String!]!
  toId: String!
  user: User
}

enum LocationSortBy {
  SQFT
  TYPE
  MINIMUM_TERM
  NAME
  PRICE
  DESKS
  UNITS
  ADDRESS
  AVAILABLE_FROM
  CREATED_AT
}

type LocationSourceUrl {
  company: Company
  companyId: String!
  url: String!
  user: User
}

type LocationSpaceMatchEdge {
  cursor: String!
  node: LocationSpaceMatchResult
  user: User
}

type LocationSpaceMatchResult {
  location: Location
  user: User
  validCombinations: [UnitCombinationResult!]
  validUnitIds: [String!]!
  validUnits: [Unit]
}

type LocationStation {
  distanceInMetres: Int!
  id: String!
  lines: [TrainLine!]
  minutesToWalk: Int!
  name: String!
  user: User
}

enum LocationStatus {
  READY_TO_MARKET
  READY_TO_SELL
  READY_TO_SOURCE
  READY_TO_VIEW
  UNVERIFIED
}

type LocationsUpdated {
  locations: [Location!]
  user: User
}

type LocationUnarchived {
  location: Location
  user: User
}

type LocationUpdated {
  locationId: String!
  name: String!
  user: User
  userId: String!
}

type LocationVerified {
  location: Location
  user: User
}

type LocationViewport {
  nw: Coordinate
  se: Coordinate
  user: User
}

input LocationViewportInput {
  se: CoordinateInput
  nw: CoordinateInput
}

type LockAcquiredForLocationVerification {
  location: Location
  user: User
}

type LockLocationForVerificationCommand {
  locationId: String!
  user: User
}

type LockReleasedForLocationVerification {
  location: Location
  user: User
}

type LoggedInAsUser {
  authToken: String!
  user: User
  userId: String!
}

type LoginAsUserCommand {
  user: User
  userId: String!
}

type LoginCommand {
  email: String!
  password: String!
  rememberMe: Boolean!
  user: User
}

type LoginRequest {
  authCode: String
  email: String!
  password: String!
  rememberMe: Boolean
  type: AuthenticationFactorType
  user: User
}

type LoginResponse {
  authenticationFactors: [AuthenticationFactorType!]
  cookie: String
  rememberMe: Boolean
  user: User
}

type LoginRevokedForUser {
  user: User
  userId: String!
}

type LogOutFromContextCommand {
  _null: Boolean
  user: User
}

type LogoutUserCommand {
  cookie: String!
  user: User
}

type LostReason {
  id: String!
  reason: String!
  user: User
}

type LumpSums {
  agentFee: Float!
  designDressing: Float!
  fitout: Float!
  leaseVoidRecovery: Float!
  oldBrokerFee: Float!
  topup: Float!
  user: User
}

type ManagedServiceAgreement {
  agreedAmounts: [ManagedServiceAgreementItem!]
  categoryId: String!
  id: String!
  lineItems: [LineItem]
  notes: String!
  rrule: String!
  tenancyId: String!
}

type ManagedServiceAgreementItem {
  id: String!
  msaId: String!
  unit: UnitOfMeasure
  unitId: String!
  unitQuantity: Int!
}

type ManyProfiles {
  profiles: [Profile!]
  user: User
}

type MarkChatAsReadAction {
  chatId: String!
  user: User
}

type MarketingContent {
  advertisementDescription: String!
  area: String!
  areaFacts: [String!]!
  brochureId: String!
  description: String!
  floorplans: [Media!]
  id: String!
  locationId: String!
  photos: [Media!]
  ranking: Int!
  slug: String!
  status: Boolean!
  videos: [ExternalMedia!]
  virtualTourLink: String!
  vrId: String!
}

input MarketingStatusInput {
  published: Boolean!
}

type MarkMessagesAsReadCommand {
  chatMessageIds: [String!]!
  user: User
}

type MarkNotificationAsRead {
  notificationIds: [String!]!
  user: User
}

type MatchedSpace {
  createdAt: Timestamp
  dealId: String!
  deletedAt: Timestamp
  id: String!
  index: String!
  matchedAt: Timestamp
  productId: String!
  reasonUnmatched: String!
  requirementsId: String!
  unmatchedAt: Timestamp
  updatedAt: Timestamp
  user: User
}

type MatchedSpaceDeleted {
  productId: String!
  requirementsId: String!
  user: User
}

type MatchedSpaceRestored {
  dealId: String!
  id: String!
  user: User
}

type MatchedSpacesReordered {
  matches: [MatchedSpace!]
  requirementsId: String!
  user: User
}

type MatchSpacesCommand {
  matches: [MatchedSpace!]
  requirementsId: String!
  user: User
}

type MeanDaysInPerWeekInsight {
  entityId: String!
  percentageIncrease: Float!
  value: Float!
}

type MeanDaysInPerWeekInsights {
  companyWide: MeanDaysInPerWeekInsight
  perTeam: [MeanDaysInPerWeekInsight!]
}

type Media {
  unitId: String!
  uploadId: String!
}

type MeetingRoom {
  amenities: AmenityList
  building: Building
  capacity: Int!
  id: String!
  location: Building
  locationId: String!
  name: String!
  price: String!
  shared: Boolean!
  user: User
}

type MergeBuildingsCommand {
  mergeFromIds: [String!]!
  mergeIntoId: String!
  user: User
}

type MergeCompanies {
  fromId: String!
  toId: String!
  updates: UpdateCompanyCommand
  user: User
}

type MergeDealsCommand {
  deal: Deal
  fromId: String!
  toId: String!
  user: User
}

type MergeLocation {
  accessNotes: String
  address: Address
  agentProfileIds: [String!]
  agentSetUp: AgentSetUpOptional
  bidLevy: Boolean!
  buildingInsurance: Money
  buildingInsuranceRenewalDate: Timestamp
  coordinates: Coordinate
  displayOnWebsite: Boolean
  facilityIds: [String!]
  googleDriveFileLink: String
  isKittChoice: Boolean
  landlordCoversEntireFitout: Boolean
  landlordProfileId: String
  name: String
  notes: String!
  primaryAccessMethodType: AccessMethodOptional
  salesBlurb: String
  sellingPointIds: [String!]
  serviceCharge: Money
  serviceChargeYearEnd: Timestamp
  surveyPhotoUploadIds: [String!]
  urls: [String!]
  user: User
  utilitiesRechargedFromLandlord: Boolean
  virtualTourLinks: [String!]
  withinCityOfLondon: Boolean!
}

input MergeLocationInput {
  utilitiesRechargedFromLandlord: Boolean
  buildingInsuranceRenewalDate: TimestampInput
  coordinates: CoordinateInput
  urls: [String!]
  serviceCharge: MoneyInput
  accessNotes: String
  sellingPointIds: [String!]
  salesBlurb: String
  address: AddressInput
  agentSetUp: AgentSetUpOptionalInput
  name: String
  agentProfileIds: [String!]
  notes: String!
  displayOnWebsite: Boolean
  landlordCoversEntireFitout: Boolean
  virtualTourLinks: [String!]
  isKittChoice: Boolean
  withinCityOfLondon: Boolean!
  landlordProfileId: String
  facilityIds: [String!]
  bidLevy: Boolean!
  serviceChargeYearEnd: TimestampInput
  googleDriveFileLink: String
  buildingInsurance: MoneyInput
  surveyPhotoUploadIds: [String!]
  primaryAccessMethodType: AccessMethodOptionalInput
}

type MergeLocationsCommand {
  editUnits: [EditUnit!]
  fromId: String!
  mergeLocation: MergeLocation
  toId: String!
  user: User
}

type MergeVerifyLocationsCommand {
  locationIdFrom: String!
  locationIdTo: String!
  user: User
  verifyUnits: [VerifyUnit!]
}

type Message {
  archived: Boolean!
  createdAt: Timestamp
  createdBy: String!
  deal: Deal
  email: Email
  entityId: String!
  id: String!
  tags: [String!]!
  thread: Thread
  threadId: String!
  type: Type
}

type MessageList {
  messages: [ChatMessage!]
  user: User
}

type MessagesMarkedAsRead {
  chatMessageIds: [String!]!
  user: User
}

enum MessageType {
  IssueRaised
  MEMBERSHIP
  MESSAGE
  OOH
  ToDo
  DOCUMENT
  EVENT
}

type Metadata {
  key: String!
  value: String!
}

input MetadataInput {
  key: String!
  value: String!
}

enum MilestoneStatus {
  Active
  Complete
  Inactive
}

type MinMax {
  max: Float!
  min: Float!
  user: User
}

type Money {
  """The three-letter currency code defined in ISO 4217."""
  currencyCode: String

  """https://github.com/leekchan/accounting"""
  format: String

  """The currency symbol associated with the currencyCode"""
  symbol: String

  """
  The smallest unit for the given currency code. For example if `currencyCode` is `GBP`, then 1 unit is one UK penny.
  """
  units: Int
}

input MoneyInput {
  """The three-letter currency code defined in ISO 4217."""
  currencyCode: String = "GBP"

  """
  The whole units of the amount. For example if `currencyCode` is `GBP`, then 1 unit is one UK penny.
  """
  units: Int!
}

type MoneyRange {
  max: Money
  min: Money
}

input MoneyRangeInput {
  min: MoneyInput
  max: MoneyInput
}

type MonthlyPricingBreakdown {
  monthlyAdvertisedPrice: Money
  monthlyBrokerCommission: Money
  monthlyFitoutCost: Money
  monthlyKittFee: Money
  monthlyNetRent: Money
  monthlyOpsCost: Money
  monthlyRates: Money
  monthlyServiceCharge: Money
  monthlyUtilitiesCost: Money
}

type MSACreated {
  msas: [ManagedServiceAgreement!]
  submittedByUserId: String!
  tenancyId: String!
}

input MSAInputInput {
  categoryId: String!
  rrule: String
  notes: String
  agreedAmounts: [MSAItemInputInput!]
}

input MSAItemInputInput {
  unitQuantity: Int!
  unitId: String!
}

type Mutation {
  accesssvc_ConfigureAccessCommand(id: String!): AccessBeingConfigured
  accesssvc_CreateAccessCommand(access: AccessInput): AccessCreated
  accesssvc_CreateTemporaryPinCommand(from: TimestampInput, to: TimestampInput, userId: String!, accessId: String!, email: String!): TemporaryPinCreated
  accesssvc_DeleteAccessCommand(id: String!): AccessDeleted
  accesssvc_OpenDoorCommand(accessId: String!): DoorOpened
  accesssvc_RotateCodeCommand(subjectId: String!): CodeRotated
  accesssvc_UpdateAccessNameCommand(id: String!, name: String!): AccessUpdated
  accesssvc_UpdateNetworkConfigCommand(access: AccessInput): AccessUpdated
  addonsvc_CreateAddonCommand(addon: AddonInput): AddonCreated
  addonsvc_CreatePurchaseCommand(purchase: PurchaseInput): PurchaseCreated
  addonsvc_DeleteAddonCommand(id: String!): AddonDeleted
  addonsvc_DeletePurchaseCommand(id: String!): PurchaseDeleted
  addonsvc_UpdateAddonCommand(addon: AddonInput): AddonUpdated
  addonsvc_UpdatePurchaseCommand(purchase: PurchaseInput): PurchaseUpdated
  bookingsvc_ApproveFloorplan(floorplanId: String!): FloorplanApproved
  bookingsvc_AssignUserToDeskCommand(deskId: String!, userId: String!): UserAssignedToDesk
  bookingsvc_BatchSetAttendanceCommand(dates: [DateInput!]): AttendanceBatchSet
  bookingsvc_CreateAttendanceCommand(date: DateInput): AttendanceCreated
  bookingsvc_CreateBooking(entityId: String!, entityType: BookableEntity, start: DateTimeInput, end: DateTimeInput, attendeeEmailAddresses: [String!], userId: String, id: String): BookingCreated
  bookingsvc_CreateRoom(name: String!, locationId: String!, shared: Boolean!, price: String!, capacity: Int!, amenityIds: [String!]!, id: String): BookingRoomCreatedEffect
  bookingsvc_DeleteAmenity(id: String!): AmenityDeleted
  bookingsvc_DeleteAttendanceCommand(date: DateInput, id: String): AttendanceDeleted
  bookingsvc_DeleteBooking(id: String!): BookingDeleted
  bookingsvc_DeleteFloorplan(id: String!): FloorplanDeleted
  bookingsvc_EnquireAboutDeskBooking(_null: Boolean): DeskBookingFeatureEnquired
  bookingsvc_GenerateFloorplans(src: String!, optimise: Boolean, quality: Float, name: String!, tenancyId: String!): FloorplansGenerationStarted
  bookingsvc_IngestFloorplan(tenancyId: String!, json: String!, name: String): FloorplanIngested
  bookingsvc_SaveAmenity(companyId: String, id: String, name: String!, entityType: BookableEntity, entityIds: [String!]!): AmenitySaved
  bookingsvc_SetCapacityCommand(capacity: Int!, companyId: String): CapacitySet
  bookingsvc_SetDesksOnTeamCommand(teamId: String!, deskIds: [String!]!): DesksOnTeamSet
  bookingsvc_SetTeamsOnDeskCommand(deskId: String!, teamIds: [String!]!): TeamsOnDeskSet
  bookingsvc_UpdateDesk(id: String!, name: String!, floorplanId: String!, amenityIds: [String!]!): DeskUpdated
  bookingsvc_UpdateFloorplan(id: String!, name: String!): FloorplanUpdated
  bookingsvc_UpdateFloorplanZone(id: String!, name: String!): FloorplanZoneUpdated
  bookingsvc_UpdateRoom(id: String!, name: String!, locationId: String!, shared: Boolean!, price: String!, capacity: Int!, amenityIds: [String!]!): BookingRoomUpdatedEffect
  brochuresvc_CloneTemplateCommand(brochureId: String!): BrochureTemplateCloned
  brochuresvc_CreateBrochureCommand(id: String, entities: [BrochureEntityInput!], stateJson: String!, templateForEntityId: String): BrochureCreated
  brochuresvc_DeleteBrochureCommand(id: String!): BrochureDeleted
  brochuresvc_UpdateBrochureCommand(entities: [BrochureEntityInput!], stateJson: String, id: String!): BrochureUpdated
  chatsvc_CreateChatCommand(companyId: String, id: String, userId: String, type: ChatType): ChatCreated
  chatsvc_CreateChatMemberCommand(message: CreateChatMessageCommandInput, noNotification: Boolean, userId: String!, chatId: String!): ChatMemberCreated
  chatsvc_CreateChatMessageCommand(userId: String, uploadIds: [String!], taggedUserIds: [String!], issueId: String, type: MessageType, notify: Boolean, editedFromMessageId: String, messageHtml: String, parentMessageId: String, associatedEntityId: String, id: String, chatId: String!, message: String): ChatMessageCreated
  chatsvc_DeleteChatCommand(chatId: String!, reason: String): ChatDeleted
  chatsvc_DeleteChatMemberCommand(userId: String!, chatId: String!): ChatMemberDeleted
  chatsvc_DeleteChatMessageAction(messageId: String!): ChatMessageDeletedEffect
  chatsvc_MarkChatAsReadAction(chatId: String!): ChatMarkedAsReadEffect
  chatsvc_MarkMessagesAsReadCommand(chatMessageIds: [String!]!): MessagesMarkedAsRead
  chatsvc_UpdateChatMessage(oldMessageId: String!, updatedMessage: CreateChatMessageCommandInput, newMessageId: String!): ChatMessageUpdated
  companysvc_CreateAgencyDomainAndCompanyCommand(name: String!, url: String!): AgencyDomainAndCompanyCreated
  companysvc_CreateCompanyCommand(type: OptionalCompanyTypeInput, address: String, companyNumber: String, landlordFinancials: LandlordFinancialsInput, primaryColorHex: String, secondaryColorHex: String, contractorCompany: ContractorCompanyInput, name: String!, tenantCompany: TenantCompanyInput, logoUploadId: String): CompanyCreated
  companysvc_CreateCompanyTeamsCommand(companyId: String!, companyTeams: [String!]!): CompanyTeamsCreated
  companysvc_DeleteCompanyCommand(id: String!): CompanyDeleted
  companysvc_DeleteCompanyTeamCommand(companyTeamId: String!): CompanyTeamDeleted
  companysvc_MergeCompanies(updates: UpdateCompanyCommandInput, toId: String!, fromId: String!): CompaniesMerged
  companysvc_SaveCompanyCultureCommand(data: CompanyCultureDataInputInput, companyId: String!): CompanyCultureSaved
  companysvc_SaveHybridWorkInformationCommand(inputs: [PolicyInputInput!]): HybridWorkInformationSaved
  companysvc_SetCompanyIndustriesCommand(companyId: String!, industryIds: [String!]!): CompanyIndustriesUpdated
  companysvc_SetCompanyIngressesCommand(companyIngresses: [CompanyIngressInput!]): CompanyIngresses
  companysvc_UpdateCompanyCommand(name: String, logoUploadId: String, secondaryColorHex: String, clientSupportSpecialistUserId: String, companyNumber: String, tenantCompany: TenantCompanyInput, primaryColorHex: String, accountManagerUserId: String, contractorCompany: ContractorCompanyInput, address: String, landlordFinancials: LandlordFinancialsInput, type: OptionalCompanyTypeInput, researchNotes: String, clientServicesManagerUserId: String, id: String!): CompanyUpdated
  companysvc_UpdateCompanyTeamCommand(companyTeam: CompanyTeamInput): CompanyTeamUpdated
  companysvc_UpdateOwnCompany(secondaryColorHex: String, id: String!, logoUploadId: String, primaryColorHex: String): CompanyUpdated
  configuratorsvc_CreateConfiguratorSession(meetingRooms: Int, pdfSummaryUploadId: String, floorplanDrawing: String, id: String!, markupJson: String, floorplanDocumentId: String, lookAndFeelDocumentId: String, notes: String, desks: Int, dealId: String!, unitId: String!): ConfiguratorSessionCreated
  configuratorsvc_UpdateConfigurationSession(lookAndFeelDocumentId: String, notes: String, pdfSummaryUploadId: String, floorplanDrawing: String, floorplanDocumentId: String, dealId: String, unitId: String, markupJson: String, desks: Int, meetingRooms: Int, id: String!): ConfiguratorSessionUpdated
  dealsvc_AddSelectionsCommand(selections: [SelectionInput!], shortlistId: String, brokerSearchId: String): SelectionsAdded
  dealsvc_AddShortlistsToDealCommand(dealId: String!, shortlistIds: [String!]!): ShortlistsAddedToDeal
  dealsvc_ApproveShortlistCommand(shortlistId: String, brokerSearchId: String): ShortlistApproved
  dealsvc_AssignSalesTeamToBrokerCompanyCommand(brokerCompanyId: String!, salesTeamId: String!): SalesTeamAssignedToBrokerCompany
  dealsvc_CreateActivityCommand(activity: ActivityInput): ActivityCreated
  dealsvc_CreateBrokerEnquiryCommand(unitGroup: SelectionInput, brokerSearchId: String!): BrokerEnquiryCreated
  dealsvc_CreateBrokerSearchCommand(name: String!, requirements: DealRequirementsInput, desiredLocation: String, id: String, unitGroups: [SelectionInput!], kittChoicesOnly: Boolean, dealId: String): BrokerSearchCreated
  dealsvc_CreateDealCommand(deal: DealInput, note: NoteInput): DealCreated
  dealsvc_CreateDealSpaceMatchCommand(dealId: String!, unitIds: [String!]!, overriddenPrice: Int!, desiredTerm: Int): DealSpaceMatched
  dealsvc_CreateDismissedRecommendationsCommand(selections: [SelectionInput!], brokerSearchId: String!): DismissedRecommendationsCreated
  dealsvc_CreateNoteOnDealCommand(note: NoteInput): NoteCreated
  dealsvc_CreateSelectionFeedbacksCommand(feedbacks: [SelectionFeedbackInput!]): SelectionFeedbacksCreated
  dealsvc_CreateShortlistCommand(name: String!, description: String): ShortlistCreated
  dealsvc_CreateShortlistViewingRequestsCommand(viewingRequests: [ViewingRequestInput!], shortlistId: String, company: String!, notes: String!, brokerSearchId: String): ShortlistViewingRequestsCreated
  dealsvc_CreateViewingRequestCommand(viewingRequest: ShortlistViewingRequestInput): ViewingRequestCreated
  dealsvc_DeleteActivityCommand(id: String!): ActivityDeleted
  dealsvc_DeleteBrokerSearchCommand(id: String!): BrokerSearchDeleted
  dealsvc_DeleteDealCommand(id: String!, lostReason: String!): DealDeleted
  dealsvc_DeleteDealSpaceMatchCommand(id: String!): DealSpaceMatchDeleted
  dealsvc_DeleteNoteOnDealCommand(dealId: String!, noteId: String!): NoteDeleted
  dealsvc_DeleteShortlistCommand(shortlistId: String!, archive: Boolean): ShortlistDeleted
  dealsvc_MergeDealsCommand(fromId: String!, toId: String!, deal: DealInput): DealsMerged
  dealsvc_RemoveSelectionsCommand(selections: [SelectionInput!], shortlistId: String, brokerSearchId: String): SelectionsRemoved
  dealsvc_RemoveShortlistsFromDealCommand(dealId: String!, shortlistIds: [String!]!): ShortlistsRemovedFromDeal
  dealsvc_RequestAddShortlistToValveCommand(brokerSearchId: String!): ShortlistAddToValveRequested
  dealsvc_RestoreShortlistCommand(shortlistId: String!): ShortlistRestored
  dealsvc_SaveSearchRequirementsCommand(requirements: SearchRequirementsInput): SearchRequirementsSaved
  dealsvc_ShareShortlistWithCurrentUserCommand(id: String!): ShortlistSharedCurrentUser
  dealsvc_UpdateActivityCommand(activity: ActivityInput, completed: Boolean): ActivityUpdated
  dealsvc_UpdateBrokerSearchCommand(kittChoicesOnly: Boolean, clientName: String, id: String!, name: String, requirements: DealRequirementsInput, desiredLocation: String): BrokerSearchUpdated
  dealsvc_UpdateBrokerSearchPolygonCommand(brokerSearchId: String!, polygonArray: [CoordinateInput!]): BrokerSearchPolygonUpdated
  dealsvc_UpdateDealCommand(note: NoteInput, deal: DealInput): DealUpdated
  dealsvc_UpdateDealSpaceMatchCommand(id: String!, starred: Boolean, salesBlurb: String, orderIndex: String): DealSpaceMatchUpdated
  dealsvc_UpdateNoteOnDealCommand(note: NoteInput): NoteUpdated
  dealsvc_UpdateSelectionsCommand(selections: [SelectionInput!], shortlistId: String, brokerSearchId: String): SelectionsUpdated
  dealsvc_UpdateShortlistCommand(shortlistId: String!, name: String, description: String, clientName: String): ShortlistUpdated
  deploymentsvc_DeployPreviewCommand(branch: String!): DeployStarted
  documentsvc_CreateDocumentCommand(typeId: String!, uploadId: String!, metadata: [MetadataInput!]): DocumentCreated
  enquirysvc_CreateEnquiryCommand(data: EnquiryMutableDataInput, id: String): EnquiryCreated
  enquirysvc_CreateQuoteCommand(enquiryId: String!, data: QuoteMutableDataInput, id: String): QuoteCreated
  enquirysvc_DeleteEnquiryCommand(id: String!): EnquiryDeleted
  enquirysvc_DeleteQuoteCommand(id: String!): QuoteDeleted
  enquirysvc_DuplicateQuoteCommand(id: String!, newId: String): QuoteDuplicated
  enquirysvc_UpdateEnquiryCommand(id: String!, data: EnquiryMutableDataInput): EnquiryUpdated
  enquirysvc_UpdateQuoteCommand(id: String!, data: QuoteMutableDataInput): QuoteUpdated
  favouritesvc_AddFavourite(userId: String, productId: String!): FavouriteAdded
  favouritesvc_RemoveFavourite(userId: String, productId: String!): FavouriteRemoved
  feedbacksvc_CreateFeedbackCommand(id: String, app: App, message: String!, additionalInfoJson: String, rating: Int, entityType: FeedbackEntityType, entityId: String): FeedbackCreated
  feedbacksvc_MarkFeaturesAsReadCommand(features: [TenantAppFeature!]): FeaturesMarkedAsRead
  gmailsvc_ListenForEmailsCommand(userId: String!): ListeningForEmails
  gmailsvc_SendEmailCommand(fromName: String!, threadId: String, htmlMessage: String!, subject: String!, uploadIds: [String!], toAddresses: [String!]!, fromAddress: String!, gmailThreadId: String, replyToEmailId: String, metadata: [EmailMetadataInput!], ccAddresses: [String!], bccAddresses: [String!]): EmailSent
  guestsvc_DeleteGuestCommand(guestId: String!): GuestDeleted
  guestsvc_GuestArrivedCommand(guestId: String!, accessId: String): GuestArrived
  guestsvc_OpenDoorForGuestCommand(token: String!, accessId: String!): DoorOpened
  guestsvc_RegisterGuestCommand(dateUtc: DateTimeInput, expiryDate: TimestampInput, email: String!, requesterId: String!, accessIds: [String!], guestId: String, note: String, name: String!, requesterCompanyId: String, locationId: String!, expiryDateUtc: DateTimeInput, date: TimestampInput): GuestRegistered
  guestsvc_ResendGuestDayPass(guestId: String!): GuestDayPassResent
  iamsvc_AddSubjectToGroup(groupId: String!, userId: String, companyId: String, from: TimestampInput, to: TimestampInput, notes: String): SubjectAddedToGroup
  iamsvc_ArchivePermissionCommand(permissionId: String!, subject: Subject): PermissionArchived
  iamsvc_CreatePermissionCommand(subject: Subject, subjectId: String!, resource: Resource, resourceId: String!): PermissionCreated
  iamsvc_RemoveSubjectFromGroup(groupId: String!, userId: String, companyId: String): SubjectRemovedFromGroup
  insightsvc_GetAccessesFullLoad(_null: Boolean): IndexRebuilt
  issuesvc_ArchiveIssueAction(id: String!): IssueArchived
  issuesvc_AttachUploadToIssueAction(uploadId: String!, issueId: String!): UploadAttachedToIssue
  issuesvc_ClearIssueUploads(issueId: String!): IssueUploadsCleared
  issuesvc_CloseIssueCommand(id: String!): IssueClosed
  issuesvc_CreateIssueAction(data: IssueMutableDataInput, id: String, updates: [IssueUpdateInput!]): IssueCreated
  issuesvc_CreateIssueUpdateCommand(issueId: String!, title: String!, text: String!, dueDate: TimestampInput, ownerUserId: String): IssueUpdateCreated
  issuesvc_DeleteIssueAction(id: String!): IssueDeleted
  issuesvc_DeleteIssueUpdateCommand(id: String!): IssueUpdateDeleted
  issuesvc_DeleteIssueUploadAction(uploadId: String!, issueId: String!): IssueUploadDeleted
  issuesvc_MigrateVisits(_null: Boolean): VisitsMigrated
  issuesvc_ReOpenIssueAction(id: String!): IssueReOpened
  issuesvc_RemindLeadTenantsAboutIssue(issueId: String!): LeadTenantsRemindedAboutIssue
  issuesvc_SendSummaryEmail(companyId: String!, toUserIds: [String!]!): SummaryEmailSent
  issuesvc_UpdateIssueAction(data: IssueMutableDataInput, id: String!): IssueUpdated
  issuesvc_UpdateIssueUpdateCommand(id: String!, text: String!, title: String!, dueDate: TimestampInput, ownerUserId: String): IssueUpdateUpdated
  locationsvc_ArchiveLocationCommand(id: String!): LocationArchived
  locationsvc_CreateBuildingTraitCommand(name: String!, uploadId: String, iconId: String, type: BuildingTraitType): BuildingTraitCreated
  locationsvc_CreateLocationCommand(owningCompany: String, owningCompanyNumber: String, slug: String, published: Boolean, landlordCompanyId: String, address: AddressInput, coordinates: CoordinateInput, name: String, primaryAccessMethod: String, financialData: LocationMutableFinancialModelInput, type: String, sqFt: Int, financialModel: LocationFinancialModelMutationInput, id: String, data: LocationMutableDataInput, areaId: String, spacePartnerId: String): LocationCreated
  locationsvc_CreateLocationFacilityCommand(name: String!, rank: Int, iconUploadId: String): LocationFacilityCreated
  locationsvc_CreateLocationSellingPoint(name: String!, iconUploadId: String): LocationSellingPointCreated
  locationsvc_CreateScrapedLocationsCommand(locations: [ScrapedLocationInput!]): ScrapedLocationsCreated
  locationsvc_DeleteLocationCommand(id: String!): LocationDeleted
  locationsvc_DeleteLocationSellingPoint(sellingPointId: String!): LocationSellingPointDeleted
  locationsvc_DiscardSourcedLocationCommand(locationId: String!): SourcedLocationDiscarded
  locationsvc_DisqualifyLocation(id: String!): LocationDisqualified
  locationsvc_EditLocationCommand(editLocation: EditLocationInput, editUnits: [EditUnitInput!]): LocationEdited
  locationsvc_LockLocationForVerificationCommand(locationId: String!): LockAcquiredForLocationVerification
  locationsvc_MergeBuildingsCommand(mergeIntoId: String!, mergeFromIds: [String!]!): BuildingsMerged
  locationsvc_MergeLocationsCommand(fromId: String!, toId: String!, mergeLocation: MergeLocationInput, editUnits: [EditUnitInput!]): LocationsMerged
  locationsvc_MergeVerifyLocationsCommand(verifyUnits: [VerifyUnitInput!], locationIdFrom: String!, locationIdTo: String!): VerifyLocationsMerged
  locationsvc_QualifyLocationCommand(id: String!): LocationQualified
  locationsvc_RestoreBuildingUnitCommand(unitId: String!): BuildingUnitRestored
  locationsvc_SaveBuildingCommand(building: BuildingInputInput, units: [BuildingUnitInputInput!]): BuildingSaved
  locationsvc_SubmitBuildingCommand(url: String!): BuildingSubmitted
  locationsvc_UnarchiveLocationCommand(id: String!): LocationUnarchived
  locationsvc_UnlockLocationForVerificationCommand(locationId: String!): LockReleasedForLocationVerification
  locationsvc_UpdateAgenciesForLocationCommand(locationId: String!, agencyCompanyIds: [String!]!): AgenciesForLocationUpdated
  locationsvc_UpdateLocationNameCommand(locationId: String!, name: String!): LocationNameUpdated
  locationsvc_UpdateLocationStatusesCommand(id: String): LocationsUpdated
  locationsvc_UpdateSourcedLocationCommand(name: String, googleDriveFileLink: String, primaryAccessMethod: String, notes: String, virtualTourLinks: [String!], buildingInsuranceRenewalDate: TimestampInput, utilitiesRechargedFromLandlord: Boolean, displayOnWebsite: Boolean, isKittChoice: Boolean, sellingPointIds: [String!], locationAgencies: [LocationAgencyInput!], id: String!, facilityIds: [String!], agentSetUp: AgentSetUpOptionalInput, isRiskWarning: Boolean, landlordProfileId: String, surveyPhotoUploadIds: [String!], primaryAccessMethodType: AccessMethodOptionalInput, serviceChargeYearEnd: TimestampInput, accessNotes: String, landlordCoversEntireFitout: Boolean, agentProfileIds: [String!]): SourcedLocationUpdated
  locationsvc_VerifyLocationCommand(verifyUnits: [VerifyUnitInput!], verifyLocation: VerifyLocationInput): LocationVerified
  notificationsvc_DeleteUserPushTokenCommand(deviceId: String!): UserPushTokenDeleted
  notificationsvc_MarkNotificationAsRead(notificationIds: [String!]!): NotificationMarkedAsRead
  notificationsvc_NotifyAboutTenancyCommand(tenancyId: String!, userId: String!, locationId: String!, dealId: String, notifyBroker: Boolean): UserNotifiedAboutTenancy
  notificationsvc_SaveUserPushTokenCommand(userId: String, token: String!, deviceId: String!): UserPushTokenSaved
  notificationsvc_SendChatPulse(_null: Boolean): FeedbackCreated
  notificationsvc_SendEmailAction(userIds: [String!]!, body: EmailBodyInput, subject: String!, emails: [String!]!, from: String!): EmailSentEvent
  notificationsvc_SendKitchenSinkCommand(_null: Boolean): KitchenSinkSent
  notificationsvc_SendNewEnquiryNotificationCommand(name: String!, email: String!, phone: String!, message: String!): NewEnquiryNotificationSent
  notificationsvc_SendNotificationToAllUsersCommand(title: String!, message: String!): NotificationSentToAllUsers
  notificationsvc_SendTenancyPulse(_null: Boolean): FeedbackCreated
  notificationsvc_SetCommunicationPreference(userId: String, communicationClass: String!, frequency: CommunicationFrequency): CommunicationPreferenceSet
  notificationsvc_SetCommunicationPreferenceForAllEmployeesOfCompany(communicationClass: String!, frequency: CommunicationFrequency, companyId: String): CommunicationPreferenceSet
  notificationsvc_TenantAppFeedbackSubmission(feedback: String!, score: Int!): NewEnquiryNotificationSent
  ordersvc_CreateLineItemPauseCommand(reason: String!, lineItemId: String!, dateRange: DateRangeInput): LineItemPauseCreated
  ordersvc_CreateMSA(msas: [MSAInputInput!], tenancyId: String!): MSACreated
  ordersvc_DeleteLineItemPauseCommand(lineItemPauseId: String!): LineItemPauseDeleted
  ordersvc_SaveOrderNotes(tenancyId: String!, categoryId: String!, notes: String!): OrderNotesSaved
  ordersvc_SaveOrdersCommand(orders: [OrderInputInput!], tenancyId: String!): OrdersSaved
  productsvc_ArchiveProductCommand(id: String!): ProductArchived
  productsvc_CreateProductCommand(name: String!, terms: [ProductTermInputInput!], units: [String!]!, facilities: [String!]!, displayOnWebsite: Boolean!, advertisedPricePennies: Int!): ProductCreated
  productsvc_DeleteProductCommand(id: String!): ProductDeleted
  productsvc_UnarchiveProductCommand(id: String!): ProductUnarchived
  productsvc_UpdateProductCommand(terms: [ProductTermInputInput!], facilities: [String!], id: String!, name: String!, units: [String!]!, displayOnWebsite: Boolean!, advertisedPricePennies: Int): ProductUpdated
  profilesvc_CreateProfileCommand(addresses: [ProfileAddressInput!], linkedInUrl: String!, hideBirthday: Boolean, userId: String!, phoneNumbers: [String!]!, companyId: String!, name: String!, tags: [String!]!, jobTitle: String!, profilePhotoUploadId: String!, birthday: DateInput, emails: [String!]!, website: String, companyTeamId: String, img: String!): ProfileCreated
  profilesvc_DeleteProfileCommand(id: String!): ProfileDeleted
  profilesvc_UpdateProfileCommand(addresses: [ProfileAddressInput!], jobTitle: String, tags: [String!], website: String, birthday: DateInput, userId: String, name: String, img: String, linkedInUrl: String, id: String!, phoneNumbers: [String!], companyId: String, hideBirthday: Boolean, emails: [String!], profilePhotoUploadId: String, companyTeamId: String): ProfileUpdated
  requestsvc_CreateRequestCommand(categoryId: String!, techRequest: Boolean, chatIds: [String!]!, userId: String!, priority: String!, fileIds: [String!]!, unitId: String!, summary: String!, detail: String!, locationId: String!): RequestCreated
  requestsvc_UpdateRequestCommand(id: String!, categoryId: String!, unitId: String!, userId: String!, assigneeId: String!, locationId: String!, techRequest: Boolean, details: String!, dueDate: String!, chatIds: [String!]!, status: String!, priority: String!, summary: String!, cost: String!, contractor: String!): RequestUpdated
  roomsvc_CancelBookingCommand(bookingId: String!, userId: String): BookingCancelled
  roomsvc_CreateBookingCommand(roomId: String!, start: TimestampInput, minutes: Int!, bookedById: String, name: String, email: String, dateTime: BookingTimeInputInput, userId: String): BookingConfirmed
  roomsvc_CreateRoomAction(name: String!, description: String!, numberOfPeople: Int!, locationId: String!, imageUploadId: String!, timezone: String!): RoomCreated
  roomsvc_DeleteRoomAction(id: String!): RoomDeletedEffect
  roomsvc_RecoverRoomAction(id: String!): RoomRecoveredEffect
  roomsvc_UpdateRoomAction(id: String!, name: String!, description: String!, numberOfPeople: Int!, locationId: String!, imageUploadId: String!, timezone: String!): RoomUpdated
  schedulersvc_ActivateScheduleCommand(scheduleId: String!): ScheduleActivated
  schedulersvc_CreateScheduleCommand(modelId: String!, type: String!, cron: String!, timezone: String!, scheduleType: ScheduleType): ScheduleCreated
  schedulersvc_DeactivateScheduleCommand(scheduleId: String!): ScheduleDeactivated
  schedulersvc_DeleteScheduleCommand(scheduleId: String!): ScheduleDeleted
  scrapersvc_StartScrapeCommand(_null: Boolean): FailedToScrapeSite
  searchsvc_RebuildIndex(index: String!): IndexRebuilt
  tenancysvc_AddDocumentToTenancy(tenancyId: String!, documentId: String!): DocumentAddedToTenancy
  tenancysvc_CompleteTenancyTodoCommand(id: String!): TenancyTodoCompleted
  tenancysvc_CreateTenancyCommand(startDate: TimestampInput, breakClauses: [BreakClauseInput!], rollingConditions: [RollingConditionInput!], transactionMemberUserIds: [String!], companyId: String!, status: TenancyStatus, documentIds: [String!]!, term: [PaymentInput!], financialModel: TenancyFinancialModelMutationInput, start: DateInput, end: DateInput, renewalType: RenewalType, excludeFromReporting: Boolean, endDate: TimestampInput, unitIds: [String!]!, dealId: String): TenancyCreated
  tenancysvc_CreateTenancyFloorplanZoneCommand(name: String!, radius: Int!, floorplanId: String!, x: Int!, y: Int!): TenancyFloorplanZoneCreated
  tenancysvc_CreateTenancyTodoCommand(tenancyId: String!, category: TaskCategory, title: String!, description: String!, floorplanZoneId: String, requiresApproval: Boolean!, assigneeCompanyId: String!, dueDate: TimestampInput, uploadIds: [String!]): TenancyTodoCreated
  tenancysvc_CreateTransactionMemberCommand(userId: String!, tenancyId: String!): TransactionMemberCreated
  tenancysvc_DeleteTenancyCommand(id: String!): TenancyDeleted
  tenancysvc_DeleteTenancyDocumentCommand(tenancyId: String!, documentId: String!): TenancyDocumentDeleted
  tenancysvc_DeleteTenancyFloorplanZoneCommand(id: String!): TenancyFloorplanZoneDeleted
  tenancysvc_DeleteTenancyTodoCommand(id: String!): TenancyTodoDeleted
  tenancysvc_DeleteTransactionMemberCommand(userId: String!, tenancyId: String!): TransactionMemberDeleted
  tenancysvc_ExerciseBreakClauseCommand(breakClauseId: String!, exercisedAt: DateInput): BreakClauseExercised
  tenancysvc_RequestChangesOnTenancyTodoCommand(todoId: String!, parentMessageId: String!, text: String!): TenancyTodoChangesRequested
  tenancysvc_SendReminderForTenancyTodo(id: String!): ReminderSentForTenancyTodo
  tenancysvc_SendWelcomeMessageCommand(message: String, receiverIds: [String!], tenancyId: String!, category: TaskCategory): SendWelcomeMessageCommand
  tenancysvc_SetAppHeaderUploadForTenancyCommand(tenancyId: String!, uploadId: String!): AppHeaderUploadForTenancySet
  tenancysvc_SetTenancyGoogleDriveCommand(tenancyId: String!, googleDriveLink: String!): TenancyGoogleDriveSet
  tenancysvc_SetTenancyTaskCompletionMutation(tenancyId: String!, data: TenancyTaskStatusDataInput): TenancyTasksUpdated
  tenancysvc_SetTenancyWelcomePackCommand(tenancyId: String!, welcomePackUrl: String!): TenancyWelcomePackSet
  tenancysvc_SetupTenancyForOnboardingCommand(id: String!): TenancyUpdated
  tenancysvc_StartTenancyTodoCommand(id: String!): TenancyTodoStarted
  tenancysvc_ToggleTenancyMoveInCategoryVisibilityCommand(tenancyId: String!, categories: [TaskCategory!]): TenancyMoveInCategoryVisibilityToggled
  tenancysvc_UncompleteTenancyTodoCommand(id: String!): TenancyTodoUncompleted
  tenancysvc_UnstartTenancyTodoCommand(id: String!): TenancyTodoUnstarted
  tenancysvc_UpdateTenancyCommand(occupancyAt: DateInput, excludeFromReporting: Boolean, startDate: TimestampInput, end: DateInput, leaseAgreedAt: DateInput, notes: String, financialModel: TenancyFinancialModelMutationInput, commercialsAgreedAt: DateInput, cwpUserId: String, id: String!, endDate: TimestampInput, companyId: String!, unitIds: [String!]!, term: [PaymentInput!], status: TenancyStatus, start: DateInput, renewalType: RenewalType, floorplans: [TenancyFloorplanInput!], transactionMemberUserIds: [String!], isKittActingAgent: Boolean, dealId: String, documentIds: [String!], breakClauses: [BreakClauseInput!], rollingConditions: [RollingConditionInput!], declineReason: String, headsOfTermsAgreedAt: DateInput): TenancyUpdated
  tenancysvc_UpdateTenancyFloorplanZoneCommand(name: String!, id: String!, radius: Int!, x: Int!, y: Int!): TenancyFloorplanZoneUpdated
  tenancysvc_UpdateTenancyMoveInDate(tenancyId: String!, moveInDate: DateInput): TenancyMoveInDateUpdated
  tenancysvc_UpdateTenancyTodoCommand(tenancyId: String!, title: String!, floorplanZoneId: String, requiresApproval: Boolean!, id: String!, description: String!, assigneeCompanyId: String!, dueDate: TimestampInput, uploadIds: [String!], category: TaskCategory): TenancyTodoUpdated
  tenancysvc_UpdateTimelineStageCompletionDate(tenancyId: String!, stages: [TimelineStageCompletionDateInput!]): TimelineStageCompletionDateUpdated
  tenancysvc_UpdateTimelineStateCommand(estimatedCompletionDate: DateInput, tenancyId: String!, stageId: String!): TimelineStateUpdated
  unitsvc_ArchiveUnitCommand(id: String!): UnitArchived
  unitsvc_CreateUnitFloorNumberRowsCommand(_null: Boolean): UnitFloorNumberRowsCreated
  unitsvc_DeleteUnitCommand(id: String!): UnitDeleted
  unitsvc_UnarchiveUnitCommand(id: String!): UnitUnarchived
  unitsvc_UpdateSourcedUnitCommand(name: String!, accessNoticeHours: Int, outOfHoursAccess: String, occupierContract: OccupierContractOptionalInput, floorplanUploadId: String, greySpace: GreySpaceOptionalInput, brokerPayee: BrokerPayeeOptionalInput, stateOfMAndE: String, desks: Int, id: String!, primaryAccessMethod: String, availabilityStatus: OptionalUnitAvailabilityStatusInput, accessContact: ContactInput, accessInstructions: String, advertisedPrice: MoneyInput): SourcedUnitUpdated
  uploadsvc_DeleteUploadCommand(id: String!): UploadDeleted
  usersvc_AddUserToLeadTenantsGroupCommand(userId: String!): UserAddedToLeadTenantsGroup
  usersvc_ChangePassword(password: String!, passwordConfirm: String!): PasswordChanged
  usersvc_ChangeUserEmailCommand(userId: String, email: String!): UserEmailUpdated
  usersvc_ChangeUserPasswordCommand(password: String!, passwordConfirm: String!, userId: String): UserPasswordChanged
  usersvc_CompleteOnboardingCommand(token: String!, name: String!, password: String!, jobTitle: String, profilePictureUploadId: String, teamId: String): OnboadingCompleted
  usersvc_CreateUserCommand(email: String!, password: String!): UserCreated
  usersvc_DeleteUserCommand(UserId: String!): UserDeleted
  usersvc_DeleteUsersInCompany(companyId: String!): UsersDeletedInCompany
  usersvc_LogOutFromContextCommand(_null: Boolean): UserLoggedOut
  usersvc_LoginAsUserCommand(userId: String!): LoggedInAsUser
  usersvc_LoginCommand(email: String!, password: String!, rememberMe: Boolean!): UserLoggedIn
  usersvc_LogoutUserCommand(cookie: String!): UserLoggedOut
  usersvc_OnboardUserCommand(companyId: String!, onboardBrokerToHuddle: Boolean, dealId: String, onboardToBrokerPlatform: Boolean, profileId: String, locationId: String, email: String!, leadTenant: Boolean, onboardToHuddle: Boolean): UserOnboarded
  usersvc_OnboardUsersCommand(locationId: String, companyId: String!, emails: [String!]!): UsersOnboarded
  usersvc_RegisterUserForBrokerPlatformCommand(firstName: String!, lastName: String!, email: String!, password: String!): usersvc_RegisterUserForBrokerPlatformCommandResponseUnion
  usersvc_RemoveUserFromLeadTenantsGroupCommand(userId: String!): UserRemovedFromLeadTenantsGroup
  usersvc_ResendOnboardingEmailCommand(email: String, userId: String): OnboardingEmailResent
  usersvc_ResendVerificationEmailForBrokerPlatformCommand(email: String!): VerificationEmailResentForBrokerPlatform
  usersvc_ResetPasswordCommand(token: String!, password: String!): PasswordReset
  usersvc_RevokeLoginForUser(userId: String!): LoginRevokedForUser
  usersvc_SignUpCommand(rememberMe: Boolean!, email: String!, password: String!): UserSignedUp
  usersvc_StartAccountRecoveryCommand(email: String!, inAppRecovery: Boolean): AccountRecoveryStarted
  usersvc_VerifyEmailForBrokerPlatformCommand(token: String!): OnboadingCompleted
  visitsvc_CreateVisitCommand(dontSendNotification: Boolean, id: String, data: VisitMutableDataInput): VisitCreated
  visitsvc_DeleteVisitCommand(id: String!): VisitDeleted
  visitsvc_RemindLeadTenants(visitId: String!): ReminderSent
  visitsvc_UpdateVisitCommand(id: String!, data: VisitMutableDataInput): VisitUpdated
}

type NetworkConfig {
  ip: String!
  password: String!
  port: Int!
  user: User
  username: String!
}

input NetworkConfigInput {
  ip: String!
  port: Int!
  username: String!
  password: String!
}

type NewEnquiryNotificationSent {
  _null: Boolean
  user: User
}

type Note {
  attachmentIds: [String!]!
  attachments: [UploadMessage]
  createdAt: Timestamp
  createdBy: String!
  dealId: String!
  deletedAt: Timestamp
  draftStateString: String!
  html: String!
  id: String!
  plainText: String!
  taggedUserIds: [String!]
  updatedAt: Timestamp
  updatedBy: String
  user: User
}

type NoteCreated {
  dealId: String!
  noteId: String!
  taggedUserIds: [String!]!
  user: User
}

type NoteDeleted {
  dealId: String!
  noteId: String!
  user: User
}

input NoteInput {
  id: String!
  attachmentIds: [String!]!
  html: String!
  draftStateString: String!
  plainText: String!
  createdAt: TimestampInput
  deletedAt: TimestampInput
  updatedBy: String
  createdBy: String!
  taggedUserIds: [String!]
  dealId: String!
  updatedAt: TimestampInput
}

type NoteUpdated {
  dealId: String!
  noteId: String!
  taggedUserIds: [String!]!
  user: User
}

type Notification {
  author: Profile
  authorId: String!
  createdAt: Timestamp
  id: String!
  message: String!
  readByUser: Boolean
  title: String!
  user: User
}

type NotificationEdge {
  cursor: String!
  node: Notification
  user: User
}

type NotificationMarkedAsRead {
  notificationIds: [String!]!
  user: User
}

type NotificationPreferenceMetadata {
  key: String!
  user: User
  value: String!
}

input NotificationPreferenceMetadataInput {
  key: String!
  value: String!
}

type NotificationsConnection {
  edges: [NotificationEdge!]
  pageInfo: PageInfo
  user: User
}

type NotificationSentToAllUsers {
  message: String!
  title: String!
  user: User
}

type NotifyAboutTenancyCommand {
  dealId: String
  locationId: String!
  notifyBroker: Boolean
  tenancyId: String!
  user: User
  userId: String!
}

type NotifyAboutUnactionedChatsCommand {
  chatIds: [String!]!
  user: User
}

input OccupiedFilterInput {
  occupied: Boolean!
}

enum OccupierContract {
  AGREEMENT_WITH_KITT
  LEASE
  LICENSE
}

input OccupierContractOptionalInput {
  occupierContract: OccupierContract
}

type OfficeAttendancePeriod {
  periodDate: Date
  value: Int!
}

type OfficeValue {
  id: String!
  text: String!
  user: User
}

type OnboadingCompleted {
  name: String!
  user: User
  userId: String!
}

type OnboardingEmailResent {
  email: String!
  onboardingAlreadyCompleted: Boolean!
  user: User
  userId: String
}

type OnboardUserCommand {
  companyId: String!
  dealId: String
  email: String!
  leadTenant: Boolean
  locationId: String
  onboardBrokerToHuddle: Boolean
  onboardToBrokerPlatform: Boolean
  onboardToHuddle: Boolean
  profileId: String
  user: User
}

type OnboardUsersCommand {
  companyId: String!
  emails: [String!]!
  locationId: String
  user: User
}

type OpenDoorCommand {
  access: Access!
  accessId: String!
  user: User
}

type OpenDoorForGuestCommand {
  accessId: String!
  token: String!
  user: User
}

type OpenDoorResponse {
  opened: Boolean!
  user: User
}

enum OpsTier {
  HIGH_OPS_TIER
  LOW_OPS_TIER
  MEDIUM_OPS_TIER
  UNKNOWN_OPS_TIER
}

type OptionalCompanyType {
  type: CompanyType
  user: User
}

input OptionalCompanyTypeInput {
  type: CompanyType
}

type OptionalUnitAvailabilityStatus {
  status: AvailabilityStatus
}

input OptionalUnitAvailabilityStatusInput {
  status: AvailabilityStatus
}

type Order {
  cancelledAt: DateTime
  category: OrderCategory
  categoryId: String!
  cost: Money
  createdAt: DateTime
  displayId: String!
  id: String!
  issue: Issue
  kittCommissionPercentage: Float!
  lineItems: [LineItem!]
  notes: String!
  rrule: String!
  tenancyId: String!
}

type OrderCategory {
  group: CategoryGroup
  hasFrequency: Boolean!
  id: String!
  kittCommissionPercentage: Float!
  makeRecommendations: Boolean!
  msa(tenancyId: String!): ManagedServiceAgreement
  name: String!
  order(tenancyId: String!): Order
  products: [OrderProduct]
  unitsOfMeasure: [UnitOfMeasure]
}

input OrderInputInput {
  lineItems: [LineItemInputInput!]
  categoryId: String!
  notes: String
  rrule: String
  cost: MoneyInput
}

type OrderList {
  orders: [Order!]
}

type OrderNotesSaved {
  order: Order
}

type OrderProduct {
  category: OrderCategory
  categoryId: String!
  id: String!
  name: String!
  unit: UnitOfMeasure
  unitId: String!
  unitQuantity: Int!
}

type OrdersSaved {
  orders: [Order!]
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  totalCount: Int!
}

type PaginatedBookingsConnection {
  edges: [RoomOrDeskBookingEdge!]
  pageInfo: PageInfo
  user: User
}

type PaginationData {
  count: Int!
  hasNextPage: Boolean!
  totalPages: Int!
}

type PaginationOptions {
  after: String!
  first: Int!
  user: User
}

type PasswordChanged {
  user: User
  userId: String!
}

type PasswordReset {
  user: User
  userId: String!
}

type PasswordResetTriggered {
  email: String!
  user: User
}

type Payment {
  date: Timestamp
  kittFee: Money
  price: Money
}

input PaymentInput {
  kittFee: MoneyInput
  date: TimestampInput
  price: MoneyInput
}

type PdfGenerated {
  requestId: String!
  upload: UploadMessage
  user: User
}

enum PeriodDataGranularity {
  Day
  Month
  Week
}

type Permission {
  associatedResource: AssociatedResource
  companyId: String!
  groupId: String!
  id: String!
  permission: String!
  resource: String!
  userId: String!
}

type PermissionArchived {
  permissionId: String!
}

type PermissionCreated {
  permissionId: String!
}

type PhoneNumber {
  accessId: String!
  phoneNumber: String!
  user: User
}

type PhoneNumberCreated {
  phoneNumber: PhoneNumber
  user: User
}

type PhoneNumberVerified {
  phone: String!
  user: User
  userId: String!
}

type PhotoTakenAtAccess {
  accessId: String!
  photo: String!
  user: User
}

type PipelineStage {
  count: Int!
  id: String!
  label: String!
  position: Int!
  totalSqft: Int!
  user: User
}

type Place {
  geo: AreaGeoPoint
  id: String!
  name: String!
}

type PolicyDetails {
  entityId: String
  freeTextPolicy: String
  hasHybridWorkPolicy: Boolean
  hasMandatoryDaysInOffice: Boolean
  hasMinimumDaysInTimeframe: Boolean
  hasTeamSpecificPolicies: Boolean
  reasonNoHybridWorkPolicy: ReasonNoHybridWorkPolicy
  timeframe: PolicyTimeframe
  totalRequiredDaysInTimeframe: Int
  user: User
}

input PolicyDetailsInput {
  hasMinimumDaysInTimeframe: Boolean
  reasonNoHybridWorkPolicy: ReasonNoHybridWorkPolicy
  totalRequiredDaysInTimeframe: Int
  hasHybridWorkPolicy: Boolean
  hasTeamSpecificPolicies: Boolean
  freeTextPolicy: String
  hasMandatoryDaysInOffice: Boolean
  timeframe: PolicyTimeframe
  entityId: String
}

type PolicyInput {
  companyId: String!
  details: PolicyDetails
  policies: [AttendancePolicy!]
  teamId: String!
  user: User
}

input PolicyInputInput {
  companyId: String!
  teamId: String!
  policies: [AttendancePolicyInput!]
  details: PolicyDetailsInput
}

type PolicySuccessRates {
  companyWide: AttendanceValue
  perTeam: [AttendanceValue!]
}

enum PolicyTimeframe {
  Weekly
  Yearly
  Monthly
  Other
  Quarterly
}

type PotentialProductFilters {
  estimatePrice: Boolean
  fitoutState: UnitFitoutStateOptional
  fitoutStates: [UnitFitoutState!]
  hideMultiFloorSelections: Boolean
  includeInvalid: Boolean
  includeUnavailable: Boolean
  includeValidUnits: Boolean
  onlyCombinations: Boolean
  overrideMinTermMonths: Int
  price: MoneyRange
  pricePerSqft: MoneyRange
  sqFt: Int32OptionalRange
  startDate: Date
  termLength: Int
  totalUnits: Int
  user: User
}

input PotentialProductFiltersInput {
  onlyCombinations: Boolean
  includeInvalid: Boolean
  estimatePrice: Boolean
  totalUnits: Int
  includeUnavailable: Boolean
  includeValidUnits: Boolean
  pricePerSqft: MoneyRangeInput
  hideMultiFloorSelections: Boolean
  price: MoneyRangeInput
  sqFt: Int32OptionalRangeInput
  termLength: Int
  fitoutStates: [UnitFitoutState!]
  overrideMinTermMonths: Int
  startDate: DateInput
  fitoutState: UnitFitoutStateOptionalInput
}

type Preference {
  allowedFrequencies: [CommunicationFrequency!]
  description: String!
  frequency: CommunicationFrequency
  id: String!
  name: String!
  user: User
}

type Pricing {
  annualPsfBreakdown: Breakdown
  appliedMinimumTermMonths: Int!
  brokerFeeLumpSum: Money
  hasEstimations: Boolean!
  monthlyBreakdown: Breakdown
  tiers: TierInputs
  user: User
}

type Printer {
  id: String!
  name: String!
  user: User
}

type Priority {
  id: String!
  name: String!
  sla: Int!
  user: User
}

enum PriorityType {
  Medium
  Urgent
  High
  Low
}

type ProcessWorkplaceStrategyTypeformResponseCommand {
  json: String!
  user: User
}

type Product {
  advertisedPrice: Money
  archived: Boolean!
  availableFrom: Timestamp
  content: JSON
  desks: Int!
  displayOnWebsite: Boolean!
  facilities: [ProductFacility!]
  floors: [String!]!
  id: String!
  isFavourite: Boolean
  location: Location
  maximumTermMonths: Int!
  minimumTermMonths: Int!
  name: String!
  price: ProductMoney
  pricePerSqFt: ProductMoney
  sqFt: Int!
  status: ProductStatus
  templateBrochureId: String
  terms: [ProductTerm!]
  type: ProductType
  unitGroupId: String!
  unitIds: [String!]!
  units: [Unit]
}

type ProductArchived {
  id: String!
}

type ProductCreated {
  id: String!
  product: Product
}

type ProductDeleted {
  product: Product
}

type ProductEdge {
  cursor: String!
  node: Product
}

type ProductFacility {
  available: Boolean!
  name: String!
}

type ProductFilterOptions {
  desk: [Int!]!
  facility: [String!]!
  price: [Int!]!
  sqFt: [Int!]!
}

input ProductFiltersInput {
  price: ProductRangeFilterInput
  onlyArchived: Boolean
  polygon: [GeoPointInput!]
  availableFrom: TimestampInput
  desk: ProductRangeFilterInput
  squareFoot: ProductRangeFilterInput
  facility: [String!]
  viewport: ProductViewportInput
  minTerm: RangeInput
}

type ProductMoney {
  currencySymbol: String!
  formatted: String!
  pennies: Int!
}

type ProductPriceRange {
  max: ProductMoney
  min: ProductMoney
}

input ProductRangeFilterInput {
  min: String!
  max: String!
}

type ProductsConnection {
  edges: [ProductEdge!]
  endCursor: String!
  hasNextPage: Boolean!
  pageInfo: PageInfo
  totalCount: Int!
}

enum ProductSortBy {
  NAME
  RANKING
  AVAILABLE_FROM
  DESKS
  LOCATION
  PRICE
  SQFT
  ARCHIVED_AT
  CREATED_AT
  MINIMUM_TERM
}

enum ProductStatus {
  OFF_MARKET
  ON_MARKET
}

type ProductTerm {
  lengthInMonths: Int!
  price: ProductMoney
}

input ProductTermInputInput {
  lengthInMonths: Int!
  price: Int!
}

enum ProductType {
  MANAGED
  SERVICED
}

type ProductUnarchived {
  product: Product
}

type ProductUpdated {
  id: String!
  isPriced: Boolean!
  unitGroupId: String!
}

type ProductViewport {
  nw: GeoPoint
  se: GeoPoint
}

input ProductViewportInput {
  se: GeoPointInput
  nw: GeoPointInput
}

type Profile {
  addresses: [ProfileAddress!]
  associatedDeals: DealList
  birthday: Date
  company: Company
  companyId: String!
  companyTeamId: String!
  emails: [String!]!
  hideBirthday: Boolean!
  id: String!
  img: String!
  jobTitle: String!
  linkedInUrl: String!
  name: String!
  phoneNumbers: [String!]!
  photo: UploadMessage
  profilePhotoUploadId: String!
  tags: [String!]!
  team: CompanyTeam
  user: User
  userId: String!
  website: String!
}

type ProfileAddress {
  country: String!
  postalCode: String!
  streetAddress: String!
  town: String!
  user: User
}

input ProfileAddressInput {
  country: String!
  postalCode: String!
  streetAddress: String!
  town: String!
}

type ProfileCreated {
  profile: Profile
  profileId: String!
  user: User
}

type ProfileDeleted {
  profileId: String!
  user: User
}

type ProfileEdge {
  cursor: String!
  node: Profile
  user: User
}

type ProfileObfuscated {
  profileId: String!
  user: User
  userId: String!
}

type ProfilesConnection {
  edges: [ProfileEdge!]
  pageInfo: PageInfo
  user: User
}

type ProfileUpdated {
  profileId: String!
  user: User
}

type ProvisionPhoneNumberCommand {
  accessId: String!
  user: User
}

type Purchase {
  addon: Addon
  catalogItemId: String!
  dateFulfilled: Timestamp
  feePricePennies: Int!
  id: String!
  notes: String!
  pricePennies: Int!
  quantity: Int!
  recurrenceRule: [Recurrence!]
  tenancyId: String!
}

type PurchaseConnection {
  edges: [PurchaseEdge!]
  pageInfo: PageInfo
}

type PurchaseCreated {
  id: String!
}

type PurchaseDeleted {
  id: String!
}

type PurchaseEdge {
  cursor: String!
  node: Purchase
}

input PurchaseInput {
  catalogItemId: String!
  pricePennies: Int!
  recurrenceRule: [RecurrenceInput!]
  id: String!
  notes: String!
  quantity: Int!
  feePricePennies: Int!
  dateFulfilled: TimestampInput
  tenancyId: String!
}

type PurchaseUpdated {
  id: String!
}

type QualifyLocationCommand {
  id: String!
  user: User
}

type Quote {
  createdAt: Timestamp
  createdBy: String!
  deletedAt: Timestamp
  enquiryId: String!
  id: String!
  mutableData: QuoteMutableData
  status: QuoteStatus
  statusEvents: [QuoteStatusEvent!]
  updatedAt: Timestamp
  updatedBy: String!
  uploads: [UploadMessage]
}

type QuoteCreated {
  enquiryId: String!
  id: String!
}

type QuoteDeleted {
  id: String!
}

type QuoteDuplicated {
  newId: String!
  oldId: String!
}

type QuoteMutableData {
  description: String
  kittFeePennies: Int
  pricePennies: Int
  rejectedReason: String
  statusId: String
  title: String
  uploadIds: [String!]
}

input QuoteMutableDataInput {
  pricePennies: Int
  title: String
  uploadIds: [String!]
  description: String
  rejectedReason: String
  kittFeePennies: Int
  statusId: String
}

type QuoteStatus {
  id: String!
  name: String!
  position: Int!
}

type QuoteStatusEvent {
  createdAt: Timestamp
  createdBy: String!
  id: String!
  quoteId: String!
  statusId: String!
}

type QuoteUpdated {
  id: String!
}

type Range {
  max: Int!
  min: Int!
}

input RangeFilterInput {
  min: String!
  max: String!
}

input RangeInput {
  min: Int!
  max: Int!
}

type RawInsights {
  daily: [RawInsightsInPeriod!]
  monthly: [RawInsightsInPeriod!]
  quarterly: [RawInsightsInPeriod!]
  weekly: [RawInsightsInPeriod!]
}

type RawInsightsInPeriod {
  companyWide: AttendanceValue
  perTeam: [AttendanceValue!]
  periodStartDate: Date
}

enum ReadyStatus {
  Downloading
  NotReady
  Ready
  Syncing
}

enum ReasonNoHybridWorkPolicy {
  CompleteFlexibility
  CompleteStrict
  HasPolicy
  NeedHelp
  OtherSpecified
}

type ReconfigureDevices {
  _null: Boolean
  user: User
}

type ReconfigureProviders {
  _null: Boolean
  user: User
}

type Records {
  ids: [String!]!
}

type RecoverRoomAction {
  id: String!
  user: User
}

type RecoveryEmailSent {
  email: String!
  user: User
}

type Rectangle {
  angle: Float!
  center: GeometricPoint
  height: Int!
  northWest: GeometricPoint
  user: User
  width: Int!
}

type Recurrence {
  end: Timestamp
  lengthInMins: Int!
  rule: String!
  start: Timestamp
}

input RecurrenceInput {
  rule: String!
  lengthInMins: Int!
  start: TimestampInput
  end: TimestampInput
}

"""regional data graphql types"""
type RegionalData {
  holidays: [Holiday]
  region: String
}

type RegisterGuestCommand {
  accessIds: [String!]
  date: Timestamp
  dateUtc: DateTime
  email: String!
  expiryDate: Timestamp
  expiryDateUtc: DateTime
  guestId: String
  locationId: String!
  name: String!
  note: String
  requesterCompanyId: String
  requesterId: String!
  user: User
}

type RegisterUserForBrokerPlatformCommand {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  user: User
}

type RelevantSla {
  slaDateUtc: DateTime
  type: SlaType
}

type ReminderSent {
  leadTenantsReminded: Boolean!
}

type ReminderSentForTenancyTodo {
  _null: Boolean
}

type RemoveSelectionsCommand {
  brokerSearchId: String
  selections: [Selection!]
  shortlistId: String
  user: User
}

type RemoveShortlistsFromDealCommand {
  dealId: String!
  shortlistIds: [String!]!
  user: User
}

type RemoveUserFromLeadTenantsGroupCommand {
  user: User
  userId: String!
}

enum RenewalType {
  RENEWAL_SAME_SPACE
  UnknownRenewalType
  NA
  RENEWAL_NEW_SPACE
}

type ReorderMatchedSpacesCommand {
  matches: [MatchedSpace!]
  user: User
}

type Request {
  archivedAt: Timestamp
  assignee: User
  assigneeId: String!
  category: Category
  categoryId: String!
  chatIds: [String!]!
  chats: [Chat]
  comments: [Comment!]
  contractor: String!
  cost: String!
  createdAt: Timestamp
  creator: User
  daysUntilSla: Int!
  deletedAt: Timestamp
  detail: String!
  dueDate: String!
  fileIds: [String!]!
  files: [UploadMessage]
  id: String!
  location: Location
  locationId: String!
  priority: String!
  status: String!
  summary: String!
  techRequest: Boolean
  unit: Unit
  unitId: String!
  updatedAt: Timestamp
  user: User
  userId: String!
}

type RequestAddShortlistToValveCommand {
  brokerSearchId: String!
  user: User
}

type RequestArchived {
  id: String!
  user: User
}

type RequestCreated {
  RequestId: String!
  RequestSummary: String!
  Title: String!
  request: Request
  user: User
}

type RequestDeleted {
  id: String!
  request: Request
  user: User
}

type RequestUpdated {
  Messages: [String!]!
  RequestId: String!
  RequestSummary: String!
  Title: String!
  UserId: String!
  request: Request
  user: User
}

type RequiredFields {
  fields: [String!]!
  id: String!
  name: String!
  user: User
}

type ResendGuestDayPass {
  guestId: String!
  user: User
}

type ResendOnboardingEmailCommand {
  email: String
  user: User
  userId: String
}

type ResendVerificationEmailForBrokerPlatformCommand {
  email: String!
  user: User
}

type ResetPassword {
  email: String!
  user: User
}

type ResetPasswordCommand {
  password: String!
  token: String!
  user: User
}

enum Resource {
  ACCESS
  LEAD_TENANT
  ROOM
}

type RestartDoorCommand {
  accessId: String!
  user: User
}

type RestoreBuildingUnitCommand {
  unitId: String!
  user: User
}

type RestoreCompanyCommand {
  id: String!
  user: User
}

type RestoreDeal {
  id: String!
  user: User
}

type RestoreMatchedSpace {
  id: String!
  user: User
}

type RestoreShortlistCommand {
  shortlistId: String!
  user: User
}

type RevokeLoginForUser {
  user: User
  userId: String!
}

type RollingCondition {
  completed: Boolean!
  exercised: Boolean!
  exercisedDate: Timestamp
  id: String!
  minimumDate: Timestamp
  numberOfMonths: Int!
}

input RollingConditionInput {
  id: String!
  numberOfMonths: Int!
  minimumDate: TimestampInput
  exercised: Boolean!
  exercisedDate: TimestampInput
  completed: Boolean!
}

type Room {
  availability(date: TimestampInput!, duration: Int!): GetRoomAvailabilityResponse
  description: String!
  id: String!
  image: UploadMessage
  imageUploadId: String!
  img: String!
  location: Location
  locationId: String!
  name: String!
  people: Int!
  timezone: String!
  user: User
}

type RoomCreated {
  id: String!
  room: Room
  user: User
}

type RoomDeletedEffect {
  id: String!
  room: Room
  user: User
}

type RoomEdge {
  cursor: String!
  node: Room
  user: User
}

type RoomMutableData {
  capacity: Int!
  description: String
  imageUploadId: String
  locationId: String!
  name: String!
  timezone: String!
  user: User
}

type RoomOrDeskBooking {
  bookedBy: Profile
  bookedFor: Profile
  bookedForUser: User
  bookedForUserId: String!
  createdAt: Timestamp
  createdByCompanyId: String!
  createdByUserId: String!
  deletedAt: Timestamp
  desk: Desk
  end: DateTime
  entityId: String!
  entityType: BookableEntity
  id: String!
  room: MeetingRoom
  start: DateTime
  user: User
}

type RoomOrDeskBookingEdge {
  cursor: String!
  node: RoomOrDeskBooking
  user: User
}

type RoomRecoveredEffect {
  room: Room
  user: User
}

type RoomsConnection {
  edges: [RoomEdge!]
  pageInfo: PageInfo
  user: User
}

type RoomUpdated {
  id: String!
  room: Room
  user: User
}

type RootQuery {
  accesssvc_GetAccess(id: String!): GetAccessResponse
  accesssvc_GetAccessCode(subjectId: String!): GetAccessCodeResponse
  accesssvc_GetAccesses(ids: [String!], lat: Float, lng: Float, locationIds: [String!], managed: Boolean, testtestetst: String): GetAccessesResponse
  accesssvc_GetPhoto(accessId: String!): GetPhotoResponse
  accesssvc_GetVideoToken(accessId: String!): GetVideoTokenResponse
  addonsvc_GetAddon(id: String!): GetAddonResponse
  addonsvc_GetAddons(ids: [String!], after: String, first: Int, query: String): AddonsConnection
  addonsvc_GetPurchase(id: String!): GetPurchaseResponse
  addonsvc_GetPurchases(ids: [String!], scheduleIds: [String!], after: String, first: Int, tenancyId: String): PurchaseConnection
  areasvc_GetBoundaries(ids: [String!], level: Int!, coords: [AreaGeoPointInput!], placeIds: [String!], query: String): GetBoundariesResponse
  areasvc_GetBoundary(id: String!): GetBoundaryResponse
  areasvc_GetBoundaryList(placeIds: [String!], query: String, ids: [String!], level: Int!, coords: [AreaGeoPointInput!]): GetBoundaryListResponse
  areasvc_GetPlace(id: String!): GetPlaceResponse
  areasvc_GetPlaces(ids: [String!]!, query: String!): GetPlacesResponse
  authToken: String

  """Get UK bank holidays based on the region provided as an argument"""
  bankholidays_getBankHolidays(region: String!): BankHoliday

  """
  Return a boolean value as to whether or not the current date is a bank holiday
  """
  bankholidays_isTodayABankHoliday(region: String!, date: DateInput!): Boolean
  bookingsvc_GetAdminRoomBookings(userIds: [String!], locationIds: [String!], roomIds: [String!], after: String, first: Int, start: DateTimeInput, end: DateTimeInput): PaginatedBookingsConnection
  bookingsvc_GetAmenities(entityTypes: [BookableEntity!], companyId: String): GetAmenitiesResponse
  bookingsvc_GetAttendanceState(timezone: String): GetAttendanceStateResponse
  bookingsvc_GetBookableRooms(bookingEnd: DateTimeInput, roomIds: [String!], locationIds: [String!], amenityIds: [String!], bookingStart: DateTimeInput): GetBookableRoomsResponse
  bookingsvc_GetBooking(id: String!): Bookingsvc_GetBookingResponse
  bookingsvc_GetCapacity(companyId: String): GetCapacityResponse
  bookingsvc_GetDeskBookings(companyIds: [String!], startUtcMin: DateTimeInput, startUtcMax: DateTimeInput): GetDeskBookingsResponse
  bookingsvc_GetFloorplanZones(tenancyId: String!): GetFloorplanZonesResponse
  bookingsvc_GetFloorplansForTenancy(tenancyIds: [String!]): GetFloorplansForTenancyResponse
  bookingsvc_GetMinSafeCapacity(_null: Boolean): GetMinSafeCapacityResponse
  bookingsvc_GetMyCompanyDesks(tenancyIds: [String!]!): GetMyCompanyDesksResponse
  bookingsvc_GetMyDeskBookings(start: DateTimeInput, end: DateTimeInput, after: String, first: Int): PaginatedBookingsConnection
  bookingsvc_GetMyRoomBookings(roomIds: [String!], after: String, first: Int, start: DateTimeInput, end: DateTimeInput): PaginatedBookingsConnection
  bookingsvc_GetRoom(id: String!): MeetingRoom
  bookingsvc_GetRoomBookings(first: Int, start: DateTimeInput, end: DateTimeInput, filterToMyCompany: Boolean, roomIds: [String!], after: String): PaginatedBookingsConnection
  bookingsvc_GetRooms(ids: [String!]!, locationIds: [String!]!): Bookingsvc_GetRoomsResponse
  bookingsvc_GetTodaysAttendance(timezone: String): AttendanceStateForDate
  brochuresvc_GetBrochure(id: String!): GetBrochureResponse
  brochuresvc_GetKittTemplateForEntityGroup(entityIds: [String!]!): GetKittTemplateForEntityGroupResponse
  chatsvc_GetChat(chatId: String!, showArchived: Boolean): GetChatResponse
  chatsvc_GetChatHistory(first: Int, order: GetChatHistoryOrder, userId: String, after: String): ChatMessageConnection
  chatsvc_GetChats(page: Int, chatIds: [String!], userIds: [String!], showArchived: Boolean, types: [ChatType!], companyIds: [String!], userId: String): GetChatsResponse
  chatsvc_GetChatsForUser(types: [ChatType!]): GetChatsForUserResponse
  chatsvc_GetChatsSince(companyIds: [String!], since: DateTimeInput): GetClientChatsSinceResponse
  chatsvc_GetMessages(chatId: String!): GetMessagesResponse
  chatsvc_GetMessagesInThread(parentMessageId: String!): GetMessagesInThreadResponse
  chatsvc_GetUnreadMessages(limit: Int, userIds: [String!]!, chatIds: [String!]!): GetMessagesByChatIdResponse
  chatsvc_GetUsersUnreadChatMessages(_null: Boolean): GetUsersUnreadChatMessagesResponse
  companysvc_GetAgencyCompanyForUrl(url: String!): GetAgencyCompanyForUrlResponse
  companysvc_GetAgencyDomains(_null: Boolean): GetAgencyDomainsResponse
  companysvc_GetCompanies(priorityIds: [String!], ids: [String!], archived: Boolean, types: [CompanyType!], first: Int, after: String, query: String): GetCompaniesResponse
  companysvc_GetCompaniesForAccountManager(accountManagerUserId: String!): GetCompaniesForAccountManagerResponse
  companysvc_GetCompaniesForClientSupportSpecialists(clientSupportSpecialistUserIds: [String!]!): GetCompaniesForClientSupportSpecialistsResponse
  companysvc_GetCompany(companyId: String!): Company
  companysvc_GetCompanySizes(_null: Boolean): GetCompanySizesResponse
  companysvc_GetCultureValues(_null: Boolean): GetCultureValuesResponse
  companysvc_GetHybridWorkInformation(companyId: String!): GetHybridWorkInformationResponse
  companysvc_GetIndustries(_null: Boolean): GetIndustriesResponse
  companysvc_GetMyAttendancePolicy(_null: Boolean): GetMyAttendancePolicyResponse
  companysvc_GetOfficeValues(_null: Boolean): GetOfficeValuesResponse
  companysvc_GetTenantPriorities(_null: Boolean): GetTenantPrioritiesResponse
  companysvc_GetWhitelistedCompanyForEmail(email: String!): GetWhitelistedCompanyForEmailResponse
  companysvc_GetWorkplaceGoals(_null: Boolean): GetWorkplaceGoalsResponse
  companysvc_GetWorkspaceStatuses(_null: Boolean): GetWorkspaceStatusesResponse
  configuratorsvc_GetConfiguratorSession(id: String!): GetConfiguratorSessionResponse
  dealsvc_GetActivities(collaboratorIds: [String!]!, googleCalendarIds: [String!]!, page: Int!, includeCompleted: Boolean!, startingAfter: TimestampInput, dueBefore: TimestampInput, assigneeIds: [String!]!, titleQuery: String!, order: ActivityOrder, ids: [String!]!, limit: Int!, completedAfter: TimestampInput, dealIds: [String!]!, dueAfter: TimestampInput, startingBefore: TimestampInput, completedBefore: TimestampInput, types: [String!]!): GetActivitiesResponse
  dealsvc_GetActivity(id: String!): GetActivityResponse
  dealsvc_GetActivityIdsForSelection(unitGroupId: String!): GetActivityIdsForSelectionResponse
  dealsvc_GetActivityTypes(_null: Boolean): GetActivityTypesResponse
  dealsvc_GetAllSalesTeams(_null: Boolean): GetAllSalesTeamsResponse

  """Checks whether user is primary broker contact on requested search"""
  dealsvc_GetBrokerSearch(id: String!): GetBrokerSearchResponse
  dealsvc_GetDeal(id: String!): GetDealResponse
  dealsvc_GetDealFromBrokerSearch(brokerSearchId: String!): GetDealFromBrokerSearchResponse
  dealsvc_GetDealNotes(dealId: String!, ids: [String!]!): GetDealNotesResponse
  dealsvc_GetDealShortlists(userId: String, dealId: String, primaryBrokerContactId: String): GetDealShortlistsResponse
  dealsvc_GetDealSpaceMatch(id: String!): GetDealSpaceMatchResponse
  dealsvc_GetDealSpaceMatches(dealId: String!): GetDealSpaceMatchesResponse
  dealsvc_GetDeals(ids: [String!]!, stageId: String!, stageIds: [String!]!, page: Int!, limit: Int!, order: DealOrder, filters: DealFiltersInput): GetDealsResponse
  dealsvc_GetDealsList(after: String, first: Int): DealsConnection
  dealsvc_GetLeadSources(_null: Boolean): GetLeadSourcesResponse
  dealsvc_GetLostReasons(_null: Boolean): GetLostReasonsResponse
  dealsvc_GetMatchedSpaces(includeDeleted: Boolean!, dealId: String!, requirementsId: String!): GetMatchedSpacesResponse
  dealsvc_GetNote(noteId: String!): GetNoteResponse
  dealsvc_GetPipelineStages(_null: Boolean): GetStagesResponse
  dealsvc_GetSalesTeam(id: String, brokerCompanyId: String): GetSalesTeamResponse
  dealsvc_GetSearchRequirements(id: String): GetSearchRequirementsResponse
  dealsvc_GetSelectionFromUnitGroupId(unitGroupId: String!, brokerSearchId: String): Selection
  dealsvc_GetShortlist(id: String!): GetShortlistResponse
  dealsvc_GetShortlistSummary(id: String!): GetShortlistSummaryResponse
  dealsvc_GetTemplate(id: String!): GetTemplateResponse
  dealsvc_GetTemplates(ids: [String!]!, types: [TemplateType!], tags: [String!]!, query: String!, createdBy: [String!]!): GetTemplatesResponse
  dealsvc_GetThreadDeals(threadIds: [String!]!): GetThreadDealsResponse

  """
  Gets all broker searches user has created and all searches connected to deals
  of which their profile id is the primary broker contact id
  """
  dealsvc_GetUserBrokerSearches(userId: String): GetUserBrokerSearchesResponse
  dealsvc_GetUserShortlists(page: Int, query: String, onlyUserMade: Boolean, includeShortlistsByProfileId: String, onlyShared: Boolean, onlyArchived: Boolean, containingUnitGroupIds: [String!], excludeUnitGroupIds: [String!], first: Int, descending: Boolean, sortBy: String): GetUserShortlistsResponse
  dealsvc_GetUserViewingRequests(onlyUpcoming: Boolean): GetUserViewingRequestsResponse
  dealsvc_GetUserViewings(includeViewingsByProfileId: String): GetUserViewingsResponse
  dealsvc_GetViewingRequestsForShortlist(shortlistId: String!): GetViewingRequestsForShortlistResponse
  deploymentsvc_GetReadinessState(_null: Boolean): GetReadinessStateResponse
  deploymentsvc_GetStatus(_null: Boolean): GetDeploymentStatusResponse
  devsvc_GetDeployments(username: String, service: String): GetDeploymentsResponse
  documentsvc_GetDocument(id: String!): GetDocumentResponse
  documentsvc_GetDocumentTypes(metadata: [MetadataInput!], ids: [String!]): GetDocumentTypesResponse
  documentsvc_GetDocuments(typeIds: [String!], ids: [String!], metadata: [MetadataInput!]): GetDocumentsResponse
  documentsvc_GetVersionedDocuments(ids: [String!], metadata: [MetadataInput!], typeIds: [String!]): GetVersionedDocumentsResponse
  enquirysvc_GetAllEnquiries(_null: Boolean): GetAllEnquiriesResponse
  enquirysvc_GetAllEnquiryStatuses(_null: Boolean): GetAllEnquiryStatusesResponse
  enquirysvc_GetAllQuoteStatuses(_null: Boolean): GetAllQuoteStatusesResponse

  """
  Gets enquiries; if onlyMine is true, only returns enquiries for companies that the user is an account manager for
  """
  enquirysvc_GetEnquiriesPaginated(filters: EnquiryFiltersInput, limit: Int!, offset: Int!): GetEnquiriesPaginatedResponse
  enquirysvc_GetEnquiry(id: String!): GetEnquiryResponse
  enquirysvc_GetMyCompanyEnquiries(after: String!, first: Int!, status: [String!]): GetMyCompanyEnquiriesResponse
  favouritesvc_GetFavourites(userId: String): GetFavouritesResponse
  feedbacksvc_CanShowFeaturesToUser(features: [TenantAppFeature!]): CanShowFeaturesToUserResponse
  gmailsvc_GetEmail(id: String!): GetEmailResponse
  gmailsvc_GetEmailContent(ids: [String!]!): GetEmailContentResponse
  gmailsvc_GetEmails(ids: [String!]!, emailAddress: [String!]!, gmailThreadId: [String!]!): GetEmailsResponse
  gmailsvc_GetSharedInboxes(_null: Boolean): GetSharedInboxesResponse
  guestsvc_GetAccesses(token: String!): GetGuestAccessesResponse
  guestsvc_GetCompanyGuests(companyId: String!, locationIds: [String!]!, registeredBetween: GuestDateRangeInput): GetCompanyGuestsResponse
  guestsvc_GetGuest(guestId: String, token: String): GetGuestResponse
  guestsvc_GetGuests(locationIds: [String!]!, registeredBetween: GuestDateRangeInput): GetGuestsResponse
  guestsvc_GetMyGuestsPaginated(after: String, first: Int, visitAfter: TimestampInput, visitBefore: TimestampInput): GuestConnection
  iamsvc_GetModel(_null: Boolean): GetModelResponse
  iamsvc_GetPermissions(companyId: String, userId: String, locationId: String): GetPermissionsResponse
  iamsvc_GetPolicies(_null: Boolean): GetPoliciesResponse
  iamsvc_MyPermissions(locationId: String, companyId: String, userId: String): GetPermissionsResponse
  insightsvc_GetAccessLogs(after: String, first: Int, beforeTime: TimestampInput, afterTime: TimestampInput, accessIds: [String!]): GetAccessLogsResponse
  insightsvc_GetAverageAccessesByCompany(companyId: String!): GetAverageAccessesByCompanyResponse
  insightsvc_GetAverageAttendancePerWeek(companyId: String!, start: DateInput, end: DateInput): GetAverageAttendancePerWeekResponse
  insightsvc_GetBusiestDayOfTheWeek(end: DateInput, companyId: String!, start: DateInput): GetBusiestDayOfTheWeekResponse
  insightsvc_GetCompanyOfficeAttendance(start: DateInput, end: DateInput, granularity: PeriodDataGranularity, companyId: String!): GetCompanyOfficeAttendanceResponse
  insightsvc_GetCompanyWeeklyOfficeAttendance(timezone: String, companyId: String!): GetCompanyWeeklyOfficeAttendanceResponse
  insightsvc_GetDealInsights(_null: Boolean): GetDealInsightsResponse
  insightsvc_GetIndustryInsights(companySizeId: String!, companyId: String, dayPositions: [Int!], industryId: String!): GetIndustryInsightsResponse
  insightsvc_GetMeanAgeForCompany(companyId: String!): GetMeanAgeForCompanyResponse
  insightsvc_GetMyOfficeAttendance(timezone: String, companyId: String): GetMyOfficeAttendanceResponse
  insightsvc_GetOfficeAttendance(startUtcMax: DateTimeInput, companyIds: [String!], startUtcMin: DateTimeInput): GetOfficeAttendanceResponse
  insightsvc_GetOfficeInsights(companyId: String, dateRange: DateRangeInput, dayPositions: [Int!]): GetOfficeInsightsResponse
  insightsvc_GetQuietestDayOfTheWeek(companyId: String!, start: DateInput, end: DateInput): GetQuietestDayOfTheWeekResponse
  issuesvc_GetCategories(_null: Boolean): GetIssueCategoriesResponse
  issuesvc_GetIssue(id: String, filters: IssueFiltersInput): GetIssueResponse
  issuesvc_GetIssueUpdateWorkflows(_null: Boolean): GetIssueUpdateWorkflowsResponse
  issuesvc_GetIssueUpdates(IssueId: String!): GetIssueUpdatesResponse
  issuesvc_GetIssues(sortBy: IssuesSortBy, filters: IssueFiltersInput, after: String, first: Int): IssuesConnection
  issuesvc_GetMyCompanyIssues(after: String!, first: Int!, group: CompanyIssueGroup, companyId: String): IssuesConnection

  """
  Gets issues for a user, also gets issues for their location if they are a lead tenant
  """
  issuesvc_GetMyIssues(after: String!, first: Int!, statusIds: [String!]): IssuesConnection
  issuesvc_GetPriorities(_null: Boolean): GetIssuePrioritiesResponse
  issuesvc_GetStatuses(_null: Boolean): GetIssueStatusesResponse
  locationsvc_GetAreas(_null: Boolean): GetAreasResponse
  locationsvc_GetBuilding(id: String!): GetBuildingResponse
  locationsvc_GetBuildingTraits(types: [BuildingTraitType!]): GetBuildingTraitsResponse
  locationsvc_GetCombinationDetails(unitIds: [String!]!): GetCombinationDetailsResponse
  locationsvc_GetCommercialModel(inputs: CommercialModelInputsInput): GetCommercialModelResponse

  """Get Locations with enhanced args (Favourites etc...)"""
  locationsvc_GetEnhancedLocations(facilityIds: [String!], boundaryId: String, polygonArray: [CoordinateInput!], unitFilters: UnitFiltersInput, sortBy: LocationSortBy, query: String, archived: Boolean, after: String, productFilters: LocationProductFiltersInput, onlyVisibleOnWebsite: Boolean, sortByCoordinates: CoordinateInput, statuses: [LocationStatus!], publishedState: Boolean, unverified: Boolean, verifiedBetween: DateRangeInput, unqualified: Boolean, qualifiedBetween: DateRangeInput, includeArchived: Boolean, first: Int, ids: [String!], hideExistingOffer: Boolean, onlyLiveOnSearch: Boolean, potentialProductFilters: PotentialProductFiltersInput, address: AddressInput, onMarket: Boolean, isKittChoice: Boolean, descending: Boolean): GetLocationsPaginatedResponse
  locationsvc_GetFacilities(_null: Boolean): GetLocationFacilitiesResponse
  locationsvc_GetFieldsRequiredForNextStatus(status: StatusOptionalInput, locationId: String!): GetFieldsRequiredForNextStatusResponse
  locationsvc_GetLocation(id: String): GetLocationResponse
  locationsvc_GetLocationForVerification(id: String): GetLocationResponse
  locationsvc_GetLocationsPaginated(descending: Boolean, statuses: [LocationStatus!], qualifiedBetween: DateRangeInput, publishedState: Boolean, onlyVisibleOnWebsite: Boolean, onlyLiveOnSearch: Boolean, unverified: Boolean, includeArchived: Boolean, query: String, archived: Boolean, potentialProductFilters: PotentialProductFiltersInput, facilityIds: [String!], verifiedBetween: DateRangeInput, polygonArray: [CoordinateInput!], first: Int, ids: [String!], onMarket: Boolean, after: String, isKittChoice: Boolean, unqualified: Boolean, hideExistingOffer: Boolean, unitFilters: UnitFiltersInput, sortBy: LocationSortBy, productFilters: LocationProductFiltersInput, sortByCoordinates: CoordinateInput, address: AddressInput): LocationsConnection
  locationsvc_GetPaginatedLocations(first: Int, ids: [String!], onMarket: Boolean, after: String, isKittChoice: Boolean, unqualified: Boolean, hideExistingOffer: Boolean, unitFilters: UnitFiltersInput, sortBy: LocationSortBy, productFilters: LocationProductFiltersInput, sortByCoordinates: CoordinateInput, address: AddressInput, descending: Boolean, statuses: [LocationStatus!], qualifiedBetween: DateRangeInput, publishedState: Boolean, onlyVisibleOnWebsite: Boolean, onlyLiveOnSearch: Boolean, unverified: Boolean, query: String, archived: Boolean, potentialProductFilters: PotentialProductFiltersInput, facilityIds: [String!], verifiedBetween: DateRangeInput, polygonArray: [CoordinateInput!], includeArchived: Boolean): GetLocationsPaginatedResponse
  locationsvc_GetPricing(unitIds: [String!]!, overrideMinTermMonths: Int, tierInputs: TierInputsInput): GetPricingResponse
  locationsvc_GetSellingPoints(_null: Boolean): GetLocationSellingPointsResponse
  locationsvc_GetSpaceMatchLocations(descending: Boolean, statuses: [LocationStatus!], qualifiedBetween: DateRangeInput, publishedState: Boolean, onlyVisibleOnWebsite: Boolean, onlyLiveOnSearch: Boolean, unverified: Boolean, facilityIds: [String!], verifiedBetween: DateRangeInput, polygonArray: [CoordinateInput!], includeArchived: Boolean, query: String, archived: Boolean, potentialProductFilters: PotentialProductFiltersInput, first: Int, isKittChoice: Boolean, ids: [String!], onMarket: Boolean, after: String, unqualified: Boolean, hideExistingOffer: Boolean, unitFilters: UnitFiltersInput, address: AddressInput, sortBy: LocationSortBy, productFilters: LocationProductFiltersInput, sortByCoordinates: CoordinateInput): GetSpaceMatchLocationsResponse
  locationsvc_GetSpaceMatchLocationsV2(sortBy: LocationSortBy, productFilters: LocationProductFiltersInput, sortByCoordinates: CoordinateInput, address: AddressInput, descending: Boolean, statuses: [LocationStatus!], qualifiedBetween: DateRangeInput, publishedState: Boolean, onlyVisibleOnWebsite: Boolean, onlyLiveOnSearch: Boolean, unverified: Boolean, query: String, archived: Boolean, potentialProductFilters: PotentialProductFiltersInput, facilityIds: [String!], verifiedBetween: DateRangeInput, polygonArray: [CoordinateInput!], includeArchived: Boolean, first: Int, ids: [String!], onMarket: Boolean, after: String, isKittChoice: Boolean, unqualified: Boolean, hideExistingOffer: Boolean, unitFilters: UnitFiltersInput): GetSpaceMatchLocationsResponse
  locationsvc_GetTrainStationsForLocation(locationId: String!): GetTrainStationsForLocationResponse
  marketing_contentsvc_GetMarketingContent(id: String!, locationId: String!, slug: String!, unitId: String!): GetMarketingContentResponse
  marketing_contentsvc_GetMarketingContents(locationIds: [String!]!, area: String!, marketingContentIds: [String!]!, marketingStatus: MarketingStatusInput): GetMarketingContentsResponse
  me: User
  metasvc_GetPermissions(_null: Boolean): GetPermissionKeysResponse
  notificationsvc_GetMyNotificationPreferences(metadata: [NotificationPreferenceMetadataInput!]): GetMyNotificationPreferencesResponse
  notificationsvc_GetNotifications(limit: Int!, offset: Int!, onlyUnread: Boolean): GetNotificationsResponse
  notificationsvc_GetNotificationsPaginated(first: Int, query: String, orderByUnread: Boolean, ids: [String!], after: String): NotificationsConnection
  ordersvc_DoesOrderMeetMSABaseline(orders: [OrderInputInput!], tenancyId: String!): DoesOrderMeetMSABaselineResponse
  ordersvc_GetCategories(groupId: String): GetOrderCategoriesResponse
  ordersvc_GetOrderHistory(tenancyId: String!, categoryId: String!): OrderList
  ordersvc_GetSubscribedCategoryGroupsForTenancy(tenancyId: String!): GetSubscribedCategoryGroupsForTenancyResponse

  """Get Products with enhanced args (Favourites etc...)"""
  productsvc_GetEnhancedProducts(rankAllProducts: Boolean, after: String, onMarket: Boolean, favourites: Boolean, descending: Boolean, filters: ProductFiltersInput, ids: [String!], includeArchived: Boolean, boundaryId: String, query: String, first: Int, sortBy: ProductSortBy, locationIds: [String!], unitIds: [String!]): GetProductsResponse
  productsvc_GetProduct(id: String!): GetProductResponse
  productsvc_GetProducts(unitIds: [String!], onMarket: Boolean, includeArchived: Boolean, locationIds: [String!], sortBy: ProductSortBy, descending: Boolean, query: String, filters: ProductFiltersInput, after: String, first: Int, rankAllProducts: Boolean, ids: [String!]): GetProductsResponse
  profilesvc_GetProfile(id: String, userId: String): GetProfileResponse
  profilesvc_GetProfileForEmail(email: String!): GetProfileResponse
  profilesvc_GetProfiles(userIds: [String!], query: String, companyId: String, tags: [String!], limit: Int, companyIds: [String!], ids: [String!]): GetProfilesResponse
  profilesvc_GetProfilesList(ids: [String!], userIds: [String!], query: String, companyId: String, tags: [String!], after: String, first: Int): ProfilesConnection
  profilesvc_GetUserIdsWithNoTeam(_null: Boolean): GetUserIdsWithNoTeamResponse
  requestsvc_GetAssignee(locationId: String!, categoryId: String!): GetAssigneeResponse
  requestsvc_GetAssignments(_null: Boolean): GetAssignmentsResponse
  requestsvc_GetCategories(categoryIds: [String!]!): GetCategoriesResponse
  requestsvc_GetEvent(id: String!): GetEventResponse
  requestsvc_GetEvents(id: String!): GetEventsResponse
  requestsvc_GetOrderedPriorities(_null: Boolean): GetOrderedPrioritiesResponse
  requestsvc_GetPriorities(_null: Boolean): GetPrioritiesResponse
  requestsvc_GetRequest(id: String!): GetRequestResponse
  requestsvc_GetRequests(ignoreStatuses: [String!], reporters: [String!], techRequest: Boolean, priorities: [String!], statuses: [String!], unassigned: Boolean, categories: [String!], ids: [String!], page: Int, scheduledForDay: String, sortBy: String, unitIds: [String!], onlyArchived: Boolean, status: String, assigneeIds: [String!], locationIds: [String!], query: String, includeArchived: Boolean): GetRequestsResponse
  roomsvc_CheckAvailability(roomId: String!, start: TimestampInput, minutes: Int!): CheckAvailabilityResponse
  roomsvc_GetBooking(bookingId: String!): GetBookingResponse
  roomsvc_GetBookings(userIds: [String!]!, startDate: TimestampInput, endDate: TimestampInput, sortBy: SortBy, page: Int!, descending: Boolean!, bookingIds: [String!]!, locationIds: [String!]!, roomIds: [String!]!, scopeByUser: Boolean!): GetBookingsResponse
  roomsvc_GetMyBookings(_null: Boolean): GetBookingsResponse
  roomsvc_GetMyBookingsPaginated(ids: [String!], after: String, afterDate: TimestampInput, beforeDate: TimestampInput, includeOngoing: Boolean, first: Int, query: String, sortBy: BookingSortBy, ascending: Boolean): BookingsConnection
  roomsvc_GetMyRooms(roomIds: [String!]): GetRoomsResponse
  roomsvc_GetRoom(roomId: String!): Room
  roomsvc_GetRoomAvailabilitySlots(roomId: String!, date: TimestampInput, duration: Int!): GetRoomAvailabilityResponse
  roomsvc_GetRooms(locationId: String!, companyId: String!, userId: String!): GetRoomsResponse
  roomsvc_GetRoomsPaginated(query: String, after: String, first: Int): RoomsConnection
  schedulersvc_GetSchedules(modelIds: [String!]!): GetSchedulesResponse
  searchsvc_GetBookingsTimeline(after: String!, first: Int!, filter: [BookingTimelineEventType!]): BookingTimelineConnection
  searchsvc_GetCompanies(onlyActive: Boolean, onlyActiveOrApproved: Boolean, companyTypes: [String!], query: String!): SearchGetCompaniesResponse
  searchsvc_GetDealTimeline(dealId: String!): SearchGetDealTimelineResponse
  searchsvc_GetDeals(query: String!): SearchGetDealsResponse
  searchsvc_GetIndexKey(indices: [String!], index: String): GetIndexKeyResponse
  searchsvc_GetIssues(query: String!): SearchGetIssuesResponse
  searchsvc_GetLocations(allowUnoccupied: Boolean, query: String!, allowUnverified: Boolean, omitQualified: Boolean, includeArchived: Boolean, allowVerified: Boolean, companyIds: [String!], allowOccupied: Boolean, filterOperand: GetLocationsFilterOperand): SearchGetLocationsResponse
  searchsvc_GetLocationsInbox(onlyPending: Boolean, onlyArchived: Boolean, agencyCompanyId: String, entityTypes: [LocationsInboxEntityType!], polygon: [CoordinateInput!], onlyKittSpace: Boolean, priceModePsf: Boolean, pageSize: Int!, query: String!, sortBy: [LocationsInboxSortByInput!], sqft: Int32OptionalRangeInput, price: MoneyRangeInput, onlyLive: Boolean, agentProfileId: String, page: Int!, onlyLiveOnSearch: Boolean): SearchGetLocationsInboxResponse
  searchsvc_GetRequests(query: String!): SearchGetRequestsResponse
  searchsvc_GetServiceActivities(after: String!, first: Int!, orderCategoryIds: [String!], activityTypes: [ServiceActivityType!], subjectCompanyIds: [String!]): GetServiceActivitiesResponse
  searchsvc_GetUnits(query: String!): SearchGetUnitsResponse
  searchsvc_GetUsers(query: String, scopeToMyCompany: Boolean, companyIds: [String!], companyTypes: [String!], orIsLeadTenant: Boolean): SearchGetUsersResponse
  searchsvc_SearchAccesses(query: String!): Records
  searchsvc_SearchProfiles(query: String!, tag: [String!]!): Records
  tenancysvc_GetAllMoveInTenancies(_null: Boolean): GetTenanciesList
  tenancysvc_GetFloorplanZonesForTenancy(id: String!): GetFloorplanZonesForTenancyResponse
  tenancysvc_GetTenancies(locationIds: [String!], restrictToMyTenancies: Boolean, first: Int, includedDeleted: Boolean, cwpUserIds: [String!], dealIds: [String!], ids: [String!], current: Boolean, currentTimelineStage: String, statusValues: [TenancyStatusValueInput!], hasBeenSetupForTenancy: Boolean, statusValue: TenancyStatusValueInput, unitIds: [String!], companyIds: [String!], after: String, restrictToMyWatchedTenancies: Boolean, excludeMovedIn: Boolean, future: Boolean): GetTenanciesResponse
  tenancysvc_GetTenanciesList(after: String, restrictToMyWatchedTenancies: Boolean, excludeMovedIn: Boolean, future: Boolean, statusValue: TenancyStatusValueInput, unitIds: [String!], companyIds: [String!], includedDeleted: Boolean, cwpUserIds: [String!], dealIds: [String!], locationIds: [String!], restrictToMyTenancies: Boolean, first: Int, statusValues: [TenancyStatusValueInput!], hasBeenSetupForTenancy: Boolean, ids: [String!], current: Boolean, currentTimelineStage: String): GetTenanciesList
  tenancysvc_GetTenancy(id: String!, category: TaskCategory): GetTenancyResponse
  tenancysvc_GetTenancyFinancialModel(id: String!): GetTenancyFinancialModelResponse
  tenancysvc_GetTenancyTodosPaginated(categories: [TaskCategory!], showCompleted: Boolean!, after: String!, first: Int!, tenancyId: String!): TenancyTodosConnection
  tenancysvc_GetTimelineStageCounts(_null: Boolean): GetTimelineStageCountsResponse
  tenancysvc_GetUnitTenancies(locationIds: [String!]!, unitIds: [String!]!): GetUnitTenanciesResponse
  tenancysvc_PreviewTenancyTimeline(tenancyId: String!, tasks: [TaskStateInput!]): TimelineStages
  threadsvc_GetArchivedMessages(emailAddress: String!): GetArchivedMessagesResponse
  threadsvc_GetMessages(limit: Int, ids: [String!]!, tags: [String!]!, excludeTags: [String!]!, emailAddresses: [String!]!, archived: Boolean, attachedToThread: Boolean): ThreadGetMessagesResponse
  threadsvc_GetThread(id: String!): ThreadsGetThreadResponse
  threadsvc_GetThreads(ids: [String!]!): GetThreadsResponse
  unitsvc_GetBusinessRatesForUnit(rateableValue: MoneyInput, withinBidlevy: Boolean!, withinCityOfLondon: Boolean!, sqft: Int!): GetBusinessRatesForUnitResponse
  unitsvc_GetDetailsForUnits(overrideMinTermMonths: Int, estimatePrice: Boolean, unitIds: [String!]!): GetDetailsForUnitsResponse
  unitsvc_GetUnit(unitId: String!): GetUnitResponse
  unitsvc_GetUnitFinancialModel(unitId: String!): GetUnitFinancialModelResponse
  unitsvc_GetUnits(pagination: UnitPaginationInput, sortBy: UnitSortBy, descending: Boolean, query: String, filters: FiltersInput, ids: [String!], locationIds: [String!], includeArchived: Boolean): GetUnitsResponse
  uploadsvc_GeneratePdf(url: String!, fileName: String!, dimensions: DimensionsInput, waitForSelectors: [String!]): GeneratePdfRequestSubmitted
  uploadsvc_GetUpload(id: String!, width: Int, height: Int, quality: Int): GetUploadResponse
  uploadsvc_GetUploads(ids: [String!]!): GetUploadsResponse
  uploadsvc_Upload(data: String!, filename: String!, ttl: TimestampInput): UploadMessage
  usersvc_ExchangeToken(cookie: String!): LoginResponse
  usersvc_GetCompanyUsers(userIds: [String!]!): GetCompanyUsersResponse
  usersvc_GetOrderedUsers(companyIds: [String!]!, query: String!, cookie: String!, emails: [String!]!, ids: [String!]!): GetOrderedUsersResponse
  usersvc_GetUser(id: String!, verificationToken: String!, cookie: String!): User
  usersvc_GetUsers(ids: [String!]!, companyIds: [String!]!, query: String!, cookie: String!, emails: [String!]!): GetUsersResponse
  usersvc_GoogleAuthToken(userId: String!): GetGoogleAccessTokenResponse
  usersvc_GoogleLogin(code: String!, redirectUrl: String!): GoogleLoginResponse
  usersvc_Login(email: String!, password: String!, authCode: String, type: AuthenticationFactorType, rememberMe: Boolean): LoginResponse
  usersvc_VerifyPasswordResetToken(token: String!): VerifyPasswordResetTokenResponse
  usersvc_VerifyPhone(phoneNumber: String!, code: String!, userId: String!): VerifyPhoneResponse
  visitsvc_GetMyVisits(ids: [String!], after: String, first: Int, beforeDate: TimestampInput, afterDate: TimestampInput): VisitsConnection
  visitsvc_GetVisit(unscoped: Boolean, id: String!): Visit
  visitsvc_GetVisits(ids: [String!], after: String, first: Int, companyIds: [String!], beforeDate: TimestampInput, afterDate: TimestampInput): VisitsConnection
}

type RotateCodeCommand {
  subjectId: String!
  user: User
}

type SalesTeam {
  defaultPrimaryAssignee: Profile
  defaultPrimaryAssigneeId: String!
  defaultSecondaryAssignee: Profile
  defaultSecondaryAssigneeId: String!
  id: String!
  name: String!
  slackChannel: String!
  user: User
}

type SalesTeamAssignedToBrokerCompany {
  brokerCompanyId: String!
  salesTeamId: String!
  user: User
}

type SaveAmenity {
  companyId: String
  entityIds: [String!]!
  entityType: BookableEntity
  id: String
  name: String!
  user: User
}

type SaveBuildingCommand {
  building: BuildingInput
  units: [BuildingUnitInput!]
  user: User
}

type SaveCompanyCultureCommand {
  companyId: String!
  data: CompanyCultureDataInput
  user: User
}

type SaveHybridWorkInformationCommand {
  inputs: [PolicyInput!]
  user: User
}

type SaveSearchRequirementsCommand {
  requirements: SearchRequirements
  user: User
}

type SaveUserPushTokenCommand {
  deviceId: String!
  token: String!
  user: User
  userId: String
}

type Schedule {
  active: Boolean!
  cron: String!
  id: String!
  key: String!
  modelId: String!
  timezone: String!
  type: ScheduleType
}

type ScheduleActivated {
  schedule: Schedule
}

type ScheduleCreated {
  schedule: Schedule
}

type ScheduleDeactivated {
  schedule: Schedule
}

type ScheduleDeleted {
  schedule: Schedule
}

enum ScheduleType {
  UNSET_ALARM
  SET_ALARM
  SET_DOOR_TO_CLOSE
  SET_DOOR_TO_OPEN
}

type ScrapedLocation {
  id: String
  scrapedFromCompanyId: String
  scrapedFromUrl: String!
  user: User
}

input ScrapedLocationInput {
  scrapedFromCompanyId: String
  id: String
  scrapedFromUrl: String!
}

type ScrapedLocationsCreated {
  alreadyKnown: Int!
  createdCount: Int!
  missingCount: Int!
  user: User
}

type ScrapedStatus {
  user: User
  wasFoundInScrape: Boolean!
  wasMissingInLastScrape: Boolean!
}

type SearchCompany {
  company: Company
  id: String!
  name: String!
}

type SearchDeal {
  deal: Deal
  id: String!
}

type SearchGetCompaniesResponse {
  companies: [SearchCompany!]
}

type SearchGetDealsResponse {
  deals: [SearchDeal!]
}

type SearchGetDealTimelineResponse {
  event: [SearchTimelineEvent!]
}

type SearchGetIssuesResponse {
  issues: [SearchIssue!]
}

type SearchGetLocationsInboxResponse {
  entities: [LocationsInboxEntity!]
  tabCounts: LocationsInboxTabCounts
  totalCount: Int!
}

type SearchGetLocationsResponse {
  locations: [SearchLocation!]
}

type SearchGetRequestsResponse {
  requests: [SearchRequest!]
}

type SearchGetUnitsResponse {
  units: [SearchUnit!]
}

type SearchGetUsersResponse {
  users: [SearchUser!]
}

type SearchHistory {
  createdAt: DateTime
  id: String!
  name: String
  searchRequirementsId: String!
  user: User
  userId: String!
}

type SearchIssue {
  detail: String!
  id: String!
  issue: Issue
  summary: String!
}

type SearchLocation {
  id: String!
  location: Location
  name: String!
}

type SearchRequest {
  assignee: String!
  contractor: String!
  creator: String!
  details: String!
  id: String!
  location: String!
  summary: String!
}

type SearchRequirements {
  areaId: String
  id: String
  priceRange: MoneyRange
  secondarySearchRequirements: SecondarySearchRequirements
  sqFtRange: Int32OptionalRange
  termLengthRange: Int32OptionalRange
  user: User
}

input SearchRequirementsInput {
  secondarySearchRequirements: SecondarySearchRequirementsInput
  id: String
  areaId: String
  sqFtRange: Int32OptionalRangeInput
  priceRange: MoneyRangeInput
  termLengthRange: Int32OptionalRangeInput
}

type SearchRequirementsSaved {
  requirements: SearchRequirements
  user: User
}

type SearchTimelineEvent {
  createdById: String!
  createdByName: String!
  createdByProfile: Profile
  entity: DealTimelineEventUnion
  eventTimestamp: String!
  eventType: DealTimelineEventType
  id: String!
  timestamp: String!
  type: String!
}

type SearchUnit {
  company: String!
  id: String!
  location: String!
  name: String!
}

type SearchUser {
  id: String!
  user: User
}

type SecondarySearchRequirements {
  facilityIds: [String!]
  fitoutStates: [String!]
  hideMultiFloorSelections: Boolean
  id: String
  includeCombinations: Boolean
  includeGround: Boolean
  includeUnderground: Boolean
  kittChoicesOnly: Boolean
  onlyCombinations: Boolean
  polygon: String
  priceModePsf: Boolean
  searchCentre: Coordinate
  unitCombinationLimit: Int
  user: User
}

input SecondarySearchRequirementsInput {
  searchCentre: CoordinateInput
  polygon: String
  kittChoicesOnly: Boolean
  includeUnderground: Boolean
  includeGround: Boolean
  fitoutStates: [String!]
  priceModePsf: Boolean
  onlyCombinations: Boolean
  facilityIds: [String!]
  includeCombinations: Boolean
  unitCombinationLimit: Int
  hideMultiFloorSelections: Boolean
  id: String
}

type Selection {
  combinationDetails: CombinationDetails
  createdAt: Timestamp
  createdBy: String
  createdByUser: User
  emailedBrokers: [String!]
  location: Location
  overrideTermMonths: Int
  pricing(overrideMinTermMonths: Int = 0): GetPricingResponse
  templateBrochure: Brochure
  templateBrochureId: String

  """
  If an override term month is given (and the override is not provided in args) it will calculate pricing based on that
  """
  unitGroupDetails(overrideMinTermMonths: Int = 0, estimatePrice: Boolean = false): GetDetailsForUnitsResponse
  unitGroupId: String
  unitIds: [String!]
  units: [Unit]
  user: User
}

type SelectionFeedback {
  createdBy: String
  dealId: String!
  feedbackText: String!
  id: String
  locationId: String!
  unitGroupId: String!
  user: User
}

input SelectionFeedbackInput {
  unitGroupId: String!
  locationId: String!
  feedbackText: String!
  createdBy: String
  dealId: String!
  id: String
}

type SelectionFeedbacksCreated {
  unitGroupIds: [String!]!
  user: User
}

input SelectionInput {
  unitIds: [String!]
  unitGroupId: String
  overrideTermMonths: Int
  createdBy: String
  createdAt: TimestampInput
  emailedBrokers: [String!]
}

type SelectionsAdded {
  createdBy: String!
  selections: [Selection!]
  shortlistId: String!
  user: User
}

type SelectionsRemoved {
  selections: [Selection!]
  user: User
}

type SelectionsUpdated {
  brokerSearchId: String
  shortlistId: String!
  user: User
}

type SendChatPulse {
  _null: Boolean
  user: User
}

type SendEmailAction {
  body: EmailBody
  emails: [String!]!
  from: String!
  subject: String!
  user: User
  userIds: [String!]!
}

type SendEmailCommand {
  bccAddresses: [String!]
  ccAddresses: [String!]
  fromAddress: String!
  fromName: String!
  gmailThreadId: String
  htmlMessage: String!
  metadata: [EmailMetadata!]
  replyToEmailId: String
  subject: String!
  threadId: String
  toAddresses: [String!]!
  uploadIds: [String!]
  user: User
}

type SendKitchenSinkCommand {
  _null: Boolean
  user: User
}

type SendNewEnquiryNotificationCommand {
  email: String!
  message: String!
  name: String!
  phone: String!
  user: User
}

type SendNotificationToAllUsersCommand {
  message: String!
  title: String!
  user: User
}

type SendNotificationToAllUsersDegraded {
  message: String!
  user: User
}

type SendPhoneVerification {
  phoneNumber: String!
  user: User
}

type SendTenancyPulse {
  _null: Boolean
  user: User
}

type SendWelcomeMessageCommand {
  category: TaskCategory
  message: String
  receiverIds: [String!]
  tenancyId: String!
}

type ServiceActivity {
  entity: ServiceActivityUnion
  id: String!
  type: ServiceActivityType
}

type ServiceActivityEdge {
  cursor: String!
  node: ServiceActivity
}

enum ServiceActivityType {
  ServiceActivityType_Issue
  ServiceActivityType_None
  ServiceActivityType_Visit
}

union ServiceActivityUnion = Issue | Visit

type Session {
  accessId: String!
  answeredAt: Timestamp
  answeredBy: String!
  createdAt: Timestamp
  endTime: Timestamp
  id: String!
  numberOfPresses: Int!
  sipUri: String!
  user: User
}

type SessionAnswered {
  session: Session
  user: User
}

type SessionCreated {
  session: Session
  user: User
}

type SessionRecorded {
  sessionId: String!
  url: String!
  user: User
}

type SessionUpdated {
  session: Session
  user: User
}

type SetCapacityCommand {
  capacity: Int!
  companyId: String
  user: User
}

type SetCommunicationPreference {
  communicationClass: String!
  frequency: CommunicationFrequency
  user: User
  userId: String
}

type SetCommunicationPreferenceForAllEmployeesOfCompany {
  communicationClass: String!
  companyId: String
  frequency: CommunicationFrequency
  user: User
}

type SetCompanyIndustriesCommand {
  companyId: String!
  industryIds: [String!]!
  user: User
}

type SetCompanyIngressesCommand {
  companyIngresses: [CompanyIngress!]
  user: User
}

type SetDesksOnTeamCommand {
  deskIds: [String!]!
  teamId: String!
  user: User
}

type SetTeamsOnDeskCommand {
  deskId: String!
  teamIds: [String!]!
  user: User
}

type ShareShortlistWithCurrentUserCommand {
  id: String!
  user: User
}

type Shortlist {
  approvedAt: DateTime
  approvedByUserId: String!
  archivedAt: DateTime
  clientName: String!
  createdAt: DateTime
  createdByCompanyId: String!
  createdByUser: User
  createdByUserId: String!
  description: String!
  dismissedRecommendations: [DismissedRecommendation!]
  id: String!
  name: String!
  selections: [Selection!]
  updatedAt: DateTime
  updatedByUser: User
  user: User
  viewingRequests: [ShortlistViewingRequest!]
}

type ShortlistAddToValveRequested {
  search: BrokerSearch
  user: User
}

type ShortlistApproved {
  approvedByUserId: String!
  brokerSearchId: String!
  shortlistId: String
  user: User
}

type ShortlistConnection {
  edges: [ShortlistEdge!]
  pageInfo: PageInfo
  totalArchived: Int!
  totalShared: Int!
  totalUserMade: Int!
  user: User
}

type ShortlistCreated {
  shortlist: Shortlist
  user: User
}

type ShortlistDeleted {
  shortlistId: String!
  user: User
}

type ShortlistEdge {
  cursor: String!
  node: Shortlist
  user: User
}

type ShortlistRestored {
  shortlistId: String!
  user: User
}

type ShortlistsAddedToDeal {
  dealId: String!
  shortlistIds: [String!]!
  user: User
}

type ShortlistSharedCurrentUser {
  id: String!
  user: User
}

type ShortlistsRemovedFromDeal {
  dealId: String!
  shortlistIds: [String!]!
  user: User
}

type ShortlistSummary {
  brokerCompany: Company
  brokerCompanyId: String!
  clientName: String!
  createdByCompany: Company
  createdByCompanyId: String!
  createdByUser: User
  createdByUserId: String!
  id: String!
  user: User
}

type ShortlistUpdated {
  shortlist: Shortlist
  user: User
}

type ShortlistViewingRequest {
  budgetInfo: String
  clientInfo: String
  companyId: String
  id: String
  moveDateInfo: String
  notes: String
  requestedByUserId: String
  selections: [Selection!]
  shortlistId: String!
  slots: [DateTime!]
  user: User
}

input ShortlistViewingRequestInput {
  slots: [DateTimeInput!]
  moveDateInfo: String
  notes: String
  requestedByUserId: String
  selections: [SelectionInput!]
  companyId: String
  id: String
  shortlistId: String!
  clientInfo: String
  budgetInfo: String
}

type ShortlistViewingRequestsCreated {
  brokerSearchId: String
  company: String!
  dealId: String!
  notes: String!
  requestedByUserId: String!
  shortlistId: String
  user: User
  viewingRequests: [ViewingRequest!]
}

type SignUpCommand {
  email: String!
  password: String!
  rememberMe: Boolean!
  user: User
}

enum SlaType {
  Closure
  FirstNextStep
}

enum SortBy {
  END
  START
}

type SourcedLocationDiscarded {
  location: Location
  user: User
}

type SourcedLocationUpdated {
  location: Location
  user: User
}

type SourcedUnitUpdated {
  unitId: String!
}

type SpacesMatched {
  matches: [MatchedSpace!]
  requirementsId: String!
  user: User
}

type StartAccountRecoveryCommand {
  email: String!
  inAppRecovery: Boolean
  user: User
}

type StatusChange {
  from: TenancyStatus
  to: TenancyStatus
}

type StatusOptional {
  status: LocationStatus
  user: User
}

input StatusOptionalInput {
  status: LocationStatus
}

enum Subject {
  GROUP
  LOCATION
  User
  COMPANY
}

type SubjectAddedToGroup {
  companyId: String!
  groupId: String!
  userId: String!
}

type SubjectRemovedFromGroup {
  companyId: String!
  groupId: String!
  userId: String!
}

type SubmitBuildingCommand {
  url: String!
  user: User
}

type Subscription {
  accesssvc_Access: Access
  accesssvc_AccessBeingConfigured: AccessBeingConfigured
  accesssvc_AccessConfigured: AccessConfigured
  accesssvc_AccessCreated: AccessCreated
  accesssvc_AccessDeleted: AccessDeleted
  accesssvc_AccessUpdated: AccessUpdated
  accesssvc_CodeRotated: CodeRotated
  accesssvc_ConfigureAccessCommand: ConfigureAccessCommand
  accesssvc_Coords: Coords
  accesssvc_CreateAccessCommand: CreateAccessCommand
  accesssvc_CreateTemporaryPinCommand: CreateTemporaryPinCommand
  accesssvc_DeleteAccessCommand: DeleteAccessCommand
  accesssvc_DoorOpened(accessId: String!): DoorOpened
  accesssvc_DoorRestarted: DoorRestarted
  accesssvc_GetAccessCodeBatchResponse: GetAccessCodeBatchResponse
  accesssvc_GetAccessCodeRequest: GetAccessCodeRequest
  accesssvc_GetAccessCodeResponse: GetAccessCodeResponse
  accesssvc_GetAccessRequest: GetAccessRequest
  accesssvc_GetAccessResponse: GetAccessResponse
  accesssvc_GetAccessesBatchResponse: GetAccessesBatchResponse
  accesssvc_GetAccessesRequest: GetAccessesRequest
  accesssvc_GetAccessesResponse: GetAccessesResponse
  accesssvc_GetPhotoRequest: GetPhotoRequest
  accesssvc_GetPhotoResponse: GetPhotoResponse
  accesssvc_GetVideoTokenRequest: GetVideoTokenRequest
  accesssvc_GetVideoTokenResponse: GetVideoTokenResponse
  accesssvc_NetworkConfig: NetworkConfig
  accesssvc_OpenDoorCommand: OpenDoorCommand
  accesssvc_OpenDoorResponse: OpenDoorResponse
  accesssvc_PhotoTakenAtAccess: PhotoTakenAtAccess
  accesssvc_ReconfigureDevices: ReconfigureDevices
  accesssvc_RestartDoorCommand: RestartDoorCommand
  accesssvc_RotateCodeCommand: RotateCodeCommand
  accesssvc_TemporaryPinCreated: TemporaryPinCreated
  accesssvc_UpdateAccessCommand: UpdateAccessCommand
  accesssvc_UpdateAccessNameCommand: UpdateAccessNameCommand
  accesssvc_UpdateNetworkConfigCommand: UpdateNetworkConfigCommand
  alarmsvc_Alarm: Alarm
  alarmsvc_GetAlarmsRequest: GetAlarmsRequest
  alarmsvc_GetAlarmsResponse: GetAlarmsResponse
  alarmsvc_GetStatusRequest: GetStatusRequest
  alarmsvc_GetStatusResponse: GetStatusResponse
  alarmsvc_GetStatusesRequest: GetStatusesRequest
  alarmsvc_GetStatusesResponse: GetStatusesResponse
  bookingsvc_Amenity: Amenity
  bookingsvc_AmenityDeleted: AmenityDeleted
  bookingsvc_AmenityList: AmenityList
  bookingsvc_AmenitySaved: AmenitySaved
  bookingsvc_ApproveFloorplan: ApproveFloorplan
  bookingsvc_AssignUserToDeskCommand: AssignUserToDeskCommand
  bookingsvc_Attendance: Attendance
  bookingsvc_AttendanceBatchSet: AttendanceBatchSet
  bookingsvc_AttendanceCreated: AttendanceCreated
  bookingsvc_AttendanceDeleted: AttendanceDeleted
  bookingsvc_AttendanceStateForDate: AttendanceStateForDate
  bookingsvc_BatchAmenityResponse: BatchAmenityResponse
  bookingsvc_BatchBookingsResponse: BatchBookingsResponse
  bookingsvc_BatchDeskPermanentlyAssignedUserIdResponse: BatchDeskPermanentlyAssignedUserIdResponse
  bookingsvc_BatchDeskResponse: BatchDeskResponse
  bookingsvc_BatchEntitiesForAmenityResponse: BatchEntitiesForAmenityResponse
  bookingsvc_BatchFloorplanResponse: BatchFloorplanResponse
  bookingsvc_BatchFloorplanZoneResponse: BatchFloorplanZoneResponse
  bookingsvc_BatchGeometryResponse: BatchGeometryResponse
  bookingsvc_BatchRoomResponse: BatchRoomResponse
  bookingsvc_BatchSetAttendanceCommand: BatchSetAttendanceCommand
  bookingsvc_BatchTotalDesksForTeamResponse: BatchTotalDesksForTeamResponse
  bookingsvc_BookingCreated: BookingCreated
  bookingsvc_BookingDeleted: BookingDeleted
  bookingsvc_BookingList: BookingList
  bookingsvc_BookingRoomCreatedEffect: BookingRoomCreatedEffect
  bookingsvc_BookingRoomDeletedEffect: BookingRoomDeletedEffect
  bookingsvc_BookingRoomUpdatedEffect: BookingRoomUpdatedEffect
  bookingsvc_BookingsCancelledByPermanentDeskAssignment: BookingsCancelledByPermanentDeskAssignment
  bookingsvc_Bookingsvc_GetBookingRequest: Bookingsvc_GetBookingRequest
  bookingsvc_Bookingsvc_GetBookingResponse: Bookingsvc_GetBookingResponse
  bookingsvc_Bookingsvc_GetRoomsRequest: Bookingsvc_GetRoomsRequest
  bookingsvc_Bookingsvc_GetRoomsResponse: Bookingsvc_GetRoomsResponse
  bookingsvc_CapacitySet: CapacitySet
  bookingsvc_CreateAttendanceCommand: CreateAttendanceCommand
  bookingsvc_CreateBooking: CreateBooking
  bookingsvc_CreateDesk: CreateDesk
  bookingsvc_CreateRoom: CreateRoom
  bookingsvc_DeleteAmenity: DeleteAmenity
  bookingsvc_DeleteAttendanceCommand: DeleteAttendanceCommand
  bookingsvc_DeleteBooking: DeleteBooking
  bookingsvc_DeleteDesk: DeleteDesk
  bookingsvc_DeleteFloorplan: DeleteFloorplan
  bookingsvc_DeleteRoom: DeleteRoom
  bookingsvc_Desk: Desk
  bookingsvc_DeskBookingFeatureEnquired: DeskBookingFeatureEnquired
  bookingsvc_DeskCreated: DeskCreated
  bookingsvc_DeskDeleted: DeskDeleted
  bookingsvc_DeskUpdated: DeskUpdated
  bookingsvc_DesksOnTeamSet: DesksOnTeamSet
  bookingsvc_EnquireAboutDeskBooking: EnquireAboutDeskBooking
  bookingsvc_EntityIdsList: EntityIdsList
  bookingsvc_Floorplan: Floorplan
  bookingsvc_FloorplanApproved: FloorplanApproved
  bookingsvc_FloorplanDeleted: FloorplanDeleted
  bookingsvc_FloorplanGenerated: FloorplanGenerated
  bookingsvc_FloorplanIngested: FloorplanIngested
  bookingsvc_FloorplanUpdated: FloorplanUpdated
  bookingsvc_FloorplanZone: FloorplanZone
  bookingsvc_FloorplanZoneUpdated: FloorplanZoneUpdated
  bookingsvc_FloorplansGenerationStarted: FloorplansGenerationStarted
  bookingsvc_GenerateFloorplans: GenerateFloorplans
  bookingsvc_GeometricPoint: GeometricPoint
  bookingsvc_Geometry: Geometry
  bookingsvc_GetAdminRoomBookingsRequest: GetAdminRoomBookingsRequest
  bookingsvc_GetAmenitiesRequest: GetAmenitiesRequest
  bookingsvc_GetAmenitiesResponse: GetAmenitiesResponse
  bookingsvc_GetAttendanceStateRequest: GetAttendanceStateRequest
  bookingsvc_GetAttendanceStateResponse: GetAttendanceStateResponse
  bookingsvc_GetAttendancesBatchResponse: GetAttendancesBatchResponse
  bookingsvc_GetBookableRoomsRequest: GetBookableRoomsRequest
  bookingsvc_GetBookableRoomsResponse: GetBookableRoomsResponse
  bookingsvc_GetBookingsForEntity: GetBookingsForEntity
  bookingsvc_GetBookingsForEntityBatchRequest: GetBookingsForEntityBatchRequest
  bookingsvc_GetCapacityRequest: GetCapacityRequest
  bookingsvc_GetCapacityResponse: GetCapacityResponse
  bookingsvc_GetDeskBookingsRequest: GetDeskBookingsRequest
  bookingsvc_GetDeskBookingsResponse: GetDeskBookingsResponse
  bookingsvc_GetEntitiesForAmenityBatchRequest: GetEntitiesForAmenityBatchRequest
  bookingsvc_GetEntitiesForAmenityRequest: GetEntitiesForAmenityRequest
  bookingsvc_GetFloorplanZonesRequest: GetFloorplanZonesRequest
  bookingsvc_GetFloorplanZonesResponse: GetFloorplanZonesResponse
  bookingsvc_GetFloorplansForTenancyRequest: GetFloorplansForTenancyRequest
  bookingsvc_GetFloorplansForTenancyResponse: GetFloorplansForTenancyResponse
  bookingsvc_GetMinSafeCapacityRequest: GetMinSafeCapacityRequest
  bookingsvc_GetMinSafeCapacityResponse: GetMinSafeCapacityResponse
  bookingsvc_GetMyCompanyDesksRequest: GetMyCompanyDesksRequest
  bookingsvc_GetMyCompanyDesksResponse: GetMyCompanyDesksResponse
  bookingsvc_GetMyDeskBookingsRequest: GetMyDeskBookingsRequest
  bookingsvc_GetMyRoomBookingsRequest: GetMyRoomBookingsRequest
  bookingsvc_GetRoomBookingsRequest: GetRoomBookingsRequest
  bookingsvc_GetRoomByIdRequest: GetRoomByIdRequest
  bookingsvc_GetTotalDesksForTeamBatchRequest: GetTotalDesksForTeamBatchRequest
  bookingsvc_GetTotalDesksForTeamRequest: GetTotalDesksForTeamRequest
  bookingsvc_IngestFloorplan: IngestFloorplan
  bookingsvc_MeetingRoom: MeetingRoom
  bookingsvc_PaginatedBookingsConnection: PaginatedBookingsConnection
  bookingsvc_Rectangle: Rectangle
  bookingsvc_RoomOrDeskBooking: RoomOrDeskBooking
  bookingsvc_RoomOrDeskBookingEdge: RoomOrDeskBookingEdge
  bookingsvc_SaveAmenity: SaveAmenity
  bookingsvc_SetCapacityCommand: SetCapacityCommand
  bookingsvc_SetDesksOnTeamCommand: SetDesksOnTeamCommand
  bookingsvc_SetTeamsOnDeskCommand: SetTeamsOnDeskCommand
  bookingsvc_TeamsOnDeskSet: TeamsOnDeskSet
  bookingsvc_UpdateDesk: UpdateDesk
  bookingsvc_UpdateFloorplan: UpdateFloorplan
  bookingsvc_UpdateFloorplanZone: UpdateFloorplanZone
  bookingsvc_UpdateRoom: UpdateRoom
  bookingsvc_UserAssignedToDesk: UserAssignedToDesk
  brochuresvc_Brochure: Brochure
  brochuresvc_BrochureCreated: BrochureCreated
  brochuresvc_BrochureDeleted: BrochureDeleted
  brochuresvc_BrochureEntity: BrochureEntity
  brochuresvc_BrochureTemplateCloned: BrochureTemplateCloned
  brochuresvc_BrochureUpdated: BrochureUpdated
  brochuresvc_CloneTemplateCommand: CloneTemplateCommand
  brochuresvc_CreateBrochureCommand: CreateBrochureCommand
  brochuresvc_DeleteBrochureCommand: DeleteBrochureCommand
  brochuresvc_GetBrochureBatchResponse: GetBrochureBatchResponse
  brochuresvc_GetBrochureRequest: GetBrochureRequest
  brochuresvc_GetBrochureResponse: GetBrochureResponse
  brochuresvc_GetKittTemplateForEntityGroupRequest: GetKittTemplateForEntityGroupRequest
  brochuresvc_GetKittTemplateForEntityGroupResponse: GetKittTemplateForEntityGroupResponse
  brochuresvc_GetTemplateBrochureBatchResponse: GetTemplateBrochureBatchResponse
  brochuresvc_UpdateBrochureCommand: UpdateBrochureCommand
  chatsvc_Chat: Chat
  chatsvc_ChatBatchLoaderResponse: ChatBatchLoaderResponse
  chatsvc_ChatCreated(userId: String): ChatCreated
  chatsvc_ChatDeleted: ChatDeleted
  chatsvc_ChatMarkedAsReadEffect: ChatMarkedAsReadEffect
  chatsvc_ChatMemberCreated: ChatMemberCreated
  chatsvc_ChatMemberDeleted: ChatMemberDeleted
  chatsvc_ChatMemberIds: ChatMemberIds
  chatsvc_ChatMessage: ChatMessage
  chatsvc_ChatMessageConnection: ChatMessageConnection
  chatsvc_ChatMessageCreated(
    chatType: ChatType
    chatId: String

    """
    Subscribes to all messages made in a chat where a tenant is the user id on
    that chat. This is a way of fetching any tenant chat messages intended for this user id
    """
    tenantOwnerUserId: String
  ): ChatMessageCreated
  chatsvc_ChatMessageDeletedEffect: ChatMessageDeletedEffect
  chatsvc_ChatMessageEdge: ChatMessageEdge
  chatsvc_ChatMessageUpdated: ChatMessageUpdated
  chatsvc_CompletedTaskMessageCreated: CompletedTaskMessageCreated
  chatsvc_CreateChatCommand: CreateChatCommand
  chatsvc_CreateChatMemberCommand: CreateChatMemberCommand
  chatsvc_CreateChatMessageCommand: CreateChatMessageCommand
  chatsvc_CreateCompletedTaskMessageCommand: CreateCompletedTaskMessageCommand
  chatsvc_DeleteChatCommand: DeleteChatCommand
  chatsvc_DeleteChatMemberCommand: DeleteChatMemberCommand
  chatsvc_DeleteChatMessageAction: DeleteChatMessageAction
  chatsvc_GetChatHistoryRequest: GetChatHistoryRequest
  chatsvc_GetChatMembersResponse: GetChatMembersResponse
  chatsvc_GetChatRequest: GetChatRequest
  chatsvc_GetChatResponse: GetChatResponse
  chatsvc_GetChatsForUserRequest: GetChatsForUserRequest
  chatsvc_GetChatsForUserResponse: GetChatsForUserResponse
  chatsvc_GetChatsRequest: GetChatsRequest
  chatsvc_GetChatsResponse: GetChatsResponse
  chatsvc_GetClientChatsSinceRequest: GetClientChatsSinceRequest
  chatsvc_GetClientChatsSinceResponse: GetClientChatsSinceResponse
  chatsvc_GetMessagesByChatIdResponse: GetMessagesByChatIdResponse
  chatsvc_GetMessagesInThread: GetMessagesInThread
  chatsvc_GetMessagesInThreadResponse: GetMessagesInThreadResponse
  chatsvc_GetMessagesRequest: GetMessagesRequest
  chatsvc_GetMessagesResponse: GetMessagesResponse
  chatsvc_GetReadMessageUsersResponse: GetReadMessageUsersResponse
  chatsvc_GetThreadResponse: GetThreadResponse
  chatsvc_GetUnreadMessageCountResponse: GetUnreadMessageCountResponse
  chatsvc_GetUnreadMessagesRequest: GetUnreadMessagesRequest
  chatsvc_GetUsersUnreadChatMessagesRequest: GetUsersUnreadChatMessagesRequest
  chatsvc_GetUsersUnreadChatMessagesResponse: GetUsersUnreadChatMessagesResponse
  chatsvc_MarkChatAsReadAction: MarkChatAsReadAction
  chatsvc_MarkMessagesAsReadCommand: MarkMessagesAsReadCommand
  chatsvc_MessageList: MessageList
  chatsvc_MessagesMarkedAsRead: MessagesMarkedAsRead
  chatsvc_NotifyAboutUnactionedChatsCommand: NotifyAboutUnactionedChatsCommand
  chatsvc_UpdateChatMessage: UpdateChatMessage
  chatsvc_UserIdList: UserIdList
  companysvc_AgencyDomain: AgencyDomain
  companysvc_AgencyDomainAndCompanyCreated: AgencyDomainAndCompanyCreated
  companysvc_AttendancePoliciesList: AttendancePoliciesList
  companysvc_AttendancePolicy: AttendancePolicy
  companysvc_AttendancePolicyBreakdown: AttendancePolicyBreakdown
  companysvc_CompaniesConnection: CompaniesConnection
  companysvc_CompaniesMerged: CompaniesMerged
  companysvc_Company: Company
  companysvc_CompanyCreated: CompanyCreated
  companysvc_CompanyCultureData: CompanyCultureData
  companysvc_CompanyCultureDataInput: CompanyCultureDataInput
  companysvc_CompanyCultureSaved: CompanyCultureSaved
  companysvc_CompanyDeleted: CompanyDeleted
  companysvc_CompanyIndustriesUpdated: CompanyIndustriesUpdated
  companysvc_CompanyIngress: CompanyIngress
  companysvc_CompanyIngresses: CompanyIngresses
  companysvc_CompanyRestored: CompanyRestored
  companysvc_CompanySize: CompanySize
  companysvc_CompanyTeam: CompanyTeam
  companysvc_CompanyTeamDeleted: CompanyTeamDeleted
  companysvc_CompanyTeamUpdated: CompanyTeamUpdated
  companysvc_CompanyTeamsCreated: CompanyTeamsCreated
  companysvc_CompanyTeamsList: CompanyTeamsList
  companysvc_CompanyUpdated: CompanyUpdated
  companysvc_ContractorCompany: ContractorCompany
  companysvc_CreateAgencyDomainAndCompanyCommand: CreateAgencyDomainAndCompanyCommand
  companysvc_CreateCompanyCommand: CreateCompanyCommand
  companysvc_CreateCompanyTeamsCommand: CreateCompanyTeamsCommand
  companysvc_CreateIndustryCommand: CreateIndustryCommand
  companysvc_CultureValue: CultureValue
  companysvc_DeleteCompanyCommand: DeleteCompanyCommand
  companysvc_DeleteCompanyTeamCommand: DeleteCompanyTeamCommand
  companysvc_DeleteIndustryCommand: DeleteIndustryCommand
  companysvc_Edge: Edge
  companysvc_GetAgencyCompanyForUrlRequest: GetAgencyCompanyForUrlRequest
  companysvc_GetAgencyCompanyForUrlResponse: GetAgencyCompanyForUrlResponse
  companysvc_GetAgencyDomainsRequest: GetAgencyDomainsRequest
  companysvc_GetAgencyDomainsResponse: GetAgencyDomainsResponse
  companysvc_GetAttendancePoliciesByEntityIdResponse: GetAttendancePoliciesByEntityIdResponse
  companysvc_GetCompaniesByIdResponse: GetCompaniesByIdResponse
  companysvc_GetCompaniesForAccountManagerRequest: GetCompaniesForAccountManagerRequest
  companysvc_GetCompaniesForAccountManagerResponse: GetCompaniesForAccountManagerResponse
  companysvc_GetCompaniesForClientSupportSpecialistsRequest: GetCompaniesForClientSupportSpecialistsRequest
  companysvc_GetCompaniesForClientSupportSpecialistsResponse: GetCompaniesForClientSupportSpecialistsResponse
  companysvc_GetCompaniesRequest: GetCompaniesRequest
  companysvc_GetCompaniesResponse: GetCompaniesResponse
  companysvc_GetCompanyIngressesBatchResponse: GetCompanyIngressesBatchResponse
  companysvc_GetCompanyRequest: GetCompanyRequest
  companysvc_GetCompanySizesRequest: GetCompanySizesRequest
  companysvc_GetCompanySizesResponse: GetCompanySizesResponse
  companysvc_GetCompanyTeamBatchResponse: GetCompanyTeamBatchResponse
  companysvc_GetCompanyTeamsByCompanyIdRequest: GetCompanyTeamsByCompanyIdRequest
  companysvc_GetCompanyTeamsByCompanyIdResponse: GetCompanyTeamsByCompanyIdResponse
  companysvc_GetCultureValuesRequest: GetCultureValuesRequest
  companysvc_GetCultureValuesResponse: GetCultureValuesResponse
  companysvc_GetHybridWorkInformationRequest: GetHybridWorkInformationRequest
  companysvc_GetHybridWorkInformationResponse: GetHybridWorkInformationResponse
  companysvc_GetIndustriesRequest: GetIndustriesRequest
  companysvc_GetIndustriesResponse: GetIndustriesResponse
  companysvc_GetMyAttendancePolicyRequest: GetMyAttendancePolicyRequest
  companysvc_GetMyAttendancePolicyResponse: GetMyAttendancePolicyResponse
  companysvc_GetOfficeValuesRequest: GetOfficeValuesRequest
  companysvc_GetOfficeValuesResponse: GetOfficeValuesResponse
  companysvc_GetTenantPrioritiesRequest: GetTenantPrioritiesRequest
  companysvc_GetTenantPrioritiesResponse: GetTenantPrioritiesResponse
  companysvc_GetWhitelistedCompanyForEmailRequest: GetWhitelistedCompanyForEmailRequest
  companysvc_GetWhitelistedCompanyForEmailResponse: GetWhitelistedCompanyForEmailResponse
  companysvc_GetWorkplaceGoalsRequest: GetWorkplaceGoalsRequest
  companysvc_GetWorkplaceGoalsResponse: GetWorkplaceGoalsResponse
  companysvc_GetWorkspaceStatusesRequest: GetWorkspaceStatusesRequest
  companysvc_GetWorkspaceStatusesResponse: GetWorkspaceStatusesResponse
  companysvc_HybridWorkInformationSaved: HybridWorkInformationSaved
  companysvc_Industry: Industry
  companysvc_IndustryCreated: IndustryCreated
  companysvc_IndustryDeleted: IndustryDeleted
  companysvc_LandlordFinancials: LandlordFinancials
  companysvc_MergeCompanies: MergeCompanies
  companysvc_OfficeValue: OfficeValue
  companysvc_OptionalCompanyType: OptionalCompanyType
  companysvc_PaginationOptions: PaginationOptions
  companysvc_PolicyDetails: PolicyDetails
  companysvc_PolicyInput: PolicyInput
  companysvc_ProcessWorkplaceStrategyTypeformResponseCommand: ProcessWorkplaceStrategyTypeformResponseCommand
  companysvc_RestoreCompanyCommand: RestoreCompanyCommand
  companysvc_SaveCompanyCultureCommand: SaveCompanyCultureCommand
  companysvc_SaveHybridWorkInformationCommand: SaveHybridWorkInformationCommand
  companysvc_SetCompanyIndustriesCommand: SetCompanyIndustriesCommand
  companysvc_SetCompanyIngressesCommand: SetCompanyIngressesCommand
  companysvc_TeamPayload: TeamPayload
  companysvc_TenantCompany: TenantCompany
  companysvc_TenantPriority: TenantPriority
  companysvc_UpdateCompanyCommand: UpdateCompanyCommand
  companysvc_UpdateCompanyTeamCommand: UpdateCompanyTeamCommand
  companysvc_UpdateOwnCompany: UpdateOwnCompany
  companysvc_WorkplaceGoal: WorkplaceGoal
  companysvc_WorkspaceStatus: WorkspaceStatus
  dealsvc_Activity: Activity
  dealsvc_ActivityCompleted: ActivityCompleted
  dealsvc_ActivityConnection: ActivityConnection
  dealsvc_ActivityCreated: ActivityCreated
  dealsvc_ActivityDeleted: ActivityDeleted
  dealsvc_ActivityEdge: ActivityEdge
  dealsvc_ActivityPageInfo: ActivityPageInfo
  dealsvc_ActivityType: ActivityType
  dealsvc_ActivityUpdated: ActivityUpdated
  dealsvc_AddSelectionsCommand: AddSelectionsCommand
  dealsvc_AddShortlistsToDealCommand: AddShortlistsToDealCommand
  dealsvc_ApproveShortlistCommand: ApproveShortlistCommand
  dealsvc_ArchiveTemplateCommand: ArchiveTemplateCommand
  dealsvc_AssignSalesTeamToBrokerCompanyCommand: AssignSalesTeamToBrokerCompanyCommand
  dealsvc_BrokerCommunication: BrokerCommunication
  dealsvc_BrokerEnquiriesFulfilled: BrokerEnquiriesFulfilled
  dealsvc_BrokerEnquiry: BrokerEnquiry
  dealsvc_BrokerEnquiryCreated: BrokerEnquiryCreated
  dealsvc_BrokerSearch: BrokerSearch
  dealsvc_BrokerSearchCreated: BrokerSearchCreated
  dealsvc_BrokerSearchDeleted: BrokerSearchDeleted
  dealsvc_BrokerSearchPolygonUpdated: BrokerSearchPolygonUpdated
  dealsvc_BrokerSearchUpdated: BrokerSearchUpdated
  dealsvc_BrokerSearchesBatchResponse: BrokerSearchesBatchResponse
  dealsvc_CreateActivityCommand: CreateActivityCommand
  dealsvc_CreateBrokerEnquiryCommand: CreateBrokerEnquiryCommand
  dealsvc_CreateBrokerSearchCommand: CreateBrokerSearchCommand
  dealsvc_CreateDealCommand: CreateDealCommand
  dealsvc_CreateDealSpaceMatchCommand: CreateDealSpaceMatchCommand
  dealsvc_CreateDismissedRecommendationsCommand: CreateDismissedRecommendationsCommand
  dealsvc_CreateNoteOnDealCommand: CreateNoteOnDealCommand
  dealsvc_CreateSelectionFeedbacksCommand: CreateSelectionFeedbacksCommand
  dealsvc_CreateShortlistCommand: CreateShortlistCommand
  dealsvc_CreateShortlistViewingRequestsCommand: CreateShortlistViewingRequestsCommand
  dealsvc_CreateTemplateCommand: CreateTemplateCommand
  dealsvc_CreateViewingRequestCommand: CreateViewingRequestCommand
  dealsvc_Deal: Deal
  dealsvc_DealConnection: DealConnection
  dealsvc_DealCreated: DealCreated
  dealsvc_DealDeleted: DealDeleted
  dealsvc_DealEdge: DealEdge
  dealsvc_DealFilters: DealFilters
  dealsvc_DealList: DealList
  dealsvc_DealMoney: DealMoney
  dealsvc_DealMoneyRange: DealMoneyRange
  dealsvc_DealNumericRange: DealNumericRange
  dealsvc_DealPageInfo: DealPageInfo
  dealsvc_DealPaginationData: DealPaginationData
  dealsvc_DealPipelineStage: DealPipelineStage
  dealsvc_DealRequirements: DealRequirements
  dealsvc_DealShortlist: DealShortlist
  dealsvc_DealSpaceMatch: DealSpaceMatch
  dealsvc_DealSpaceMatchDeleted: DealSpaceMatchDeleted
  dealsvc_DealSpaceMatchUpdated: DealSpaceMatchUpdated
  dealsvc_DealSpaceMatched: DealSpaceMatched
  dealsvc_DealStageEvent: DealStageEvent
  dealsvc_DealTimestampRange: DealTimestampRange
  dealsvc_DealTypeOptional: DealTypeOptional
  dealsvc_DealUpdated: DealUpdated
  dealsvc_DealsBatchResponse: DealsBatchResponse
  dealsvc_DealsConnection: DealsConnection
  dealsvc_DealsManyBatchResponse: DealsManyBatchResponse
  dealsvc_DealsMerged: DealsMerged
  dealsvc_DeleteActivityCommand: DeleteActivityCommand
  dealsvc_DeleteBrokerSearchCommand: DeleteBrokerSearchCommand
  dealsvc_DeleteDealCommand: DeleteDealCommand
  dealsvc_DeleteDealSpaceMatchCommand: DeleteDealSpaceMatchCommand
  dealsvc_DeleteMatchedSpace: DeleteMatchedSpace
  dealsvc_DeleteNoteOnDealCommand: DeleteNoteOnDealCommand
  dealsvc_DeleteShortlistCommand: DeleteShortlistCommand
  dealsvc_DismissedRecommendation: DismissedRecommendation
  dealsvc_DismissedRecommendationsCreated: DismissedRecommendationsCreated
  dealsvc_FloorFilters: FloorFilters
  dealsvc_GetActivitiesBatchResponse: GetActivitiesBatchResponse
  dealsvc_GetActivitiesRequest: GetActivitiesRequest
  dealsvc_GetActivitiesResponse: GetActivitiesResponse
  dealsvc_GetActivityIdsForSelectionRequest: GetActivityIdsForSelectionRequest
  dealsvc_GetActivityIdsForSelectionResponse: GetActivityIdsForSelectionResponse
  dealsvc_GetActivityRequest: GetActivityRequest
  dealsvc_GetActivityResponse: GetActivityResponse
  dealsvc_GetActivityTypesRequest: GetActivityTypesRequest
  dealsvc_GetActivityTypesResponse: GetActivityTypesResponse
  dealsvc_GetAllSalesTeamsRequest: GetAllSalesTeamsRequest
  dealsvc_GetAllSalesTeamsResponse: GetAllSalesTeamsResponse
  dealsvc_GetBrokerCommunicationsBatchResponse: GetBrokerCommunicationsBatchResponse
  dealsvc_GetBrokerSearchRequest: GetBrokerSearchRequest
  dealsvc_GetBrokerSearchResponse: GetBrokerSearchResponse
  dealsvc_GetDealByClientCompanyIdResponse: GetDealByClientCompanyIdResponse
  dealsvc_GetDealFromBrokerSearchRequest: GetDealFromBrokerSearchRequest
  dealsvc_GetDealFromBrokerSearchResponse: GetDealFromBrokerSearchResponse
  dealsvc_GetDealNotesRequest: GetDealNotesRequest
  dealsvc_GetDealNotesResponse: GetDealNotesResponse
  dealsvc_GetDealPipelineStagesBatchResponse: GetDealPipelineStagesBatchResponse
  dealsvc_GetDealRequest: GetDealRequest
  dealsvc_GetDealResponse: GetDealResponse
  dealsvc_GetDealShortlistsBatchResponse: GetDealShortlistsBatchResponse
  dealsvc_GetDealShortlistsRequest: GetDealShortlistsRequest
  dealsvc_GetDealShortlistsResponse: GetDealShortlistsResponse
  dealsvc_GetDealSpaceMatchRequest: GetDealSpaceMatchRequest
  dealsvc_GetDealSpaceMatchResponse: GetDealSpaceMatchResponse
  dealsvc_GetDealSpaceMatchesRequest: GetDealSpaceMatchesRequest
  dealsvc_GetDealSpaceMatchesResponse: GetDealSpaceMatchesResponse
  dealsvc_GetDealsListRequest: GetDealsListRequest
  dealsvc_GetDealsRequest: GetDealsRequest
  dealsvc_GetDealsResponse: GetDealsResponse
  dealsvc_GetFirstViewingActivitiesByUnitIdsBatchResponse: GetFirstViewingActivitiesByUnitIdsBatchResponse
  dealsvc_GetLeadSourcesRequest: GetLeadSourcesRequest
  dealsvc_GetLeadSourcesResponse: GetLeadSourcesResponse
  dealsvc_GetLostReasonsRequest: GetLostReasonsRequest
  dealsvc_GetLostReasonsResponse: GetLostReasonsResponse
  dealsvc_GetMatchedSpacesRequest: GetMatchedSpacesRequest
  dealsvc_GetMatchedSpacesResponse: GetMatchedSpacesResponse
  dealsvc_GetNoteRequest: GetNoteRequest
  dealsvc_GetNoteResponse: GetNoteResponse
  dealsvc_GetNotesBatchResponse: GetNotesBatchResponse
  dealsvc_GetPipelineStagesBatchResponse: GetPipelineStagesBatchResponse
  dealsvc_GetSalesTeamRequest: GetSalesTeamRequest
  dealsvc_GetSalesTeamResponse: GetSalesTeamResponse
  dealsvc_GetSalesTeamsBatchResponse: GetSalesTeamsBatchResponse
  dealsvc_GetSearchRequirementsRequest: GetSearchRequirementsRequest
  dealsvc_GetSearchRequirementsResponse: GetSearchRequirementsResponse
  dealsvc_GetSelectionFromUnitGroupIdRequest: GetSelectionFromUnitGroupIdRequest
  dealsvc_GetSelectionsBatchResponse: GetSelectionsBatchResponse
  dealsvc_GetSelectionsFromUnitGroupIdsBatchResponse: GetSelectionsFromUnitGroupIdsBatchResponse
  dealsvc_GetShortlistRequest: GetShortlistRequest
  dealsvc_GetShortlistResponse: GetShortlistResponse
  dealsvc_GetShortlistSummaryRequest: GetShortlistSummaryRequest
  dealsvc_GetShortlistSummaryResponse: GetShortlistSummaryResponse
  dealsvc_GetStagesRequest: GetStagesRequest
  dealsvc_GetStagesResponse: GetStagesResponse
  dealsvc_GetTemplateRequest: GetTemplateRequest
  dealsvc_GetTemplateResponse: GetTemplateResponse
  dealsvc_GetTemplatesRequest: GetTemplatesRequest
  dealsvc_GetTemplatesResponse: GetTemplatesResponse
  dealsvc_GetThreadDealsRequest: GetThreadDealsRequest
  dealsvc_GetThreadDealsResponse: GetThreadDealsResponse
  dealsvc_GetUserBrokerSearchesRequest: GetUserBrokerSearchesRequest
  dealsvc_GetUserBrokerSearchesResponse: GetUserBrokerSearchesResponse
  dealsvc_GetUserShortlistsRequest: GetUserShortlistsRequest
  dealsvc_GetUserShortlistsResponse: GetUserShortlistsResponse
  dealsvc_GetUserViewingRequestsRequest: GetUserViewingRequestsRequest
  dealsvc_GetUserViewingRequestsResponse: GetUserViewingRequestsResponse
  dealsvc_GetUserViewingsRequest: GetUserViewingsRequest
  dealsvc_GetUserViewingsResponse: GetUserViewingsResponse
  dealsvc_GetViewingRequestsForShortlistRequest: GetViewingRequestsForShortlistRequest
  dealsvc_GetViewingRequestsForShortlistResponse: GetViewingRequestsForShortlistResponse
  dealsvc_GetViewingsForShortlistBatchResponse: GetViewingsForShortlistBatchResponse
  dealsvc_LeadSource: LeadSource
  dealsvc_LostReason: LostReason
  dealsvc_MatchSpacesCommand: MatchSpacesCommand
  dealsvc_MatchedSpace: MatchedSpace
  dealsvc_MatchedSpaceDeleted: MatchedSpaceDeleted
  dealsvc_MatchedSpaceRestored: MatchedSpaceRestored
  dealsvc_MatchedSpacesReordered: MatchedSpacesReordered
  dealsvc_MergeDealsCommand: MergeDealsCommand
  dealsvc_Note: Note
  dealsvc_NoteCreated: NoteCreated
  dealsvc_NoteDeleted: NoteDeleted
  dealsvc_NoteUpdated: NoteUpdated
  dealsvc_PipelineStage: PipelineStage
  dealsvc_RemoveSelectionsCommand: RemoveSelectionsCommand
  dealsvc_RemoveShortlistsFromDealCommand: RemoveShortlistsFromDealCommand
  dealsvc_ReorderMatchedSpacesCommand: ReorderMatchedSpacesCommand
  dealsvc_RequestAddShortlistToValveCommand: RequestAddShortlistToValveCommand
  dealsvc_RestoreDeal: RestoreDeal
  dealsvc_RestoreMatchedSpace: RestoreMatchedSpace
  dealsvc_RestoreShortlistCommand: RestoreShortlistCommand
  dealsvc_SalesTeam: SalesTeam
  dealsvc_SalesTeamAssignedToBrokerCompany: SalesTeamAssignedToBrokerCompany
  dealsvc_SaveSearchRequirementsCommand: SaveSearchRequirementsCommand
  dealsvc_SearchHistory: SearchHistory
  dealsvc_SearchRequirements: SearchRequirements
  dealsvc_SearchRequirementsSaved: SearchRequirementsSaved
  dealsvc_SecondarySearchRequirements: SecondarySearchRequirements
  dealsvc_Selection: Selection
  dealsvc_SelectionFeedback: SelectionFeedback
  dealsvc_SelectionFeedbacksCreated: SelectionFeedbacksCreated
  dealsvc_SelectionsAdded: SelectionsAdded
  dealsvc_SelectionsRemoved: SelectionsRemoved
  dealsvc_SelectionsUpdated: SelectionsUpdated
  dealsvc_ShareShortlistWithCurrentUserCommand: ShareShortlistWithCurrentUserCommand
  dealsvc_Shortlist: Shortlist
  dealsvc_ShortlistAddToValveRequested: ShortlistAddToValveRequested
  dealsvc_ShortlistApproved: ShortlistApproved
  dealsvc_ShortlistConnection: ShortlistConnection
  dealsvc_ShortlistCreated: ShortlistCreated
  dealsvc_ShortlistDeleted: ShortlistDeleted
  dealsvc_ShortlistEdge: ShortlistEdge
  dealsvc_ShortlistRestored: ShortlistRestored
  dealsvc_ShortlistSharedCurrentUser: ShortlistSharedCurrentUser
  dealsvc_ShortlistSummary: ShortlistSummary
  dealsvc_ShortlistUpdated: ShortlistUpdated
  dealsvc_ShortlistViewingRequest: ShortlistViewingRequest
  dealsvc_ShortlistViewingRequestsCreated: ShortlistViewingRequestsCreated
  dealsvc_ShortlistsAddedToDeal: ShortlistsAddedToDeal
  dealsvc_ShortlistsRemovedFromDeal: ShortlistsRemovedFromDeal
  dealsvc_SpacesMatched: SpacesMatched
  dealsvc_Template: Template
  dealsvc_TemplateArchived: TemplateArchived
  dealsvc_TemplateCreated: TemplateCreated
  dealsvc_TemplateUpdated: TemplateUpdated
  dealsvc_UpdateActivityCommand: UpdateActivityCommand
  dealsvc_UpdateBrokerSearchCommand: UpdateBrokerSearchCommand
  dealsvc_UpdateBrokerSearchPolygonCommand: UpdateBrokerSearchPolygonCommand
  dealsvc_UpdateDealCommand: UpdateDealCommand
  dealsvc_UpdateDealSpaceMatchCommand: UpdateDealSpaceMatchCommand
  dealsvc_UpdateNoteOnDealCommand: UpdateNoteOnDealCommand
  dealsvc_UpdateSelectionsCommand: UpdateSelectionsCommand
  dealsvc_UpdateShortlistCommand: UpdateShortlistCommand
  dealsvc_UpdateTemplateCommand: UpdateTemplateCommand
  dealsvc_Viewing: Viewing
  dealsvc_ViewingRequest: ViewingRequest
  dealsvc_ViewingRequestCreated: ViewingRequestCreated
  dealsvc_Viewings: Viewings
  deploymentsvc_DeployFinished: DeployFinished
  deploymentsvc_DeployPreviewCommand: DeployPreviewCommand
  deploymentsvc_DeployStarted: DeployStarted
  deploymentsvc_GetDeploymentStatusRequest: GetDeploymentStatusRequest
  deploymentsvc_GetDeploymentStatusResponse: GetDeploymentStatusResponse
  deploymentsvc_GetReadinessStateRequest: GetReadinessStateRequest
  deploymentsvc_GetReadinessStateResponse: GetReadinessStateResponse
  gmailsvc_Email: Email
  gmailsvc_EmailContact: EmailContact
  gmailsvc_EmailContent: EmailContent
  gmailsvc_EmailCreated: EmailCreated
  gmailsvc_EmailMetadata: EmailMetadata
  gmailsvc_EmailSent: EmailSent
  gmailsvc_EmailUpdated: EmailUpdated
  gmailsvc_GetEmailContentRequest: GetEmailContentRequest
  gmailsvc_GetEmailContentResponse: GetEmailContentResponse
  gmailsvc_GetEmailRequest: GetEmailRequest
  gmailsvc_GetEmailResponse: GetEmailResponse
  gmailsvc_GetEmailsRequest: GetEmailsRequest
  gmailsvc_GetEmailsResponse: GetEmailsResponse
  gmailsvc_GetSharedInboxesRequest: GetSharedInboxesRequest
  gmailsvc_GetSharedInboxesResponse: GetSharedInboxesResponse
  gmailsvc_ListenForEmailsCommand: ListenForEmailsCommand
  gmailsvc_ListeningForEmails: ListeningForEmails
  gmailsvc_SendEmailCommand: SendEmailCommand
  guestsvc_DeleteGuestCommand: DeleteGuestCommand
  guestsvc_DoorOpenedForGuest: DoorOpenedForGuest
  guestsvc_GetCompanyGuestsRequest: GetCompanyGuestsRequest
  guestsvc_GetCompanyGuestsResponse: GetCompanyGuestsResponse
  guestsvc_GetGuestAccessesRequest: GetGuestAccessesRequest
  guestsvc_GetGuestAccessesResponse: GetGuestAccessesResponse
  guestsvc_GetGuestRequest: GetGuestRequest
  guestsvc_GetGuestResponse: GetGuestResponse
  guestsvc_GetGuestsBatchResponse: GetGuestsBatchResponse
  guestsvc_GetGuestsRequest: GetGuestsRequest
  guestsvc_GetGuestsResponse: GetGuestsResponse
  guestsvc_GetMyGuestsPaginated: GetMyGuestsPaginated
  guestsvc_Guest: Guest
  guestsvc_GuestArrived: GuestArrived
  guestsvc_GuestArrivedCommand: GuestArrivedCommand
  guestsvc_GuestConnection: GuestConnection
  guestsvc_GuestDateRange: GuestDateRange
  guestsvc_GuestDayPassResent: GuestDayPassResent
  guestsvc_GuestDeleted: GuestDeleted
  guestsvc_GuestEdge: GuestEdge
  guestsvc_GuestRegistered: GuestRegistered
  guestsvc_OpenDoorForGuestCommand: OpenDoorForGuestCommand
  guestsvc_RegisterGuestCommand: RegisterGuestCommand
  guestsvc_ResendGuestDayPass: ResendGuestDayPass
  guestsvc_TodaysGuestsNotification: TodaysGuestsNotification
  intercomsvc_AnswerSession: AnswerSession
  intercomsvc_CallMade: CallMade
  intercomsvc_EndSession: EndSession
  intercomsvc_GetActiveSessionsResponse: GetActiveSessionsResponse
  intercomsvc_GetPhoneNumbersRequest: GetPhoneNumbersRequest
  intercomsvc_GetPhoneNumbersResponse: GetPhoneNumbersResponse
  intercomsvc_GetSessionRequest: GetSessionRequest
  intercomsvc_GetSessionResponse: GetSessionResponse
  intercomsvc_GetSessionsRequest: GetSessionsRequest
  intercomsvc_GetSessionsResponse: GetSessionsResponse
  intercomsvc_GetWebhookRequest: GetWebhookRequest
  intercomsvc_GetWebhookResponse: GetWebhookResponse
  intercomsvc_IntercomPressed: IntercomPressed
  intercomsvc_PhoneNumber: PhoneNumber
  intercomsvc_PhoneNumberCreated: PhoneNumberCreated
  intercomsvc_ProvisionPhoneNumberCommand: ProvisionPhoneNumberCommand
  intercomsvc_ReconfigureProviders: ReconfigureProviders
  intercomsvc_Session: Session
  intercomsvc_SessionAnswered: SessionAnswered
  intercomsvc_SessionCreated: SessionCreated
  intercomsvc_SessionRecorded: SessionRecorded
  intercomsvc_SessionUpdated: SessionUpdated
  intercomsvc_TwilioNumberDeleted: TwilioNumberDeleted
  locationsvc_AccessMethodOptional: AccessMethodOptional
  locationsvc_AgenciesForLocationUpdated: AgenciesForLocationUpdated
  locationsvc_AgentSetUpOptional: AgentSetUpOptional
  locationsvc_ArchiveLocationCommand: ArchiveLocationCommand
  locationsvc_Area: Area
  locationsvc_Breakdown: Breakdown
  locationsvc_Building: Building
  locationsvc_BuildingDetails: BuildingDetails
  locationsvc_BuildingInput: BuildingInput
  locationsvc_BuildingSaved: BuildingSaved
  locationsvc_BuildingSourceUrl: BuildingSourceUrl
  locationsvc_BuildingSubmitted: BuildingSubmitted
  locationsvc_BuildingTrait: BuildingTrait
  locationsvc_BuildingTraitCreated: BuildingTraitCreated
  locationsvc_BuildingTraitInput: BuildingTraitInput
  locationsvc_BuildingUnit: BuildingUnit
  locationsvc_BuildingUnitDetails: BuildingUnitDetails
  locationsvc_BuildingUnitInput: BuildingUnitInput
  locationsvc_BuildingUnitRestored: BuildingUnitRestored
  locationsvc_BuildingUnits: BuildingUnits
  locationsvc_BuildingsMerged: BuildingsMerged
  locationsvc_CheckAndUpdateListedLocationsCommand: CheckAndUpdateListedLocationsCommand
  locationsvc_CombinationDetails: CombinationDetails
  locationsvc_CommercialModelBreakdown: CommercialModelBreakdown
  locationsvc_CommercialModelInputs: CommercialModelInputs
  locationsvc_CreateBuildingTraitCommand: CreateBuildingTraitCommand
  locationsvc_CreateListedBuildingsDatasetCommand: CreateListedBuildingsDatasetCommand
  locationsvc_CreateLocationCommand: CreateLocationCommand
  locationsvc_CreateLocationFacilityCommand: CreateLocationFacilityCommand
  locationsvc_CreateLocationSellingPoint: CreateLocationSellingPoint
  locationsvc_CreateScrapedLocationsCommand: CreateScrapedLocationsCommand
  locationsvc_DeleteLocationCommand: DeleteLocationCommand
  locationsvc_DeleteLocationSellingPoint: DeleteLocationSellingPoint
  locationsvc_DiscardSourcedLocationCommand: DiscardSourcedLocationCommand
  locationsvc_DisqualifyLocation: DisqualifyLocation
  locationsvc_EditLocation: EditLocation
  locationsvc_EditLocationCommand: EditLocationCommand
  locationsvc_EditUnit: EditUnit
  locationsvc_FacilityIcon: FacilityIcon
  locationsvc_GetAreasRequest: GetAreasRequest
  locationsvc_GetAreasResponse: GetAreasResponse
  locationsvc_GetBuildingRequest: GetBuildingRequest
  locationsvc_GetBuildingResponse: GetBuildingResponse
  locationsvc_GetBuildingTimeZoneBatchRequest: GetBuildingTimeZoneBatchRequest
  locationsvc_GetBuildingTimeZoneBatchResponse: GetBuildingTimeZoneBatchResponse
  locationsvc_GetBuildingTimeZoneRequest: GetBuildingTimeZoneRequest
  locationsvc_GetBuildingTraitsRequest: GetBuildingTraitsRequest
  locationsvc_GetBuildingTraitsResponse: GetBuildingTraitsResponse
  locationsvc_GetBuildingUnitsBatchResponse: GetBuildingUnitsBatchResponse
  locationsvc_GetBuildingsBatchResponse: GetBuildingsBatchResponse
  locationsvc_GetCombinationDetailsBatchRequest: GetCombinationDetailsBatchRequest
  locationsvc_GetCombinationDetailsBatchResponse: GetCombinationDetailsBatchResponse
  locationsvc_GetCombinationDetailsRequest: GetCombinationDetailsRequest
  locationsvc_GetCombinationDetailsResponse: GetCombinationDetailsResponse
  locationsvc_GetCommercialModelRequest: GetCommercialModelRequest
  locationsvc_GetCommercialModelResponse: GetCommercialModelResponse
  locationsvc_GetFacilityIconsRequest: GetFacilityIconsRequest
  locationsvc_GetFacilityIconsResponse: GetFacilityIconsResponse
  locationsvc_GetFieldsRequiredForNextStatusRequest: GetFieldsRequiredForNextStatusRequest
  locationsvc_GetFieldsRequiredForNextStatusResponse: GetFieldsRequiredForNextStatusResponse
  locationsvc_GetLocationFacilitiesRequest: GetLocationFacilitiesRequest
  locationsvc_GetLocationFacilitiesResponse: GetLocationFacilitiesResponse
  locationsvc_GetLocationFinancialModelBatchResponse: GetLocationFinancialModelBatchResponse
  locationsvc_GetLocationFinancialModelResponse: GetLocationFinancialModelResponse
  locationsvc_GetLocationRequest: GetLocationRequest
  locationsvc_GetLocationResponse: GetLocationResponse
  locationsvc_GetLocationScrapedStatusResponse: GetLocationScrapedStatusResponse
  locationsvc_GetLocationSellingPointsRequest: GetLocationSellingPointsRequest
  locationsvc_GetLocationSellingPointsResponse: GetLocationSellingPointsResponse
  locationsvc_GetLocationsPaginatedResponse: GetLocationsPaginatedResponse
  locationsvc_GetLocationsRequest: GetLocationsRequest
  locationsvc_GetPricingRequest: GetPricingRequest
  locationsvc_GetPricingResponse: GetPricingResponse
  locationsvc_GetPricingsBatchRequest: GetPricingsBatchRequest
  locationsvc_GetPricingsBatchResponse: GetPricingsBatchResponse
  locationsvc_GetSpaceMatchLocationsResponse: GetSpaceMatchLocationsResponse
  locationsvc_GetTrainStationsForLocationRequest: GetTrainStationsForLocationRequest
  locationsvc_GetTrainStationsForLocationResponse: GetTrainStationsForLocationResponse
  locationsvc_GetUnitsForBuildingsBatchResponse: GetUnitsForBuildingsBatchResponse
  locationsvc_ListedBuildingsDatasetCreated: ListedBuildingsDatasetCreated
  locationsvc_ListedLocationsCheckedAndUpdated: ListedLocationsCheckedAndUpdated
  locationsvc_Location: Location
  locationsvc_LocationAgency: LocationAgency
  locationsvc_LocationArchived: LocationArchived
  locationsvc_LocationCreated: LocationCreated
  locationsvc_LocationDateRange: LocationDateRange
  locationsvc_LocationDeleted: LocationDeleted
  locationsvc_LocationDisqualified: LocationDisqualified
  locationsvc_LocationEdge: LocationEdge
  locationsvc_LocationEdited: LocationEdited
  locationsvc_LocationFacility: LocationFacility
  locationsvc_LocationFacilityCreated: LocationFacilityCreated
  locationsvc_LocationFinancialModel: LocationFinancialModel
  locationsvc_LocationFinancialModelMutation: LocationFinancialModelMutation
  locationsvc_LocationMoney: LocationMoney
  locationsvc_LocationMutableData: LocationMutableData
  locationsvc_LocationMutableFinancialModel: LocationMutableFinancialModel
  locationsvc_LocationNameUpdated: LocationNameUpdated
  locationsvc_LocationProductFilters: LocationProductFilters
  locationsvc_LocationQualified: LocationQualified
  locationsvc_LocationRange: LocationRange
  locationsvc_LocationRangeFilter: LocationRangeFilter
  locationsvc_LocationRequiredFields: LocationRequiredFields
  locationsvc_LocationSellingPoint: LocationSellingPoint
  locationsvc_LocationSellingPointCreated: LocationSellingPointCreated
  locationsvc_LocationSellingPointDeleted: LocationSellingPointDeleted
  locationsvc_LocationSourceUrl: LocationSourceUrl
  locationsvc_LocationSpaceMatchEdge: LocationSpaceMatchEdge
  locationsvc_LocationSpaceMatchResult: LocationSpaceMatchResult
  locationsvc_LocationStation: LocationStation
  locationsvc_LocationUnarchived: LocationUnarchived
  locationsvc_LocationUpdated: LocationUpdated
  locationsvc_LocationVerified: LocationVerified
  locationsvc_LocationViewport: LocationViewport
  locationsvc_LocationsBatchResponse: LocationsBatchResponse
  locationsvc_LocationsConnection: LocationsConnection
  locationsvc_LocationsMerged: LocationsMerged
  locationsvc_LocationsUpdated: LocationsUpdated
  locationsvc_LockAcquiredForLocationVerification: LockAcquiredForLocationVerification
  locationsvc_LockLocationForVerificationCommand: LockLocationForVerificationCommand
  locationsvc_LockReleasedForLocationVerification: LockReleasedForLocationVerification
  locationsvc_LumpSums: LumpSums
  locationsvc_MergeBuildingsCommand: MergeBuildingsCommand
  locationsvc_MergeLocation: MergeLocation
  locationsvc_MergeLocationsCommand: MergeLocationsCommand
  locationsvc_MergeVerifyLocationsCommand: MergeVerifyLocationsCommand
  locationsvc_MinMax: MinMax
  locationsvc_PotentialProductFilters: PotentialProductFilters
  locationsvc_Pricing: Pricing
  locationsvc_QualifyLocationCommand: QualifyLocationCommand
  locationsvc_RequiredFields: RequiredFields
  locationsvc_RestoreBuildingUnitCommand: RestoreBuildingUnitCommand
  locationsvc_SaveBuildingCommand: SaveBuildingCommand
  locationsvc_ScrapedLocation: ScrapedLocation
  locationsvc_ScrapedLocationsCreated: ScrapedLocationsCreated
  locationsvc_ScrapedStatus: ScrapedStatus
  locationsvc_SourcedLocationDiscarded: SourcedLocationDiscarded
  locationsvc_SourcedLocationUpdated: SourcedLocationUpdated
  locationsvc_StatusOptional: StatusOptional
  locationsvc_SubmitBuildingCommand: SubmitBuildingCommand
  locationsvc_TierInputs: TierInputs
  locationsvc_TrainLine: TrainLine
  locationsvc_UnarchiveLocationCommand: UnarchiveLocationCommand
  locationsvc_UnitAvailabilityStatusOptional: UnitAvailabilityStatusOptional
  locationsvc_UnitCombinationResult: UnitCombinationResult
  locationsvc_UnitFilters: UnitFilters
  locationsvc_UnitFitoutStateOptional: UnitFitoutStateOptional
  locationsvc_UnlockLocationForVerificationCommand: UnlockLocationForVerificationCommand
  locationsvc_UpdateAgenciesForLocationCommand: UpdateAgenciesForLocationCommand
  locationsvc_UpdateLocationNameCommand: UpdateLocationNameCommand
  locationsvc_UpdateLocationStatusesCommand: UpdateLocationStatusesCommand
  locationsvc_UpdateSourcedLocationCommand: UpdateSourcedLocationCommand
  locationsvc_VerifyLocation: VerifyLocation
  locationsvc_VerifyLocationCommand: VerifyLocationCommand
  locationsvc_VerifyLocationsMerged: VerifyLocationsMerged
  locationsvc_VerifyUnit: VerifyUnit
  notificationsvc_Communication: Communication
  notificationsvc_CommunicationPreferenceSet: CommunicationPreferenceSet
  notificationsvc_CreateWebPushSubscription: CreateWebPushSubscription
  notificationsvc_DeleteUserPushTokenCommand: DeleteUserPushTokenCommand
  notificationsvc_DeleteWebPushSubscription: DeleteWebPushSubscription
  notificationsvc_EmailAction: EmailAction
  notificationsvc_EmailBody: EmailBody
  notificationsvc_EmailButton: EmailButton
  notificationsvc_EmailEntry: EmailEntry
  notificationsvc_EmailSentEvent: EmailSentEvent
  notificationsvc_EmailTable: EmailTable
  notificationsvc_EmailTableData: EmailTableData
  notificationsvc_GetCommunicationsBatchResponse: GetCommunicationsBatchResponse
  notificationsvc_GetHasUserReadNotificationResponse: GetHasUserReadNotificationResponse
  notificationsvc_GetMyNotificationPreferencesRequest: GetMyNotificationPreferencesRequest
  notificationsvc_GetMyNotificationPreferencesResponse: GetMyNotificationPreferencesResponse
  notificationsvc_GetNotificationsPaginatedRequest: GetNotificationsPaginatedRequest
  notificationsvc_GetNotificationsRequest: GetNotificationsRequest
  notificationsvc_GetNotificationsResponse: GetNotificationsResponse
  notificationsvc_KitchenSinkSent: KitchenSinkSent
  notificationsvc_MarkNotificationAsRead: MarkNotificationAsRead
  notificationsvc_NewEnquiryNotificationSent: NewEnquiryNotificationSent
  notificationsvc_Notification: Notification
  notificationsvc_NotificationEdge: NotificationEdge
  notificationsvc_NotificationMarkedAsRead: NotificationMarkedAsRead
  notificationsvc_NotificationPreferenceMetadata: NotificationPreferenceMetadata
  notificationsvc_NotificationSentToAllUsers: NotificationSentToAllUsers
  notificationsvc_NotificationsConnection: NotificationsConnection
  notificationsvc_NotifyAboutTenancyCommand: NotifyAboutTenancyCommand
  notificationsvc_Preference: Preference
  notificationsvc_RecoveryEmailSent: RecoveryEmailSent
  notificationsvc_SaveUserPushTokenCommand: SaveUserPushTokenCommand
  notificationsvc_SendChatPulse: SendChatPulse
  notificationsvc_SendEmailAction: SendEmailAction
  notificationsvc_SendKitchenSinkCommand: SendKitchenSinkCommand
  notificationsvc_SendNewEnquiryNotificationCommand: SendNewEnquiryNotificationCommand
  notificationsvc_SendNotificationToAllUsersCommand: SendNotificationToAllUsersCommand
  notificationsvc_SendNotificationToAllUsersDegraded: SendNotificationToAllUsersDegraded
  notificationsvc_SendTenancyPulse: SendTenancyPulse
  notificationsvc_SetCommunicationPreference: SetCommunicationPreference
  notificationsvc_SetCommunicationPreferenceForAllEmployeesOfCompany: SetCommunicationPreferenceForAllEmployeesOfCompany
  notificationsvc_TenantAppFeedbackSubmission: TenantAppFeedbackSubmission
  notificationsvc_UserNotifiedAboutTenancy: UserNotifiedAboutTenancy
  notificationsvc_UserPushTokenDeleted: UserPushTokenDeleted
  notificationsvc_UserPushTokenSaved: UserPushTokenSaved
  notificationsvc_WebPushSubscriptionCreated: WebPushSubscriptionCreated
  notificationsvc_WebPushSubscriptionError: WebPushSubscriptionError
  printingsvc_CreatePrinterQueue: CreatePrinterQueue
  printingsvc_GetPreviewRequest: GetPreviewRequest
  printingsvc_GetPreviewResponse: GetPreviewResponse
  printingsvc_GetPrintersRequest: GetPrintersRequest
  printingsvc_GetPrintersResponse: GetPrintersResponse
  printingsvc_GetQueueRequest: GetQueueRequest
  printingsvc_GetQueueResponse: GetQueueResponse
  printingsvc_GetSettingsRequest: GetSettingsRequest
  printingsvc_GetSettingsResponse: GetSettingsResponse
  printingsvc_GetUserIdRequest: GetUserIdRequest
  printingsvc_GetUserIdResponse: GetUserIdResponse
  printingsvc_Printer: Printer
  profilesvc_CreateProfileCommand: CreateProfileCommand
  profilesvc_DeleteProfileCommand: DeleteProfileCommand
  profilesvc_GetManyProfilesBatchResponse: GetManyProfilesBatchResponse
  profilesvc_GetProfileForEmailRequest: GetProfileForEmailRequest
  profilesvc_GetProfileRequest: GetProfileRequest
  profilesvc_GetProfileResponse: GetProfileResponse
  profilesvc_GetProfilesBatchResponse: GetProfilesBatchResponse
  profilesvc_GetProfilesListRequest: GetProfilesListRequest
  profilesvc_GetProfilesRequest: GetProfilesRequest
  profilesvc_GetProfilesResponse: GetProfilesResponse
  profilesvc_GetUserIdsWithNoTeamRequest: GetUserIdsWithNoTeamRequest
  profilesvc_GetUserIdsWithNoTeamResponse: GetUserIdsWithNoTeamResponse
  profilesvc_ManyProfiles: ManyProfiles
  profilesvc_Profile: Profile
  profilesvc_ProfileAddress: ProfileAddress
  profilesvc_ProfileCreated: ProfileCreated
  profilesvc_ProfileDeleted: ProfileDeleted
  profilesvc_ProfileEdge: ProfileEdge
  profilesvc_ProfileObfuscated: ProfileObfuscated
  profilesvc_ProfileUpdated: ProfileUpdated
  profilesvc_ProfilesConnection: ProfilesConnection
  profilesvc_UpdateProfileCommand: UpdateProfileCommand
  requestsvc_ArchiveRequestCommand: ArchiveRequestCommand
  requestsvc_Assignment: Assignment
  requestsvc_AttachTaskToRequestCommand: AttachTaskToRequestCommand
  requestsvc_AttachToRequestCommand: AttachToRequestCommand
  requestsvc_Category: Category
  requestsvc_Comment: Comment
  requestsvc_CreateAssignmentCommand: CreateAssignmentCommand
  requestsvc_CreateEventCommand: CreateEventCommand
  requestsvc_CreateRequestCommand: CreateRequestCommand
  requestsvc_DeleteAssignmentCommand: DeleteAssignmentCommand
  requestsvc_DeleteEventCommand: DeleteEventCommand
  requestsvc_DeleteRequestAttachmentCommand: DeleteRequestAttachmentCommand
  requestsvc_DeleteRequestCommand: DeleteRequestCommand
  requestsvc_DetachTaskFromRequestCommand: DetachTaskFromRequestCommand
  requestsvc_Event: Event
  requestsvc_EventCreated: EventCreated
  requestsvc_EventDeleted: EventDeleted
  requestsvc_GetAssigneeRequest: GetAssigneeRequest
  requestsvc_GetAssigneeResponse: GetAssigneeResponse
  requestsvc_GetAssignmentsRequest: GetAssignmentsRequest
  requestsvc_GetAssignmentsResponse: GetAssignmentsResponse
  requestsvc_GetCategoriesRequest: GetCategoriesRequest
  requestsvc_GetCategoriesResponse: GetCategoriesResponse
  requestsvc_GetEventRequest: GetEventRequest
  requestsvc_GetEventResponse: GetEventResponse
  requestsvc_GetEventsRequest: GetEventsRequest
  requestsvc_GetEventsResponse: GetEventsResponse
  requestsvc_GetOrderedPrioritiesResponse: GetOrderedPrioritiesResponse
  requestsvc_GetPrioritiesRequest: GetPrioritiesRequest
  requestsvc_GetPrioritiesResponse: GetPrioritiesResponse
  requestsvc_GetRequestRequest: GetRequestRequest
  requestsvc_GetRequestResponse: GetRequestResponse
  requestsvc_GetRequestsRequest: GetRequestsRequest
  requestsvc_GetRequestsResponse: GetRequestsResponse
  requestsvc_Priority: Priority
  requestsvc_Request: Request
  requestsvc_RequestArchived: RequestArchived
  requestsvc_RequestCreated: RequestCreated
  requestsvc_RequestDeleted: RequestDeleted
  requestsvc_RequestUpdated: RequestUpdated
  requestsvc_UpdatePriorityCommand: UpdatePriorityCommand
  requestsvc_UpdateRequestCommand: UpdateRequestCommand
  roomsvc_BookRoomResponse: BookRoomResponse
  roomsvc_Booking: Booking
  roomsvc_BookingCancelled: BookingCancelled
  roomsvc_BookingConfirmed: BookingConfirmed
  roomsvc_BookingEdge: BookingEdge
  roomsvc_BookingFailed: BookingFailed
  roomsvc_BookingTimeInput: BookingTimeInput
  roomsvc_BookingsConnection: BookingsConnection
  roomsvc_CancelBookingCommand: CancelBookingCommand
  roomsvc_CheckAvailabilityRequest: CheckAvailabilityRequest
  roomsvc_CheckAvailabilityResponse: CheckAvailabilityResponse
  roomsvc_CreateBookingCommand: CreateBookingCommand
  roomsvc_CreateRoomAction: CreateRoomAction
  roomsvc_DeleteRoomAction: DeleteRoomAction
  roomsvc_GetBookingBatchResponse: GetBookingBatchResponse
  roomsvc_GetBookingRequest: GetBookingRequest
  roomsvc_GetBookingResponse: GetBookingResponse
  roomsvc_GetBookingsBatchResponse: GetBookingsBatchResponse
  roomsvc_GetBookingsRequest: GetBookingsRequest
  roomsvc_GetBookingsResponse: GetBookingsResponse
  roomsvc_GetMyBookingsPaginatedRequest: GetMyBookingsPaginatedRequest
  roomsvc_GetMyBookingsRequest: GetMyBookingsRequest
  roomsvc_GetMyRoomsRequest: GetMyRoomsRequest
  roomsvc_GetRoomAvailabilityRequest: GetRoomAvailabilityRequest
  roomsvc_GetRoomAvailabilityResponse: GetRoomAvailabilityResponse
  roomsvc_GetRoomRequest: GetRoomRequest
  roomsvc_GetRoomsPaginatedRequest: GetRoomsPaginatedRequest
  roomsvc_GetRoomsRequest: GetRoomsRequest
  roomsvc_GetRoomsResponse: GetRoomsResponse
  roomsvc_ISOString: ISOString
  roomsvc_Interval: Interval
  roomsvc_RecoverRoomAction: RecoverRoomAction
  roomsvc_Room: Room
  roomsvc_RoomCreated: RoomCreated
  roomsvc_RoomDeletedEffect: RoomDeletedEffect
  roomsvc_RoomEdge: RoomEdge
  roomsvc_RoomMutableData: RoomMutableData
  roomsvc_RoomRecoveredEffect: RoomRecoveredEffect
  roomsvc_RoomUpdated: RoomUpdated
  roomsvc_RoomsConnection: RoomsConnection
  roomsvc_UpdateRoomAction: UpdateRoomAction
  uploadsvc_DeleteUploadCommand: DeleteUploadCommand
  uploadsvc_Dimensions: Dimensions
  uploadsvc_GeneratePdfRequest: GeneratePdfRequest
  uploadsvc_GeneratePdfRequestSubmitted: GeneratePdfRequestSubmitted
  uploadsvc_GetUploadRequest: GetUploadRequest
  uploadsvc_GetUploadResponse: GetUploadResponse
  uploadsvc_GetUploadsBatchRequest: GetUploadsBatchRequest
  uploadsvc_GetUploadsBatchResponse: GetUploadsBatchResponse
  uploadsvc_GetUploadsRequest: GetUploadsRequest
  uploadsvc_GetUploadsResponse: GetUploadsResponse
  uploadsvc_PdfGenerated: PdfGenerated
  uploadsvc_UploadDeleted: UploadDeleted
  uploadsvc_UploadMessage: UploadMessage
  uploadsvc_UploadRequest: UploadRequest
  usersvc_AccountRecoveryStarted: AccountRecoveryStarted
  usersvc_AddUserToLeadTenantsGroupCommand: AddUserToLeadTenantsGroupCommand
  usersvc_AuthenticationFactorSelected: AuthenticationFactorSelected
  usersvc_ChangePassword: ChangePassword
  usersvc_ChangeUserEmailCommand: ChangeUserEmailCommand
  usersvc_ChangeUserPasswordCommand: ChangeUserPasswordCommand
  usersvc_CompleteOnboardingCommand: CompleteOnboardingCommand
  usersvc_CreateUserCommand: CreateUserCommand
  usersvc_DeleteUserCommand: DeleteUserCommand
  usersvc_DeleteUsersInCompanies: DeleteUsersInCompanies
  usersvc_DeleteUsersInCompany: DeleteUsersInCompany
  usersvc_ExchangeTokenRequest: ExchangeTokenRequest
  usersvc_GetCompanyUsersRequest: GetCompanyUsersRequest
  usersvc_GetCompanyUsersResponse: GetCompanyUsersResponse
  usersvc_GetGoogleAccessTokenRequest: GetGoogleAccessTokenRequest
  usersvc_GetGoogleAccessTokenResponse: GetGoogleAccessTokenResponse
  usersvc_GetNumberOfUsersInCompanyResponse: GetNumberOfUsersInCompanyResponse
  usersvc_GetOrderedUsersResponse: GetOrderedUsersResponse
  usersvc_GetUserRequest: GetUserRequest
  usersvc_GetUsersByCompanyIdResponse: GetUsersByCompanyIdResponse
  usersvc_GetUsersByIdResponse: GetUsersByIdResponse
  usersvc_GetUsersRequest: GetUsersRequest
  usersvc_GetUsersResponse: GetUsersResponse
  usersvc_GoogleLoginRequest: GoogleLoginRequest
  usersvc_GoogleLoginResponse: GoogleLoginResponse
  usersvc_HuddleUsersChased: HuddleUsersChased
  usersvc_LogOutFromContextCommand: LogOutFromContextCommand
  usersvc_LoggedInAsUser: LoggedInAsUser
  usersvc_LoginAsUserCommand: LoginAsUserCommand
  usersvc_LoginCommand: LoginCommand
  usersvc_LoginRequest: LoginRequest
  usersvc_LoginResponse: LoginResponse
  usersvc_LoginRevokedForUser: LoginRevokedForUser
  usersvc_LogoutUserCommand: LogoutUserCommand
  usersvc_OnboadingCompleted: OnboadingCompleted
  usersvc_OnboardUserCommand: OnboardUserCommand
  usersvc_OnboardUsersCommand: OnboardUsersCommand
  usersvc_OnboardingEmailResent: OnboardingEmailResent
  usersvc_PasswordChanged: PasswordChanged
  usersvc_PasswordReset: PasswordReset
  usersvc_PasswordResetTriggered: PasswordResetTriggered
  usersvc_PhoneNumberVerified: PhoneNumberVerified
  usersvc_RegisterUserForBrokerPlatformCommand: RegisterUserForBrokerPlatformCommand
  usersvc_RemoveUserFromLeadTenantsGroupCommand: RemoveUserFromLeadTenantsGroupCommand
  usersvc_ResendOnboardingEmailCommand: ResendOnboardingEmailCommand
  usersvc_ResendVerificationEmailForBrokerPlatformCommand: ResendVerificationEmailForBrokerPlatformCommand
  usersvc_ResetPassword: ResetPassword
  usersvc_ResetPasswordCommand: ResetPasswordCommand
  usersvc_RevokeLoginForUser: RevokeLoginForUser
  usersvc_SendPhoneVerification: SendPhoneVerification
  usersvc_SignUpCommand: SignUpCommand
  usersvc_StartAccountRecoveryCommand: StartAccountRecoveryCommand
  usersvc_UpdateGoogleCredentialsCommand: UpdateGoogleCredentialsCommand
  usersvc_User: User
  usersvc_UserAddedToLeadTenantsGroup: UserAddedToLeadTenantsGroup
  usersvc_UserCreated: UserCreated
  usersvc_UserDeleted: UserDeleted
  usersvc_UserEmailUpdated: UserEmailUpdated
  usersvc_UserFailedToRegisterForBrokerPlatform: UserFailedToRegisterForBrokerPlatform
  usersvc_UserLoggedIn: UserLoggedIn
  usersvc_UserLoggedOut: UserLoggedOut
  usersvc_UserOnboarded: UserOnboarded
  usersvc_UserOnboardedFromProfile: UserOnboardedFromProfile
  usersvc_UserPasswordChanged: UserPasswordChanged
  usersvc_UserRegisteredForBrokerPlatform: UserRegisteredForBrokerPlatform
  usersvc_UserRemovedFromLeadTenantsGroup: UserRemovedFromLeadTenantsGroup
  usersvc_UserSignedUp: UserSignedUp
  usersvc_UserStartedRecovery: UserStartedRecovery
  usersvc_UsersDeletedInCompanies: UsersDeletedInCompanies
  usersvc_UsersDeletedInCompany: UsersDeletedInCompany
  usersvc_UsersOnboarded: UsersOnboarded
  usersvc_VerificationEmailResentForBrokerPlatform: VerificationEmailResentForBrokerPlatform
  usersvc_VerifyEmailForBrokerPlatformCommand: VerifyEmailForBrokerPlatformCommand
  usersvc_VerifyPasswordResetTokenRequest: VerifyPasswordResetTokenRequest
  usersvc_VerifyPasswordResetTokenResponse: VerifyPasswordResetTokenResponse
  usersvc_VerifyPhoneRequest: VerifyPhoneRequest
  usersvc_VerifyPhoneResponse: VerifyPhoneResponse
  usersvc_VerifyRegistrationRequest: VerifyRegistrationRequest
}

type SummaryEmailSent {
  _null: Boolean
}

enum TaskCategory {
  Design
  It
  Legal
  Ops
}

input TaskStateInput {
  taskId: String!
  status: MilestoneStatus
  hidden: Boolean!
}

type TeamPayload {
  id: String
  name: String
  user: User
}

input TeamPayloadInput {
  id: String
  name: String
}

type TeamsOnDeskSet {
  deskId: String!
  teamIds: [String!]!
  user: User
}

type Template {
  content: String!
  createdAt: Timestamp
  createdBy: String!
  deletedAt: Timestamp
  id: String!
  name: String!
  tags: [String!]!
  type: TemplateType
  updatedAt: Timestamp
  user: User
}

type TemplateArchived {
  template: Template
  user: User
}

type TemplateCreated {
  template: Template
  user: User
}

enum TemplateType {
  MARKDOWN
}

type TemplateUpdated {
  template: Template
  user: User
}

type TemporaryPinCreated {
  code: String!
  email: String!
  from: Timestamp
  to: Timestamp
  user: User
  userId: String!
}

type Tenancy {
  activeOrders: TenancyActiveOrders
  appHeader: UploadMessage
  appHeaderUploadId: String!
  breakClauses: [BreakClause!]
  chats: TenancyChats
  commercialWorkspacePartner: User
  commercialsAgreedAt: Date
  company: Company
  companyId: String!
  createdAt: Timestamp
  cwpUserId: String!
  dealId: String!
  declineReason: String!
  deletedAt: Timestamp
  displayId: String!
  documentIds: [String!]!
  documents(documentTypeMetaDataKey: String, documentTypeMetaDataValue: String): [Document]
  end: Date
  endDate: Timestamp
  excludeFromReporting: Boolean!
  financialModel: TenancyFinancialModel
  floorplanIds: [String!]!
  floorplans: [TenancyFloorplan!]
  floors: [UnitFloor]
  googleDriveId: String!
  hasMovedIn: Boolean
  headsOfTermsAgreedAt: Date
  id: String!
  isKittActingAgent: Boolean!
  leaseAgreedAt: Date
  leasingManager: User
  location: Location
  locationId: String!
  locations: [Location]!
  moveInDate: Date
  notes: String!
  occupancyAt: Date
  onboardingStatus: TenancyOnboardingStatus
  renewalType: RenewalType
  rollingConditions: [RollingCondition!]
  setupForTenancyAt: Timestamp
  start: Date
  startDate: Timestamp
  status: TenancyStatus
  tasks: TenancyTasks
  term: [Payment!]
  termsRevised: Boolean!
  timeline: TimelineStages
  todos(category: TaskCategory): [TenancyTodo]
  transactionMemberUserIds: [String!]!
  transactionMembers: [User]
  unitIds: [String!]!
  unitTenancies(locationIds: [String] = ["[]"]): UnitTenancies
  units: [Unit]!
  versionedDocuments: [VersionedDocument]
  welcomeMessageSent: Boolean!
  welcomePackUrl: String!
}

type TenancyActiveOrders {
  orders: [Order]
}

type TenancyChat {
  category: TaskCategory
  chat: Chat
  chatId: String!
  hidden: Boolean!
}

type TenancyChats {
  chats: [TenancyChat!]
  unreadMessageCount: Int
}

type TenancyCreated {
  newOffer: Boolean!
  tenancy: Tenancy
}

type TenancyDeleted {
  id: String!
  tenancy: Tenancy
}

type TenancyDocumentDeleted {
  documentId: String!
  tenancyId: String!
}

type TenancyFinancialModel {
  enterpriseContract: Boolean!
  fitoutBudget: Money
  fitoutBudgetDocument: Document
  fitoutBudgetDocumentId: String!
  managementFee: Money
}

input TenancyFinancialModelMutationInput {
  fitoutBudget: MoneyInput
  fitoutBudgetDocumentId: String
  enterpriseContract: Boolean
  managementFee: MoneyInput
}

type TenancyFloorplan {
  id: String!
  name: String!
  tenancyId: String!
  upload: UploadMessage
  uploadId: String!
  zones: TenancyFloorplanZones
}

input TenancyFloorplanInput {
  id: String!
  uploadId: String!
  name: String!
  tenancyId: String!
}

type TenancyFloorplanZone {
  id: String!
  name: String!
  radius: Int!
  tenancyFloorplanId: String!
  x: Int!
  y: Int!
}

type TenancyFloorplanZoneCreated {
  zone: TenancyFloorplanZone
}

type TenancyFloorplanZoneDeleted {
  id: String!
}

type TenancyFloorplanZones {
  zones: [TenancyFloorplanZone!]
}

type TenancyFloorplanZoneUpdated {
  zone: TenancyFloorplanZone
}

type TenancyGoogleDriveSet {
  _null: Boolean
}

type TenancyMoveInCategoryVisibilityToggled {
  categories: [TaskCategory!]
  tenancyId: String!
}

type TenancyMoveInDateUpdated {
  tenancy: Tenancy
}

enum TenancyOnboardingStatus {
  ONBOARDING
  MOVED_IN
  OFFER_STAGE
}

enum TenancyStatus {
  ACTIVATED
  APPROVED
  PENDING
  REJECTED
  TERMINATED
}

input TenancyStatusValueInput {
  status: TenancyStatus
}

type TenancyTask {
  category: TaskCategory
  completedAt: Timestamp
  completedTaskMessage: String!
  hidden: Boolean!
  id: String!
  name: String!
  position: Int!
  status: MilestoneStatus
  timelineStageId: String!
}

type TenancyTasks {
  tasks: [TenancyTask!]
}

input TenancyTaskStatusDataInput {
  tasks: [TaskStateInput!]
}

type TenancyTasksUpdated {
  activeTimelineStage: TimelineStage
  completedById: String!
  inactiveTimelineStages: [String!]!
  newlyCompletedTimelineStage: String!
  nextStepText: String!
  tenancyId: String!
}

type TenancyTodo {
  assigneeCompany: Company
  assigneeCompanyId: String!
  category: TaskCategory
  completedAt: Timestamp
  completedBy: String!
  createdBy: String!
  description: String!
  dueDate: Timestamp
  floorplanZoneId: String
  id: String!
  requiresApproval: Boolean!
  startedAt: Timestamp
  startedBy: String!
  status: MilestoneStatus
  tenancyId: String!
  title: String!
  uncompletedBy: String
  uploadIds: [String!]!
  uploads: [UploadMessage]
}

type TenancyTodoChangesRequested {
  id: String!
  parentMessageId: String!
  text: String!
  todo: TenancyTodo
}

type TenancyTodoCompleted {
  todo: TenancyTodo
}

type TenancyTodoCreated {
  todo: TenancyTodo
}

type TenancyTodoDeleted {
  _null: Boolean
}

type TenancyTodoEdge {
  cursor: String!
  node: TenancyTodo
}

type TenancyTodosConnection {
  edges: [TenancyTodoEdge!]
  pageInfo: PageInfo
}

type TenancyTodoStarted {
  todo: TenancyTodo
}

type TenancyTodoUncompleted {
  todo: TenancyTodo
}

type TenancyTodoUnstarted {
  todo: TenancyTodo
}

type TenancyTodoUpdated {
  todo: TenancyTodo
}

type TenancyUpdated {
  statusChange: StatusChange
  tenancy: Tenancy
}

type TenancyWelcomePackSet {
  _null: Boolean
}

enum TenantAppFeature {
  TenantAppFeatureSplashIntro
  TenantAppFeatureUnknown
  TenantAppFeatureWelcomePack
}

type TenantAppFeedbackSubmission {
  feedback: String!
  score: Int!
  user: User
}

type TenantCompany {
  accessCode: String
  accountManagerUserId: String
  clientServicesManagerUserId: String
  clientSupportSpecialistUserId: String
  companiesHouseBetaLink: String
  companySize: String
  currentWorkspaceStatusId: String
  handbookId: String
  industry: Industry
  international: Boolean
  leaseExpiry: String
  priority: TenantPriority
  servicedOfficeProvider: String
  user: User
  website: String
  whiteLabelLogoUploadId: String
  workspaceSize: String
  workspaceStatus: WorkspaceStatus
  yearFounded: String
}

input TenantCompanyInput {
  whiteLabelLogoUploadId: String
  yearFounded: String
  companySize: String
  accountManagerUserId: String
  international: Boolean
  workspaceSize: String
  handbookId: String
  currentWorkspaceStatusId: String
  industry: IndustryInput
  accessCode: String
  clientSupportSpecialistUserId: String
  workspaceStatus: WorkspaceStatusInput
  clientServicesManagerUserId: String
  companiesHouseBetaLink: String
  priority: TenantPriorityInput
  website: String
  leaseExpiry: String
  servicedOfficeProvider: String
}

type TenantPriority {
  colourHex: String
  id: String!
  priorityName: String
  rank: Int
  user: User
}

input TenantPriorityInput {
  priorityName: String
  colourHex: String
  rank: Int
  id: String!
}

type tflStation {
  busRoutes: [String]
  category: String
  distanceInMetres: Int
  id: String
  lines: [String]
  minutesToWalk: Int
  name: String
}

type tflStopTypes {
  tflStations: [tflStation]
}

type Thread {
  id: String!
  messages: [Message!]
}

type ThreadGetMessagesResponse {
  messageList: [Message!]
}

type ThreadsGetThreadResponse {
  thread: Thread
}

type TierInputs {
  fitoutTier: FitoutTier
  opsTier: OpsTier
  user: User
}

input TierInputsInput {
  opsTier: OpsTier
  fitoutTier: FitoutTier
}

type TimelineStage {
  completedAt: Timestamp
  estimatedCompletionDate: Timestamp
  id: String!
  inProgressTooltip: String!
  name: String!
  nextStepText: String!
  position: Int!
  startedAt: Timestamp
  status: MilestoneStatus
  tooltipText: String!
}

input TimelineStageCompletionDateInput {
  stageId: String!
  completionDate: DateInput
}

type TimelineStageCompletionDateUpdated {
  _null: Boolean
}

type TimelineStageCount {
  count: Int!
  stageId: String!
}

type TimelineStages {
  stages: [TimelineStage!]
}

type TimelineStateUpdated {
  estimatedCompletionDate: Date
  stageId: String!
  tenancyId: String!
}

type Timestamp {
  ISOString: String

  """
  https://golang.org/pkg/time/#Time.Format Use Format() from Go's time package
  to format dates and times easily using the reference time "Mon Jan 2 15:04:05
  -0700 MST 2006" (https://gotime.agardner.me/)
  """
  format(
    """Mon Jan 2 15:04:05 -0700 MST 2006"""
    layout: String
  ): String

  """
  Milliseconds since epoch (useful in JS) as a string value. Go graphql does not support int64
  """
  msSinceEpoch: String
  unix: Int
}

input TimestampInput {
  ISOString: String
}

type TodaysGuestsNotification {
  guests: [Guest!]
  user: User
}

type TrainLine {
  id: String!
  mode: LineMode
  name: String!
  user: User
}

type TransactionMemberCreated {
  tenancyId: String!
  userId: String!
}

type TransactionMemberDeleted {
  tenancyId: String!
  userId: String!
}

type TwilioNumberDeleted {
  accessId: String!
  user: User
}

enum Type {
  EMAIL
}

type UnarchiveLocationCommand {
  id: String!
  user: User
}

type Unit {
  accessContact: Contact
  accessInstructions: String!
  accessNoticeHours: Int!
  appUrl: String
  archived: Boolean!
  area(level: Int = 0): GetBoundaryListResponse
  availabilityStatus: OptionalUnitAvailabilityStatus
  availableFrom: Timestamp
  buildingUnit: BuildingUnit
  combinationDetails: CombinationDetails
  desks: Int!
  displayId: String!
  financialModel: UnitFinancialModel
  firstViewingActivities: [Activity]
  floor: String!
  floorNumbers: [Float!]!
  floorplan: UploadMessage @deprecated(reason: "Use floorplans")
  floorplanUploadId: String!
  floorplanUploadIds: [String!]!
  floorplans(quality: Int = 0, width: Int = 0, height: Int = 0): [UploadMessage]
  floors: [UnitFloor!]
  id: String!
  kittTemplateBrochure: GetKittTemplateForEntityGroupResponse
  landlordCoversFitout: Boolean
  location: Location!
  locationId: String!
  minAvailableFrom: Timestamp
  minimumTermMonths: Int!
  name: String!
  outOfHoursAccess: String!
  pricing(overrideMinTermMonths: Int = 0): GetPricingResponse
  primaryAccessMethod: String!
  sqFt: Int!
  surveyPhotos(quality: Int = 0, width: Int = 0, height: Int = 0): [UploadMessage]
  surveyPhotosUploadIds: [String!]!
  templateBrochure: Brochure
  templateBrochureId: String
  threeDimensionalModelUrl: String!
  timeToDeliverDays: Int!
  totalRentFreeMonths: Float!
  unitGroupDetails(overrideMinTermMonths: Int = 0, estimatePrice: Boolean = false): GetDetailsForUnitsResponse
  unitGroupId: String
}

type UnitArchived {
  unit: Unit
}

enum UnitAvailabilityStatus {
  AVAILABLE
  COMING_AVAILABLE
  LET_AGREED
  NOT_AVAILABLE
  UNDER_OFFER
  UNKNOWN
}

type UnitAvailabilityStatusOptional {
  status: UnitAvailabilityStatus
  user: User
}

input UnitAvailabilityStatusOptionalInput {
  status: UnitAvailabilityStatus
}

type UnitCombinationResult {
  selection: Selection
  unitIds: [String!]!
  user: User
}

type UnitDeleted {
  unit: Unit
}

type UnitFilters {
  excludedUnitIds: [String!]
  includeGround: Boolean
  includeUnderground: Boolean
  sqft: Int32OptionalRange
  user: User
}

input UnitFiltersInput {
  sqft: Int32OptionalRangeInput
  includeGround: Boolean
  includeUnderground: Boolean
  excludedUnitIds: [String!]
}

type UnitFinancialModel {
  advertisedPrice: Money
  brokerPayee: BrokerPayee
  businessRates: Money
  fitoutState: Unitsvc_UnitFitoutState
  greySpace: GreySpace
  netRent: Money
  occupierContract: OccupierContract
  rateableValue: Money
  ratesLink: String!
  stateOfMAndE: String!
  unitId: String!
}

enum UnitFitoutState {
  PARTIALLY_FITTED
  UNKNOWN_FITOUT
  CATEGORY_A
  FULLY_FITTED
}

type UnitFitoutStateOptional {
  state: UnitFitoutState
  user: User
}

input UnitFitoutStateOptionalInput {
  state: UnitFitoutState
}

type UnitFloor {
  floorNumber: Int!
  id: String!
  unitId: String!
}

type UnitFloorNumberRowsCreated {
  count: Int!
}

type UnitOfMeasure {
  categoryId: String!
  id: String!
  isUnary: Boolean!
  name: String!
}

input UnitPaginationInput {
  page: Int!
  perPage: Int!
}

type UnitsByLocation {
  results: [Unit!]
}

enum UnitSortBy {
  MINIMUM_TERM
  NAME
  PRICE
  SQFT
  ARCHIVED_AT
  DESKS
  FLOOR
  POSTCODE
  PRICE_PER_DESK
  AVAILABLE_FROM
  CREATED_AT
  LOCATION
}

enum Unitsvc_UnitFitoutState {
  CATEGORY_A
  FULLY_FITTED
  PARTIALLY_FITTED
  UNKNOWN_FITOUT
}

type UnitTenancies {
  activeTenancy: Tenancy
  nextAvailable: Timestamp
  tenancies: [Tenancy!]
  unitId: String!
}

enum UnitType {
  ON_MARKET_TYPE
  RENEWAL
  ACCEPTED
  MOVE_IN
  OCCUPIED
  OFFER
  OFF_MARKET_TYPE
}

input UnitTypeValueInput {
  value: UnitType
}

type UnitUnarchived {
  unit: Unit
}

type UnlockLocationForVerificationCommand {
  locationId: String!
  user: User
}

type UpdateAccessCommand {
  access: Access
  user: User
}

type UpdateAccessNameCommand {
  id: String!
  name: String!
  user: User
}

type UpdateActivityCommand {
  activity: Activity
  completed: Boolean
  user: User
}

type UpdateAgenciesForLocationCommand {
  agencyCompanyIds: [String!]!
  locationId: String!
  user: User
}

type UpdateBrochureCommand {
  entities: [BrochureEntity!]
  id: String!
  stateJson: String
  user: User
}

type UpdateBrokerSearchCommand {
  clientName: String
  desiredLocation: String
  id: String!
  kittChoicesOnly: Boolean
  name: String
  requirements: DealRequirements
  user: User
}

type UpdateBrokerSearchPolygonCommand {
  brokerSearchId: String!
  polygonArray: [Coordinate!]
  user: User
}

type UpdateChatMessage {
  newMessageId: String!
  oldMessageId: String!
  updatedMessage: CreateChatMessageCommand
  user: User
}

type UpdateCompanyCommand {
  accountManagerUserId: String
  address: String
  clientServicesManagerUserId: String
  clientSupportSpecialistUserId: String
  companyNumber: String
  contractorCompany: ContractorCompany
  id: String!
  landlordFinancials: LandlordFinancials
  logoUploadId: String
  name: String
  primaryColorHex: String
  researchNotes: String
  secondaryColorHex: String
  tenantCompany: TenantCompany
  type: OptionalCompanyType
  user: User
}

input UpdateCompanyCommandInput {
  researchNotes: String
  clientServicesManagerUserId: String
  secondaryColorHex: String
  accountManagerUserId: String
  name: String
  clientSupportSpecialistUserId: String
  companyNumber: String
  tenantCompany: TenantCompanyInput
  landlordFinancials: LandlordFinancialsInput
  contractorCompany: ContractorCompanyInput
  primaryColorHex: String
  logoUploadId: String
  address: String
  id: String!
  type: OptionalCompanyTypeInput
}

type UpdateCompanyTeamCommand {
  companyTeam: CompanyTeam
  user: User
}

type UpdateDealCommand {
  deal: Deal
  note: Note
  user: User
}

type UpdateDealSpaceMatchCommand {
  id: String!
  orderIndex: String
  salesBlurb: String
  starred: Boolean
  user: User
}

type UpdateDesk {
  amenityIds: [String!]!
  floorplanId: String!
  id: String!
  name: String!
  user: User
}

type UpdateFloorplan {
  id: String!
  name: String!
  user: User
}

type UpdateFloorplanZone {
  id: String!
  name: String!
  user: User
}

type UpdateGoogleCredentialsCommand {
  accessToken: String!
  emailAddress: String!
  refreshToken: String!
  tokenJson: String!
  user: User
}

type UpdateLocationNameCommand {
  locationId: String!
  name: String!
  user: User
}

type UpdateLocationStatusesCommand {
  id: String
  user: User
}

type UpdateNetworkConfigCommand {
  access: Access
  user: User
}

type UpdateNoteOnDealCommand {
  note: Note
  user: User
}

type UpdateOwnCompany {
  id: String!
  logoUploadId: String
  primaryColorHex: String
  secondaryColorHex: String
  user: User
}

type UpdatePriorityCommand {
  name: String!
  sla: Int!
  user: User
}

type UpdateProfileCommand {
  addresses: [ProfileAddress!]
  birthday: Date
  companyId: String
  companyTeamId: String
  emails: [String!]
  hideBirthday: Boolean
  id: String!
  img: String
  jobTitle: String
  linkedInUrl: String
  name: String
  phoneNumbers: [String!]
  profilePhotoUploadId: String
  tags: [String!]
  user: User
  userId: String
  website: String
}

type UpdateRequestCommand {
  assigneeId: String!
  categoryId: String!
  chatIds: [String!]!
  contractor: String!
  cost: String!
  details: String!
  dueDate: String!
  id: String!
  locationId: String!
  priority: String!
  status: String!
  summary: String!
  techRequest: Boolean
  unitId: String!
  user: User
  userId: String!
}

type UpdateRoom {
  amenityIds: [String!]!
  capacity: Int!
  id: String!
  locationId: String!
  name: String!
  price: String!
  shared: Boolean!
  user: User
}

type UpdateRoomAction {
  description: String!
  id: String!
  imageUploadId: String!
  locationId: String!
  name: String!
  numberOfPeople: Int!
  timezone: String!
  user: User
}

type UpdateSelectionsCommand {
  brokerSearchId: String
  selections: [Selection!]
  shortlistId: String
  user: User
}

type UpdateShortlistCommand {
  clientName: String
  description: String
  name: String
  shortlistId: String!
  user: User
}

type UpdateSourcedLocationCommand {
  accessNotes: String
  agentProfileIds: [String!]
  agentSetUp: AgentSetUpOptional
  buildingInsuranceRenewalDate: Timestamp
  displayOnWebsite: Boolean
  facilityIds: [String!]
  googleDriveFileLink: String
  id: String!
  isKittChoice: Boolean
  isRiskWarning: Boolean
  landlordCoversEntireFitout: Boolean
  landlordProfileId: String
  locationAgencies: [LocationAgency!]
  name: String
  notes: String
  primaryAccessMethod: String
  primaryAccessMethodType: AccessMethodOptional
  sellingPointIds: [String!]
  serviceChargeYearEnd: Timestamp
  surveyPhotoUploadIds: [String!]
  user: User
  utilitiesRechargedFromLandlord: Boolean
  virtualTourLinks: [String!]
}

type UpdateTemplateCommand {
  content: String!
  id: String!
  name: String!
  tags: [String!]!
  type: TemplateType
  user: User
}

type UploadAttachedToIssue {
  issue: Issue
  issueId: String!
  uploadId: String!
}

type UploadDeleted {
  id: String!
  user: User
}

type UploadMessage {
  fileExtension: String!
  id: String!
  name: String!
  src: String!
  uploadedAt: Timestamp
  user: User
}

type UploadRequest {
  data: String!
  filename: String!
  ttl: Timestamp
  user: User
}

type User {
  CompanyId: String!
  Email: String!
  GoogleAccessToken: String!
  Id: String!
  IsVerified: Boolean!
  OnboardedAt: Timestamp
  VerificationToken: String!
  canEditMatches: Boolean
  company: Company
  createdAt: Timestamp
  createdBy: String!
  hasAccessPermissions: Boolean
  hasUnreadNotifications: Boolean
  isKitt: Boolean
  isLeadTenant: Boolean
  loginRevokedAt: Timestamp
  myBrokerHuddles: [Tenancy]
  onboardLink: String
  permissions: [Permission]
  profile: Profile
  user: User
}

type UserAddedToLeadTenantsGroup {
  user: User
  userId: String!
}

type UserAssignedToDesk {
  deskId: String!
  user: User
  userId: String!
}

type UserCreated {
  email: String!
  user: User
}

type UserDeleted {
  UserId: String!
  user: User
}

type UserEmailUpdated {
  email: String!
  user: User
  userId: String!
}

type UserFailedToRegisterForBrokerPlatform {
  email: String!
  failureReason: BrokerPlatformRegistrationFailureReason
  name: String!
  user: User
}

type UserIdList {
  id: [String!]!
  user: User
}

type UserLoggedIn {
  id: String!
  token: String!
  user: User
}

type UserLoggedOut {
  cookie: String!
  user: User
}

type UserNotifiedAboutTenancy {
  tenancyId: String!
  user: User
  userId: String!
}

type UserOnboarded {
  companyId: String!
  dealId: String!
  locationId: String!
  onboardBrokerToHuddle: Boolean!
  onboardThroughApp: Boolean!
  onboardToBrokerPlatform: Boolean!
  onboardToHuddle: Boolean!
  profileId: String!
  user: User
  userId: String!
}

type UserOnboardedFromProfile {
  profileId: String!
  user: User
  userId: String!
}

type UserPasswordChanged {
  user: User
  userId: String!
}

type UserPushTokenDeleted {
  deviceId: String!
  user: User
}

type UserPushTokenSaved {
  user: User
  userId: String!
}

type UserRegisteredForBrokerPlatform {
  companyId: String!
  email: String!
  name: String!
  profileId: String!
  user: User
  userId: String!
  verificationToken: String!
}

type UserRemovedFromLeadTenantsGroup {
  user: User
  userId: String!
}

type UsersDeletedInCompanies {
  companyIds: [String!]!
  user: User
}

type UsersDeletedInCompany {
  companyId: String!
  user: User
}

type UserSignedUp {
  id: String!
  user: User
}

type UsersOnboarded {
  user: User
  userIds: [String!]!
}

type UserStartedRecovery {
  email: String!
  inAppRecovery: Boolean!
  token: String!
  user: User
}

union usersvc_RegisterUserForBrokerPlatformCommandResponseUnion = UserRegisteredForBrokerPlatform | UserFailedToRegisterForBrokerPlatform

type VerificationEmailResentForBrokerPlatform {
  email: String!
  token: String!
  user: User
  userId: String!
}

type VerifyEmailForBrokerPlatformCommand {
  token: String!
  user: User
}

type VerifyLocation {
  address: Address
  bidLevy: Boolean
  coordinates: Coordinate
  facilityIds: [String!]
  locationId: String!
  name: String!
  notes: String
  serviceCharge: Money
  serviceChargeIncludesInsurance: Boolean
  serviceChargeIncludesMechanicalAndElectrical: Boolean
  serviceChargeIncludesUtilities: Boolean
  surveyPhotoUploadIds: [String!]
  user: User
  withinCityOfLondon: Boolean
}

type VerifyLocationCommand {
  user: User
  verifyLocation: VerifyLocation
  verifyUnits: [VerifyUnit!]
}

input VerifyLocationInput {
  name: String!
  serviceCharge: MoneyInput
  serviceChargeIncludesInsurance: Boolean
  locationId: String!
  facilityIds: [String!]
  notes: String
  address: AddressInput
  serviceChargeIncludesMechanicalAndElectrical: Boolean
  coordinates: CoordinateInput
  withinCityOfLondon: Boolean
  bidLevy: Boolean
  surveyPhotoUploadIds: [String!]
  serviceChargeIncludesUtilities: Boolean
}

type VerifyLocationsMerged {
  locationFrom: Location
  locationTo: Location
  user: User
}

type VerifyPasswordResetTokenRequest {
  token: String!
  user: User
}

type VerifyPasswordResetTokenResponse {
  ok: Boolean!
  reason: String!
  user: User
}

type VerifyPhoneRequest {
  code: String!
  phoneNumber: String!
  user: User
  userId: String!
}

type VerifyPhoneResponse {
  user: User
  valid: Boolean!
}

type VerifyRegistrationRequest {
  token: String!
  user: User
}

type VerifyUnit {
  availabilityStatus: UnitAvailabilityStatusOptional
  businessRatesPsf: Money
  fitoutState: UnitFitoutState
  floor: String
  floorNumbers: [Float!]
  floorplanUploadId: String
  floorplanUploadIds: [String!]
  isAvailable: Boolean
  minAvailableFrom: Timestamp
  minTermMonths: Int
  name: String
  netRent: Money
  rateableValue: Money
  ratesLink: String
  rentFreeMonths: Int
  sqFt: Int
  surveyPhotoUploadIds: [String!]
  threeDimensionalModelUrl: String
  totalRentFreeMonths: Float
  unitId: String
  user: User
}

input VerifyUnitInput {
  unitId: String
  rentFreeMonths: Int
  name: String
  isAvailable: Boolean
  floorplanUploadId: String
  sqFt: Int
  businessRatesPsf: MoneyInput
  floor: String
  availabilityStatus: UnitAvailabilityStatusOptionalInput
  floorplanUploadIds: [String!]
  totalRentFreeMonths: Float
  floorNumbers: [Float!]
  minTermMonths: Int
  threeDimensionalModelUrl: String
  netRent: MoneyInput
  surveyPhotoUploadIds: [String!]
  rateableValue: MoneyInput
  ratesLink: String
  minAvailableFrom: TimestampInput
  fitoutState: UnitFitoutState
}

type VersionedDocument {
  current: Document
  documentType: DocumentType
  history: [Document!]
}

type Viewing {
  activityId: String!
  assignee: User
  assigneeId: String!
  brokerContactId: String!
  combinationDetails: CombinationDetails
  createdBy: String!
  dueDate: String!
  dueTime: String!
  locationId: String!
  notes: String!
  startDate: String!
  startTime: String!
  typeId: String!
  unitGroupDetails(overrideMinTermMonths: Int = 0, estimatePrice: Boolean = false): GetDetailsForUnitsResponse
  unitGroupId: String!
  unitIds: [String!]!
  units: [Unit]!
  user: User
  viewingNumber: Int!
}

type ViewingRequest {
  brokerSearchId: String
  company: String
  createdAt: Timestamp
  date: String!
  id: String
  locationId: String!
  notes: String
  shortlistId: String
  time: String!
  unitGroup: Selection
  user: User
}

type ViewingRequestCreated {
  user: User
  viewingRequest: ShortlistViewingRequest
}

input ViewingRequestInput {
  date: String!
  notes: String
  shortlistId: String
  time: String!
  locationId: String!
  brokerSearchId: String
  unitGroup: SelectionInput
  company: String
  id: String
  createdAt: TimestampInput
}

type Viewings {
  user: User
  viewings: [Viewing!]
}

type Visit {
  attachedEntity: VisitAssociatedEntity
  attachedIssue: Issue
  data: VisitMutableData
  guest: Guest
  id: String!
  orderCategories: [OrderCategory]
  subjectCompany: Company
  subjectLocation: Location
  visitor: VisitVisitor
  visitorUser: User
}

union VisitAssociatedEntity = Issue | Enquiry

union VisitAttachedEntity = Issue | Enquiry

type VisitCreated {
  dontSendNotification: Boolean
  visit: Visit
}

type VisitDeleted {
  visit: Visit
}

type VisitEdge {
  cursor: String!
  node: Visit
}

type VisitMutableData {
  arrivalEndTime: Int!
  arrivalStartTime: Int!
  attachedEntities: [AttachedEntityData!]
  attachedEntityId: String
  attachedEntityType: AttachedEntity
  description: String!
  endTimeUtc: DateTime
  guestId: String
  orderCategoryIds: [String!]
  rescheduledFromId: String
  startTimeUtc: DateTime
  subjectCompanyId: String
  subjectLocationId: String
  visitDate: Date
  visitorUserId: String
}

input VisitMutableDataInput {
  orderCategoryIds: [String!]
  visitDate: DateInput
  attachedEntities: [AttachedEntityDataInput!]
  description: String!
  attachedEntityId: String
  guestId: String
  arrivalEndTime: Int!
  visitorUserId: String
  subjectLocationId: String
  subjectCompanyId: String
  rescheduledFromId: String
  arrivalStartTime: Int!
  startTimeUtc: DateTimeInput
  endTimeUtc: DateTimeInput
  attachedEntityType: AttachedEntity
}

type VisitsConnection {
  edges: [VisitEdge!]
  pageInfo: PageInfo
}

type VisitsMigrated {
  migrationSuccessful: Boolean!
}

type VisitUpdated {
  visit: Visit
}

union VisitVisitor = User | Guest

enum WebPushCreateErrorType {
  DUPLICATE
}

type WebPushSubscriptionCreated {
  authSecret: String!
  endpoint: String!
  p256dh: String!
  user: User
  userAgentString: String!
  userId: String!
}

type WebPushSubscriptionError {
  message: String!
  type: WebPushCreateErrorType
  user: User
}

type WeekdayAttendances {
  companyWide: AttendanceValue
  dayPosition: Int!
  perTeam: [AttendanceValue!]
}

type WeekdayInsights {
  actualMeanAttendances: [WeekdayAttendances!]
  busiestDayPositions: BusynessInsights
  expectedAttendances: [WeekdayAttendances!]
  quietestDayPositions: BusynessInsights
}

type WorkplaceGoal {
  id: String
  title: String!
  user: User
}

type WorkspaceStatus {
  id: String!
  text: String!
  user: User
}

input WorkspaceStatusInput {
  id: String!
  text: String!
}

