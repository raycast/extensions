"""
Requires that exactly one field must be supplied and that field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""An account represents an organization."""
type Account {
  """Find an alert source by id or external identifier."""
  alertSource(
    """The id of the alert source."""
    id: ID

    """
    Specifies the input needed to find an alert source with external information.
    """
    externalIdentifier: AlertSourceExternalIdentifier
  ): AlertSource!

  """List all the alert sources for your account."""
  alertSources(
    """Search alert sources by name and type."""
    search: String

    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): AlertSourceConnection!

  """Find a list of services by many properties."""
  allServices(
    """The primary software development framework that the service uses."""
    framework: String

    """The primary programming language that the service is written in."""
    language: String

    """
    A product is an application that your end user interacts with. Multiple
    services can work together to power a single product.
    """
    product: String

    """The display name of the service."""
    name: String

    """The alias of the team that owns the service."""
    ownerAlias: String

    """The alias of the lifecycle stage of the service."""
    lifecycleAlias: String

    """The alias of the software tier that the service belongs to."""
    tierAlias: String

    """A specific tag that exists on the service."""
    tag: TagArgs

    """The search term for the service."""
    searchTerm: String

    """The field and direction to order the resulting services by."""
    sortBy: ServiceSortEnum

    """A list of filters to use when listing services."""
    filter: [ServiceFilterInput!]

    """The id of the filter to use when listing services."""
    filterId: ID

    """
    The logical operator to be used in conjunction with multiple filters (requires filters to be supplied).
    """
    connective: ConnectiveEnum = and

    """
    The unique identifier of a service. Used to check which services depend on the service with that ID.
    """
    serviceId: ID

    """A category that the resulting services will apply to."""
    category: CategoryFilterInput

    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): ServiceConnection!

  """The default repo path used to fetch API Docs for a service."""
  apiDocsDefaultPath: String!

  """The integrations available to install for this account."""
  availableIntegrations(
    """Filter available integrations by categories."""
    categories: [IntegrationCategoryEnum!]

    """Search available integrations by substring."""
    searchTerm: String
  ): [AvailableIntegration!]!

  """Find a campaign by id."""
  campaign(
    """The id of the campaign."""
    id: ID!
  ): Campaign

  """
  Find a list of campaigns on the account, filterable by different properties.
  """
  campaigns(
    """The field and direction to order the resulting campaigns by."""
    sortBy: CampaignSortEnum

    """A list of filters to use when querying campaigns data."""
    filter: [CampaignFilterInput!]

    """
    The logical operator to be used in conjunction with multiple filters (requires filters to be supplied).
    """
    connective: ConnectiveEnum = and

    """The IDs of campaigns to fetch."""
    campaignIds: [ID!]

    """The ID of the user who belongs to the teams that own the campaigns."""
    userId: ID

    """
    The ID of the service which should be associated to the fetched campaigns.
    """
    serviceId: ID

    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): CampaignConnection!

  """Find a category by id."""
  category(
    """The unique identifier for the category."""
    id: ID!
  ): Category

  """Find a check by id."""
  check(
    """The id of the check."""
    id: ID!
  ): Check

  """Find OpsLevel config as code definitions."""
  configFile(
    """
    The unique identifier for the resource you wish to fetch the OpsLevel config for.
    """
    id: ID!
  ): ConfigFile

  """Find an external action by ID or alias."""
  customActionsExternalAction(input: IdentifierInput!): CustomActionsExternalAction!

  """The external actions that can be triggered by custom actions."""
  customActionsExternalActions(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): CustomActionsExternalActionsConnection!

  """List all Custom Action templates for your account."""
  customActionsTemplates: [CustomActionsTemplate!]!

  """Find a Custom Action Trigger Definition by ID or alias."""
  customActionsTriggerDefinition(input: IdentifierInput!): CustomActionsTriggerDefinition

  """List all Custom Action Trigger Definitions for your account."""
  customActionsTriggerDefinitions(
    """Find Custom Action Trigger Definitions that apply to an object."""
    associatedObject: IdentifierInput

    """
    Find only Custom Action Trigger Definitions that are global in scope (apply to no object).
    """
    globalActionsOnly: Boolean

    """
    The field and direction to order the resulting Custom Action Trigger Definitions by.
    """
    sortBy: CustomActionsTriggerDefinitionSortEnum

    """Search Custom Action Trigger Definitions by name."""
    search: String

    """
    A list of filters to use while searching for Custom Action Trigger Definitions.
    """
    filter: [CustomActionsTriggerDefinitionFilterInput!]

    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): CustomActionsTriggerDefinitionConnection!

  """Find a Custom Action Trigger Event by ID."""
  customActionsTriggerEvent(
    """The ID of the trigger definition Event."""
    id: ID!
  ): CustomActionsTriggerEvent

  """List all Custom Action Trigger Events for your account."""
  customActionsTriggerEvents(
    """
    The field and direction to order the resulting Custom Action Trigger Events by.
    """
    sortBy: CustomActionsTriggerEventSortEnum

    """
    A list of filters to use while searching for Custom Action Trigger Events.
    """
    filter: [CustomActionsTriggerEventFilterInput!]

    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): CustomActionsTriggerEventConnection!

  """List of all deploys for a given service and environment."""
  deploys(
    """The id of the service you wish to fetch deploys for."""
    serviceId: IdentifierInput

    """The environments you wish to fetch deploys for."""
    environments: [String!]

    """The point in time you wish to fetch deploys that happened after."""
    start: ISO8601DateTime!

    """The point in time you wish to fetch deploys that happened before."""
    end: ISO8601DateTime!

    """List of deploy integration ids you wish to fetch deploys for."""
    providers: [ID!]

    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): DeployConnection!

  """Find a document by id."""
  document(
    """The ID of the Document."""
    id: ID!
  ): Document

  """
  Find a list of documents on the account, filterable by different properties.
  """
  documents(
    """The search term for the documents."""
    searchTerm: String!

    """The type of the documents."""
    type: DocumentTypeEnum

    """The field and direction to order the resulting documents by."""
    sortBy: DocumentSortEnum

    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): DocumentConnection!

  """List all environments for the specified services."""
  environments(
    """The list of services IDs you wish to query deploys against."""
    services: [ID!]

    """The query string to filter environments by."""
    query: String
  ): Environment!

  """Evaluate a liquid template against a jq expression and JSON payload."""
  evaluateCheckTemplate(
    """The jq expression that is evaluated to determine the check status."""
    expression: String!

    """
    The liquid template that is evaluated against the jq expression and JSON payload.
    """
    template: String!

    """The json data that is used to evaluate the template and expression."""
    data: JSON!

    """
    The jq expression that maps services to their identifiers from the JSON payload.
    """
    serviceSelector: String

    """
    translation missing: en.graphql.types.account.evaluate_check_template.uses_ctx_and_params_variables
    """
    usesCtxAndParamsVariables: Boolean

    """
    translation missing: en.graphql.types.account.evaluate_check_template.sample_query_params
    """
    sampleQueryParams: String
  ): CheckTemplatePayload!

  """Export an object as YAML."""
  exportObject(
    """The ID of the object to export."""
    id: ID!
  ): ExportConfigFilePayload!

  """Find a filter by id."""
  filter(
    """The unique identifier for the filter."""
    id: ID!
  ): Filter

  """List all filters for your account."""
  filters(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int

    """The search term for the filters."""
    searchTerm: String
  ): FilterConnection

  """Find a group by its id or alias."""
  group(
    """The id of the resource."""
    id: ID

    """The human-friendly, unique identifier for the resource."""
    alias: String
  ): Group

  """List all groups for your account."""
  groups(
    """The field and direction to order the resulting groups by."""
    sortBy: GroupSortEnum

    """Search groups by name."""
    searchTerm: String

    """A list of filters to use while searching for groups."""
    filter: [GroupFilterInput!]

    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): GroupConnection!

  """Whether or not the account has at least one deploy integration."""
  hasDeployIntegrations: Boolean!

  """Whether or not deploys exist within the account."""
  hasDeploys: Boolean!

  """Whether or not the account has at least one monitoring integration."""
  hasMonitoringIntegrations: Boolean!

  """The unique identifier for the account."""
  id: ID!

  """A list of Infrastructure Resources."""
  infrastructureResources(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): InfrastructureResourceConnection

  """Find an integration by id."""
  integration(
    """The unique identifier for the integration."""
    id: ID!
  ): Integration

  """List of all Integrations for your account."""
  integrations(
    """Search Integrations by name."""
    searchTerm: String

    """The field and direction to order the resulting integrations by."""
    sortBy: IntegrationSortEnum

    """Filter by integration `type` field."""
    type: String

    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): IntegrationConnection!

  """Find the latest check result for a given service and check."""
  latestCheckResult(
    """Specifies the input fields used to identify a service."""
    service: IdentifierInput!

    """The id of the check."""
    checkId: ID!
  ): CheckResult @deprecated(reason: "`latestCheckResult` is now deprecated. Please, use `ServiceHealthReport.latestCheckResults` instead.")

  """Find a level by id."""
  level(
    """The unique identifier for the level."""
    id: ID!
  ): Level

  """List all lifecycles for your account."""
  lifecycles: [Lifecycle!]!

  """The display name of the account."""
  name: String!

  """The notifications available for your account."""
  notifications(
    """translation missing: en.graphql.types.subscriptions.subscriber_type"""
    subscriberType: SubscriberTypeEnum

    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): NotificationConnection!

  """List all payloads for your account."""
  payloads(
    """The field and direction to order the resulting payloads by."""
    sortBy: PayloadSortEnum

    """A list of filters to use while searching for payloads."""
    filter: [PayloadFilterInput!]

    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): PayloadConnection!

  """List all repositories for your account."""
  repositories(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int

    """Filter by repository visibility."""
    visible: Boolean

    """
    Filter by repository tier. You can find valid tiers on your OpsLevel account page.
    """
    tierAlias: String

    """Term to be used as full-text search on repositories."""
    search: String

    """The field and direction that repositories must be ordered by."""
    sortBy: RepositorySortEnum

    """A list of filters to use while search for repositories."""
    filter: [RepositoryFilterInput!]
  ): RepositoryConnection!

  """Find a repository by its id."""
  repository(
    """The unique identifier for the repository."""
    id: ID

    """A human-friendly, unique identifier for the service."""
    alias: String
  ): Repository

  """Performs a search on a repository"""
  repositorySearch(
    """The repository ID to search"""
    id: ID!

    """The predicate to search for"""
    search: CheckRepositorySearchInput!
  ): RepositorySearchResult!

  """
  Find the rubric for an account. This also group rubric-related data like levels e categories.
  """
  rubric: Rubric!

  """
  Get recommended number of instances to run in an OpsLevel Runner group of pods based on queue of available jobs.
  """
  runnerScale(
    """
    ID of the Runner instance requesting the recommended scale information.
    """
    runnerId: ID!

    """
    Current number of instances running in an OpsLevel Runner group of pods.
    """
    currentReplicaCount: Int!

    """Number of jobs allocated per runner pod instance."""
    jobConcurrency: Int!
  ): RunnerScale!

  """Find a service by its id or alias."""
  service(
    """The unique identifier for the service."""
    id: ID

    """A human-friendly, unique identifier for the service."""
    alias: String
  ): Service

  """Check if detected service entries exist for an alias."""
  serviceAliasHasHistoricalEvents(
    """The alias to search for."""
    alias: String!
  ): Boolean!

  """All of the service dependency directed edges for the account"""
  serviceDependencies: [ServiceDependency!]!

  """Find a service template by its ID"""
  serviceTemplate(
    """The ID of the service template to fetch."""
    id: ID!
  ): ServiceTemplate

  """
  Represents the use of a service template with a particular set of inputs to generate a new service.
  """
  serviceTemplateRun(
    """The ID for this ServiceTemplateRun."""
    id: ID!
  ): ServiceTemplateRun

  """List all service templates for your account."""
  serviceTemplates(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): ServiceTemplateConnection!

  """Find a list of services by many properties."""
  services(
    """The primary software development framework that the service uses."""
    framework: String

    """The primary programming language that the service is written in."""
    language: String

    """
    A product is an application that your end user interacts with. Multiple
    services can work together to power a single product.
    """
    product: String

    """The display name of the service."""
    name: String

    """The alias of the team that owns the service."""
    ownerAlias: String

    """The alias of the lifecycle stage of the service."""
    lifecycleAlias: String

    """The alias of the software tier that the service belongs to."""
    tierAlias: String

    """A specific tag that exists on the service."""
    tag: TagArgs

    """The search term for the service."""
    searchTerm: String

    """The field and direction to order the resulting services by."""
    sortBy: ServiceSortEnum

    """A list of filters to use when listing services."""
    filter: [ServiceFilterInput!]

    """The id of the filter to use when listing services."""
    filterId: ID

    """
    The logical operator to be used in conjunction with multiple filters (requires filters to be supplied).
    """
    connective: ConnectiveEnum = and

    """
    The unique identifier of a service. Used to check which services depend on the service with that ID.
    """
    serviceId: ID

    """A category that the resulting services will apply to."""
    category: CategoryFilterInput

    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): ServiceConnection!

  """Find data used in service reports."""
  servicesReport(
    """A list of filters to use when querying service reports data."""
    filter: [ServiceFilterInput!]

    """The id of the filter to use when listing the service report."""
    filterId: ID

    """
    The logical operator to be used in conjunction with multiple filters (requires filters to be supplied).
    """
    connective: ConnectiveEnum = and
  ): ServicesReport!

  """Find a list of services by many properties."""
  servicesV2(
    """The search term for the service."""
    searchTerm: String

    """The field and direction to order the resulting services by."""
    sortBy: ServiceSortEnum

    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): ServiceConnection!

  """List all Slack channels for your account's Slack integration."""
  slackChannels: [String!]!

  """translation missing: en.graphql.types.account.subscriptions.self"""
  subscriptions(
    """translation missing: en.graphql.types.subscriptions.type"""
    type: SubscriberTypeEnum

    """translation missing: en.graphql.types.subscriptions.id"""
    id: ID

    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): SubscriptionConnection!

  """List all suggestion activity for your account."""
  suggestionActivities(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int

    """A list of filters to use when listing suggestion activity."""
    filter: [SuggestionActivityFilterInput!]

    """The field and direction to order the resulting suggestion activity by."""
    sortBy: SuggestionActivitySortEnum
  ): SuggestionActivityConnection!

  """List all suggestions for your account."""
  suggestions(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int

    """A list of filters to use when listing suggestions."""
    filter: [SuggestionFilterInput!]

    """The field and direction to order the resulting suggestions by."""
    sortBy: SuggestionSortEnum

    """translation missing: en.graphql.types.account.suggestions.search"""
    search: String
  ): SuggestionConnection!

  """List all tags for your account"""
  tags(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int

    """The resource that the tag applies to."""
    ownerType: TagOwnerTypeEnum!
  ): TagConnection!

  """Find a team by its id or alias."""
  team(
    """The unique identifier for the team."""
    id: ID

    """The human-friendly, unique identifier for the team."""
    alias: String
  ): Team

  """Find a list of teams by many properties."""
  teams(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int

    """The team's display name."""
    name: String

    """The email of the user who manages the team."""
    managerEmail: String

    """The search term for teams."""
    searchTerm: String

    """The field and direction to order the resulting teams by."""
    sortBy: TeamSortEnum

    """A list of team ids to filter by."""
    ids: [ID!]

    """A list of group ids to filter by."""
    groupIds: [ID!]
  ): TeamConnection!

  """List of third party integrations available for your account."""
  thirdPartyIntegrations: [ThirdPartyIntegration!]!

  """List all tiers for your account."""
  tiers: [Tier!]!

  """List all tools for a given service. Filterable by environment."""
  tools(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int

    """The service you wish to fetch tools for."""
    service: ID

    """
    The environment you wish to filter by. Note: Tools with no environment will be shown for all environments.
    """
    environment: String
  ): ToolConnection!

  """Find a user by its id."""
  user(
    """The email address or ID of the user to find."""
    input: UserIdentifierInput
  ): User

  """Find a list of users by many properties."""
  users(
    """Search a users name and email for a substring"""
    search: String

    """A list of filters to use when listing users."""
    filter: [UsersFilterInput!]

    """The field and direction to order the resulting users by."""
    sortBy: UsersSortEnum

    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): UserConnection!
}

"""
An alert source that is currently integrated and belongs to the account.
"""
type AlertSource {
  """The description of the alert source."""
  description: String

  """The external id of the alert."""
  externalId: String!

  """The id of the alert source."""
  id: ID!

  """The integration of the alert source."""
  integration: Integration

  """The metadata of the alert source."""
  metadata: String

  """The name of the alert source."""
  name: String!

  """
  AlertSourceService connections. Edges between AlertSource and Service that contain the status.
  """
  services(
    """
    The unique identifier of a service. Used to check which services depend on the service with that ID.
    """
    serviceIds: [ID!]

    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): AlertSourceServiceConnection

  """The type of the alert."""
  type: AlertSourceTypeEnum!

  """The url to the alert source."""
  url: String
}

"""The connection type for AlertSource."""
type AlertSourceConnection {
  """A list of edges."""
  edges: [AlertSourceEdge]

  """A list of nodes."""
  nodes: [AlertSource]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!
}

"""An edge in a connection."""
type AlertSourceEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: AlertSource
}

"""
Specifies the input needed to find an alert source with external information.
"""
input AlertSourceExternalIdentifier {
  """The type of the alert."""
  type: AlertSourceTypeEnum!

  """The external id of the alert."""
  externalId: String!
}

"""An alert source that is connected with a service."""
type AlertSourceService {
  """The alert source that is mapped to a service"""
  alertSource: AlertSource!

  """id of the alert_source_service mapping."""
  id: ID!

  """The service the alert source maps to."""
  service: Service!

  """The status of the alert source."""
  status: AlertSourceStatusTypeEnum!
}

"""The connection type for AlertSource."""
type AlertSourceServiceConnection {
  """A list of edges."""
  edges: [AlertSourceServiceEdge]

  """A list of nodes."""
  nodes: [AlertSource]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!
}

"""Specifies the input used for attaching an alert source to a service."""
input AlertSourceServiceCreateInput {
  """The service that the alert source will be attached to."""
  service: IdentifierInput!

  """
  Specifies the input needed to find an alert source with external information.
  """
  alertSourceId: ID

  """
  Specifies the input needed to find an alert source with external information.
  """
  alertSourceExternalIdentifier: AlertSourceExternalIdentifier
}

"""Return type for the `alertSourceServiceCreate` mutation."""
type AlertSourceServiceCreatePayload {
  """
  An alert source service representing a connection between a service and an alert source.
  """
  alertSourceService: AlertSourceService

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""
Specifies the input fields used in the `alertSourceServiceDelete` mutation.
"""
input AlertSourceServiceDeleteInput {
  """The id of the alert source service to be deleted."""
  id: ID!
}

"""Return type for the `alertSourceServiceDelete` mutation."""
type AlertSourceServiceDeletePayload {
  """The id of the deleted alert source service."""
  deletedAlertSourceServiceId: ID

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""An edge in a connection."""
type AlertSourceServiceEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The id of the edge."""
  id: ID!

  """
  Whether or not this alert source connection is managed by an external resource.
  """
  locked: Boolean!

  """The url of the external resource locking this alert source connection."""
  lockerUrl: String

  """The item at the end of the edge."""
  node: AlertSource

  """The status of the alert source for the given service."""
  status: String
}

"""Specifies the input used for attaching alert sources to a service."""
input AlertSourceServicesCreateInput {
  """The service that the alert source will be attached to."""
  service: IdentifierInput!

  """The ids of the alert sources."""
  alertSourceIds: [ID!]!
}

"""Return type for the `alertSourceServicesCreate` mutation."""
type AlertSourceServicesCreatePayload {
  """An array of alert sources that are connected with a service."""
  alertSourceServices: [AlertSourceService!]

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""Sort possibilities for alert sources."""
enum AlertSourceSortEnum {
  """Sort by `name` ascending."""
  name_ASC

  """Sort by `name` descending."""
  name_DESC

  """Sort by `type` ascending."""
  type_ASC

  """Sort by `type` descending."""
  type_DESC

  """Sort by `status` ascending."""
  status_ASC

  """Sort by `status` descending."""
  status_DESC
}

"""The monitor status level."""
enum AlertSourceStatusTypeEnum {
  """Monitor is reporting an alert."""
  alert

  """Monitor is reporting a warning."""
  warn

  """Monitor is not reporting any warnings or alerts."""
  ok

  """No data received yet. Ensure your monitors are configured correctly."""
  no_data

  """Monitor currently being updated."""
  fetching_data
}

"""The type of the alert source."""
enum AlertSourceTypeEnum {
  """A PagerDuty alert source (aka service)."""
  pagerduty

  """A Datadog alert source (aka monitor)."""
  datadog

  """An Opsgenie alert source (aka service)"""
  opsgenie
}

type AlertSourceUsageCheck implements Check {
  """
  The condition that the alert source name should satisfy to be evaluated.
  """
  alertSourceNamePredicate: Predicate

  """The type of the alert source."""
  alertSourceType: AlertSourceTypeEnum

  """Additional arguments required by some check types."""
  args: JSON

  """The campaign the check belongs to."""
  campaign: Campaign

  """The category that the check belongs to."""
  category: Category

  """The levels the check belongs to."""
  checkLevels: [CheckLevel!]

  """Description of the check type's purpose."""
  description: String!

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """If the check is enabled or not."""
  enabled: Boolean!

  """The filter that the check belongs to."""
  filter: Filter

  """Information needed to fix the check."""
  fix: JSON

  """The id of the check."""
  id: ID!

  """The integration this check uses."""
  integration: Integration @deprecated(reason: "Integration is now deprecated. Please use `integration` under the `CustomEventCheck` fragment instead.")

  """The level that the check belongs to."""
  level: Level

  """The display name of the check."""
  name: String!

  """Additional information about the check."""
  notes: String

  """The owner of the check."""
  owner: CheckOwner

  """The raw unsanitized additional information about the check."""
  rawNotes: String

  """The URL path for the check report."""
  reportHref: String!

  """Summary of stats for services associated to this check."""
  stats: Stats

  """The type of check."""
  type: CheckType!

  """The url to the check."""
  url: String!
}

"""The status of the service based on the current alerts."""
type AlertStatus {
  """The alert status index."""
  index: Int!

  """The alert status type."""
  type: AlertStatusTypeEnum!
}

"""The monitor status level."""
enum AlertStatusTypeEnum {
  """Monitor is reporting an alert."""
  alert

  """Monitor is reporting a warning."""
  warn

  """There are no warnings or alerts."""
  ok

  """Not received data yet. Ensure your monitors are configured correctly."""
  no_data
}

"""An alias is a human-friendly, unique identifier for the resource."""
type Alias {
  """Whether or not the alias can be deleted."""
  locked: Boolean!

  """The alias itself."""
  value: String!
}

"""The input for the `aliasCreate` mutation."""
input AliasCreateInput {
  """The alias you wish to create."""
  alias: String!

  """
  The ID of the resource you want to create the alias on. Services and teams are supported.
  """
  ownerId: String!

  """
  If true, attach events recorded before this alias was created (if any).
  """
  attachHistoricalEvents: Boolean
}

"""Return type for the `aliasCreate` mutation."""
type AliasCreatePayload {
  """All of the aliases attached to the resource."""
  aliases: [String!]

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The ID of the resource that had an alias attached."""
  ownerId: String
}

"""The input for the `aliasDelete` mutation."""
input AliasDeleteInput {
  """The alias you wish to delete."""
  alias: String!

  """The resource the alias you wish to delete belongs to."""
  ownerType: AliasOwnerTypeEnum!
}

"""Return type for the `aliasDelete` mutation."""
type AliasDeletePayload {
  """The deleted alias."""
  deletedAlias: String

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""The owner type an alias is assigned to."""
enum AliasOwnerTypeEnum {
  """Aliases that are assigned to services."""
  service

  """Aliases that are assigned to teams."""
  team
}

"""The connection type for Group."""
type AncestorGroupsConnection {
  """A list of edges."""
  edges: [AncestorGroupsEdge]

  """A list of nodes."""
  nodes: [Group]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!
}

"""An edge in a connection."""
type AncestorGroupsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Group
}

type ApiDocIntegration implements Integration {
  """The id of the group."""
  accountKey: String!

  """The path of the group."""
  accountName: String

  """The web url of the group."""
  accountUrl: String

  """Indicates whether or not the integration is currently active."""
  active: Boolean!

  """The publicly routable URL where the integration can be accessed."""
  baseUrl: String

  """Labels which relate this integration to similar integrations."""
  categories: [IntegrationCategory!]

  """The parameters used by the UI to display and configure integrations."""
  config: IntegrationConfig

  """The time this integration was created."""
  createdAt: ISO8601DateTime!

  """The display name of the integration."""
  displayName: String

  """The relative url to where the integration can be accessed."""
  href: String!

  """
  A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
  """
  htmlUrl: String!

  """The unique identifier for the integration."""
  id: ID!

  """
  The time that this integration was successfully installed, if null, this
  indicates the integration was not completed installed.
  """
  installedAt: ISO8601DateTime

  """
  The time this integration was invalidated, either from OpsLevel or via the external API.
  """
  invalidatedAt: ISO8601DateTime

  """The time an event payload was provided for this integration."""
  lastEventReceived: ISO8601DateTime

  """The name of the integration."""
  name: String!

  """The notification channel."""
  notificationChannel: String

  """
  Indicates whether OpsLevel will create service suggestions by analyzing the integration's repositories.
  """
  serviceDiscoveryEnabled: Boolean

  """
  Indicates if OpsLevel will manage Datadog monitor webhooks automatically. When
  set to false, you will be required to manually add the OpsLevel webhook to
  your Datadog monitor notification message.
  """
  setWebhooksOnMonitors: Boolean

  """
  The abbreviated or shorthand name for this integration, if any. Otherwise returns display name.
  """
  shortName: String

  """This integration was not installed within the installation window."""
  stale: Boolean!

  """If this integration is initializing and is not fully ready for use"""
  stillLoading: Boolean!

  """The type of the integration."""
  type: String!

  """Indicates if this integration is being uninstalled from OpsLevel."""
  uninstallInProgress: Boolean!

  """
  False when the integration has been unauthorized or removed by the remote system.
  """
  valid: Boolean!

  """The version of the integration that is installed."""
  version: String

  """The endpoint to send events via webhook (if applicable)."""
  webhookUrl: String
}

"""The source used to determine the preferred API document."""
enum ApiDocumentSourceEnum {
  """
  Use the document that was pushed to OpsLevel via an API Docs integration.
  """
  PUSH

  """Use the document that was pulled by OpsLevel via a repo."""
  PULL
}

"""Represents an Artifact (usually a blob record)."""
type Artifact {
  """The remote URL where the artifact can be downloaded."""
  url: String
}

type AvailableIntegration {
  """The categories of the integration."""
  categories: [IntegrationCategory!]

  """The displayable name for an available integration."""
  displayName: String!

  """
  The URL to visit to start the installation process for this integration.
  """
  installUrl: String!
}

type AwsIntegration implements Integration {
  """The id of the group."""
  accountKey: String!

  """The path of the group."""
  accountName: String

  """The web url of the group."""
  accountUrl: String

  """Indicates whether or not the integration is currently active."""
  active: Boolean!

  """All of the aliases attached to the resource."""
  aliases: [String!]!

  """
  Allow tags imported from AWS to override ownership set in OpsLevel directly.
  """
  awsTagsOverrideOwnership: Boolean!

  """The publicly routable URL where the integration can be accessed."""
  baseUrl: String

  """Labels which relate this integration to similar integrations."""
  categories: [IntegrationCategory!]

  """The parameters used by the UI to display and configure integrations."""
  config: IntegrationConfig

  """The time this integration was created."""
  createdAt: ISO8601DateTime!

  """The display name of the integration."""
  displayName: String

  """
  The External ID defined in the trust relationship to ensure OpsLevel is the
  only third party assuming this role (See https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html
  for more details).
  """
  externalId: String!

  """The relative url to where the integration can be accessed."""
  href: String!

  """
  A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
  """
  htmlUrl: String!

  """The IAM role OpsLevel uses in order to access the AWS account."""
  iamRole: String!

  """The unique identifier for the integration."""
  id: ID!

  """
  The time that this integration was successfully installed, if null, this
  indicates the integration was not completed installed.
  """
  installedAt: ISO8601DateTime

  """
  The time this integration was invalidated, either from OpsLevel or via the external API.
  """
  invalidatedAt: ISO8601DateTime

  """The time an event payload was provided for this integration."""
  lastEventReceived: ISO8601DateTime

  """The time the Integration last imported data from AWS."""
  lastSyncedAt: ISO8601DateTime

  """The name of the integration."""
  name: String!

  """The notification channel."""
  notificationChannel: String

  """
  An Array of tag keys used to associate ownership from an integration. Max 5
  """
  ownershipTagKeys: [String!]!

  """
  Indicates whether OpsLevel will create service suggestions by analyzing the integration's repositories.
  """
  serviceDiscoveryEnabled: Boolean

  """
  Indicates if OpsLevel will manage Datadog monitor webhooks automatically. When
  set to false, you will be required to manually add the OpsLevel webhook to
  your Datadog monitor notification message.
  """
  setWebhooksOnMonitors: Boolean

  """
  The abbreviated or shorthand name for this integration, if any. Otherwise returns display name.
  """
  shortName: String

  """This integration was not installed within the installation window."""
  stale: Boolean!

  """If this integration is initializing and is not fully ready for use"""
  stillLoading: Boolean!

  """The type of the integration."""
  type: String!

  """Indicates if this integration is being uninstalled from OpsLevel."""
  uninstallInProgress: Boolean!

  """
  False when the integration has been unauthorized or removed by the remote system.
  """
  valid: Boolean!

  """The version of the integration that is installed."""
  version: String

  """The endpoint to send events via webhook (if applicable)."""
  webhookUrl: String
}

"""
Specifies the input fields used in the `awsIntegrationCreate` mutation.
"""
input AwsIntegrationCreateInput {
  """The IAM role OpsLevel uses in order to access the AWS account."""
  iamRole: String!

  """
  The External ID defined in the trust relationship to ensure OpsLevel is the
  only third party assuming this role (See https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html
  for more details).
  """
  externalId: String!

  """
  An Array of tag keys used to associate ownership from an integration. Max 5
  """
  ownershipTagKeys: [String!]
}

"""Return type for the `awsIntegrationCreate` mutation."""
type AwsIntegrationCreatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The newly created AWS integration."""
  integration: AwsIntegration
}

"""
Specifies the input fields used in the `awsIntegrationUpdate` mutation.
"""
input AwsIntegrationUpdateInput {
  integration: IdentifierInput!

  """The IAM role OpsLevel uses in order to access the AWS account."""
  iamRole: String

  """
  The External ID defined in the trust relationship to ensure OpsLevel is the
  only third party assuming this role (See https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html
  for more details).
  """
  externalId: String

  """
  An Array of tag keys used to associate ownership from an integration. Max 5
  """
  ownershipTagKeys: [String!]

  """
  Allow tags imported from AWS to override ownership set in OpsLevel directly.
  """
  awsTagsOverrideOwnership: Boolean
}

"""Return type for the `awsIntegrationUpdate` mutation."""
type AwsIntegrationUpdatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The updated AWS integration."""
  integration: AwsIntegration
}

type AzureDevopsIntegration implements Integration {
  """The id of the group."""
  accountKey: String!

  """The path of the group."""
  accountName: String

  """The web url of the group."""
  accountUrl: String

  """Indicates whether or not the integration is currently active."""
  active: Boolean!

  """The publicly routable URL where the integration can be accessed."""
  baseUrl: String

  """The Azure DevOps integration's supported capabilities"""
  capabilities: [GitForgeCapabilitiesTypeEnum!]!

  """Labels which relate this integration to similar integrations."""
  categories: [IntegrationCategory!]

  """The parameters used by the UI to display and configure integrations."""
  config: IntegrationConfig

  """The time this integration was created."""
  createdAt: ISO8601DateTime!

  """The display name of the integration."""
  displayName: String

  """The relative url to where the integration can be accessed."""
  href: String!

  """
  A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
  """
  htmlUrl: String!

  """The unique identifier for the integration."""
  id: ID!

  """
  The time that this integration was successfully installed, if null, this
  indicates the integration was not completed installed.
  """
  installedAt: ISO8601DateTime

  """
  The time this integration was invalidated, either from OpsLevel or via the external API.
  """
  invalidatedAt: ISO8601DateTime

  """The time an event payload was provided for this integration."""
  lastEventReceived: ISO8601DateTime

  """The name of the integration."""
  name: String!

  """The notification channel."""
  notificationChannel: String

  """
  Indicates whether OpsLevel will create service suggestions by analyzing the integration's repositories.
  """
  serviceDiscoveryEnabled: Boolean

  """
  Indicates if OpsLevel will manage Datadog monitor webhooks automatically. When
  set to false, you will be required to manually add the OpsLevel webhook to
  your Datadog monitor notification message.
  """
  setWebhooksOnMonitors: Boolean

  """
  The abbreviated or shorthand name for this integration, if any. Otherwise returns display name.
  """
  shortName: String

  """This integration was not installed within the installation window."""
  stale: Boolean!

  """If this integration is initializing and is not fully ready for use"""
  stillLoading: Boolean!

  """The type of the integration."""
  type: String!

  """Indicates if this integration is being uninstalled from OpsLevel."""
  uninstallInProgress: Boolean!

  """
  False when the integration has been unauthorized or removed by the remote system.
  """
  valid: Boolean!

  """The version of the integration that is installed."""
  version: String

  """The endpoint to send events via webhook (if applicable)."""
  webhookUrl: String
}

"""Operations that can be used on filters."""
enum BasicTypeEnum {
  """Equals a specific value."""
  equals

  """Does not equal a specific value."""
  does_not_equal
}

type BitbucketIntegration implements Integration {
  """The id of the group."""
  accountKey: String!

  """The path of the group."""
  accountName: String

  """The web url of the group."""
  accountUrl: String

  """Indicates whether or not the integration is currently active."""
  active: Boolean!

  """The publicly routable URL where the integration can be accessed."""
  baseUrl: String

  """The Bitbucket integration's supported capabilities"""
  capabilities: [GitForgeCapabilitiesTypeEnum!]!

  """Labels which relate this integration to similar integrations."""
  categories: [IntegrationCategory!]

  """The parameters used by the UI to display and configure integrations."""
  config: IntegrationConfig

  """The time this integration was created."""
  createdAt: ISO8601DateTime!

  """The display name of the integration."""
  displayName: String

  """The relative url to where the integration can be accessed."""
  href: String!

  """
  A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
  """
  htmlUrl: String!

  """The unique identifier for the integration."""
  id: ID!

  """
  The time that this integration was successfully installed, if null, this
  indicates the integration was not completed installed.
  """
  installedAt: ISO8601DateTime

  """
  The time this integration was invalidated, either from OpsLevel or via the external API.
  """
  invalidatedAt: ISO8601DateTime

  """The time an event payload was provided for this integration."""
  lastEventReceived: ISO8601DateTime

  """The name of the integration."""
  name: String!

  """The notification channel."""
  notificationChannel: String

  """
  Indicates whether OpsLevel will create service suggestions by analyzing the integration's repositories.
  """
  serviceDiscoveryEnabled: Boolean

  """
  Indicates if OpsLevel will manage Datadog monitor webhooks automatically. When
  set to false, you will be required to manually add the OpsLevel webhook to
  your Datadog monitor notification message.
  """
  setWebhooksOnMonitors: Boolean

  """
  The abbreviated or shorthand name for this integration, if any. Otherwise returns display name.
  """
  shortName: String

  """This integration was not installed within the installation window."""
  stale: Boolean!

  """If this integration is initializing and is not fully ready for use"""
  stillLoading: Boolean!

  """The type of the integration."""
  type: String!

  """Indicates if this integration is being uninstalled from OpsLevel."""
  uninstallInProgress: Boolean!

  """
  False when the integration has been unauthorized or removed by the remote system.
  """
  valid: Boolean!

  """The version of the integration that is installed."""
  version: String

  """The endpoint to send events via webhook (if applicable)."""
  webhookUrl: String
}

"""
A campaign is a fixed time initiative that allows you to attach checks to and progress through towards completion.
"""
type Campaign {
  """Historical values of the campaign's completion statistics."""
  campaignStatsHistory: [CampaignStatsHistory!]

  """
  translation missing: en.graphql.types.campaign.campaign_stats_updated_at
  """
  campaignStatsUpdatedAt: ISO8601DateTime

  """
  True if this deployment of OpsLevel is capable of sending messages to service owners.
  """
  canSendReminders: Boolean!

  """A summary of check results on the campaign."""
  checkStats: Stats

  """The checks of the campaign."""
  checks(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): CheckConnection

  """The date the campaign ended."""
  endedDate: ISO8601DateTime

  """The filter that the campaign belongs to."""
  filter: Filter

  """The relative path for this. Ex. /services/shopping_cart"""
  href: String!

  """
  A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
  """
  htmlUrl: String!

  """The id of the campaign."""
  id: ID!

  """The name of the campaign."""
  name: String!

  """The team that owns the campaign."""
  owner: Team

  """The project brief of the campaign."""
  projectBrief: String

  """The raw unsanitized project brief of the campaign."""
  rawProjectBrief: String

  """The datetime the campaign report was last updated."""
  reportUpdatedAt: ISO8601DateTime

  """A summary of services that completed the campaign."""
  serviceStats: Stats

  """The services impacted by the campaign (through the campaign filter)"""
  services(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int

    """The field and direction to order the resulting services by."""
    sortBy: ServiceSortEnum

    """The search term for the service."""
    searchTerm: String
  ): ServiceConnection!

  """The date the campaign will start."""
  startDate: ISO8601DateTime

  """The status of the campaign."""
  status: CampaignStatusEnum!

  """The target date the campaign should end."""
  targetDate: ISO8601DateTime

  """The teams impacted by the campaign (through services)."""
  teams(
    """Filter teams depending if they have contact or not."""
    hasContact: Boolean

    """
    Filter teams depending if all their services has completed a campaign or not.
    """
    campaignProgress: CampaignServiceStatusEnum

    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): CampaignTeamConnection!
}

"""The connection type for CheckResult."""
type CampaignCheckResultsConnection {
  """A list of edges."""
  edges: [CampaignCheckResultsEdge]

  """A list of nodes."""
  nodes: [CheckResult]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!

  """The total number of failed checks on the service for the campaign."""
  totalFailingCount: Int
}

"""An edge in a connection."""
type CampaignCheckResultsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: CheckResult
}

"""The connection type for Campaign."""
type CampaignConnection {
  """A list of edges."""
  edges: [CampaignEdge]

  """A list of nodes."""
  nodes: [Campaign]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!
}

"""Specifies the input fields used to create a campaign."""
input CampaignCreateInput {
  """The name of the campaign."""
  name: String!

  """The ID of the team that owns this campaigns."""
  ownerId: ID!

  """The ID of the filter applied to this campaign."""
  filterId: ID

  """The project brief of the campaign."""
  projectBrief: String

  """The IDs of the existing rubric checks to be copied."""
  checkIdsToCopy: [ID!]
}

"""The return type of a `campaignCreate` mutation."""
type CampaignCreatePayload {
  """
  A campaign is a fixed time initiative that allows you to attach checks to and progress through towards completion.
  """
  campaign: Campaign

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""An edge in a connection."""
type CampaignEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Campaign
}

"""
Specifies the input fields used to end a campaign and promote checks to the rubric.
"""
input CampaignEndInput {
  """he ID of the campaign to be ended."""
  id: ID!

  """The list of campaign checks to be promoted to the rubric."""
  checksToPromote: [CheckToPromoteInput!]
}

"""The return type of a `campaignEnd` mutation."""
type CampaignEndPayload {
  """
  A campaign is a fixed time initiative that allows you to attach checks to and progress through towards completion.
  """
  campaign: Campaign

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The list of checks that were promoted to the rubric."""
  promotedChecks: [Check!]
}

"""Fields that can be used as part of filter for campaigns."""
enum CampaignFilterEnum {
  """Filter by `id` of campaign."""
  id

  """Filter by campaign owner."""
  owner

  """Filter by campaign status."""
  status
}

"""Input to be used to filter campaigns."""
input CampaignFilterInput {
  """Field to be filtered."""
  key: CampaignFilterEnum

  """Value to be filtered."""
  arg: String

  """Type of operation to be applied to value on the field."""
  type: BasicTypeEnum = equals

  """A list of campaign filter input."""
  predicates: [CampaignFilterInput!]

  """
  The logical operator to be used in conjunction with multiple filters (requires predicates to be supplied).
  """
  connective: ConnectiveEnum = or
}

"""Type/Format of the notification."""
enum CampaignReminderTypeEnum {
  """Notification will be sent via email."""
  email

  """Notification will be sent by slack."""
  slack
}

"""
Report of how a service is performing against all its associated campaigns.
"""
type CampaignReport {
  """The check results of the service grouped by campaign."""
  checkResultsByCampaign(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): CheckResultsByCampaignConnection
}

"""Specifies the input fields used to update a campaign schedule."""
input CampaignScheduleUpdateInput {
  """The id of the campaign to be updated."""
  id: ID!

  """The date the campaign will start."""
  startDate: ISO8601DateTime!

  """The target date the campaign should end."""
  targetDate: ISO8601DateTime!
}

"""The return type of a `campaignScheduleUpdate` mutation."""
type CampaignScheduleUpdatePayload {
  """
  A campaign is a fixed time initiative that allows you to attach checks to and progress through towards completion.
  """
  campaign: Campaign

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""
Specifies the input fields used to coordinate sending notifications to team members about a campaign.
"""
input CampaignSendReminderInput {
  """The ID of the campaign about which to notify team members."""
  id: ID!

  """The list of team ids to receive the notifications."""
  teamIds: [ID!]

  """A custom message to include in the notification."""
  customMessage: String

  """The list of the types of notifications to be sent."""
  reminderTypes: [CampaignReminderTypeEnum!]!
}

"""
Summarizes list of teams returned from attempt to send reminders for their failed campaigns.
"""
type CampaignSendReminderOutcomeTeams {
  """The reminder type linked to the attempt at notifying the listed teams."""
  reminderType: CampaignReminderTypeEnum!

  """List of team_ids in this group of teams."""
  teamIds: [ID!]

  """Count of number of teams listed."""
  totalCount: Int!
}

"""The return type of a `campaignSendReminder` mutation."""
type CampaignSendReminderPayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """List and count of teams being notified, grouped by reminder type."""
  teamsBeingNotified: [CampaignSendReminderOutcomeTeams!]

  """Total count of teams being notified, across all reminder types."""
  teamsBeingNotifiedCount: Int!

  """
  List and count of teams missing required contact method, grouped by reminder type.
  """
  teamsMissingContactMethod: [CampaignSendReminderOutcomeTeams!]

  """
  Total count of teams that had a missing contact method from the required reminder types.
  """
  teamsMissingContactMethodCount: Int!
}

"""
Status of whether a service is passing all checks for a campaign or not.
"""
enum CampaignServiceStatusEnum {
  """Service is passing all the checks in the campaign."""
  passing

  """Service is failing one or more checks in the campaign."""
  failing
}

"""Sort possibilities for campaigns."""
enum CampaignSortEnum {
  """Sort by `name` ascending."""
  name_ASC

  """Sort by `name` descending."""
  name_DESC

  """Sort by `owner` ascending."""
  owner_ASC

  """Sort by `owner` descending."""
  owner_DESC

  """Sort by `filter` ascending."""
  filter_ASC

  """Sort by `filter` descending."""
  filter_DESC

  """Sort by `startDate` ascending."""
  start_date_ASC

  """Sort by `startDate` descending."""
  start_date_DESC

  """Sort by `targetDate` ascending."""
  target_date_ASC

  """Sort by `targetDate` descending."""
  target_date_DESC

  """Sort by `endedDate` ascending."""
  ended_date_ASC

  """Sort by `endedDate` descending."""
  ended_date_DESC

  """Sort by `status` ascending."""
  status_ASC

  """Sort by `status` descending."""
  status_DESC

  """Sort by number of `services complete` ascending."""
  services_complete_ASC

  """Sort by number of `services complete` descending."""
  services_complete_DESC

  """Sort by number of `checks passing` ascending."""
  checks_passing_ASC

  """Sort by number of `checks passing` descending."""
  checks_passing_DESC
}

"""Historical value of campaign stats."""
type CampaignStatsHistory {
  """Proportion of services that are passing all the campaign's checks."""
  serviceStats: Stats

  """Timestamp for when the stats were valid."""
  timestamp: ISO8601DateTime!
}

"""The campaign status."""
enum CampaignStatusEnum {
  """Campaign has been created but is not yet active."""
  draft

  """Campaign has been scheduled to begin in the future."""
  scheduled

  """Campaign is in progress."""
  in_progress

  """Campaign is delayed."""
  delayed

  """Campaign ended."""
  ended
}

"""Team from the campaign context."""
type CampaignTeam {
  """The team impacted by the campaign."""
  team: Team!
}

"""The connection type for CampaignTeam."""
type CampaignTeamConnection {
  """A list of edges."""
  edges: [CampaignTeamEdge]

  """A list of nodes."""
  nodes: [CampaignTeam]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!
}

"""An edge in a connection."""
type CampaignTeamEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: CampaignTeam
}

"""Specifices the input fields used to unschedule a campaign."""
input CampaignUnscheduleInput {
  """The id of the campaign to be unscheduled."""
  id: ID!
}

"""The return type of a `campaignUnschedule` mutation."""
type CampaignUnschedulePayload {
  """
  A campaign is a fixed time initiative that allows you to attach checks to and progress through towards completion.
  """
  campaign: Campaign

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""Specifies the input fields used to update a campaign."""
input CampaignUpdateInput {
  """The id of the campaign to be updated."""
  id: ID!

  """The name of the campaign."""
  name: String

  """The ID of the team that owns this campaigns."""
  ownerId: ID

  """The ID of the filter applied to this campaign."""
  filterId: ID

  """The project brief of the campaign."""
  projectBrief: String
}

"""The return type of a `campaignUpdate` mutation."""
type CampaignUpdatePayload {
  """
  A campaign is a fixed time initiative that allows you to attach checks to and progress through towards completion.
  """
  campaign: Campaign

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""A category is used to group related checks in a rubric."""
type Category {
  """The human-friendly, unique identifier for the category."""
  alias: String!

  """The description of the category."""
  description: String

  """The unique identifier for the category."""
  id: ID!

  """The rubric levels of the category."""
  levels: [Level!]!

  """The display name of the category."""
  name: String!
}

"""The connection type for Category."""
type CategoryConnection {
  """A list of edges."""
  edges: [CategoryEdge]

  """A list of nodes."""
  nodes: [Category]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!
}

"""Specifies the input fields used to create a category."""
input CategoryCreateInput {
  """The display name of the category."""
  name: String!

  """The description of the category."""
  description: String
}

"""The return type of the `categoryCreate` mutation."""
type CategoryCreatePayload {
  """A category is used to group related checks in a rubric."""
  category: Category

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""Specifies the input fields used to delete a category."""
input CategoryDeleteInput {
  """The id of the category to be deleted."""
  id: ID!
}

"""The return type of the `categoryDelete` mutation."""
type CategoryDeletePayload {
  """The id of the deleted category."""
  deletedCategoryId: ID

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""An edge in a connection."""
type CategoryEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Category
}

"""Input to be used to filter services by a category and optional levels."""
input CategoryFilterInput {
  """The id of the category."""
  id: ID!

  """The indexes of the service levels of the category."""
  levelIndexes: [Int!]
}

"""The level of a specific category."""
type CategoryLevel {
  """A category is used to group related checks in a rubric."""
  category: Category!

  """A performance rating that is used to grade your services against."""
  level: Level
}

"""The total number of services in each level of each category."""
type CategoryLevelCount {
  """A category is used to group related checks in a rubric."""
  category: Category

  """A performance rating that is used to grade your services against."""
  level: Level!

  """The number of services."""
  serviceCount: Int!
}

"""Specifies the input fields used to update a category."""
input CategoryUpdateInput {
  """The id of the category to be updated."""
  id: ID!

  """The display name of the category."""
  name: String

  """The description of the category."""
  description: String
}

"""The return type of the `categoryUpdate` mutation."""
type CategoryUpdatePayload {
  """A category is used to group related checks in a rubric."""
  category: Category

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""Channel for a notification."""
type Channel {
  """The delivery channel."""
  channel: NotificationChannelTypeEnum!

  """translation missing: en.graphql.types.channel.external_address"""
  externalAddress: String

  """The ID for the channel."""
  id: ID!

  """translation missing: en.graphql.types.channel.target_href"""
  targetHref: String
}

"""Checks allow you to monitor how your services are built and operated."""
interface Check {
  """Additional arguments required by some check types."""
  args: JSON

  """The campaign the check belongs to."""
  campaign: Campaign

  """The category that the check belongs to."""
  category: Category

  """The levels the check belongs to."""
  checkLevels: [CheckLevel!]

  """Description of the check type's purpose."""
  description: String!

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """If the check is enabled or not."""
  enabled: Boolean!

  """The filter that the check belongs to."""
  filter: Filter

  """Information needed to fix the check."""
  fix: JSON

  """The id of the check."""
  id: ID!

  """The integration this check uses."""
  integration: Integration @deprecated(reason: "Integration is now deprecated. Please use `integration` under the `CustomEventCheck` fragment instead.")

  """The level that the check belongs to."""
  level: Level

  """The display name of the check."""
  name: String!

  """Additional information about the check."""
  notes: String

  """The owner of the check."""
  owner: CheckOwner

  """The raw unsanitized additional information about the check."""
  rawNotes: String

  """The URL path for the check report."""
  reportHref: String!

  """Summary of stats for services associated to this check."""
  stats: Stats

  """The type of check."""
  type: CheckType!

  """The url to the check."""
  url: String!
}

"""Specifies the input fields used to create an alert source usage check."""
input CheckAlertSourceUsageCreateInput {
  """The display name of the check."""
  name: String!

  """Whether the check is enabled or not."""
  enabled: Boolean = false

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """The id of the category the check belongs to."""
  categoryId: ID!

  """The id of the level the check belongs to."""
  levelId: ID!

  """The id of the team that owns the check."""
  ownerId: ID

  """The id of the filter of the check."""
  filterId: ID

  """Additional information about the check."""
  notes: String

  """The type of the alert source."""
  alertSourceType: AlertSourceTypeEnum

  """
  The condition that the alert source name should satisfy to be evaluated.
  """
  alertSourceNamePredicate: PredicateInput
}

"""Specifies the input fields used to update an alert source usage check."""
input CheckAlertSourceUsageUpdateInput {
  """The display name of the check."""
  name: String

  """The id of the category the check belongs to."""
  categoryId: ID

  """The id of the level the check belongs to."""
  levelId: ID

  """The id of the owner of the check."""
  ownerId: ID

  """The id of the filter the check belongs to."""
  filterId: ID

  """Whether the check is enabled or not."""
  enabled: Boolean

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """Additional information about the check."""
  notes: String

  """The id of the check to be updated."""
  id: ID!

  """The type of the alert source."""
  alertSourceType: AlertSourceTypeEnum

  """
  The condition that the alert source name should satisfy to be evaluated.
  """
  alertSourceNamePredicate: PredicateUpdateInput
}

"""The connection type for Check."""
type CheckConnection {
  """A list of edges."""
  edges: [CheckEdge]

  """A list of nodes."""
  nodes: [Check]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!
}

"""Specifies the input fields used to create a check."""
input CheckCreateInput {
  """The display name of the check."""
  name: String!

  """The type of check."""
  type: CheckType!

  """Additional information about the check."""
  notes: String

  """The id of the owner of the check."""
  ownerId: ID

  """The id of the filter the check belongs to."""
  filterId: ID

  """Whether the check is enabled or not."""
  enabled: Boolean!

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """The id of the category the check belongs to."""
  categoryId: ID

  """The id of the level the check belongs to."""
  levelId: ID

  """The integration id this check will use."""
  integrationId: ID

  """Additional arguments required by some check types."""
  args: JSON

  """The id of the campaign the check belongs to."""
  campaignId: ID
}

"""The return type of a `checkCreate` mutation."""
type CheckCreatePayload {
  """The newly created check."""
  check: Check

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""translation missing: en.graphql.types.check_create_template.self"""
type CheckCreateTemplate {
  """The name of the template to apply to the Check."""
  defaultName: String

  """
  True if this check should pass by default. Otherwise the default 'pending' state counts as a failure.
  """
  passPending: Boolean!

  """The formatted result message to show for the Check."""
  resultMessage: String

  """The sample payload to use for the Check."""
  samplePayload: String

  """The sample query params to use for the Check."""
  sampleQueryParams: String

  """The JQ expression to use as the service specifier."""
  serviceSpecifier: String

  """The JQ expression to use as the predicate for passing the Check."""
  successCondition: String
}

"""Specifies the input fields used to create a custom check."""
input CheckCustomCreateInput {
  """The display name of the check."""
  name: String!

  """Whether the check is enabled or not."""
  enabled: Boolean = false

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """The id of the category the check belongs to."""
  categoryId: ID!

  """The id of the level the check belongs to."""
  levelId: ID!

  """The id of the team that owns the check."""
  ownerId: ID

  """The id of the filter of the check."""
  filterId: ID

  """Additional information about the check."""
  notes: String
}

"""Creates a custom event check."""
input CheckCustomEventCreateInput {
  """The display name of the check."""
  name: String!

  """Whether the check is enabled or not."""
  enabled: Boolean = false

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """The id of the category the check belongs to."""
  categoryId: ID!

  """The id of the level the check belongs to."""
  levelId: ID!

  """The id of the team that owns the check."""
  ownerId: ID

  """The id of the filter of the check."""
  filterId: ID

  """Additional information about the check."""
  notes: String

  """
  A jq expression that will be ran against your payload. This will parse out the
  service identifier. [More info about jq](https://jqplay.org/).
  """
  serviceSelector: String!

  """
  A jq expression that will be ran against your payload. A truthy value will
  result in the check passing. [More info about jq](https://jqplay.org/).
  """
  successCondition: String!

  """
  The check result message template. It is compiled with Liquid and formatted in
  Markdown. [More info about liquid templates](https://www.opslevel.com/docs/checks/payload-checks/#liquid-templating).
  """
  resultMessage: String

  """
  True if this check should pass by default. Otherwise the default 'pending' state counts as a failure.
  """
  passPending: Boolean

  """The integration id this check will use."""
  integrationId: ID!
}

"""Specifies the input fields used to update a custom event check."""
input CheckCustomEventUpdateInput {
  """The display name of the check."""
  name: String

  """The id of the category the check belongs to."""
  categoryId: ID

  """The id of the level the check belongs to."""
  levelId: ID

  """The id of the owner of the check."""
  ownerId: ID

  """The id of the filter the check belongs to."""
  filterId: ID

  """Whether the check is enabled or not."""
  enabled: Boolean

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """Additional information about the check."""
  notes: String

  """The id of the check to be updated."""
  id: ID!

  """
  A jq expression that will be ran against your payload. This will parse out the
  service identifier. [More info about jq](https://jqplay.org/).
  """
  serviceSelector: String

  """
  A jq expression that will be ran against your payload. A truthy value will
  result in the check passing. [More info about jq](https://jqplay.org/).
  """
  successCondition: String

  """
  The check result message template. It is compiled with Liquid and formatted in
  Markdown. [More info about liquid templates](https://www.opslevel.com/docs/checks/payload-checks/#liquid-templating).
  """
  resultMessage: String

  """
  True if this check should pass by default. Otherwise the default 'pending' state counts as a failure.
  """
  passPending: Boolean

  """The integration id this check will use."""
  integrationId: ID
}

"""Specifies the input fields used to update a custom check."""
input CheckCustomUpdateInput {
  """The display name of the check."""
  name: String

  """The id of the category the check belongs to."""
  categoryId: ID

  """The id of the level the check belongs to."""
  levelId: ID

  """The id of the owner of the check."""
  ownerId: ID

  """The id of the filter the check belongs to."""
  filterId: ID

  """Whether the check is enabled or not."""
  enabled: Boolean

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """Additional information about the check."""
  notes: String

  """The id of the check to be updated."""
  id: ID!
}

"""Specifies the input fields used to delete a check."""
input CheckDeleteInput {
  """The id of the check to be deleted."""
  id: ID
}

"""The return type of a `checkDelete` mutation."""
type CheckDeletePayload {
  """The id of the deleted check."""
  deletedCheckId: ID

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""An edge in a connection."""
type CheckEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Check
}

"""Specifies the input fields used to create a branch protection check."""
input CheckGitBranchProtectionCreateInput {
  """The display name of the check."""
  name: String!

  """Whether the check is enabled or not."""
  enabled: Boolean = false

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """The id of the category the check belongs to."""
  categoryId: ID!

  """The id of the level the check belongs to."""
  levelId: ID!

  """The id of the team that owns the check."""
  ownerId: ID

  """The id of the filter of the check."""
  filterId: ID

  """Additional information about the check."""
  notes: String
}

"""Specifies the input fields used to update a branch protection check."""
input CheckGitBranchProtectionUpdateInput {
  """The display name of the check."""
  name: String

  """The id of the category the check belongs to."""
  categoryId: ID

  """The id of the level the check belongs to."""
  levelId: ID

  """The id of the owner of the check."""
  ownerId: ID

  """The id of the filter the check belongs to."""
  filterId: ID

  """Whether the check is enabled or not."""
  enabled: Boolean

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """Additional information about the check."""
  notes: String

  """The id of the check to be updated."""
  id: ID!
}

"""Specifies the input fields used to create a documentation check."""
input CheckHasDocumentationCreateInput {
  """The display name of the check."""
  name: String!

  """Whether the check is enabled or not."""
  enabled: Boolean = false

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """The id of the category the check belongs to."""
  categoryId: ID!

  """The id of the level the check belongs to."""
  levelId: ID!

  """The id of the team that owns the check."""
  ownerId: ID

  """The id of the filter of the check."""
  filterId: ID

  """Additional information about the check."""
  notes: String

  """The type of the document."""
  documentType: HasDocumentationTypeEnum!

  """The subtype of the document."""
  documentSubtype: HasDocumentationSubtypeEnum!
}

"""Specifies the input fields used to update a documentation check."""
input CheckHasDocumentationUpdateInput {
  """The display name of the check."""
  name: String

  """The id of the category the check belongs to."""
  categoryId: ID

  """The id of the level the check belongs to."""
  levelId: ID

  """The id of the owner of the check."""
  ownerId: ID

  """The id of the filter the check belongs to."""
  filterId: ID

  """Whether the check is enabled or not."""
  enabled: Boolean

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """Additional information about the check."""
  notes: String

  """The id of the check to be updated."""
  id: ID!

  """The type of the document."""
  documentType: HasDocumentationTypeEnum

  """The subtype of the document."""
  documentSubtype: HasDocumentationSubtypeEnum
}

"""Specifies the input fields used to create a recent deploys check."""
input CheckHasRecentDeployCreateInput {
  """The display name of the check."""
  name: String!

  """Whether the check is enabled or not."""
  enabled: Boolean = false

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """The id of the category the check belongs to."""
  categoryId: ID!

  """The id of the level the check belongs to."""
  levelId: ID!

  """The id of the team that owns the check."""
  ownerId: ID

  """The id of the filter of the check."""
  filterId: ID

  """Additional information about the check."""
  notes: String

  """The number of days to check since the last deploy."""
  days: Int!
}

"""Specifies the input fields used to update a has recent deploy check."""
input CheckHasRecentDeployUpdateInput {
  """The display name of the check."""
  name: String

  """The id of the category the check belongs to."""
  categoryId: ID

  """The id of the level the check belongs to."""
  levelId: ID

  """The id of the owner of the check."""
  ownerId: ID

  """The id of the filter the check belongs to."""
  filterId: ID

  """Whether the check is enabled or not."""
  enabled: Boolean

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """Additional information about the check."""
  notes: String

  """The id of the check to be updated."""
  id: ID!

  """The number of days to check since the last deploy."""
  days: Int
}

type CheckIntegration implements Integration {
  """The id of the group."""
  accountKey: String!

  """The path of the group."""
  accountName: String

  """The web url of the group."""
  accountUrl: String

  """Indicates whether or not the integration is currently active."""
  active: Boolean!

  """The publicly routable URL where the integration can be accessed."""
  baseUrl: String

  """Labels which relate this integration to similar integrations."""
  categories: [IntegrationCategory!]

  """The parameters used by the UI to display and configure integrations."""
  config: IntegrationConfig

  """The time this integration was created."""
  createdAt: ISO8601DateTime!

  """The display name of the integration."""
  displayName: String

  """The relative url to where the integration can be accessed."""
  href: String!

  """
  A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
  """
  htmlUrl: String!

  """The unique identifier for the integration."""
  id: ID!

  """
  The time that this integration was successfully installed, if null, this
  indicates the integration was not completed installed.
  """
  installedAt: ISO8601DateTime

  """
  The time this integration was invalidated, either from OpsLevel or via the external API.
  """
  invalidatedAt: ISO8601DateTime

  """The time an event payload was provided for this integration."""
  lastEventReceived: ISO8601DateTime

  """The name of the integration."""
  name: String!

  """The notification channel."""
  notificationChannel: String

  """
  Indicates whether OpsLevel will create service suggestions by analyzing the integration's repositories.
  """
  serviceDiscoveryEnabled: Boolean

  """
  Indicates if OpsLevel will manage Datadog monitor webhooks automatically. When
  set to false, you will be required to manually add the OpsLevel webhook to
  your Datadog monitor notification message.
  """
  setWebhooksOnMonitors: Boolean

  """
  The abbreviated or shorthand name for this integration, if any. Otherwise returns display name.
  """
  shortName: String

  """This integration was not installed within the installation window."""
  stale: Boolean!

  """If this integration is initializing and is not fully ready for use"""
  stillLoading: Boolean!

  """The type of the integration."""
  type: String!

  """Indicates if this integration is being uninstalled from OpsLevel."""
  uninstallInProgress: Boolean!

  """
  False when the integration has been unauthorized or removed by the remote system.
  """
  valid: Boolean!

  """The version of the integration that is installed."""
  version: String

  """The endpoint to send events via webhook (if applicable)."""
  webhookUrl: String
}

"""The relation between a level and a check."""
type CheckLevel {
  """The level of the check."""
  level: Level!
}

"""Specifies the input fields used to create a manual check."""
input CheckManualCreateInput {
  """The display name of the check."""
  name: String!

  """Whether the check is enabled or not."""
  enabled: Boolean = false

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """The id of the category the check belongs to."""
  categoryId: ID!

  """The id of the level the check belongs to."""
  levelId: ID!

  """The id of the team that owns the check."""
  ownerId: ID

  """The id of the filter of the check."""
  filterId: ID

  """Additional information about the check."""
  notes: String

  """Defines the minimum frequency of the updates."""
  updateFrequency: ManualCheckFrequencyInput

  """Whether the check requires a comment or not."""
  updateRequiresComment: Boolean!
}

"""Specifies the input fields used to update a manual check."""
input CheckManualUpdateInput {
  """The display name of the check."""
  name: String

  """The id of the category the check belongs to."""
  categoryId: ID

  """The id of the level the check belongs to."""
  levelId: ID

  """The id of the owner of the check."""
  ownerId: ID

  """The id of the filter the check belongs to."""
  filterId: ID

  """Whether the check is enabled or not."""
  enabled: Boolean

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """Additional information about the check."""
  notes: String

  """The id of the check to be updated."""
  id: ID!

  """Defines the minimum frequency of the updates."""
  updateFrequency: ManualCheckFrequencyUpdateInput

  """Whether the check requires a comment or not."""
  updateRequiresComment: Boolean
}

"""The owner a check can belong to."""
union CheckOwner = Team | User

"""Creates a payload check."""
input CheckPayloadCreateInput {
  """The display name of the check."""
  name: String!

  """Whether the check is enabled or not."""
  enabled: Boolean = false

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """The id of the category the check belongs to."""
  categoryId: ID!

  """The id of the level the check belongs to."""
  levelId: ID!

  """The id of the team that owns the check."""
  ownerId: ID

  """The id of the filter of the check."""
  filterId: ID

  """Additional information about the check."""
  notes: String

  """
  A jq expression that will be ran against your payload. A truthy value will
  result in the check passing. [More info about jq](https://jqplay.org/).
  """
  jqExpression: String!

  """
  The check result message template. It is compiled with Liquid and formatted in
  Markdown. [More info about liquid templates](https://www.opslevel.com/docs/checks/payload-checks/#liquid-templating).
  """
  resultMessage: String
}

"""Specifies the input fields used to update a payload check."""
input CheckPayloadUpdateInput {
  """The display name of the check."""
  name: String

  """The id of the category the check belongs to."""
  categoryId: ID

  """The id of the level the check belongs to."""
  levelId: ID

  """The id of the owner of the check."""
  ownerId: ID

  """The id of the filter the check belongs to."""
  filterId: ID

  """Whether the check is enabled or not."""
  enabled: Boolean

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """Additional information about the check."""
  notes: String

  """The id of the check to be updated."""
  id: ID!

  """
  A jq expression that will be ran against your payload. A truthy value will
  result in the check passing. [More info about jq](https://jqplay.org/).
  """
  jqExpression: String

  """
  The check result message template. It is compiled with Liquid and formatted in
  Markdown. [More info about liquid templates](https://www.opslevel.com/docs/checks/payload-checks/#liquid-templating).
  """
  resultMessage: String
}

"""Specifies the input fields used to create a repo file check."""
input CheckRepositoryFileCreateInput {
  """The display name of the check."""
  name: String!

  """Whether the check is enabled or not."""
  enabled: Boolean = false

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """The id of the category the check belongs to."""
  categoryId: ID!

  """The id of the level the check belongs to."""
  levelId: ID!

  """The id of the team that owns the check."""
  ownerId: ID

  """The id of the filter of the check."""
  filterId: ID

  """Additional information about the check."""
  notes: String

  """
  Whether the check looks for the existence of a directory instead of a file.
  """
  directorySearch: Boolean = false

  """Restrict the search to certain file paths."""
  filePaths: [String!]!

  """Condition to match the file content."""
  fileContentsPredicate: PredicateInput

  """
  Whether the checks looks at the absolute root of a repo or the relative root
  (the directory specified when attached a repo to a service).
  """
  useAbsoluteRoot: Boolean = false
}

"""Specifies the input fields used to update a repo file check."""
input CheckRepositoryFileUpdateInput {
  """The display name of the check."""
  name: String

  """The id of the category the check belongs to."""
  categoryId: ID

  """The id of the level the check belongs to."""
  levelId: ID

  """The id of the owner of the check."""
  ownerId: ID

  """The id of the filter the check belongs to."""
  filterId: ID

  """Whether the check is enabled or not."""
  enabled: Boolean

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """Additional information about the check."""
  notes: String

  """The id of the check to be updated."""
  id: ID!

  """
  Whether the check looks for the existence of a directory instead of a file.
  """
  directorySearch: Boolean = false

  """Restrict the search to certain file paths."""
  filePaths: [String!]

  """Condition to match the file content."""
  fileContentsPredicate: PredicateUpdateInput

  """
  Whether the checks looks at the absolute root of a repo or the relative root
  (the directory specified when attached a repo to a service).
  """
  useAbsoluteRoot: Boolean = false
}

"""Specifies the input fields used to create a repo grep check."""
input CheckRepositoryGrepCreateInput {
  """The display name of the check."""
  name: String!

  """Whether the check is enabled or not."""
  enabled: Boolean = false

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """The id of the category the check belongs to."""
  categoryId: ID!

  """The id of the level the check belongs to."""
  levelId: ID!

  """The id of the team that owns the check."""
  ownerId: ID

  """The id of the filter of the check."""
  filterId: ID

  """Additional information about the check."""
  notes: String

  """
  Whether the check looks for the existence of a directory instead of a file.
  """
  directorySearch: Boolean = false

  """Restrict the search to certain file paths."""
  filePaths: [String!]!

  """Condition to match the file content."""
  fileContentsPredicate: PredicateInput!
}

"""Specifies the input fields used to update a repo file check."""
input CheckRepositoryGrepUpdateInput {
  """The display name of the check."""
  name: String

  """The id of the category the check belongs to."""
  categoryId: ID

  """The id of the level the check belongs to."""
  levelId: ID

  """The id of the owner of the check."""
  ownerId: ID

  """The id of the filter the check belongs to."""
  filterId: ID

  """Whether the check is enabled or not."""
  enabled: Boolean

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """Additional information about the check."""
  notes: String

  """The id of the check to be updated."""
  id: ID!

  """
  Whether the check looks for the existence of a directory instead of a file.
  """
  directorySearch: Boolean = false

  """Restrict the search to certain file paths."""
  filePaths: [String!]

  """Condition to match the file content."""
  fileContentsPredicate: PredicateUpdateInput
}

"""
Specifies the input fields used to create a repository integrated check.
"""
input CheckRepositoryIntegratedCreateInput {
  """The display name of the check."""
  name: String!

  """Whether the check is enabled or not."""
  enabled: Boolean = false

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """The id of the category the check belongs to."""
  categoryId: ID!

  """The id of the level the check belongs to."""
  levelId: ID!

  """The id of the team that owns the check."""
  ownerId: ID

  """The id of the filter of the check."""
  filterId: ID

  """Additional information about the check."""
  notes: String
}

"""
Specifies the input fields used to update a repository integrated check.
"""
input CheckRepositoryIntegratedUpdateInput {
  """The display name of the check."""
  name: String

  """The id of the category the check belongs to."""
  categoryId: ID

  """The id of the level the check belongs to."""
  levelId: ID

  """The id of the owner of the check."""
  ownerId: ID

  """The id of the filter the check belongs to."""
  filterId: ID

  """Whether the check is enabled or not."""
  enabled: Boolean

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """Additional information about the check."""
  notes: String

  """The id of the check to be updated."""
  id: ID!
}

"""Specifies the input fields used to create a repo search check."""
input CheckRepositorySearchCreateInput {
  """The display name of the check."""
  name: String!

  """Whether the check is enabled or not."""
  enabled: Boolean = false

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """The id of the category the check belongs to."""
  categoryId: ID!

  """The id of the level the check belongs to."""
  levelId: ID!

  """The id of the team that owns the check."""
  ownerId: ID

  """The id of the filter of the check."""
  filterId: ID

  """Additional information about the check."""
  notes: String

  """
  Restrict the search to files of given extensions. Extensions should contain
  only letters and numbers. For example: `['py', 'rb']`.
  """
  fileExtensions: [String!]

  """Condition to match the text content."""
  fileContentsPredicate: PredicateInput!
}

"""The search to perform"""
input CheckRepositorySearchInput {
  """
  Restrict the search to files of given extensions. Extensions should contain
  only letters and numbers. For example: `['py', 'rb']`.
  """
  fileExtensions: [String!]

  """Condition to match the text content."""
  fileContentsPredicate: PredicateInput!
}

"""Specifies the input fields used to update a repo search check."""
input CheckRepositorySearchUpdateInput {
  """The display name of the check."""
  name: String

  """The id of the category the check belongs to."""
  categoryId: ID

  """The id of the level the check belongs to."""
  levelId: ID

  """The id of the owner of the check."""
  ownerId: ID

  """The id of the filter the check belongs to."""
  filterId: ID

  """Whether the check is enabled or not."""
  enabled: Boolean

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """Additional information about the check."""
  notes: String

  """The id of the check to be updated."""
  id: ID!

  """
  Restrict the search to files of given extensions. Extensions should contain
  only letters and numbers. For example: `['py', 'rb']`.
  """
  fileExtensions: [String!]

  """Condition to match the text content."""
  fileContentsPredicate: PredicateUpdateInput
}

"""The result for a given Check"""
type CheckResult {
  """The check of check result."""
  check: Check!

  """The time the action was recorded."""
  createdAt: ISO8601DateTime!

  """The escaped safe message for rendering on html."""
  htmlMessage: String

  """
  If the check result for a manual check is not an actual update but an initial failure.
  """
  isInitialManualCheckResult: Boolean!

  """The check message."""
  message: String!

  """The service of check result."""
  service: Service

  """The alias for the service."""
  serviceAlias: String

  """The check status."""
  status: CheckStatus!

  """The warnings for templated messages evaluation."""
  warnMessage: String
}

"""The check results grouped by campaign."""
type CheckResultsByCampaign {
  """The campaign these check results are linked to."""
  campaign: Campaign

  """A list of check results of this service for checks in the campaign."""
  items(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): CampaignCheckResultsConnection

  """
  Status of whether this service is passing all checks for the campaign or not.
  """
  status: CampaignServiceStatusEnum
}

"""The connection type for CheckResultsByCampaign."""
type CheckResultsByCampaignConnection {
  """A list of edges."""
  edges: [CheckResultsByCampaignEdge]

  """A list of nodes."""
  nodes: [CheckResultsByCampaign]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!
}

"""An edge in a connection."""
type CheckResultsByCampaignEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: CheckResultsByCampaign
}

"""The check results grouped by level."""
type CheckResultsByLevel {
  """A list of check results by level."""
  items(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): CheckResultsConnection

  """The check result level."""
  level: Level
}

"""The connection type for CheckResultsByLevel."""
type CheckResultsByLevelConnection {
  """A list of edges."""
  edges: [CheckResultsByLevelEdge]

  """A list of nodes."""
  nodes: [CheckResultsByLevel]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!
}

"""An edge in a connection."""
type CheckResultsByLevelEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: CheckResultsByLevel
}

"""The connection type for CheckResult."""
type CheckResultsConnection {
  """A list of edges."""
  edges: [CheckResultsEdge]

  """The total number of failed checks on the service."""
  enabledFailingCount: Int

  """The total number of not evaluated on the service."""
  enabledPendingCount: Int

  """The total number of checks on the service."""
  enabledTotalCount: Int

  """A list of nodes."""
  nodes: [CheckResult]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!

  """The total number of upcoming checks failing on the service."""
  upcomingFailingCount: Int

  """The total number of upcoming checks pending on the service."""
  upcomingPendingCount: Int

  """The total number of upcoming checks on the service."""
  upcomingTotalCount: Int
}

"""An edge in a connection."""
type CheckResultsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: CheckResult
}

"""
Specifies the input fields used to copy selected rubric checks to an existing campaign.
"""
input ChecksCopyToCampaignInput {
  """The ID of the existing campaign."""
  campaignId: ID!

  """The IDs of the existing rubric checks to be copied."""
  checkIds: [ID!]!
}

"""The return type of a `checksCopyToCampaign` mutation."""
type ChecksCopyToCampaignPayload {
  """
  A campaign is a fixed time initiative that allows you to attach checks to and progress through towards completion.
  """
  campaign: Campaign

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""Specifies the input fields used to create a configuration check."""
input CheckServiceConfigurationCreateInput {
  """The display name of the check."""
  name: String!

  """Whether the check is enabled or not."""
  enabled: Boolean = false

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """The id of the category the check belongs to."""
  categoryId: ID!

  """The id of the level the check belongs to."""
  levelId: ID!

  """The id of the team that owns the check."""
  ownerId: ID

  """The id of the filter of the check."""
  filterId: ID

  """Additional information about the check."""
  notes: String
}

"""Specifies the input fields used to update a configuration check."""
input CheckServiceConfigurationUpdateInput {
  """The display name of the check."""
  name: String

  """The id of the category the check belongs to."""
  categoryId: ID

  """The id of the level the check belongs to."""
  levelId: ID

  """The id of the owner of the check."""
  ownerId: ID

  """The id of the filter the check belongs to."""
  filterId: ID

  """Whether the check is enabled or not."""
  enabled: Boolean

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """Additional information about the check."""
  notes: String

  """The id of the check to be updated."""
  id: ID!
}

"""Specifies the input fields used to create a service dependency check."""
input CheckServiceDependencyCreateInput {
  """The display name of the check."""
  name: String!

  """Whether the check is enabled or not."""
  enabled: Boolean = false

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """The id of the category the check belongs to."""
  categoryId: ID!

  """The id of the level the check belongs to."""
  levelId: ID!

  """The id of the team that owns the check."""
  ownerId: ID

  """The id of the filter of the check."""
  filterId: ID

  """Additional information about the check."""
  notes: String
}

"""Specifies the input fields used to update a service dependency check."""
input CheckServiceDependencyUpdateInput {
  """The display name of the check."""
  name: String

  """The id of the category the check belongs to."""
  categoryId: ID

  """The id of the level the check belongs to."""
  levelId: ID

  """The id of the owner of the check."""
  ownerId: ID

  """The id of the filter the check belongs to."""
  filterId: ID

  """Whether the check is enabled or not."""
  enabled: Boolean

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """Additional information about the check."""
  notes: String

  """The id of the check to be updated."""
  id: ID!
}

"""Specifies the input fields used to create an ownership check."""
input CheckServiceOwnershipCreateInput {
  """The display name of the check."""
  name: String!

  """Whether the check is enabled or not."""
  enabled: Boolean = false

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """The id of the category the check belongs to."""
  categoryId: ID!

  """The id of the level the check belongs to."""
  levelId: ID!

  """The id of the team that owns the check."""
  ownerId: ID

  """The id of the filter of the check."""
  filterId: ID

  """Additional information about the check."""
  notes: String

  """Whether to require a contact method for a service owner or not"""
  requireContactMethod: Boolean

  """The type of contact method that an owner should provide"""
  contactMethod: String

  """The tag key that should exist for a service owner."""
  tagKey: String

  """The condition that should be satisfied by the tag value."""
  tagPredicate: PredicateInput
}

"""Specifies the input fields used to update an ownership check."""
input CheckServiceOwnershipUpdateInput {
  """The display name of the check."""
  name: String

  """The id of the category the check belongs to."""
  categoryId: ID

  """The id of the level the check belongs to."""
  levelId: ID

  """The id of the owner of the check."""
  ownerId: ID

  """The id of the filter the check belongs to."""
  filterId: ID

  """Whether the check is enabled or not."""
  enabled: Boolean

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """Additional information about the check."""
  notes: String

  """The id of the check to be updated."""
  id: ID!

  """Whether to require a contact method for a service owner or not"""
  requireContactMethod: Boolean

  """The type of contact method that an owner should provide"""
  contactMethod: String

  """The tag key that should exist for a service owner."""
  tagKey: String

  """The condition that should be satisfied by the tag value."""
  tagPredicate: PredicateUpdateInput
}

"""Specifies the input fields used to create a service property check."""
input CheckServicePropertyCreateInput {
  """The display name of the check."""
  name: String!

  """Whether the check is enabled or not."""
  enabled: Boolean = false

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """The id of the category the check belongs to."""
  categoryId: ID!

  """The id of the level the check belongs to."""
  levelId: ID!

  """The id of the team that owns the check."""
  ownerId: ID

  """The id of the filter of the check."""
  filterId: ID

  """Additional information about the check."""
  notes: String

  """The property of the service that the check will verify."""
  serviceProperty: ServicePropertyTypeEnum!

  """The condition that should be satisfied by the service property value."""
  propertyValuePredicate: PredicateInput
}

"""Specifies the input fields used to update a service property check."""
input CheckServicePropertyUpdateInput {
  """The display name of the check."""
  name: String

  """The id of the category the check belongs to."""
  categoryId: ID

  """The id of the level the check belongs to."""
  levelId: ID

  """The id of the owner of the check."""
  ownerId: ID

  """The id of the filter the check belongs to."""
  filterId: ID

  """Whether the check is enabled or not."""
  enabled: Boolean

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """Additional information about the check."""
  notes: String

  """The id of the check to be updated."""
  id: ID!

  """The property of the service that the check will verify."""
  serviceProperty: ServicePropertyTypeEnum

  """The condition that should be satisfied by the service property value."""
  propertyValuePredicate: PredicateUpdateInput
}

"""Check stats shows a summary of check results."""
type CheckStats {
  """The number of existing checks for the resource."""
  totalChecks: Int!

  """The number of checks that are passing for the resource."""
  totalPassingChecks: Int!
}

"""The evaluation status of the check."""
enum CheckStatus {
  """The check evaluated to a truthy value based on some conditions."""
  passed

  """The check evaluated to a falsy value based on some conditions."""
  failed

  """The check has not been evaluated yet.."""
  pending
}

"""Specifies the input fields used to create a tag check."""
input CheckTagDefinedCreateInput {
  """The display name of the check."""
  name: String!

  """Whether the check is enabled or not."""
  enabled: Boolean = false

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """The id of the category the check belongs to."""
  categoryId: ID!

  """The id of the level the check belongs to."""
  levelId: ID!

  """The id of the team that owns the check."""
  ownerId: ID

  """The id of the filter of the check."""
  filterId: ID

  """Additional information about the check."""
  notes: String

  """The tag key where the tag predicate should be applied."""
  tagKey: String!

  """The condition that should be satisfied by the tag value."""
  tagPredicate: PredicateInput
}

"""Specifies the input fields used to update a tag defined check."""
input CheckTagDefinedUpdateInput {
  """The display name of the check."""
  name: String

  """The id of the category the check belongs to."""
  categoryId: ID

  """The id of the level the check belongs to."""
  levelId: ID

  """The id of the owner of the check."""
  ownerId: ID

  """The id of the filter the check belongs to."""
  filterId: ID

  """Whether the check is enabled or not."""
  enabled: Boolean

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """Additional information about the check."""
  notes: String

  """The id of the check to be updated."""
  id: ID!

  """The tag key where the tag predicate should be applied."""
  tagKey: String

  """The condition that should be satisfied by the tag value."""
  tagPredicate: PredicateUpdateInput
}

"""translation missing: en.graphql.types.check_template_payload.self"""
type CheckTemplatePayload {
  """
  translation missing: en.graphql.types.check_template_payload.check_status
  """
  checkStatus: CheckStatus

  """translation missing: en.graphql.types.check_template_payload.errors"""
  errors: [Error!]

  """
  translation missing: en.graphql.types.check_template_payload.found_services
  """
  foundServices: [String!]

  """translation missing: en.graphql.types.check_template_payload.message"""
  message: String

  """
  translation missing: en.graphql.types.check_template_payload.sample_webhook
  """
  sampleWebhook: String
}

"""Specifies the input fields used to create a tool usage check."""
input CheckToolUsageCreateInput {
  """The display name of the check."""
  name: String!

  """Whether the check is enabled or not."""
  enabled: Boolean = false

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """The id of the category the check belongs to."""
  categoryId: ID!

  """The id of the level the check belongs to."""
  levelId: ID!

  """The id of the team that owns the check."""
  ownerId: ID

  """The id of the filter of the check."""
  filterId: ID

  """Additional information about the check."""
  notes: String

  """The category that the tool belongs to."""
  toolCategory: ToolCategory!

  """The condition that the tool name should satisfy to be evaluated."""
  toolNamePredicate: PredicateInput

  """The condition that the tool url should satisfy to be evaluated."""
  toolUrlPredicate: PredicateInput

  """The condition that the environment should satisfy to be evaluated."""
  environmentPredicate: PredicateInput
}

"""Specifies the input fields used to update a tool usage check."""
input CheckToolUsageUpdateInput {
  """The display name of the check."""
  name: String

  """The id of the category the check belongs to."""
  categoryId: ID

  """The id of the level the check belongs to."""
  levelId: ID

  """The id of the owner of the check."""
  ownerId: ID

  """The id of the filter the check belongs to."""
  filterId: ID

  """Whether the check is enabled or not."""
  enabled: Boolean

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """Additional information about the check."""
  notes: String

  """The id of the check to be updated."""
  id: ID!

  """The category that the tool belongs to."""
  toolCategory: ToolCategory

  """The condition that the tool name should satisfy to be evaluated."""
  toolNamePredicate: PredicateUpdateInput

  """The condition that the tool url should satisfy to be evaluated."""
  toolUrlPredicate: PredicateUpdateInput

  """The condition that the environment should satisfy to be evaluated."""
  environmentPredicate: PredicateUpdateInput
}

"""
Specifies the input fields used to promote a campaign check to the rubric.
"""
input CheckToPromoteInput {
  """The ID of the check to be promoted to the rubric."""
  checkId: ID!

  """The ID of the category that the promoted check will be linked to."""
  categoryId: ID!

  """The ID of the level that the promoted check will be linked to."""
  levelId: ID!
}

"""The type of check."""
enum CheckType {
  """Verifies that the service has an owner defined."""
  has_owner

  """
  Verified that the services has received a deploy within a specified number of days.
  """
  has_recent_deploy

  """Verifies that a service property is set or matches a specified format."""
  service_property

  """
  Verifies that the service is maintained though the use of an opslevel.yml service config.
  """
  has_service_config

  """
  Verifies that the service has visible documentation of a particular type and subtype.
  """
  has_documentation

  """Verifies that the service has a repository integrated."""
  has_repository

  """
  Verifies that the service is using a tool of a particular category or name.
  """
  tool_usage

  """Verifies that the service has the specified tag defined."""
  tag_defined

  """
  Quickly scan the service’s repository for the existence or contents of a specific file.
  """
  repo_file

  """
  Quickly search the service’s repository for specific contents in any file.
  """
  repo_search

  """
  Allows for the creation of programmatic checks that use an API to mark the status as passing or failing.
  """
  custom

  """
  Requires a payload integration api call to complete a check for the service.
  """
  payload

  """Requires a service owner to manually complete a check for the service."""
  manual

  """
  Requires a generic integration api call to complete a series of checks for multiple services.
  """
  generic

  """
  Verifies that the service has an alert source of a particular type or name.
  """
  alert_source_usage

  """
  Verifies that all the repositories on the service have branch protection enabled.
  """
  git_branch_protection

  """Verifies that the service has either a dependent or dependency."""
  service_dependency

  """
  Run a comprehensive search across the service's repository using advanced search parameters.
  """
  repo_grep
}

"""Specifies the input fields used to update a check."""
input CheckUpdateInput {
  """The id of the check to be updated."""
  id: ID!

  """The id of the owner of the check."""
  ownerId: ID

  """The display name of the check."""
  name: String

  """Additional information about the check."""
  notes: String

  """Additional arguments required by some check types."""
  args: JSON

  """The category id that the check belongs to."""
  categoryId: ID

  """The level id that the check belongs to."""
  levelId: ID

  """The id of the filter the check belongs to."""
  filterId: ID

  """If the check is enabled or not."""
  enabled: Boolean

  """translation missing: en.graphql.types.check_update_input.enable_on"""
  enableOn: ISO8601DateTime

  """The integration id this check will use."""
  integrationId: ID

  """The campaign id that the check belongs to."""
  campaignId: ID
}

"""The return type of a `checkUpdate` mutation."""
type CheckUpdatePayload {
  """Checks allow you to monitor how your services are built and operated."""
  check: Check

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""Specifies the input fields used to parse a check."""
input CheckYamlParseInput {
  """The raw yaml contents for importing a check."""
  checkYaml: String!
}

"""Return type for the check yaml parse"""
type CheckYamlParsePayload {
  """Additional arguments required by some check types."""
  args: JSON

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The display name of the check."""
  name: String

  """Additional information about the check."""
  notes: String

  """The type of check."""
  type: String
}

"""An error that occurred when syncing an opslevel.yml file."""
type ConfigError {
  """The key that caused the error (if applicable)."""
  key: String

  """A description of the error."""
  message: String

  """The file type where the error was found."""
  origin: String!

  """The type of error that occurred."""
  type: ConfigErrorClass!
}

"""The possible types of a config error."""
enum ConfigErrorClass {
  """An alias error."""
  ALIAS_ERROR

  """A tag error."""
  TAG_ERROR

  """A service repository error."""
  SERVICE_REPOSITORY_ERROR

  """A tool error."""
  TOOL_ERROR

  """A service dependency error."""
  SERVICE_DEPENDENCY_ERROR

  """An alert source error."""
  ALERT_SOURCE_ERROR

  """An invalid value error."""
  INVALID_VALUE_ERROR

  """A missing key error."""
  MISSING_KEY_ERROR

  """A syntax error."""
  SYNTAX_ERROR
}

"""translation missing: en.graphql.types.config_file.self"""
type ConfigFile {
  """The relation for which the config was returned."""
  ownerType: String!

  """The OpsLevel config in yaml format."""
  yaml: String!
}

"""
The logical operator to be used in conjunction with multiple filters (requires filters to be supplied).
"""
enum ConnectiveEnum {
  """Used to ensure **all** filters match for a given resource."""
  and

  """Used to ensure **any** filters match for a given resource."""
  or
}

"""A method of contact for a team."""
type Contact {
  """
  The contact address. Examples: support@company.com for type `email`, https://opslevel.com for type `web`.
  """
  address: String!

  """The name shown in the UI for the contact."""
  displayName: String

  """The type shown in the UI for the contact."""
  displayType: String

  """The unique identifier for the contact."""
  id: ID!

  """The team or user the contact belongs to."""
  owner: ContactOwner!

  """Indicates if this address is in use on another user for this account."""
  sharedAddress: Boolean!

  """
  The contact href. Examples: mail_to:support@company.com for type `email`,
  https://org.slack.com/channels/team for type `slack`.
  """
  targetHref: String

  """The team the contact belongs to."""
  team: Team @deprecated(reason: "Use Owner field")

  """The method of contact [email, slack, slack_handle, web]."""
  type: ContactType!
}

"""Specifies the input fields used to create a contact."""
input ContactCreateInput {
  """The method of contact [email, slack, slack_handle, web]."""
  type: ContactType!

  """The name shown in the UI for the contact."""
  displayName: String

  """
  The contact address. Examples: support@company.com for type `email`, https://opslevel.com for type `web`.
  """
  address: String!

  """The alias of the team the contact belongs to."""
  teamAlias: String

  """The id of the owner of this contact."""
  ownerId: ID

  """The type shown in the UI for the contact."""
  displayType: String
}

"""The return type of a `contactCreate` mutation."""
type ContactCreatePayload {
  """A method of contact for a team."""
  contact: Contact

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""Specifies the input fields used to delete a contact."""
input ContactDeleteInput {
  """The `id` of the contact you wish to delete."""
  id: ID!
}

"""The return type of a `contactDelete` mutation."""
type ContactDeletePayload {
  """The `id` of the deleted contact."""
  deletedContactId: ID

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""Specifies the input fields used to create a contact."""
input ContactInput {
  """The method of contact [email, slack, slack_handle, web]."""
  type: ContactType!

  """
  The contact address. Examples: support@company.com for type `email`, https://opslevel.com for type `web`.
  """
  address: String!

  """The name shown in the UI for the contact."""
  displayName: String
}

"""The owner of this contact."""
union ContactOwner = Team | User

"""The method of contact."""
enum ContactType {
  """A Slack channel contact method."""
  slack

  """A Slack handle contact method."""
  slack_handle

  """An email contact method."""
  email

  """A website contact method."""
  web

  """A GitHub handle."""
  github
}

"""Specifies the input fields used to update a contact."""
input ContactUpdateInput {
  """The unique identifier for the contact."""
  id: ID!

  """The method of contact [email, slack, slack_handle, web]."""
  type: ContactType

  """
  The contact address. Examples: support@company.com for type `email`, https://opslevel.com for type `web`.
  """
  address: String

  """The name shown in the UI for the contact."""
  displayName: String

  """The type shown in the UI for the contact."""
  displayType: String
}

"""The return type of a `contactUpdate` mutation."""
type ContactUpdatePayload {
  """A method of contact for a team."""
  contact: Contact

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""The object that an event was triggered on."""
union CustomActionsAssociatedObject = Service

"""The entity types a custom action can be associated with."""
enum CustomActionsEntityTypeEnum {
  """A custom action associated with services."""
  SERVICE

  """
  A custom action associated with the global scope (no particular entity type).
  """
  GLOBAL
}

"""An external action to be triggered by a custom action."""
interface CustomActionsExternalAction {
  """Any aliases for this external action."""
  aliases: [String!]!

  """A description of what the action should accomplish."""
  description: String

  """The ID of the external action."""
  id: ID!

  """
  The liquid template used to generate the data sent to the external action.
  """
  liquidTemplate: String

  """The name of the external action."""
  name: String!
}

"""The connection type for CustomActionsExternalAction."""
type CustomActionsExternalActionsConnection {
  """A list of edges."""
  edges: [CustomActionsExternalActionsEdge]

  """A list of nodes."""
  nodes: [CustomActionsExternalAction]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!
}

"""An edge in a connection."""
type CustomActionsExternalActionsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: CustomActionsExternalAction
}

"""An HTTP request method."""
enum CustomActionsHttpMethodEnum {
  """An HTTP GET request."""
  GET

  """An HTTP PATCH request."""
  PATCH

  """An HTTP POST request."""
  POST

  """An HTTP PUT request."""
  PUT

  """An HTTP DELETE request."""
  DELETE
}

"""Template of a custom action."""
type CustomActionsTemplate {
  """The template's action."""
  action: CustomActionsTemplatesAction!

  """The template's metadata."""
  metadata: CustomActionsTemplatesMetadata!

  """The template's trigger definition."""
  triggerDefinition: CustomActionsTemplatesTriggerDefinition!
}

"""The action of a custom action template."""
type CustomActionsTemplatesAction {
  """A description of what the action should accomplish."""
  description: String

  """The headers sent along with the webhook, if any."""
  headers: JSON

  """The HTTP Method used to call the webhook action."""
  httpMethod: CustomActionsHttpMethodEnum!

  """
  The liquid template used to generate the data sent to the external action.
  """
  liquidTemplate: String

  """The name of the external action."""
  name: String!

  """The URL of the webhook action."""
  url: String!
}

"""The metadata about the custom action template."""
type CustomActionsTemplatesMetadata {
  """The categories for the custom action template."""
  categories: [String!]!

  """The description of the custom action template."""
  description: String

  """The icon for the custom action template."""
  icon: String

  """The name of the custom action template."""
  name: String!
}

"""The definition of a potential trigger for a template custom action."""
type CustomActionsTemplatesTriggerDefinition implements CustomActionsTriggerDefinitionBase {
  """The set of users that should be able to use the trigger definition."""
  accessControl: CustomActionsTriggerDefinitionAccessControlEnum!

  """The description of what the trigger definition will do."""
  description: String

  """The YAML definition of any custom inputs for this trigger definition."""
  manualInputsDefinition: String

  """The name of the trigger definition."""
  name: String!

  """
  The published state of the action; true if the definition is ready for use; false if it is a draft.
  """
  published: Boolean!

  """
  The liquid template used to parse the response from the External Action.
  """
  responseTemplate: String
}

"""The definition of a potential trigger for a custom action."""
type CustomActionsTriggerDefinition implements CustomActionsTriggerDefinitionBase {
  """The set of users that should be able to use the trigger definition."""
  accessControl: CustomActionsTriggerDefinitionAccessControlEnum!

  """The action that would be triggered."""
  action: CustomActionsExternalAction!

  """Any aliases for this trigger definition."""
  aliases: [String!]!

  """
  If the user is authorized to invoke the action on the given associated object.
  """
  authorized(
    """The associated object for which the user might invoke the action."""
    associatedObject: IdentifierInput
  ): Boolean

  """The description of what the trigger definition will do."""
  description: String

  """The entity type associated with this trigger definition."""
  entityType: CustomActionsEntityTypeEnum!

  """The set of additional teams who can invoke this trigger definition."""
  extendedTeamAccess(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): TeamConnection!

  """
  A filter defining which services this trigger definition applies to, if present.
  """
  filter: Filter

  """The ID of the trigger definition."""
  id: ID!

  """The YAML definition of any custom inputs for this trigger definition."""
  manualInputsDefinition: String

  """The name of the trigger definition."""
  name: String!

  """The owner of the trigger definition."""
  owner: Team

  """
  The published state of the action; true if the definition is ready for use; false if it is a draft.
  """
  published: Boolean!

  """
  The liquid template used to parse the response from the External Action.
  """
  responseTemplate: String

  """Relevant timestamps."""
  timestamps: Timestamps!
}

"""Who can see and use the trigger definition"""
enum CustomActionsTriggerDefinitionAccessControlEnum {
  """All users of OpsLevel"""
  everyone

  """Admin users"""
  admins

  """The owners of a service"""
  service_owners
}

interface CustomActionsTriggerDefinitionBase {
  """The set of users that should be able to use the trigger definition."""
  accessControl: CustomActionsTriggerDefinitionAccessControlEnum!

  """The description of what the trigger definition will do."""
  description: String

  """The YAML definition of any custom inputs for this trigger definition."""
  manualInputsDefinition: String

  """The name of the trigger definition."""
  name: String!

  """
  The published state of the action; true if the definition is ready for use; false if it is a draft.
  """
  published: Boolean!

  """
  The liquid template used to parse the response from the External Action.
  """
  responseTemplate: String
}

"""The connection type for CustomActionsTriggerDefinition."""
type CustomActionsTriggerDefinitionConnection {
  """A list of edges."""
  edges: [CustomActionsTriggerDefinitionEdge]

  """The number of trigger definitions that match the query"""
  filteredCount: Int!

  """A list of nodes."""
  nodes: [CustomActionsTriggerDefinition]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The total number of trigger definitions for the account"""
  totalCount: Int!
}

"""
Specifies the input fields used in the `customActionsTriggerDefinitionCreate` mutation.
"""
input CustomActionsTriggerDefinitionCreateInput {
  """The name of the Trigger Definition."""
  name: String!

  """The description of what the Trigger Definition will do."""
  description: String

  """The owner of the Trigger Definition."""
  ownerId: ID!

  """The action that will be triggered by the Trigger Definition."""
  actionId: ID

  """
  The filter that will determine which services apply to the Trigger Definition.
  """
  filterId: ID

  """The YAML definition of custom inputs for the Trigger Definition."""
  manualInputsDefinition: String

  """
  The published state of the action; true if the definition is ready for use; false if it is a draft.
  """
  published: Boolean

  """The set of users that should be able to use the trigger definition."""
  accessControl: CustomActionsTriggerDefinitionAccessControlEnum

  """
  The liquid template used to parse the response from the External Action.
  """
  responseTemplate: String

  """The entity type to associate with the Trigger Definition."""
  entityType: CustomActionsEntityTypeEnum = SERVICE

  """The set of additional teams who can invoke this Trigger Definition."""
  extendedTeamAccess: [IdentifierInput!] = []

  """The details for a new action to create for the Trigger Definition."""
  action: CustomActionsWebhookActionCreateInput
}

"""Return type for the `customActionsTriggerDefinitionCreate` mutation."""
type CustomActionsTriggerDefinitionCreatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The definition of a potential trigger for a custom action."""
  triggerDefinition: CustomActionsTriggerDefinition
}

"""An edge in a connection."""
type CustomActionsTriggerDefinitionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: CustomActionsTriggerDefinition
}

"""Fields that can be used as part of filters for Trigger Definitions."""
enum CustomActionsTriggerDefinitionFilterEnum {
  """Filter by `owner` field"""
  owner_id

  """Filter by `published` field"""
  published

  """Filter by `access_control` field"""
  access_control
}

"""Input to be used to filter types."""
input CustomActionsTriggerDefinitionFilterInput {
  """Field to be filtered."""
  key: CustomActionsTriggerDefinitionFilterEnum!

  """Value to be filtered."""
  arg: String

  """Type of operation to be applied to value on the field."""
  type: BasicTypeEnum = equals
}

"""Sort possibilities for Trigger Definitions."""
enum CustomActionsTriggerDefinitionSortEnum {
  """Order by `name` ascending"""
  name_ASC

  """Order by `name` descending"""
  name_DESC

  """Order by `owner` ascending"""
  owner_ASC

  """Order by `owner` descending"""
  owner_DESC

  """Order by `created_at` ascending"""
  created_at_ASC

  """Order by `created_at` descending"""
  created_at_DESC

  """Order by `updated_at` ascending"""
  updated_at_ASC

  """Order by `updated_at` descending"""
  updated_at_DESC

  """Order by `published` ascending"""
  published_ASC

  """Order by `published` descending"""
  published_DESC

  """Order by `access_control` ascending"""
  access_control_ASC

  """Order by `access_control` descending"""
  access_control_DESC
}

"""
Specifies the input fields used in the `customActionsTriggerDefinitionUpdate` mutation.
"""
input CustomActionsTriggerDefinitionUpdateInput {
  """The ID of the trigger definition."""
  id: ID!

  """The name of the Trigger Definition."""
  name: String

  """The description of what the Trigger Definition will do."""
  description: String

  """The owner of the Trigger Definition."""
  ownerId: ID

  """The action that will be triggered by the Trigger Definition."""
  actionId: ID

  """
  The filter that will determine which services apply to the Trigger Definition.
  """
  filterId: ID

  """The details for the action to update for the Trigger Definition."""
  action: CustomActionsWebhookActionUpdateInput

  """The YAML definition of custom inputs for the Trigger Definition."""
  manualInputsDefinition: String

  """
  The published state of the action; true if the definition is ready for use; false if it is a draft.
  """
  published: Boolean

  """The set of users that should be able to use the trigger definition."""
  accessControl: CustomActionsTriggerDefinitionAccessControlEnum

  """
  The liquid template used to parse the response from the External Action.
  """
  responseTemplate: String

  """The entity type to associate with the Trigger Definition."""
  entityType: CustomActionsEntityTypeEnum = SERVICE

  """The set of additional teams who can invoke this Trigger Definition."""
  extendedTeamAccess: [IdentifierInput!]
}

"""Return type for the `customActionsTriggerDefinitionUpdate` mutation."""
type CustomActionsTriggerDefinitionUpdatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The definition of a potential trigger for a custom action."""
  triggerDefinition: CustomActionsTriggerDefinition
}

"""A single instance of an invocation of a trigger definition"""
type CustomActionsTriggerEvent {
  """The object that the event was triggered on."""
  associatedObject: CustomActionsAssociatedObject

  """The context values used to render the action's templates."""
  context: JSON!

  """The definition of the trigger event."""
  definition: CustomActionsTriggerDefinition

  """The ID of the trigger definition Event."""
  id: ID!

  """
  The response to the user, as generated from the template on the Trigger Definition.
  """
  renderedResponse: String

  """The request sent to the action."""
  request: String

  """The response recevied from the action."""
  response: String

  """The status of the trigger event."""
  status: CustomActionsTriggerEventStatusEnum!

  """Relevant timestamps."""
  timestamps: Timestamps!

  """The user that triggered the event."""
  user: User!
}

"""The connection type for CustomActionsTriggerEvent."""
type CustomActionsTriggerEventConnection {
  """A list of edges."""
  edges: [CustomActionsTriggerEventEdge]

  """The number of trigger events that match the query"""
  filteredCount: Int!

  """A list of nodes."""
  nodes: [CustomActionsTriggerEvent]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The total number of trigger events for the account"""
  totalCount: Int!
}

"""An edge in a connection."""
type CustomActionsTriggerEventEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: CustomActionsTriggerEvent
}

"""
Fields that can be used as part of filter for Custom Action Trigger Events.
"""
enum CustomActionsTriggerEventFilterEnum {
  """Filter Custom Action Triggers by trigger_definition_id"""
  trigger_definition_id

  """Filter Custom Action Triggers by user_id"""
  user_id

  """Filter Custom Action Triggers by status"""
  status
}

"""Input to be used to filter types."""
input CustomActionsTriggerEventFilterInput {
  """Field to be filtered."""
  key: CustomActionsTriggerEventFilterEnum!

  """Value to be filtered."""
  arg: String

  """Type of operation to be applied to value on the field."""
  type: BasicTypeEnum = equals
}

"""Sort possibilities for Custom Action Trigger Events."""
enum CustomActionsTriggerEventSortEnum {
  """Order by `action_name` ascending."""
  action_name_ASC

  """Order by `action_name` descending."""
  action_name_DESC

  """Order by `status` ascending."""
  status_ASC

  """Order by `status` descending."""
  status_DESC

  """Order by `created_at` ascending."""
  created_at_ASC

  """Order by `created_at` descending."""
  created_at_DESC

  """Order by `user_name` ascending."""
  user_name_ASC

  """Order by `user_name` descending."""
  user_name_DESC
}

"""The status of the custom action trigger event."""
enum CustomActionsTriggerEventStatusEnum {
  """A result has not been determined."""
  PENDING

  """The action completed succesfully."""
  SUCCESS

  """The action failed to complete."""
  FAILURE
}

"""
Inputs that specify the trigger definition to invoke, the user that invoked it, and what object it is invoked on.
"""
input CustomActionsTriggerInvokeInput {
  """The trigger definition to invoke."""
  triggerDefinition: IdentifierInput!

  """The ID of the object to perform the custom action on."""
  associatedObjectId: ID

  """
  Additional details provided for a specific invocation of this Custom Action.
  """
  manualInputs: JSON = "{}"
}

"""The response returned after invoking a custom action trigger."""
type CustomActionsTriggerInvokePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """A single instance of an invocation of a trigger definition"""
  triggerEvent: CustomActionsTriggerEvent
}

"""The response after validating a template."""
type CustomActionsValidateTemplatePayloadType {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The template that has been validated."""
  template: String
}

"""An external webhook action to be triggered by a custom action."""
type CustomActionsWebhookAction implements CustomActionsExternalAction {
  """Any aliases for this external action."""
  aliases: [String!]!

  """A description of what the action should accomplish."""
  description: String

  """The headers sent along with the webhook, if any."""
  headers: JSON

  """The HTTP Method used to call the webhook action."""
  httpMethod: CustomActionsHttpMethodEnum!

  """The ID of the external action."""
  id: ID!

  """
  The liquid template used to generate the data sent to the external action.
  """
  liquidTemplate: String

  """The name of the external action."""
  name: String!

  """The URL of the webhook action."""
  webhookUrl: String!
}

"""
Specifies the input fields used in the `customActionsWebhookActionCreate` mutation.
"""
input CustomActionsWebhookActionCreateInput {
  """The name that gets assigned to the Webhook Action you're creating."""
  name: String!

  """
  The description that gets assigned to the Webhook Action you're creating.
  """
  description: String

  """Template that can be used to generate a Webhook payload."""
  liquidTemplate: String

  """The URL that you wish to send the Webhook to when triggered."""
  webhookUrl: String!

  """HTTP used when the Webhook is triggered. Either POST or PUT."""
  httpMethod: CustomActionsHttpMethodEnum!

  """HTTP headers be passed along with your Webhook when triggered."""
  headers: JSON
}

"""Return type for the `customActionsWebhookActionCreate` mutation."""
type CustomActionsWebhookActionCreatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """An external webhook action to be triggered by a custom action."""
  webhookAction: CustomActionsWebhookAction
}

"""Inputs that specify the details of a Webhook Action you wish to update"""
input CustomActionsWebhookActionUpdateInput {
  """The ID of the Webhook Action you wish to update."""
  id: ID!

  """The name that gets assigned to the Webhook Action you're creating."""
  name: String

  """
  The description that gets assigned to the Webhook Action you're creating.
  """
  description: String

  """Template that can be used to generate a Webhook payload."""
  liquidTemplate: String

  """The URL that you wish to send the Webhook too when triggered."""
  webhookUrl: String

  """HTTP used when the Webhook is triggered. Either POST or PUT."""
  httpMethod: CustomActionsHttpMethodEnum

  """HTTP headers be passed along with your Webhook when triggered."""
  headers: JSON
}

"""The response returned after updating a Webhook Action"""
type CustomActionsWebhookActionUpdatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """An external webhook action to be triggered by a custom action."""
  webhookAction: CustomActionsWebhookAction
}

type CustomCheck implements Check {
  """Additional arguments required by some check types."""
  args: JSON

  """The campaign the check belongs to."""
  campaign: Campaign

  """The category that the check belongs to."""
  category: Category

  """The levels the check belongs to."""
  checkLevels: [CheckLevel!]

  """Description of the check type's purpose."""
  description: String!

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """If the check is enabled or not."""
  enabled: Boolean!

  """The filter that the check belongs to."""
  filter: Filter

  """Information needed to fix the check."""
  fix: JSON

  """The id of the check."""
  id: ID!

  """The integration this check uses."""
  integration: Integration @deprecated(reason: "Integration is now deprecated. Please use `integration` under the `CustomEventCheck` fragment instead.")

  """The level that the check belongs to."""
  level: Level

  """The display name of the check."""
  name: String!

  """Additional information about the check."""
  notes: String

  """The owner of the check."""
  owner: CheckOwner

  """The raw unsanitized additional information about the check."""
  rawNotes: String

  """The URL path for the check report."""
  reportHref: String!

  """Summary of stats for services associated to this check."""
  stats: Stats

  """The type of check."""
  type: CheckType!

  """The url to the check."""
  url: String!
}

type CustomEventCheck implements Check {
  """Additional arguments required by some check types."""
  args: JSON

  """The campaign the check belongs to."""
  campaign: Campaign

  """The category that the check belongs to."""
  category: Category

  """The levels the check belongs to."""
  checkLevels: [CheckLevel!]

  """Description of the check type's purpose."""
  description: String!

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """If the check is enabled or not."""
  enabled: Boolean!

  """The filter that the check belongs to."""
  filter: Filter

  """Information needed to fix the check."""
  fix: JSON

  """The id of the check."""
  id: ID!

  """The integration this check uses."""
  integration: Integration

  """The level that the check belongs to."""
  level: Level

  """The display name of the check."""
  name: String!

  """Additional information about the check."""
  notes: String

  """The owner of the check."""
  owner: CheckOwner

  """
  True if this check should pass by default. Otherwise the default 'pending' state counts as a failure.
  """
  passPending: Boolean!

  """The raw unsanitized additional information about the check."""
  rawNotes: String

  """The URL path for the check report."""
  reportHref: String!

  """The check result message template."""
  resultMessage: String

  """
  A jq expression that will be ran against your payload to select the service.
  """
  serviceSelector: String!

  """Summary of stats for services associated to this check."""
  stats: Stats

  """
  A jq expression that will be ran against your payload to evaluate the check
  result. A truthy value will result in the check passing.
  """
  successCondition: String!

  """The type of check."""
  type: CheckType!

  """The url to the check."""
  url: String!
}

"""
Specifies the input fields used in the `datadogCredentialsUpdate` mutation.
"""
input DatadogCredentialsUpdateInput {
  """The id of the datadog integration to update."""
  integrationId: ID!

  """The App Key for the datadog integration."""
  appKey: String!

  """The API Key for the datadog integration."""
  apiKey: String!
}

"""Return type for the `datadogCredentialsUpdate` mutation."""
type DatadogCredentialsUpdatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """Returns whether the datadog credential update was successful."""
  success: Boolean
}

type DatadogIntegration implements Integration {
  """The id of the group."""
  accountKey: String!

  """The path of the group."""
  accountName: String

  """The web url of the group."""
  accountUrl: String

  """Indicates whether or not the integration is currently active."""
  active: Boolean!

  """The publicly routable URL where the integration can be accessed."""
  baseUrl: String

  """Labels which relate this integration to similar integrations."""
  categories: [IntegrationCategory!]

  """The parameters used by the UI to display and configure integrations."""
  config: IntegrationConfig

  """The time this integration was created."""
  createdAt: ISO8601DateTime!

  """The display name of the integration."""
  displayName: String

  """The relative url to where the integration can be accessed."""
  href: String!

  """
  A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
  """
  htmlUrl: String!

  """The unique identifier for the integration."""
  id: ID!

  """
  The time that this integration was successfully installed, if null, this
  indicates the integration was not completed installed.
  """
  installedAt: ISO8601DateTime

  """
  The time this integration was invalidated, either from OpsLevel or via the external API.
  """
  invalidatedAt: ISO8601DateTime

  """The time an event payload was provided for this integration."""
  lastEventReceived: ISO8601DateTime

  """The name of the integration."""
  name: String!

  """The notification channel."""
  notificationChannel: String

  """
  Indicates whether OpsLevel will create service suggestions by analyzing the integration's repositories.
  """
  serviceDiscoveryEnabled: Boolean

  """
  Indicates if OpsLevel will manage Datadog monitor webhooks automatically. When
  set to false, you will be required to manually add the OpsLevel webhook to
  your Datadog monitor notification message.
  """
  setWebhooksOnMonitors: Boolean

  """
  The abbreviated or shorthand name for this integration, if any. Otherwise returns display name.
  """
  shortName: String

  """This integration was not installed within the installation window."""
  stale: Boolean!

  """If this integration is initializing and is not fully ready for use"""
  stillLoading: Boolean!

  """The type of the integration."""
  type: String!

  """Indicates if this integration is being uninstalled from OpsLevel."""
  uninstallInProgress: Boolean!

  """
  False when the integration has been unauthorized or removed by the remote system.
  """
  valid: Boolean!

  """The version of the integration that is installed."""
  version: String

  """The endpoint to send events via webhook (if applicable)."""
  webhookUrl: String
}

"""Specifies the input fields used to delete an entity."""
input DeleteInput {
  """The id of the entity to be deleted."""
  id: ID!
}

"""The return type of the delete mutation."""
type DeletePayload {
  """The id of the deleted entity."""
  deletedId: ID

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""An event sent via webhook to track deploys."""
type Deploy {
  """The associated OpsLevel user for the deploy."""
  associatedUser: User

  """The author of the deploy."""
  author: String

  """The email of the commit."""
  commitAuthorEmail: String

  """The author of the commit."""
  commitAuthorName: String

  """The time the commit was authored."""
  commitAuthoringDate: ISO8601DateTime

  """The branch the commit took place on."""
  commitBranch: String

  """The commit message associated with the deploy."""
  commitMessage: String

  """The sha associated with the commit of the deploy."""
  commitSha: String

  """The time the commit happened."""
  committedAt: ISO8601DateTime

  """The email of the person who created the commit."""
  committerEmail: String

  """The name of the person who created the commit."""
  committerName: String

  """An identifier to keep track of the version of the deploy."""
  deployNumber: String

  """The url the where the deployment can be found."""
  deployUrl: String

  """The time the deployment happened."""
  deployedAt: ISO8601DateTime

  """The email of who is responsible for the deployment."""
  deployerEmail: String

  """An external id of who deployed."""
  deployerId: String

  """The name of who is responsible for the deployment."""
  deployerName: String

  """The given description of the deploy."""
  description: String!

  """The environment in which the deployment happened in."""
  environment: String

  """The id of the deploy."""
  id: ID!

  """The integration name of the deploy."""
  providerName: String

  """The integration type used the deploy."""
  providerType: String

  """The url to the deploy integration."""
  providerUrl: String

  """The service object the deploy is attached to."""
  service: Service

  """The alias for the service."""
  serviceAlias: String!

  """The id the deploy is associated to."""
  serviceId: String

  """The deployment status."""
  status: String
}

"""The connection type for Deploy."""
type DeployConnection {
  """A list of edges."""
  edges: [DeployEdge]

  """the total number of deploys that match the query criteria."""
  filteredCount: Int!

  """Whether or not deploys exist for the given service."""
  hasDeploys: Boolean!

  """A list of nodes."""
  nodes: [Deploy]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The total number of deploys for an account."""
  totalCount: Int!
}

"""An edge in a connection."""
type DeployEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Deploy
}

type DeployIntegration implements Integration {
  """The id of the group."""
  accountKey: String!

  """The path of the group."""
  accountName: String

  """The web url of the group."""
  accountUrl: String

  """Indicates whether or not the integration is currently active."""
  active: Boolean!

  """The publicly routable URL where the integration can be accessed."""
  baseUrl: String

  """Labels which relate this integration to similar integrations."""
  categories: [IntegrationCategory!]

  """The parameters used by the UI to display and configure integrations."""
  config: IntegrationConfig

  """The time this integration was created."""
  createdAt: ISO8601DateTime!

  """The display name of the integration."""
  displayName: String

  """The relative url to where the integration can be accessed."""
  href: String!

  """
  A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
  """
  htmlUrl: String!

  """The unique identifier for the integration."""
  id: ID!

  """
  The time that this integration was successfully installed, if null, this
  indicates the integration was not completed installed.
  """
  installedAt: ISO8601DateTime

  """
  The time this integration was invalidated, either from OpsLevel or via the external API.
  """
  invalidatedAt: ISO8601DateTime

  """The time an event payload was provided for this integration."""
  lastEventReceived: ISO8601DateTime

  """The name of the integration."""
  name: String!

  """The notification channel."""
  notificationChannel: String

  """
  Indicates whether OpsLevel will create service suggestions by analyzing the integration's repositories.
  """
  serviceDiscoveryEnabled: Boolean

  """
  Indicates if OpsLevel will manage Datadog monitor webhooks automatically. When
  set to false, you will be required to manually add the OpsLevel webhook to
  your Datadog monitor notification message.
  """
  setWebhooksOnMonitors: Boolean

  """
  The abbreviated or shorthand name for this integration, if any. Otherwise returns display name.
  """
  shortName: String

  """This integration was not installed within the installation window."""
  stale: Boolean!

  """If this integration is initializing and is not fully ready for use"""
  stillLoading: Boolean!

  """The type of the integration."""
  type: String!

  """Indicates if this integration is being uninstalled from OpsLevel."""
  uninstallInProgress: Boolean!

  """
  False when the integration has been unauthorized or removed by the remote system.
  """
  valid: Boolean!

  """The version of the integration that is installed."""
  version: String

  """The endpoint to send events via webhook (if applicable)."""
  webhookUrl: String
}

"""A document that is attached to resource(s) in OpsLevel."""
type Document {
  """The list of resources that are attached to this document"""
  attachedResources(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int

    """Filter documents based on visibility."""
    hidden: Boolean
  ): ResourceDocumentConnection

  """The contents of the document."""
  content: String

  """The file extension of the document, e.g. 'json'."""
  fileExtension: String

  """The URL of the document, if any."""
  htmlUrl: String

  """The ID of the Document."""
  id: ID!

  """Metadata about the document."""
  metadata: JSON

  """
  The path to the file in the repository (only available when the source is a Repository or ServiceRepository).
  """
  pathInRepository: String

  """The source of the document."""
  source: DocumentSource!

  """When the document was created and updated."""
  timestamps: Timestamps!

  """The title of the document."""
  title: String!

  """The type of the document."""
  type: DocumentTypeEnum!
}

"""The connection type for Document."""
type DocumentConnection {
  """The number of Api type documents on the account."""
  apiDocCount: Int

  """A list of edges."""
  edges: [DocumentEdge]

  """
  The number of documents on the account that match the provided search critera.
  """
  filteredCount: Int

  """A list of nodes."""
  nodes: [Document]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of Tech type documents on the account."""
  techDocCount: Int

  """The total number of documents on the account."""
  totalCount: Int
}

"""An edge in a connection."""
type DocumentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """
  A hash of the fields and their associated highlights from a document query.
  """
  highlights: JSON

  """The item at the end of the edge."""
  node: Document
}

"""Sort possibilities for documents."""
enum DocumentSortEnum {
  """Order by `created_at` ascending"""
  created_at_ASC

  """Order by `created_at` descending"""
  created_at_DESC
}

"""The source of a document."""
union DocumentSource = ApiDocIntegration | Repository | ServiceRepository

"""The type of the document."""
enum DocumentTypeEnum {
  """An API document"""
  api

  """A tech document"""
  tech
}

"""Return type for the `domainChildAssign` mutation."""
type DomainChildAssignPayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""Return type for the `domainChildRemove` mutation."""
type DomainChildRemovePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""Specifies the input fields used in the `domainCreate` mutation."""
input DomainCreateInput {
  """The name for the domain."""
  name: String!

  """The description for the domain."""
  description: String

  """The id of the owner for the domain."""
  ownerId: ID

  """Additional information about the domain."""
  note: String
}

"""Return type for the `domainCreate` mutation."""
type DomainCreatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""Specifies the input fields used in the `domainUpdate` mutation."""
input DomainUpdateInput {
  """The name for the domain."""
  name: String

  """The description for the domain."""
  description: String

  """The id of the owner for the domain."""
  ownerId: ID

  """Additional information about the domain."""
  note: String
}

"""Return type for the `domainUpdate` mutation."""
type DomainUpdatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""The group or Team owning a System or Domain."""
union EntityOwner = Group | Team

"""A set of processes by which to group your services by."""
type Environment {
  """A list of all environments."""
  options: [String!]
}

"""The input error of a mutation."""
type Error {
  """The error message."""
  message: String!

  """The path to the input field with an error."""
  path: [String!]!

  """The title of the error."""
  title: String
}

"""The result of exporting an object as YAML."""
type ExportConfigFilePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The GraphQL type that represents the exported object"""
  kind: String

  """The YAML representation of the object."""
  yaml: String
}

"""
A bug/story/task from an external system (ie: Jira) associated with a service+check in OpsLevel.
"""
type ExternalIssue {
  """The alias to reference this external issue."""
  alias: String!

  """The check associated with the external issue."""
  check: Check!

  """
  The text that should be placed into the description of an external issue.
  """
  descriptionBlock: String!

  """The id of an issue from an external system (ie: a Jira issue ID)."""
  externalId: String

  """
  A link to the issue in the external system (ie: https://myorg.atlassian.net/browse/ABC-46)
  """
  externalUrl: String

  """The id of the external issue."""
  id: ID!

  """The integration associated with the external issue."""
  integration: Integration!

  """The service associated with the external issue."""
  service: Service!
}

"""Specifies the input fields used to create an external issue."""
input ExternalIssueCreateInput {
  """The ID of the integration associated with this campaign."""
  integrationId: ID!

  """The ID of the service associated with this campaign."""
  serviceId: ID!

  """The ID of the check associated with this campaign."""
  checkId: ID!
}

"""The return type of an `externalIsseCreate` mutation."""
type ExternalIssueCreatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The external issue returned by the create mutation"""
  externalIssue: ExternalIssue
}

"""Specifies the input used for modifying a resource's external UUID."""
input ExternalUuidMutationInput {
  """The id of the resource."""
  resourceId: ID!
}

"""Return type for the external UUID mutations."""
type ExternalUuidMutationPayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The updated external UUID of the resource."""
  externalUuid: String
}

"""
A filter is used to select which services will have checks applied. It can also be used to filter services in reports.
"""
type Filter {
  """The logical operator to be used in conjunction with predicates."""
  connective: ConnectiveEnum

  """The relative path for this. Ex. /services/shopping_cart"""
  href: String!

  """
  A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
  """
  htmlUrl: String!

  """The unique identifier for the filter."""
  id: ID!

  """The display name of the filter."""
  name: String!

  """The path to the filter."""
  path: String!

  """The predicates used to select services."""
  predicates: [FilterPredicate!]!
}

"""The connection type for Filter."""
type FilterConnection {
  """A list of edges."""
  edges: [FilterEdge]

  """A list of nodes."""
  nodes: [Filter]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!
}

"""Specifies the input fields used to create a filter."""
input FilterCreateInput {
  """The display name of the filter."""
  name: String!

  """
  The list of predicates used to select which services apply to the filter.
  """
  predicates: [FilterPredicateInput!]

  """The logical operator to be used in conjunction with predicates."""
  connective: ConnectiveEnum
}

"""The return type of a `filterCreatePayload` mutation."""
type FilterCreatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The newly created filter."""
  filter: Filter
}

"""An edge in a connection."""
type FilterEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Filter
}

"""A condition used to select services."""
type FilterPredicate {
  """The key of the condition."""
  key: PredicateKeyEnum!

  """Additional data used in the condition."""
  keyData: String

  """Type of operation to be used in the condition."""
  type: PredicateTypeEnum!

  """The value of the condition."""
  value: String
}

"""A condition that should be satisfied."""
input FilterPredicateInput {
  """The condition type used by the predicate."""
  type: PredicateTypeEnum!

  """The condition value used by the predicate."""
  value: String

  """The condition key used by the predicate."""
  key: PredicateKeyEnum!

  """
  Additional data used by the predicate. This field is used by predicates with
  key = 'tags' to specify the tag key. For example, to create a predicate for
  services containing the tag 'db:mysql', set keyData = 'db' and value = 'mysql'.
  """
  keyData: String
}

"""Specifies the input fields used to update a filter."""
input FilterUpdateInput {
  """The id of the filter."""
  id: ID!

  """The display name of the filter."""
  name: String

  """
  The list of predicates used to select which services apply to the filter. All
  existing predicates will be replaced by these predicates.
  """
  predicates: [FilterPredicateInput!]

  """The logical operator to be used in conjunction with predicates."""
  connective: ConnectiveEnum
}

"""The return type of a `filterUpdatePayload` mutation."""
type FilterUpdatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The updated filter."""
  filter: Filter
}

type FluxIntegration implements Integration {
  """The id of the group."""
  accountKey: String!

  """The path of the group."""
  accountName: String

  """The web url of the group."""
  accountUrl: String

  """Indicates whether or not the integration is currently active."""
  active: Boolean!

  """The publicly routable URL where the integration can be accessed."""
  baseUrl: String

  """Labels which relate this integration to similar integrations."""
  categories: [IntegrationCategory!]

  """The parameters used by the UI to display and configure integrations."""
  config: IntegrationConfig

  """The time this integration was created."""
  createdAt: ISO8601DateTime!

  """The display name of the integration."""
  displayName: String

  """The relative url to where the integration can be accessed."""
  href: String!

  """
  A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
  """
  htmlUrl: String!

  """The unique identifier for the integration."""
  id: ID!

  """
  The time that this integration was successfully installed, if null, this
  indicates the integration was not completed installed.
  """
  installedAt: ISO8601DateTime

  """
  The time this integration was invalidated, either from OpsLevel or via the external API.
  """
  invalidatedAt: ISO8601DateTime

  """The time an event payload was provided for this integration."""
  lastEventReceived: ISO8601DateTime

  """The name of the integration."""
  name: String!

  """The notification channel."""
  notificationChannel: String

  """
  Indicates whether OpsLevel will create service suggestions by analyzing the integration's repositories.
  """
  serviceDiscoveryEnabled: Boolean

  """
  Indicates if OpsLevel will manage Datadog monitor webhooks automatically. When
  set to false, you will be required to manually add the OpsLevel webhook to
  your Datadog monitor notification message.
  """
  setWebhooksOnMonitors: Boolean

  """
  The abbreviated or shorthand name for this integration, if any. Otherwise returns display name.
  """
  shortName: String

  """This integration was not installed within the installation window."""
  stale: Boolean!

  """If this integration is initializing and is not fully ready for use"""
  stillLoading: Boolean!

  """The type of the integration."""
  type: String!

  """Indicates if this integration is being uninstalled from OpsLevel."""
  uninstallInProgress: Boolean!

  """
  False when the integration has been unauthorized or removed by the remote system.
  """
  valid: Boolean!

  """The version of the integration that is installed."""
  version: String

  """The endpoint to send events via webhook (if applicable)."""
  webhookUrl: String
}

"""The time scale type for the frequency."""
enum FrequencyTimeScale {
  """Consider the time scale of days."""
  day

  """Consider the time scale of weeks."""
  week

  """Consider the time scale of months."""
  month

  """Consider the time scale of years."""
  year
}

type GenericIntegration implements Integration {
  """The id of the group."""
  accountKey: String!

  """The path of the group."""
  accountName: String

  """The web url of the group."""
  accountUrl: String

  """Indicates whether or not the integration is currently active."""
  active: Boolean!

  """The publicly routable URL where the integration can be accessed."""
  baseUrl: String

  """Labels which relate this integration to similar integrations."""
  categories: [IntegrationCategory!]

  """The parameters used by the UI to display and configure integrations."""
  config: IntegrationConfig

  """The time this integration was created."""
  createdAt: ISO8601DateTime!

  """The display name of the integration."""
  displayName: String

  """The relative url to where the integration can be accessed."""
  href: String!

  """
  A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
  """
  htmlUrl: String!

  """The unique identifier for the integration."""
  id: ID!

  """
  The time that this integration was successfully installed, if null, this
  indicates the integration was not completed installed.
  """
  installedAt: ISO8601DateTime

  """
  The time this integration was invalidated, either from OpsLevel or via the external API.
  """
  invalidatedAt: ISO8601DateTime

  """The time an event payload was provided for this integration."""
  lastEventReceived: ISO8601DateTime

  """The name of the integration."""
  name: String!

  """The notification channel."""
  notificationChannel: String

  """
  Indicates whether OpsLevel will create service suggestions by analyzing the integration's repositories.
  """
  serviceDiscoveryEnabled: Boolean

  """
  Indicates if OpsLevel will manage Datadog monitor webhooks automatically. When
  set to false, you will be required to manually add the OpsLevel webhook to
  your Datadog monitor notification message.
  """
  setWebhooksOnMonitors: Boolean

  """
  The abbreviated or shorthand name for this integration, if any. Otherwise returns display name.
  """
  shortName: String

  """This integration was not installed within the installation window."""
  stale: Boolean!

  """If this integration is initializing and is not fully ready for use"""
  stillLoading: Boolean!

  """The type of the integration."""
  type: String!

  """Indicates if this integration is being uninstalled from OpsLevel."""
  uninstallInProgress: Boolean!

  """
  False when the integration has been unauthorized or removed by the remote system.
  """
  valid: Boolean!

  """The version of the integration that is installed."""
  version: String

  """The endpoint to send events via webhook (if applicable)."""
  webhookUrl: String
}

type GitBranchProtectionCheck implements Check {
  """Additional arguments required by some check types."""
  args: JSON

  """The campaign the check belongs to."""
  campaign: Campaign

  """The category that the check belongs to."""
  category: Category

  """The levels the check belongs to."""
  checkLevels: [CheckLevel!]

  """Description of the check type's purpose."""
  description: String!

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """If the check is enabled or not."""
  enabled: Boolean!

  """The filter that the check belongs to."""
  filter: Filter

  """Information needed to fix the check."""
  fix: JSON

  """The id of the check."""
  id: ID!

  """The integration this check uses."""
  integration: Integration @deprecated(reason: "Integration is now deprecated. Please use `integration` under the `CustomEventCheck` fragment instead.")

  """The level that the check belongs to."""
  level: Level

  """The display name of the check."""
  name: String!

  """Additional information about the check."""
  notes: String

  """The owner of the check."""
  owner: CheckOwner

  """The raw unsanitized additional information about the check."""
  rawNotes: String

  """The URL path for the check report."""
  reportHref: String!

  """Summary of stats for services associated to this check."""
  stats: Stats

  """The type of check."""
  type: CheckType!

  """The url to the check."""
  url: String!
}

"""Available actions supported by the git forge integration."""
enum GitForgeCapabilitiesTypeEnum {
  """Integration supports cloning repositories."""
  clone_repo

  """Integration supports creating new merge requests."""
  create_merge_request

  """Integration supports creating new repositories."""
  create_repo

  """Integration supports new content to be pushed to repositories."""
  push_new_content

  """Integration supports reading contents."""
  read_contents

  """Integration can be searched via api."""
  search_by_api
}

"""
Parameters to find or create an external Git Repository and the associated OpsLevel Repository.
"""
input GitForgesRepositoryFindOrCreateInput {
  """The id of the integration used to create the Git Repository"""
  integrationId: ID!

  """The name of the new repository"""
  name: String!

  """
  The organization to create the new repository in (only used for some GitForges)
  """
  organization: String

  """
  The project to create the new repository in (only used for some GitForges)
  """
  project: String
}

"""Return type for GitForgesRepositoryFindOrCreate"""
type GitForgesRepositoryFindOrCreatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The OpsLevel repository that represents the external repository."""
  repository: Repository
}

type GithubActionsIntegration implements Integration {
  """The id of the group."""
  accountKey: String!

  """The path of the group."""
  accountName: String

  """The web url of the group."""
  accountUrl: String

  """Indicates whether or not the integration is currently active."""
  active: Boolean!

  """The publicly routable URL where the integration can be accessed."""
  baseUrl: String

  """Labels which relate this integration to similar integrations."""
  categories: [IntegrationCategory!]

  """The parameters used by the UI to display and configure integrations."""
  config: IntegrationConfig

  """The time this integration was created."""
  createdAt: ISO8601DateTime!

  """The display name of the integration."""
  displayName: String

  """The relative url to where the integration can be accessed."""
  href: String!

  """
  A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
  """
  htmlUrl: String!

  """The unique identifier for the integration."""
  id: ID!

  """
  The time that this integration was successfully installed, if null, this
  indicates the integration was not completed installed.
  """
  installedAt: ISO8601DateTime

  """
  The time this integration was invalidated, either from OpsLevel or via the external API.
  """
  invalidatedAt: ISO8601DateTime

  """The time an event payload was provided for this integration."""
  lastEventReceived: ISO8601DateTime

  """The name of the integration."""
  name: String!

  """The notification channel."""
  notificationChannel: String

  """
  Indicates whether OpsLevel will create service suggestions by analyzing the integration's repositories.
  """
  serviceDiscoveryEnabled: Boolean

  """
  Indicates if OpsLevel will manage Datadog monitor webhooks automatically. When
  set to false, you will be required to manually add the OpsLevel webhook to
  your Datadog monitor notification message.
  """
  setWebhooksOnMonitors: Boolean

  """
  The abbreviated or shorthand name for this integration, if any. Otherwise returns display name.
  """
  shortName: String

  """This integration was not installed within the installation window."""
  stale: Boolean!

  """If this integration is initializing and is not fully ready for use"""
  stillLoading: Boolean!

  """The type of the integration."""
  type: String!

  """Indicates if this integration is being uninstalled from OpsLevel."""
  uninstallInProgress: Boolean!

  """
  False when the integration has been unauthorized or removed by the remote system.
  """
  valid: Boolean!

  """The version of the integration that is installed."""
  version: String

  """The endpoint to send events via webhook (if applicable)."""
  webhookUrl: String
}

type GithubIntegration implements Integration {
  """The id of the group."""
  accountKey: String!

  """The path of the group."""
  accountName: String

  """The web url of the group."""
  accountUrl: String

  """Indicates whether or not the integration is currently active."""
  active: Boolean!

  """The publicly routable URL where the integration can be accessed."""
  baseUrl: String

  """The GitHub integration's supported capabilities"""
  capabilities: [GitForgeCapabilitiesTypeEnum!]!

  """Labels which relate this integration to similar integrations."""
  categories: [IntegrationCategory!]

  """The parameters used by the UI to display and configure integrations."""
  config: IntegrationConfig

  """The time this integration was created."""
  createdAt: ISO8601DateTime!

  """The display name of the integration."""
  displayName: String

  """The relative url to where the integration can be accessed."""
  href: String!

  """
  A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
  """
  htmlUrl: String!

  """The unique identifier for the integration."""
  id: ID!

  """
  The time that this integration was successfully installed, if null, this
  indicates the integration was not completed installed.
  """
  installedAt: ISO8601DateTime

  """
  The time this integration was invalidated, either from OpsLevel or via the external API.
  """
  invalidatedAt: ISO8601DateTime

  """The time an event payload was provided for this integration."""
  lastEventReceived: ISO8601DateTime

  """The name of the integration."""
  name: String!

  """The notification channel."""
  notificationChannel: String

  """
  Indicates whether OpsLevel will create service suggestions by analyzing the integration's repositories.
  """
  serviceDiscoveryEnabled: Boolean

  """
  Indicates if OpsLevel will manage Datadog monitor webhooks automatically. When
  set to false, you will be required to manually add the OpsLevel webhook to
  your Datadog monitor notification message.
  """
  setWebhooksOnMonitors: Boolean

  """
  The abbreviated or shorthand name for this integration, if any. Otherwise returns display name.
  """
  shortName: String

  """This integration was not installed within the installation window."""
  stale: Boolean!

  """If this integration is initializing and is not fully ready for use"""
  stillLoading: Boolean!

  """The type of the integration."""
  type: String!

  """Indicates if this integration is being uninstalled from OpsLevel."""
  uninstallInProgress: Boolean!

  """
  False when the integration has been unauthorized or removed by the remote system.
  """
  valid: Boolean!

  """The version of the integration that is installed."""
  version: String

  """The endpoint to send events via webhook (if applicable)."""
  webhookUrl: String
}

"""A GitHub organization as shown in their RESTful API"""
type GithubOrganization {
  """The URL to an organization avatar"""
  avatarUrl: String!

  """The description of the GitHub organization"""
  description: String

  """The URL to an organizations events"""
  eventsUrl: String!

  """The URL to an organizations hooks"""
  hooksUrl: String!

  """The id of an organization"""
  id: Int

  """If the user has already integrated this organization"""
  integrated: Boolean!

  """The URL to an organizations issues"""
  issuesUrl: String!

  """The display name for an organization"""
  login: String!

  """The URL to an organizations members"""
  membersUrl: String!

  """The global node ID for an organization to be used in their GraphQL API"""
  nodeId: String!

  """The URL to an organizations public members"""
  publicMembersUrl: String!

  """The URL to an organizations repositories"""
  reposUrl: String!

  """A URL to the webpage for a GitHub organization"""
  url: String!
}

"""A GitHub user as shown in their RESTful API"""
type GithubUser {
  """The URL to a users avatar"""
  avatarUrl: String!

  """If the user has already integrated personal repos"""
  integrated: Boolean!

  """The display name for a user"""
  login: String!
}

type GitlabIntegration implements Integration {
  """The id of the group."""
  accountKey: String!

  """The path of the group."""
  accountName: String

  """The web url of the group."""
  accountUrl: String

  """Indicates whether or not the integration is currently active."""
  active: Boolean!

  """The publicly routable URL where the integration can be accessed."""
  baseUrl: String

  """The GitLab integration's supported capabilities"""
  capabilities: [GitForgeCapabilitiesTypeEnum!]!

  """Labels which relate this integration to similar integrations."""
  categories: [IntegrationCategory!]

  """The parameters used by the UI to display and configure integrations."""
  config: IntegrationConfig

  """The time this integration was created."""
  createdAt: ISO8601DateTime!

  """The display name of the integration."""
  displayName: String

  """The relative url to where the integration can be accessed."""
  href: String!

  """
  A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
  """
  htmlUrl: String!

  """The unique identifier for the integration."""
  id: ID!

  """
  The time that this integration was successfully installed, if null, this
  indicates the integration was not completed installed.
  """
  installedAt: ISO8601DateTime

  """
  The time this integration was invalidated, either from OpsLevel or via the external API.
  """
  invalidatedAt: ISO8601DateTime

  """The time an event payload was provided for this integration."""
  lastEventReceived: ISO8601DateTime

  """The name of the integration."""
  name: String!

  """The notification channel."""
  notificationChannel: String

  """
  The repository names that have insufficient permissions for OpsLevel to access them.
  """
  remoteReposWithoutProperAccessLevel: [String!]!

  """
  Indicates whether OpsLevel will create service suggestions by analyzing the integration's repositories.
  """
  serviceDiscoveryEnabled: Boolean

  """
  Indicates if OpsLevel will manage Datadog monitor webhooks automatically. When
  set to false, you will be required to manually add the OpsLevel webhook to
  your Datadog monitor notification message.
  """
  setWebhooksOnMonitors: Boolean

  """
  The abbreviated or shorthand name for this integration, if any. Otherwise returns display name.
  """
  shortName: String

  """This integration was not installed within the installation window."""
  stale: Boolean!

  """If this integration is initializing and is not fully ready for use"""
  stillLoading: Boolean!

  """The type of the integration."""
  type: String!

  """Indicates if this integration is being uninstalled from OpsLevel."""
  uninstallInProgress: Boolean!

  """
  False when the integration has been unauthorized or removed by the remote system.
  """
  valid: Boolean!

  """The version of the integration that is installed."""
  version: String

  """The endpoint to send events via webhook (if applicable)."""
  webhookUrl: String
}

"""
A group represents a collection of teams and/or other groups used to reflect your organization's functional structure.
"""
type Group {
  """A human-friendly, unique identifier for the group."""
  alias: String!

  """A list of groups that are ancestors of this group."""
  ancestors(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): AncestorGroupsConnection

  """The groups where this group is the direct parent."""
  childSubgroups(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): SubgroupConnection

  """The teams where this group is the direct parent."""
  childTeams(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): TeamConnection

  """
  All the repositories that fall under this group - ex. this group's child
  repositories, all the child repositories of this group's descendants, etc.
  """
  descendantRepositories(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int

    """The field and direction to order the resulting respositories by."""
    sortBy: RepositorySortEnum
  ): RepositoryConnection

  """
  All the services that fall under this group - ex. this group's child services,
  all the child services of this group's descendants, etc.
  """
  descendantServices(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int

    """The field and direction to order the resulting services by."""
    sortBy: ServiceSortEnum
  ): ServiceConnection

  """
  All the groups that fall under this group - ex. this group's child groups, children of those groups, etc.
  """
  descendantSubgroups(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): SubgroupConnection

  """
  All the teams that fall under this group - ex. this group's child teams, all
  the child teams of this group's descendants, etc.
  """
  descendantTeams(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int

    """The field and direction to order the resulting teams by."""
    sortBy: TeamSortEnum
  ): TeamConnection

  """The description of the group."""
  description: String

  """The external UUID of this group."""
  externalUuid: String

  """The relative path for this. Ex. /services/shopping_cart"""
  href: String!

  """
  A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
  """
  htmlUrl: String!

  """The unique identifier for the group."""
  id: ID!

  """The users who are members of the group."""
  members(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): UserConnection

  """The name of the group."""
  name: String!

  """The parent of the group."""
  parent: Group

  """The internal ID for the group."""
  plainId: Int!
}

"""The connection type for Group."""
type GroupConnection {
  """A list of edges."""
  edges: [GroupEdge]

  """A list of nodes."""
  nodes: [Group]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!
}

"""An edge in a connection."""
type GroupEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Group
}

"""Fields that can be used as part of filters for groups."""
enum GroupFilterEnum {
  """Filter by `parent` field"""
  parent_id
}

"""Input to be used to filter types."""
input GroupFilterInput {
  """Field to be filtered."""
  key: GroupFilterEnum!

  """Value to be filtered."""
  arg: String

  """Type of operation to be applied to value on the field."""
  type: BasicTypeEnum = equals
}

"""Specifies the input fields used to create and update a group."""
input GroupInput {
  """The name of the group."""
  name: String

  """The description of the group."""
  description: String

  """The external UUID of this group."""
  externalUuid: String

  """The parent of the group"""
  parent: IdentifierInput

  """The users who are members of the group."""
  members: [MemberInput!]

  """The teams where this group is the direct parent."""
  teams: [IdentifierInput!]
}

"""Specifies the input fields used to create a group."""
type GroupPayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """
  A group represents a collection of teams and/or other groups used to reflect your organization's functional structure.
  """
  group: Group
}

"""Sort possibilities for groups."""
enum GroupSortEnum {
  """Order by `name` ascending"""
  name_ASC

  """Order by `name` descending"""
  name_DESC
}

type HasDocumentationCheck implements Check {
  """Additional arguments required by some check types."""
  args: JSON

  """The campaign the check belongs to."""
  campaign: Campaign

  """The category that the check belongs to."""
  category: Category

  """The levels the check belongs to."""
  checkLevels: [CheckLevel!]

  """Description of the check type's purpose."""
  description: String!

  """The subtype of the document."""
  documentSubtype: String!

  """The type of the document."""
  documentType: String!

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """If the check is enabled or not."""
  enabled: Boolean!

  """The filter that the check belongs to."""
  filter: Filter

  """Information needed to fix the check."""
  fix: JSON

  """The id of the check."""
  id: ID!

  """The integration this check uses."""
  integration: Integration @deprecated(reason: "Integration is now deprecated. Please use `integration` under the `CustomEventCheck` fragment instead.")

  """The level that the check belongs to."""
  level: Level

  """The display name of the check."""
  name: String!

  """Additional information about the check."""
  notes: String

  """The owner of the check."""
  owner: CheckOwner

  """The raw unsanitized additional information about the check."""
  rawNotes: String

  """The URL path for the check report."""
  reportHref: String!

  """Summary of stats for services associated to this check."""
  stats: Stats

  """The type of check."""
  type: CheckType!

  """The url to the check."""
  url: String!
}

"""The subtype of the document."""
enum HasDocumentationSubtypeEnum {
  """Document is an OpenAPI document."""
  openapi
}

"""The type of the document."""
enum HasDocumentationTypeEnum {
  """Document is an API document."""
  api

  """Document is an Tech document."""
  tech
}

type HasRecentDeployCheck implements Check {
  """Additional arguments required by some check types."""
  args: JSON

  """The campaign the check belongs to."""
  campaign: Campaign

  """The category that the check belongs to."""
  category: Category

  """The levels the check belongs to."""
  checkLevels: [CheckLevel!]

  """The number of days to check since the last deploy."""
  days: Int!

  """Description of the check type's purpose."""
  description: String!

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """If the check is enabled or not."""
  enabled: Boolean!

  """The filter that the check belongs to."""
  filter: Filter

  """Information needed to fix the check."""
  fix: JSON

  """The id of the check."""
  id: ID!

  """The integration this check uses."""
  integration: Integration @deprecated(reason: "Integration is now deprecated. Please use `integration` under the `CustomEventCheck` fragment instead.")

  """The level that the check belongs to."""
  level: Level

  """The display name of the check."""
  name: String!

  """Additional information about the check."""
  notes: String

  """The owner of the check."""
  owner: CheckOwner

  """The raw unsanitized additional information about the check."""
  rawNotes: String

  """The URL path for the check report."""
  reportHref: String!

  """Summary of stats for services associated to this check."""
  stats: Stats

  """The type of check."""
  type: CheckType!

  """The url to the check."""
  url: String!
}

"""Specifies the input fields used to identify a resource."""
input IdentifierInput {
  """The id of the resource."""
  id: ID

  """The human-friendly, unique identifier for the resource."""
  alias: String
}

"""Specifies the payload fields used to identify a resource."""
type IdentifierPayload {
  """The human-friendly, unique identifier for the resource."""
  alias: String

  """The id of the resource."""
  id: ID
}

"""Results of importing an Entity from Backstage into OpsLevel."""
type ImportEntityFromBackstagePayload {
  """The action taken by OpsLevel (ie: service created)."""
  actionMessage: String!

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """A link to the created or updated object in OpsLevel, if any."""
  htmlUrl: String
}

"""An Infrastructure Resource."""
type InfrastructureResource {
  """The properties that describe the Infrastructure Resource."""
  data: JSON

  """The identifier of the object."""
  id: ID!

  """The name of the object."""
  name: String!

  """The owner of the object."""
  owner: EntityOwner

  """
  The source of the Infrastructure Resource. (How this data got into OpsLevel.)
  """
  source: InfrastructureSource

  """The tags applied to the object."""
  tags(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): TagConnection

  """The type of Infrastructure Resource."""
  type: String!
}

"""The connection type for InfrastructureResource."""
type InfrastructureResourceConnection {
  """A list of edges."""
  edges: [InfrastructureResourceEdge]

  """A list of nodes."""
  nodes: [InfrastructureResource]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!
}

"""An edge in a connection."""
type InfrastructureResourceEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: InfrastructureResource
}

"""Source of an Infrastructure Resource"""
type InfrastructureSource {
  """
  The integration that enabled OpsLevel to discover the Infrastructure resource.
  """
  integration: Integration

  """
  The last time the raw data was synchronized from the Integration platform.
  """
  lastSyncedAt: ISO8601DateTime

  """Raw data as discovered from an integration, prior to translation."""
  rawData: JSON
}

"""An integration is a way of extending OpsLevel functionality."""
interface Integration {
  """The id of the group."""
  accountKey: String!

  """The path of the group."""
  accountName: String

  """The web url of the group."""
  accountUrl: String

  """Indicates whether or not the integration is currently active."""
  active: Boolean!

  """The publicly routable URL where the integration can be accessed."""
  baseUrl: String

  """Labels which relate this integration to similar integrations."""
  categories: [IntegrationCategory!]

  """The parameters used by the UI to display and configure integrations."""
  config: IntegrationConfig

  """The time this integration was created."""
  createdAt: ISO8601DateTime!

  """The display name of the integration."""
  displayName: String

  """The relative url to where the integration can be accessed."""
  href: String!

  """
  A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
  """
  htmlUrl: String!

  """The unique identifier for the integration."""
  id: ID!

  """
  The time that this integration was successfully installed, if null, this
  indicates the integration was not completed installed.
  """
  installedAt: ISO8601DateTime

  """
  The time this integration was invalidated, either from OpsLevel or via the external API.
  """
  invalidatedAt: ISO8601DateTime

  """The time an event payload was provided for this integration."""
  lastEventReceived: ISO8601DateTime

  """The name of the integration."""
  name: String!

  """The notification channel."""
  notificationChannel: String

  """
  Indicates whether OpsLevel will create service suggestions by analyzing the integration's repositories.
  """
  serviceDiscoveryEnabled: Boolean

  """
  Indicates if OpsLevel will manage Datadog monitor webhooks automatically. When
  set to false, you will be required to manually add the OpsLevel webhook to
  your Datadog monitor notification message.
  """
  setWebhooksOnMonitors: Boolean

  """
  The abbreviated or shorthand name for this integration, if any. Otherwise returns display name.
  """
  shortName: String

  """This integration was not installed within the installation window."""
  stale: Boolean!

  """If this integration is initializing and is not fully ready for use"""
  stillLoading: Boolean!

  """The type of the integration."""
  type: String!

  """Indicates if this integration is being uninstalled from OpsLevel."""
  uninstallInProgress: Boolean!

  """
  False when the integration has been unauthorized or removed by the remote system.
  """
  valid: Boolean!

  """The version of the integration that is installed."""
  version: String

  """The endpoint to send events via webhook (if applicable)."""
  webhookUrl: String
}

type IntegrationCategory {
  """The display name of the integration category"""
  displayName: String!

  """The key to use when filtering integrations by category"""
  key: String!
}

enum IntegrationCategoryEnum {
  """Git"""
  git

  """Alerts"""
  alerts

  """Observability"""
  observability

  """Incident Management"""
  incident_management

  """Infrastructure"""
  infrastructure

  """Checks"""
  checks

  """Issue Tracking"""
  issue_tracking

  """CI / CD"""
  ci_cd

  """Documentation"""
  documentation

  """Communication"""
  communication

  """User Management"""
  user_management

  """Error Tracking"""
  error_tracking

  """Security"""
  security

  """Code Quality"""
  code_quality

  """Custom"""
  custom
}

"""translation missing: en.graphql.types.integration_config.self"""
type IntegrationConfig {
  """Templates to help the creation of checks."""
  checkCreateTemplates: [CheckCreateTemplate!]
}

"""The connection type for Integration."""
type IntegrationConnection {
  """A list of edges."""
  edges: [IntegrationEdge]

  """A list of nodes."""
  nodes: [Integration]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!
}

"""Integration credential token types."""
enum IntegrationCredentialEnum {
  """The integration's API key."""
  api_key

  """The integration's app key."""
  app_key
}

"""
Specifies the input fields used in the `integrationCredentialUpdate` mutation.
"""
input IntegrationCredentialUpdateInput {
  """The id of the integration."""
  id: ID!

  """The credential type to update."""
  name: IntegrationCredentialEnum!

  """The credential value to be updated."""
  token: String!
}

"""Return type for the `integrationCredentialUpdate` mutation."""
type IntegrationCredentialUpdatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """Returns whether the credential update was successful."""
  success: Boolean
}

input IntegrationDeauthInput {
  """The id of the integration."""
  id: ID!

  """translation missing: en.graphql.types.integration_deauth_input.force"""
  force: Boolean = false
}

"""The return type of a 'integrationDeauth' mutation."""
type IntegrationDeauthPayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The integration which the repositories will be uninstalled."""
  integration: Integration
}

input IntegrationDeleteInput {
  """The id of the integration."""
  id: ID!
}

"""The return type of a 'integrationDelete' mutation."""
type IntegrationDeletePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The deleted integration."""
  integration: Integration
}

"""An edge in a connection."""
type IntegrationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Integration
}

input IntegrationGroupAssignInput {
  """The id of the integration."""
  id: ID!

  """The id of the group."""
  groupId: String!
}

"""The return type of a 'integrationGroupAssign' mutation."""
type IntegrationGroupAssignPayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The newly group assigned integration."""
  integration: Integration
}

"""Sort possibilities for integrations."""
enum IntegrationSortEnum {
  """Order by `name` ascending."""
  name_ASC

  """Order by `name` descending."""
  name_DESC
}

input IntegrationSyncAlertSourcesInput {
  """The id of the integration."""
  id: ID!
}

"""The return type of a `integrationSyncAlertSources` mutation."""
type IntegrationSyncAlertSourcesPayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The integration for which the alert sources will be synced."""
  integration: Integration
}

input IntegrationSyncReposInput {
  """The id of the integration."""
  id: ID!
}

"""The return type of a 'integrationSyncRepos' mutation."""
type IntegrationSyncReposPayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The integration which the repositories will be synced."""
  integration: Integration
}

"""The details of the PAT ownership change."""
type IntegrationTokenOwnerChange {
  """Old owner login."""
  from: String!

  """New owner login."""
  to: String!
}

input IntegrationUpdateInput {
  """The id of the integration."""
  id: ID!

  """The name of the integration."""
  name: String

  """The notification channel of the integration."""
  notificationChannel: String

  """
  Indicates if OpsLevel will manage Datadog monitor webhooks automatically. Set
  to false in such cases where you Datadog monitors are managed through config
  as code, the API, or if you want to manage them manually. Setting this to
  false will require you to manually add the OpsLevel webhook to your Datadog
  monitor message.
  """
  setWebhooksOnMonitors: Boolean

  """The publicly routable URL where the integration can be accessed."""
  baseUrl: String

  """
  Indicates if OpsLevel will create service suggestions by analyzing the repos
  of the integration (only available for git integrations).
  """
  serviceDiscoveryEnabled: Boolean
}

"""The return type of a 'integrationUpdate' mutation."""
type IntegrationUpdatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The newly updated integration."""
  integration: Integration
}

"""Result of validating an integrations credentials."""
type IntegrationValidateCredentialsPayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """List of organizations accessible by the access token"""
  organizations: [GithubOrganization!]

  """Object containing the :from, :to values of the github owner login."""
  tokenOwnerChange: IntegrationTokenOwnerChange

  """The user the the access token belongs to"""
  user: GithubUser

  """True if the supplied credentials are valid, false otherwise."""
  valid: Boolean!
}

"""The integration credential type to validate."""
enum IntegrationValidateCredentialsTypeEnum {
  """
  Validate a GitLab Personal Access Token. Required options: baseUrl, name, token.
  """
  GITLAB_PERSONAL_ACCESS_TOKEN

  """
  Validate a GitHub Personal Access Token. Required options: baseUrl, token.
  """
  GITHUB_PERSONAL_ACCESS_TOKEN
}

"""An ISO 8601-encoded datetime"""
scalar ISO8601DateTime

type IssueTrackingIntegration implements Integration {
  """The id of the group."""
  accountKey: String!

  """The path of the group."""
  accountName: String

  """The web url of the group."""
  accountUrl: String

  """Indicates whether or not the integration is currently active."""
  active: Boolean!

  """The publicly routable URL where the integration can be accessed."""
  baseUrl: String

  """Labels which relate this integration to similar integrations."""
  categories: [IntegrationCategory!]

  """The parameters used by the UI to display and configure integrations."""
  config: IntegrationConfig

  """The time this integration was created."""
  createdAt: ISO8601DateTime!

  """The display name of the integration."""
  displayName: String

  """The relative url to where the integration can be accessed."""
  href: String!

  """
  A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
  """
  htmlUrl: String!

  """The unique identifier for the integration."""
  id: ID!

  """
  The time that this integration was successfully installed, if null, this
  indicates the integration was not completed installed.
  """
  installedAt: ISO8601DateTime

  """
  The time this integration was invalidated, either from OpsLevel or via the external API.
  """
  invalidatedAt: ISO8601DateTime

  """Search the projects in your issue tracking tool by name."""
  issueTrackingProjects(
    """
    translation missing: en.graphql.types.issue_tracking_integration.issue_tracking_projects.site_id
    """
    siteId: String!

    """The string used to search your issue tracking projects by name."""
    searchTerm: String

    """Number of results to return in the search."""
    maxResults: Int
  ): [IssueTrackingProject!]!

  """The time an event payload was provided for this integration."""
  lastEventReceived: ISO8601DateTime

  """The name of the integration."""
  name: String!

  """The notification channel."""
  notificationChannel: String

  """
  Indicates whether OpsLevel will create service suggestions by analyzing the integration's repositories.
  """
  serviceDiscoveryEnabled: Boolean

  """
  Indicates if OpsLevel will manage Datadog monitor webhooks automatically. When
  set to false, you will be required to manually add the OpsLevel webhook to
  your Datadog monitor notification message.
  """
  setWebhooksOnMonitors: Boolean

  """
  The abbreviated or shorthand name for this integration, if any. Otherwise returns display name.
  """
  shortName: String

  """translation missing: en.graphql.types.issue_tracking_integration.sites"""
  sites: [IssueTrackingSite!]!

  """This integration was not installed within the installation window."""
  stale: Boolean!

  """If this integration is initializing and is not fully ready for use"""
  stillLoading: Boolean!

  """The type of the integration."""
  type: String!

  """Indicates if this integration is being uninstalled from OpsLevel."""
  uninstallInProgress: Boolean!

  """
  False when the integration has been unauthorized or removed by the remote system.
  """
  valid: Boolean!

  """The version of the integration that is installed."""
  version: String

  """The endpoint to send events via webhook (if applicable)."""
  webhookUrl: String
}

"""An issue type found in your issue tracking tool."""
type IssueTrackingIssueType {
  """The issue type's ID in the tool."""
  externalId: String!

  """The issue type's name in the tool."""
  name: String!
}

"""A project found in your issue tracking tool."""
type IssueTrackingProject {
  """The project's ID in the tool."""
  externalId: String!

  """The issue types associated with that project."""
  issueTypes: [IssueTrackingIssueType!]

  """The project's name in the tool."""
  name: String!
}

"""A site/subdomain found in your issue tracking tool."""
type IssueTrackingSite {
  """The site's ID in the tool."""
  externalId: String!

  """The site's URL in the tool."""
  externalUrl: String!

  """The site's name/subdomain in the tool."""
  name: String!
}

type JenkinsIntegration implements Integration {
  """The id of the group."""
  accountKey: String!

  """The path of the group."""
  accountName: String

  """The web url of the group."""
  accountUrl: String

  """Indicates whether or not the integration is currently active."""
  active: Boolean!

  """The publicly routable URL where the integration can be accessed."""
  baseUrl: String

  """Labels which relate this integration to similar integrations."""
  categories: [IntegrationCategory!]

  """The parameters used by the UI to display and configure integrations."""
  config: IntegrationConfig

  """The time this integration was created."""
  createdAt: ISO8601DateTime!

  """The display name of the integration."""
  displayName: String

  """The relative url to where the integration can be accessed."""
  href: String!

  """
  A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
  """
  htmlUrl: String!

  """The unique identifier for the integration."""
  id: ID!

  """
  The time that this integration was successfully installed, if null, this
  indicates the integration was not completed installed.
  """
  installedAt: ISO8601DateTime

  """
  The time this integration was invalidated, either from OpsLevel or via the external API.
  """
  invalidatedAt: ISO8601DateTime

  """The time an event payload was provided for this integration."""
  lastEventReceived: ISO8601DateTime

  """The name of the integration."""
  name: String!

  """The notification channel."""
  notificationChannel: String

  """
  Indicates whether OpsLevel will create service suggestions by analyzing the integration's repositories.
  """
  serviceDiscoveryEnabled: Boolean

  """
  Indicates if OpsLevel will manage Datadog monitor webhooks automatically. When
  set to false, you will be required to manually add the OpsLevel webhook to
  your Datadog monitor notification message.
  """
  setWebhooksOnMonitors: Boolean

  """
  The abbreviated or shorthand name for this integration, if any. Otherwise returns display name.
  """
  shortName: String

  """This integration was not installed within the installation window."""
  stale: Boolean!

  """If this integration is initializing and is not fully ready for use"""
  stillLoading: Boolean!

  """The type of the integration."""
  type: String!

  """Indicates if this integration is being uninstalled from OpsLevel."""
  uninstallInProgress: Boolean!

  """
  False when the integration has been unauthorized or removed by the remote system.
  """
  valid: Boolean!

  """The version of the integration that is installed."""
  version: String

  """The endpoint to send events via webhook (if applicable)."""
  webhookUrl: String
}

"""Represents untyped JSON"""
scalar JSON

type KubernetesIntegration implements Integration {
  """The id of the group."""
  accountKey: String!

  """The path of the group."""
  accountName: String

  """The web url of the group."""
  accountUrl: String

  """Indicates whether or not the integration is currently active."""
  active: Boolean!

  """The publicly routable URL where the integration can be accessed."""
  baseUrl: String

  """Labels which relate this integration to similar integrations."""
  categories: [IntegrationCategory!]

  """The parameters used by the UI to display and configure integrations."""
  config: IntegrationConfig

  """The time this integration was created."""
  createdAt: ISO8601DateTime!

  """The display name of the integration."""
  displayName: String

  """The relative url to where the integration can be accessed."""
  href: String!

  """
  A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
  """
  htmlUrl: String!

  """The unique identifier for the integration."""
  id: ID!

  """
  The time that this integration was successfully installed, if null, this
  indicates the integration was not completed installed.
  """
  installedAt: ISO8601DateTime

  """
  The time this integration was invalidated, either from OpsLevel or via the external API.
  """
  invalidatedAt: ISO8601DateTime

  """The time an event payload was provided for this integration."""
  lastEventReceived: ISO8601DateTime

  """The name of the integration."""
  name: String!

  """The notification channel."""
  notificationChannel: String

  """
  Indicates whether OpsLevel will create service suggestions by analyzing the integration's repositories.
  """
  serviceDiscoveryEnabled: Boolean

  """
  Indicates if OpsLevel will manage Datadog monitor webhooks automatically. When
  set to false, you will be required to manually add the OpsLevel webhook to
  your Datadog monitor notification message.
  """
  setWebhooksOnMonitors: Boolean

  """
  The abbreviated or shorthand name for this integration, if any. Otherwise returns display name.
  """
  shortName: String

  """This integration was not installed within the installation window."""
  stale: Boolean!

  """If this integration is initializing and is not fully ready for use"""
  stillLoading: Boolean!

  """The type of the integration."""
  type: String!

  """Indicates if this integration is being uninstalled from OpsLevel."""
  uninstallInProgress: Boolean!

  """
  False when the integration has been unauthorized or removed by the remote system.
  """
  valid: Boolean!

  """The version of the integration that is installed."""
  version: String

  """The endpoint to send events via webhook (if applicable)."""
  webhookUrl: String
}

"""A language that can be assigned to a repository."""
type Language {
  """The name of the language"""
  name: String!

  """The percentage of the code written in that language"""
  usage: Float!
}

"""A performance rating that is used to grade your services against."""
type Level {
  """The human-friendly, unique identifier for the level."""
  alias: String

  """The checks that belong to the level."""
  checks: [Check!]

  """A brief description of the level."""
  description: String

  """The unique identifier for the level."""
  id: ID!

  """The numerical representation of the level (highest is better)."""
  index: Int

  """The display name of the level."""
  name: String
}

"""The connection type for Level."""
type LevelConnection {
  """A list of edges."""
  edges: [LevelEdge]

  """A list of nodes."""
  nodes: [Level]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!
}

"""The total number of services in each level."""
type LevelCount {
  """A performance rating that is used to grade your services against."""
  level: Level!

  """The number of services."""
  serviceCount: Int!
}

"""
Specifies the input fields used to create a level. The new level will be added as the highest level (greatest level index).
"""
input LevelCreateInput {
  """The display name of the level."""
  name: String!

  """The description of the level."""
  description: String

  """
  an integer allowing this level to be inserted between others. Must be unique per Rubric.
  """
  index: Int
}

"""The return type of the `levelCreate` mutation."""
type LevelCreatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """A performance rating that is used to grade your services against."""
  level: Level
}

"""Specifies the input fields used to delete a level."""
input LevelDeleteInput {
  """The id of the level to be deleted."""
  id: ID!
}

"""The return type of the `levelDelete` mutation."""
type LevelDeletePayload {
  """The id of the deleted level."""
  deletedLevelId: ID

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""An edge in a connection."""
type LevelEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Level
}

"""Specifies the input fields used to update a level."""
input LevelUpdateInput {
  """The id of the level to be updated."""
  id: ID!

  """The display name of the level."""
  name: String

  """The description of the level."""
  description: String
}

"""The return type of the `levelUpdate` mutation."""
type LevelUpdatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """A performance rating that is used to grade your services against."""
  level: Level
}

"""A lifecycle represents the current development stage of a service."""
type Lifecycle {
  """The human-friendly, unique identifier for the lifecycle."""
  alias: String

  """The lifecycle's description."""
  description: String

  """The unique identifier for the lifecycle."""
  id: ID!

  """The numerical representation of the lifecycle."""
  index: Int

  """The lifecycle's display name."""
  name: String
}

type ManualCheck implements Check {
  """Additional arguments required by some check types."""
  args: JSON

  """The campaign the check belongs to."""
  campaign: Campaign

  """The category that the check belongs to."""
  category: Category

  """The levels the check belongs to."""
  checkLevels: [CheckLevel!]

  """Description of the check type's purpose."""
  description: String!

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """If the check is enabled or not."""
  enabled: Boolean!

  """The filter that the check belongs to."""
  filter: Filter

  """Information needed to fix the check."""
  fix: JSON

  """The id of the check."""
  id: ID!

  """The integration this check uses."""
  integration: Integration @deprecated(reason: "Integration is now deprecated. Please use `integration` under the `CustomEventCheck` fragment instead.")

  """The level that the check belongs to."""
  level: Level

  """The display name of the check."""
  name: String!

  """Additional information about the check."""
  notes: String

  """The owner of the check."""
  owner: CheckOwner

  """The start of the previous window for manual check recurring updates."""
  prevWindowStart: ISO8601DateTime

  """The raw unsanitized additional information about the check."""
  rawNotes: String

  """The URL path for the check report."""
  reportHref: String!

  """The start time for manual checks that require recurring updates."""
  startTime: ISO8601DateTime

  """Summary of stats for services associated to this check."""
  stats: Stats

  """The type of check."""
  type: CheckType!

  """The minimum frequency of the updates."""
  updateFrequency: ManualCheckFrequency

  """Whether the check requires a comment or not."""
  updateRequiresComment: Boolean!

  """The url to the check."""
  url: String!

  """
  The end of the current window for recurring updates for a manual check.
  """
  windowEnd: ISO8601DateTime
}

type ManualCheckFrequency {
  """The time scale type for the frequency."""
  frequencyTimeScale: FrequencyTimeScale!

  """The value to be used together with the frequency scale."""
  frequencyValue: Int!

  """The date that the check will start to evaluate."""
  startingDate: ISO8601DateTime!
}

"""Defines a frequency for the check update."""
input ManualCheckFrequencyInput {
  """The date that the check will start to evaluate."""
  startingDate: ISO8601DateTime!

  """The time scale type for the frequency."""
  frequencyTimeScale: FrequencyTimeScale!

  """The value to be used together with the frequency scale."""
  frequencyValue: Int!
}

"""Defines a frequency for the check update."""
input ManualCheckFrequencyUpdateInput {
  """The date that the check will start to evaluate."""
  startingDate: ISO8601DateTime

  """The time scale type for the frequency."""
  frequencyTimeScale: FrequencyTimeScale

  """The value to be used together with the frequency scale."""
  frequencyValue: Int
}

"""Input for specifiying members on a group."""
input MemberInput {
  """The user's email."""
  email: String!
}

type Mutation {
  """Attaches a single alert source to a service."""
  alertSourceServiceCreate(
    """Specifies the input used for attaching an alert source to a service."""
    input: AlertSourceServiceCreateInput!
  ): AlertSourceServiceCreatePayload!

  """Removes an alert source from a service."""
  alertSourceServiceDelete(
    """
    Specifies the input fields used in the `alertSourceServiceDelete` mutation.
    """
    input: AlertSourceServiceDeleteInput!
  ): AlertSourceServiceDeletePayload!

  """Attaches alert sources to a service."""
  alertSourceServicesCreate(
    """Specifies the input used for attaching alert sources to a service."""
    input: AlertSourceServicesCreateInput!
  ): AlertSourceServicesCreatePayload!

  """Creates an alias on a resource."""
  aliasCreate(
    """The input for the `aliasCreate` mutation."""
    input: AliasCreateInput!
  ): AliasCreatePayload!

  """Deletes an alias."""
  aliasDelete(
    """The input for the `aliasDelete` mutation."""
    input: AliasDeleteInput!
  ): AliasDeletePayload!

  """Creates an AWS integration (Beta)."""
  awsIntegrationCreate(input: AwsIntegrationCreateInput!): AwsIntegrationCreatePayload!

  """
  Deletes an AWS Integration from OpsLevel, along with the infra objects generated from that integration.
  """
  awsIntegrationDelete(resource: IdentifierInput!): ResourceDeletePayload!

  """Updates an AWS integration (Beta)."""
  awsIntegrationUpdate(input: AwsIntegrationUpdateInput!): AwsIntegrationUpdatePayload!

  """Creates a campaign."""
  campaignCreate(
    """Specifies the input fields used to create a campaign."""
    input: CampaignCreateInput!
  ): CampaignCreatePayload!

  """Deletes a campaign."""
  campaignDelete(input: DeleteInput!): DeletePayload!

  """End a campaign and promote checks to the rubric."""
  campaignEnd(
    """
    Specifies the input fields used to end a campaign and promote checks to the rubric.
    """
    input: CampaignEndInput!
  ): CampaignEndPayload!

  """Schedules or updates a campaigns start and target dates."""
  campaignScheduleUpdate(
    """Specifies the input fields used to update a campaign schedule."""
    input: CampaignScheduleUpdateInput!
  ): CampaignScheduleUpdatePayload!

  """
  Sends a reminder message to teams about incomplete work for this campaign.
  """
  campaignSendReminder(
    """
    Specifies the input fields used to coordinate sending notifications to team members about a campaign.
    """
    input: CampaignSendReminderInput!
  ): CampaignSendReminderPayload!

  """Reverts a campaign to draft clearing the start and target dates."""
  campaignUnschedule(
    """Specifices the input fields used to unschedule a campaign."""
    input: CampaignUnscheduleInput!
  ): CampaignUnschedulePayload!

  """Updates a campaign."""
  campaignUpdate(
    """Specifies the input fields used to update a campaign."""
    input: CampaignUpdateInput!
  ): CampaignUpdatePayload!

  """Creates a category."""
  categoryCreate(
    """Specifies the input fields used to create a category."""
    input: CategoryCreateInput!
  ): CategoryCreatePayload!

  """Deletes a category."""
  categoryDelete(
    """Specifies the input fields used to delete a category."""
    input: CategoryDeleteInput!
  ): CategoryDeletePayload!

  """Updates a category."""
  categoryUpdate(
    """Specifies the input fields used to update a category."""
    input: CategoryUpdateInput!
  ): CategoryUpdatePayload!

  """Creates an alert source usage check."""
  checkAlertSourceUsageCreate(
    """Specifies the input fields used to create an alert source usage check."""
    input: CheckAlertSourceUsageCreateInput!
  ): CheckCreatePayload!

  """Updates an alert source usage check."""
  checkAlertSourceUsageUpdate(
    """Specifies the input fields used to update an alert source usage check."""
    input: CheckAlertSourceUsageUpdateInput!
  ): CheckUpdatePayload!

  """Creates a check."""
  checkCreate(
    """Specifies the input fields used to create a check."""
    input: CheckCreateInput!
  ): CheckCreatePayload!

  """Creates a custom check."""
  checkCustomCreate(
    """Specifies the input fields used to create a custom check."""
    input: CheckCustomCreateInput!
  ): CheckCreatePayload!

  """Creates a custom event check."""
  checkCustomEventCreate(
    """Creates a custom event check."""
    input: CheckCustomEventCreateInput!
  ): CheckCreatePayload!

  """Updates a custom event check."""
  checkCustomEventUpdate(
    """Specifies the input fields used to update a custom event check."""
    input: CheckCustomEventUpdateInput!
  ): CheckCreatePayload!

  """Updates a custom check."""
  checkCustomUpdate(
    """Specifies the input fields used to update a custom check."""
    input: CheckCustomUpdateInput!
  ): CheckUpdatePayload!

  """Deletes a check."""
  checkDelete(
    """Specifies the input fields used to delete a check."""
    input: CheckDeleteInput!
  ): CheckDeletePayload!

  """Creates a branch protection check"""
  checkGitBranchProtectionCreate(
    """Specifies the input fields used to create a branch protection check."""
    input: CheckGitBranchProtectionCreateInput!
  ): CheckCreatePayload!

  """Updates a branch protection check"""
  checkGitBranchProtectionUpdate(
    """Specifies the input fields used to create a branch protection check."""
    input: CheckGitBranchProtectionUpdateInput!
  ): CheckCreatePayload!

  """Creates a documentation check."""
  checkHasDocumentationCreate(
    """Specifies the input fields used to create a documentation check."""
    input: CheckHasDocumentationCreateInput!
  ): CheckCreatePayload!

  """Updates a documentation check."""
  checkHasDocumentationUpdate(
    """Specifies the input fields used to update a documentation check."""
    input: CheckHasDocumentationUpdateInput!
  ): CheckUpdatePayload!

  """Creates a recent deploy check."""
  checkHasRecentDeployCreate(
    """Specifies the input fields used to create a recent deploys check."""
    input: CheckHasRecentDeployCreateInput!
  ): CheckCreatePayload!

  """Updates a recent deploy check."""
  checkHasRecentDeployUpdate(
    """Specifies the input fields used to update a has recent deploy check."""
    input: CheckHasRecentDeployUpdateInput!
  ): CheckCreatePayload!

  """Creates a manual check."""
  checkManualCreate(
    """Specifies the input fields used to create a manual check."""
    input: CheckManualCreateInput!
  ): CheckCreatePayload!

  """Updates a manual check."""
  checkManualUpdate(
    """Specifies the input fields used to update a manual check."""
    input: CheckManualUpdateInput!
  ): CheckUpdatePayload!

  """Creates a payload check."""
  checkPayloadCreate(
    """Creates a payload check."""
    input: CheckPayloadCreateInput!
  ): CheckCreatePayload!

  """Updates a payload check."""
  checkPayloadUpdate(
    """Specifies the input fields used to update a payload check."""
    input: CheckPayloadUpdateInput!
  ): CheckUpdatePayload!

  """Creates a repository file check."""
  checkRepositoryFileCreate(
    """Specifies the input fields used to create a repo file check."""
    input: CheckRepositoryFileCreateInput!
  ): CheckCreatePayload!

  """Updates a repository file check."""
  checkRepositoryFileUpdate(
    """Specifies the input fields used to update a repo file check."""
    input: CheckRepositoryFileUpdateInput!
  ): CheckUpdatePayload!

  """Creates a repository grep check."""
  checkRepositoryGrepCreate(input: CheckRepositoryGrepCreateInput!): CheckCreatePayload!

  """Updates a repository grep check."""
  checkRepositoryGrepUpdate(input: CheckRepositoryGrepUpdateInput!): CheckUpdatePayload!

  """Creates a repository integrated check."""
  checkRepositoryIntegratedCreate(
    """
    Specifies the input fields used to create a repository integrated check.
    """
    input: CheckRepositoryIntegratedCreateInput!
  ): CheckCreatePayload!

  """Updates a repository integrated check."""
  checkRepositoryIntegratedUpdate(
    """
    Specifies the input fields used to update a repository integrated check.
    """
    input: CheckRepositoryIntegratedUpdateInput!
  ): CheckUpdatePayload!

  """Creates a repo search check."""
  checkRepositorySearchCreate(
    """Specifies the input fields used to create a repo search check."""
    input: CheckRepositorySearchCreateInput!
  ): CheckCreatePayload!

  """Updates a repository search check."""
  checkRepositorySearchUpdate(
    """Specifies the input fields used to update a repo search check."""
    input: CheckRepositorySearchUpdateInput!
  ): CheckUpdatePayload!

  """Creates a service configuration check."""
  checkServiceConfigurationCreate(
    """Specifies the input fields used to create a configuration check."""
    input: CheckServiceConfigurationCreateInput!
  ): CheckCreatePayload!

  """Updates a service configuration check."""
  checkServiceConfigurationUpdate(
    """Specifies the input fields used to update a configuration check."""
    input: CheckServiceConfigurationUpdateInput!
  ): CheckUpdatePayload!

  """Creates a service dependency check."""
  checkServiceDependencyCreate(
    """Specifies the input fields used to create a service dependency check."""
    input: CheckServiceDependencyCreateInput!
  ): CheckCreatePayload!

  """Updates a service dependency check."""
  checkServiceDependencyUpdate(
    """Specifies the input fields used to update a service dependency check."""
    input: CheckServiceDependencyUpdateInput!
  ): CheckUpdatePayload!

  """Creates a service ownership check."""
  checkServiceOwnershipCreate(
    """Specifies the input fields used to create an ownership check."""
    input: CheckServiceOwnershipCreateInput!
  ): CheckCreatePayload!

  """Updates a service ownership check."""
  checkServiceOwnershipUpdate(
    """Specifies the input fields used to update an ownership check."""
    input: CheckServiceOwnershipUpdateInput!
  ): CheckUpdatePayload!

  """Creates a service property check."""
  checkServicePropertyCreate(
    """Specifies the input fields used to create a service property check."""
    input: CheckServicePropertyCreateInput!
  ): CheckCreatePayload!

  """Updates a service property check."""
  checkServicePropertyUpdate(
    """Specifies the input fields used to update a service property check."""
    input: CheckServicePropertyUpdateInput!
  ): CheckUpdatePayload!

  """Creates a tag defined check."""
  checkTagDefinedCreate(
    """Specifies the input fields used to create a tag check."""
    input: CheckTagDefinedCreateInput!
  ): CheckCreatePayload!

  """Updates a tag defined check."""
  checkTagDefinedUpdate(
    """Specifies the input fields used to update a tag defined check."""
    input: CheckTagDefinedUpdateInput!
  ): CheckUpdatePayload!

  """Creates a tool usage check."""
  checkToolUsageCreate(
    """Specifies the input fields used to create a tool usage check."""
    input: CheckToolUsageCreateInput!
  ): CheckCreatePayload!

  """Updates a tool usage check."""
  checkToolUsageUpdate(
    """Specifies the input fields used to update a tool usage check."""
    input: CheckToolUsageUpdateInput!
  ): CheckUpdatePayload!

  """Updates a check."""
  checkUpdate(
    """Specifies the input fields used to update a check."""
    input: CheckUpdateInput!
  ): CheckUpdatePayload!

  """Parses a yaml representation of a check."""
  checkYamlParse(
    """Specifies the input fields used to parse a check."""
    input: CheckYamlParseInput!
  ): CheckYamlParsePayload!

  """Copies selected rubric checks to an existing campaign."""
  checksCopyToCampaign(
    """
    Specifies the input fields used to copy selected rubric checks to an existing campaign.
    """
    input: ChecksCopyToCampaignInput!
  ): ChecksCopyToCampaignPayload!

  """Creates a new contact for a team."""
  contactCreate(
    """Specifies the input fields used to create a contact."""
    input: ContactCreateInput!
  ): ContactCreatePayload!

  """Deletes a contact."""
  contactDelete(
    """Specifies the input fields used to delete a contact."""
    input: ContactDeleteInput!
  ): ContactDeletePayload!

  """Updates a contact's attributes."""
  contactUpdate(
    """Specifies the input fields used to update a contact."""
    input: ContactUpdateInput!
  ): ContactUpdatePayload!

  """Creates a Trigger Definition for Custom Actions in OpsLevel."""
  customActionsTriggerDefinitionCreate(input: CustomActionsTriggerDefinitionCreateInput!): CustomActionsTriggerDefinitionCreatePayload!

  """Deletes a Trigger Definition for Custom Actions in OpsLevel."""
  customActionsTriggerDefinitionDelete(resource: IdentifierInput!): ResourceDeletePayload!

  """Updates a Trigger Definition for Custom Actions in OpsLevel."""
  customActionsTriggerDefinitionUpdate(input: CustomActionsTriggerDefinitionUpdateInput!): CustomActionsTriggerDefinitionUpdatePayload!

  """Invoke a custom action trigger definition for a user."""
  customActionsTriggerInvoke(input: CustomActionsTriggerInvokeInput!): CustomActionsTriggerInvokePayload!

  """Validate a template for a Custom Action."""
  customActionsValidateTemplate(
    """A Custom Action template formatted as YAML."""
    template: String!
  ): CustomActionsValidateTemplatePayloadType!

  """Creates a Webhook Action for Custom Actions in OpsLevel."""
  customActionsWebhookActionCreate(input: CustomActionsWebhookActionCreateInput!): CustomActionsWebhookActionCreatePayload!

  """Deletes a Webhook Action for Custom Actions in OpsLevel."""
  customActionsWebhookActionDelete(resource: IdentifierInput!): ResourceDeletePayload!

  """Updates a Webhook Action for Custom Actions in OpsLevel."""
  customActionsWebhookActionUpdate(input: CustomActionsWebhookActionUpdateInput!): CustomActionsWebhookActionUpdatePayload!

  """Updates the credentials for a datadog integration."""
  datadogCredentialsUpdate(
    """
    Specifies the input fields used in the `datadogCredentialsUpdate` mutation.
    """
    input: DatadogCredentialsUpdateInput!
  ): DatadogCredentialsUpdatePayload!

  """Delete a deploy."""
  deployDelete(input: DeleteInput!): DeletePayload!

  """Assign Systems as children of a Domain."""
  domainChildAssign(domain: IdentifierInput!, childSystems: [IdentifierInput!]!): DomainChildAssignPayload!

  """Disconnect Systems from their parent Domain."""
  domainChildRemove(domain: IdentifierInput!, childSystems: [IdentifierInput!]!): DomainChildRemovePayload!

  """Creates a domain."""
  domainCreate(
    """Specifies the input fields used in the `domainCreate` mutation."""
    input: DomainCreateInput!
  ): DomainCreatePayload!

  """Deletes a domain."""
  domainDelete(resource: IdentifierInput!): ResourceDeletePayload!

  """Updates a domain."""
  domainUpdate(
    """
    Specifies the input fields used to identify a domain. Exactly one field should be provided.
    """
    domain: IdentifierInput!

    """Specifies the input fields used in the `domainUpdate` mutation."""
    input: DomainUpdateInput!
  ): DomainUpdatePayload!

  """translation missing: en.graphql.mutations.external_issue_create.self"""
  externalIssueCreate(
    """Specifies the input fields used to create an external issue."""
    input: ExternalIssueCreateInput!
  ): ExternalIssueCreatePayload!

  """Creates an external UUID for a resource (ex. Service)."""
  externalUuidCreate(
    """Specifies the input used for modifying a resource's external UUID."""
    input: ExternalUuidMutationInput!
  ): ExternalUuidMutationPayload!

  """Deletes a resource's external UUID."""
  externalUuidDelete(
    """Specifies the input used for modifying a resource's external UUID."""
    input: ExternalUuidMutationInput!
  ): ExternalUuidMutationPayload!

  """Creates a filter."""
  filterCreate(
    """Specifies the input fields used to create a filter."""
    input: FilterCreateInput!
  ): FilterCreatePayload!

  """Deletes a filter."""
  filterDelete(input: DeleteInput!): DeletePayload!

  """Updates a filter."""
  filterUpdate(
    """Specifies the input fields used to update a filter."""
    input: FilterUpdateInput!
  ): FilterUpdatePayload!

  """Find or create an external GitForge repository and OpsLevel repository"""
  gitForgesRepositoryFindOrCreate(input: GitForgesRepositoryFindOrCreateInput!): GitForgesRepositoryFindOrCreatePayload!

  """Create a group."""
  groupCreate(input: GroupInput!): GroupPayload!

  """Delete a group."""
  groupDelete(resource: IdentifierInput!): ResourceDeletePayload!

  """Update a group."""
  groupUpdate(group: IdentifierInput!, input: GroupInput!): GroupPayload!

  """
  Given a Backstage Entity, create or update the corresponding object in OpsLevel.
  """
  importEntityFromBackstage(entityRef: String!, entity: JSON!): ImportEntityFromBackstagePayload!

  """
  Update integration API or App keys. Supported integrations: Datadog and Opsgenie.
  """
  integrationCredentialUpdate(
    """
    Specifies the input fields used in the `integrationCredentialUpdate` mutation.
    """
    input: IntegrationCredentialUpdateInput!
  ): IntegrationCredentialUpdatePayload!

  """translation missing: en.graphql.mutations.integration_deauth.self"""
  integrationDeauth(
    """translation missing: en.graphql.types.integration_deauth_input.self"""
    input: IntegrationDeauthInput!
  ): IntegrationDeauthPayload!

  """
  Delete an installed integration. Currently supports only Git integrations.
  """
  integrationDelete(
    """Specifies the input fields used in the `deleteIntegration` mutation"""
    input: IntegrationDeleteInput!
  ): IntegrationDeletePayload!

  """Assign group to integration."""
  integrationGroupAssign(
    """
    Specifies the input fields used in the `integrationGroupAssign` mutation.
    """
    input: IntegrationGroupAssignInput!
  ): IntegrationGroupAssignPayload!

  """Trigger the synchronization of alert sources."""
  integrationSyncAlertSources(
    """
    Specifies the input fields used in the `integrationSyncAlertSources` mutation.
    """
    input: IntegrationSyncAlertSourcesInput!
  ): IntegrationSyncAlertSourcesPayload!

  """Trigger the synchronization of repositories."""
  integrationSyncRepos(
    """
    Specifies the input fields used in the `integrationSyncRepos` mutation.
    """
    input: IntegrationSyncReposInput!
  ): IntegrationSyncReposPayload!

  """Update an integration's attributes."""
  integrationUpdate(
    """Specifies the input fields used in the `integrationUpdate` mutation."""
    input: IntegrationUpdateInput!
  ): IntegrationUpdatePayload!

  """Validate an integrations credentials."""
  integrationValidateCredentials(
    """The type of integration credentials to validate."""
    type: IntegrationValidateCredentialsTypeEnum!

    """
    Options to validate an integration credentials. Differs by integration type.
    """
    options: JSON!
  ): IntegrationValidateCredentialsPayload!

  """Creates a level."""
  levelCreate(
    """
    Specifies the input fields used to create a level. The new level will be
    added as the highest level (greatest level index).
    """
    input: LevelCreateInput!
  ): LevelCreatePayload!

  """Deletes a level."""
  levelDelete(
    """Specifies the input fields used to delete a level."""
    input: LevelDeleteInput!
  ): LevelDeletePayload!

  """Updates a level."""
  levelUpdate(
    """Specifies the input fields used to update a level."""
    input: LevelUpdateInput!
  ): LevelUpdatePayload!

  """Updates repositories attributes in a bulk operation."""
  repositoriesUpdate(
    """The repositories to update."""
    repositories: [IdentifierInput!]!

    """The team that owns the repository."""
    owner: IdentifierInput

    """Indicates if the repository is visible."""
    visible: Boolean

    """Flag to update linked services along with the repository."""
    syncLinkedServices: Boolean
  ): RepositoriesUpdatePayload!

  """Updates repositories attributes in a bulk operation."""
  repositoryBulkUpdate(
    """Specifies the input fields used to bulk update repositories."""
    input: RepositoryBulkUpdateInput!

    """Flag to update linked services along with the repository."""
    syncLinkedServices: Boolean = false
  ): RepositoryBulkUpdatePayload!

  """Deletes a repository."""
  repositoryDelete(input: DeleteInput!): DeletePayload!

  """Updates a repository's attributes."""
  repositoryUpdate(
    """Specifies the input fields used to update a repository."""
    input: RepositoryUpdateInput!

    """Flag to update linked services along with the repository."""
    syncLinkedServices: Boolean = false
  ): RepositoryUpdatePayload!

  """Updates the status of a ResourceDocument."""
  resourceDocumentStatusUpdate(input: ResourceDocumentStatusUpdateInput!): ResourceDocumentStatusUpdatePayload!

  """Updates a rubric."""
  rubricUpdate(
    """Input to be used to update a rubric."""
    input: RubricUpdateInput!
  ): RubricUpdatePayload!

  """Appends a log chunk to a runnerJob's logs."""
  runnerAppendJobLog(
    """
    Specifies the input fields used to append a log chunk to a runnerJob's logs.
    """
    input: RunnerAppendJobLogInput!
  ): RunnerAppendJobLogPayload!

  """Assign a pending job to a runner."""
  runnerGetPendingJob(
    """The runner id."""
    runnerId: ID!

    """
    Token that represents the state of the queue the last time that particular
    runner had requested a job. This token is returned to the runner client
    every time it requests a pending job. Use of the token improves the response
    time when no changes to the job queue have happened.
    """
    lastUpdateToken: ID
  ): RunnerGetPendingJobPayload!

  """Register an OpsLevel Runner to consume jobs."""
  runnerRegister: RunnerRegisterPayload!

  """Updates a runnerJob outcome and status."""
  runnerReportJobOutcome(
    """Specifies the input fields used to report a runner job outcome."""
    input: RunnerReportJobOutcomeInput!
  ): RunnerReportJobOutcomePayload!

  """Stop an OpsLevel Runner from consuming jobs."""
  runnerUnregister(runnerId: ID!): RunnerUnregisterPayload!

  """Updates the API Docs settings for a service."""
  serviceApiDocSettingsUpdate(
    """The service whose API Doc settings will be updated."""
    service: IdentifierInput!

    """
    The path, relative to the service repository's base directory, from which to
    fetch the API document. If null, the API document is fetched from the path
    in the account's apiDocsDefaultPath field.
    """
    apiDocumentPath: String

    """
    The API document source (push or pull) used to determine the preferred API
    document. If null, we try the pushed doc and then the pulled doc (in that order).
    """
    preferredApiDocumentSource: ApiDocumentSourceEnum
  ): ServiceUpdatePayload!

  """Creates a service."""
  serviceCreate(
    """Specifies the input fields used in the `serviceCreate` mutation."""
    input: ServiceCreateInput!
  ): ServiceCreatePayload!

  """Deletes a service."""
  serviceDelete(
    """Specifies the input fields used in the `serviceDelete` mutation."""
    input: ServiceDeleteInput!
  ): ServiceDeletePayload!

  """Assigns service dependencies."""
  serviceDependenciesAssign(
    """
    Specifies the input fields used in the `serviceDependenciesAssign` mutation.
    """
    input: ServiceDependenciesAssignInput!
  ): ServiceDependenciesAssignPayload!

  """Deletes service dependencies."""
  serviceDependenciesDelete(
    """
    Specifies the input fields used in the `serviceDependenciesDelete` mutation.
    """
    input: ServiceDependenciesDeleteInput!
  ): ServiceDependenciesDeletePayload!

  """Create a dependency from one service to another."""
  serviceDependencyCreate(
    """Specifies the input fields used for creating a service dependency."""
    inputV2: ServiceDependencyCreateInput
  ): ServiceDependencyPayload!

  """Deletes a service dependency."""
  serviceDependencyDelete(input: DeleteInput!): DeletePayload!

  """
  translation missing: en.graphql.mutations.service_from_template_create.self
  """
  serviceFromTemplateCreate(
    """
    Inputs to specify details of template to use when creating a new service,
    and also metadata about the service being created.
    """
    input: ServiceFromTemplateCreateInput!
  ): ServiceFromTemplateCreatePayload!

  """Updates a service note."""
  serviceNoteUpdate(
    """Specifies the input fields used in the `serviceNoteUpdate` mutation."""
    input: ServiceNoteUpdateInput!
  ): ServiceNoteUpdatePayload!

  """Links a repository to a service."""
  serviceRepositoryCreate(
    """
    Specifies the input fields used in the `serviceRepositoryCreate` mutation.
    """
    input: ServiceRepositoryCreateInput!
  ): ServiceRepositoryCreatePayload!

  """Deletes a service repository."""
  serviceRepositoryDelete(input: DeleteInput!): DeletePayload!

  """Updates a service repository."""
  serviceRepositoryUpdate(
    """Specifies the input fields used to update a service repository."""
    input: ServiceRepositoryUpdateInput!
  ): ServiceRepositoryUpdatePayload!

  """Creates a service template from a provided URL."""
  serviceTemplateCreate(
    """
    Inputs to specify details of template to use when creating a new service.
    """
    input: ServiceTemplateCreateInput!
  ): ServiceTemplateCreatePayload!

  """Deletes a service template."""
  serviceTemplateDelete(input: DeleteInput!): DeletePayload!

  """Updates the specified service template."""
  serviceTemplateUpdate(
    """Inputs to specify new value to update a service template."""
    input: ServiceTemplateUpdateInput!
  ): ServiceTemplateUpdatePayload!

  """Parses the service template variables."""
  serviceTemplateVariablesParse(input: ServiceTemplateVariablesParseInput!): ServiceTemplateVariablesParsePayload!

  """Updates a service."""
  serviceUpdate(
    """Specifies the input fields used in the `serviceUpdate` mutation."""
    input: ServiceUpdateInput!
  ): ServiceUpdatePayload!

  """Bulk delete services."""
  servicesDelete(
    """The services to delete."""
    services: [IdentifierInput!]!
  ): ServicesDeletePayload!

  """Creates the webhook signing secret for the current account."""
  signingSecretCreate: SigningSecretCreatePayload!

  """Deletes the webhook signing secret for the current account."""
  signingSecretDelete: SigningSecretDeletePayload!

  """Unsubscribe from receiving a notification via a notification channel."""
  subscriptionChannelDelete(input: DeleteInput!): DeletePayload!

  """Subscribe to receive a notification via a notification channel."""
  subscriptionCreate(
    """Specifies the input fields used in the `subscriptionCreate` mutation."""
    input: SubscriptionCreateInput!
  ): SubscriptionCreatePayload!

  """Creates services and attaches aliases based on suggested actions."""
  suggestionAction(
    """Input for actioning suggestions."""
    input: SuggestionActionInput!
  ): SuggestionsActionPayload!

  """Updates a suggestion's attributes."""
  suggestionUpdate(
    """Specifies the input fields used to update a suggestion."""
    input: SuggestionUpdateInput!
  ): SuggestionUpdatePayload!

  """Assign Services as children of a System."""
  systemChildAssign(system: IdentifierInput!, childServices: [IdentifierInput!]!): SystemChildAssignPayload!

  """Disconnect Services from their parent System."""
  systemChildRemove(system: IdentifierInput!, childServices: [IdentifierInput!]!): SystemChildRemovePayload!

  """Creates a system."""
  systemCreate(
    """Specifies the input fields used in the `systemCreate` mutation."""
    input: SystemCreateInput!
  ): SystemCreatePayload!

  """Deletes a system."""
  systemDelete(resource: IdentifierInput!): ResourceDeletePayload!

  """Updates a system."""
  systemUpdate(
    """
    Specifies the input fields used to identify a system. Exactly one field should be provided.
    """
    system: IdentifierInput!

    """Specifies the input fields used in the `systemUpdate` mutation."""
    input: SystemUpdateInput!
  ): SystemUpdatePayload!

  """
  Creates new tags on a resource, replacing any existing keys specified in the payload.
  """
  tagAssign(
    """Specifies the input fields used to assign tags."""
    input: TagAssignInput!
  ): TagAssignPayload!

  """Creates a tag."""
  tagCreate(
    """Specifies the input fields used to create a tag."""
    input: TagCreateInput!
  ): TagCreatePayload!

  """Deletes a tag."""
  tagDelete(
    """Specifies the input fields used to delete a tag."""
    input: TagDeleteInput!
  ): TagDeletePayload!

  """Updates a tag's attributes."""
  tagUpdate(
    """Specifies the input fields used to update a tag."""
    input: TagUpdateInput!
  ): TagUpdatePayload!

  """Creates a new team."""
  teamCreate(
    """Specifies the input fields used to create a team."""
    input: TeamCreateInput!
  ): TeamCreatePayload!

  """Deletes a team."""
  teamDelete(
    """Specifies the input fields used to delete a team."""
    input: TeamDeleteInput!
  ): TeamDeletePayload!

  """Add members to a team"""
  teamMembershipCreate(
    """Input for adding members to a team"""
    input: TeamMembershipCreateInput!
  ): TeamMembershipCreatePayload!

  """Remove members from a team"""
  teamMembershipDelete(
    """Input for removing members from a team"""
    input: TeamMembershipDeleteInput!
  ): TeamMembershipDeletePayload!

  """Updates a team's attributes."""
  teamUpdate(
    """Specifies the input fields used to update a team."""
    input: TeamUpdateInput!
  ): TeamUpdatePayload!

  """Creates a new tool attached to a service."""
  toolCreate(
    """Specifies the input fields used to create a tool."""
    input: ToolCreateInput!
  ): ToolCreatePayload!

  """Deletes a tool."""
  toolDelete(
    """Specifies the input fields used to delete a tool."""
    input: ToolDeleteInput!
  ): ToolDeletePayload!

  """Updates a tool's attributes."""
  toolUpdate(
    """Specifies the input fields used to update a tool."""
    input: ToolUpdateInput!
  ): ToolUpdatePayload!

  """Delete a user."""
  userDelete(
    """The email address or ID of the user to delete."""
    user: UserIdentifierInput!
  ): UserDeletePayload!

  """Invite a new user to the account."""
  userInvite(
    """The email address of the user to invite."""
    email: String!
    input: UserInput!
  ): UserPayload!

  """Update a user."""
  userUpdate(
    """The email address or ID of the user to update."""
    user: UserIdentifierInput!
    input: UserInput!
  ): UserPayload!
}

"""A notification that can be sent to users on this account."""
type Notification {
  """Channels the notification can be sent through."""
  availableChannels: [NotificationChannelTypeEnum!]!

  """What the notification is for."""
  description: String!

  """The ID of the notification."""
  id: ID!

  """The name of the notification."""
  name: String!

  """The type of the notification."""
  type: String!
}

"""Possible notification channels."""
enum NotificationChannelTypeEnum {
  """Send the notification through email."""
  email

  """Send the notification through slack."""
  slack
}

"""The connection type for Notification."""
type NotificationConnection {
  """A list of edges."""
  edges: [NotificationEdge]

  """A list of nodes."""
  nodes: [Notification]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!
}

"""An edge in a connection."""
type NotificationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Notification
}

type OctopusDeployIntegration implements Integration {
  """The id of the group."""
  accountKey: String!

  """The path of the group."""
  accountName: String

  """The web url of the group."""
  accountUrl: String

  """Indicates whether or not the integration is currently active."""
  active: Boolean!

  """The publicly routable URL where the integration can be accessed."""
  baseUrl: String

  """Labels which relate this integration to similar integrations."""
  categories: [IntegrationCategory!]

  """The parameters used by the UI to display and configure integrations."""
  config: IntegrationConfig

  """The time this integration was created."""
  createdAt: ISO8601DateTime!

  """The display name of the integration."""
  displayName: String

  """The relative url to where the integration can be accessed."""
  href: String!

  """
  A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
  """
  htmlUrl: String!

  """The unique identifier for the integration."""
  id: ID!

  """
  The time that this integration was successfully installed, if null, this
  indicates the integration was not completed installed.
  """
  installedAt: ISO8601DateTime

  """
  The time this integration was invalidated, either from OpsLevel or via the external API.
  """
  invalidatedAt: ISO8601DateTime

  """The time an event payload was provided for this integration."""
  lastEventReceived: ISO8601DateTime

  """The name of the integration."""
  name: String!

  """The notification channel."""
  notificationChannel: String

  """
  Indicates whether OpsLevel will create service suggestions by analyzing the integration's repositories.
  """
  serviceDiscoveryEnabled: Boolean

  """
  Indicates if OpsLevel will manage Datadog monitor webhooks automatically. When
  set to false, you will be required to manually add the OpsLevel webhook to
  your Datadog monitor notification message.
  """
  setWebhooksOnMonitors: Boolean

  """
  The abbreviated or shorthand name for this integration, if any. Otherwise returns display name.
  """
  shortName: String

  """This integration was not installed within the installation window."""
  stale: Boolean!

  """If this integration is initializing and is not fully ready for use"""
  stillLoading: Boolean!

  """The type of the integration."""
  type: String!

  """Indicates if this integration is being uninstalled from OpsLevel."""
  uninstallInProgress: Boolean!

  """
  False when the integration has been unauthorized or removed by the remote system.
  """
  valid: Boolean!

  """The version of the integration that is installed."""
  version: String

  """The endpoint to send events via webhook (if applicable)."""
  webhookUrl: String
}

"""An on call record for a given source"""
type OnCall {
  """Email of the user on call"""
  externalEmail: String!

  """A link to a user's gravatar image"""
  gravatarHref: String

  """The ID of the on call."""
  id: ID!

  """Name of the user on call"""
  name: String!

  """The associated OpsLevel user record"""
  user: User

  """
  A link to the HTML page for the user resource. Ex. https://app.opslevel.com/users/1
  """
  userHref: String
}

"""The connection type for OnCall."""
type OnCallConnection {
  """A list of edges."""
  edges: [OnCallEdge]

  """A list of nodes."""
  nodes: [OnCall]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!
}

"""An edge in a connection."""
type OnCallEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: OnCall
}

"""Sort possibilities for on calls."""
enum OnCallSortEnum {
  """Sort by `name` ascending."""
  name_ASC

  """Sort by `name` descending."""
  name_DESC

  """Sort by `external_email` ascending."""
  external_email_ASC

  """Sort by `external_email` descending."""
  external_email_DESC
}

type OnPremGitlabIntegration implements Integration {
  """The id of the group."""
  accountKey: String!

  """The path of the group."""
  accountName: String

  """The web url of the group."""
  accountUrl: String

  """Indicates whether or not the integration is currently active."""
  active: Boolean!

  """The publicly routable URL where the integration can be accessed."""
  baseUrl: String

  """The on-prem GitLab integration's supported capabilities"""
  capabilities: [GitForgeCapabilitiesTypeEnum!]!

  """Labels which relate this integration to similar integrations."""
  categories: [IntegrationCategory!]

  """The parameters used by the UI to display and configure integrations."""
  config: IntegrationConfig

  """The time this integration was created."""
  createdAt: ISO8601DateTime!

  """The display name of the integration."""
  displayName: String

  """The relative url to where the integration can be accessed."""
  href: String!

  """
  A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
  """
  htmlUrl: String!

  """The unique identifier for the integration."""
  id: ID!

  """
  The time that this integration was successfully installed, if null, this
  indicates the integration was not completed installed.
  """
  installedAt: ISO8601DateTime

  """
  The time this integration was invalidated, either from OpsLevel or via the external API.
  """
  invalidatedAt: ISO8601DateTime

  """The time an event payload was provided for this integration."""
  lastEventReceived: ISO8601DateTime

  """The name of the integration."""
  name: String!

  """The notification channel."""
  notificationChannel: String

  """
  The repository names that have insufficient permissions for OpsLevel to access them
  """
  remoteReposWithoutProperAccessLevel: [String!]!

  """
  Indicates whether OpsLevel will create service suggestions by analyzing the integration's repositories.
  """
  serviceDiscoveryEnabled: Boolean

  """
  Indicates if OpsLevel will manage Datadog monitor webhooks automatically. When
  set to false, you will be required to manually add the OpsLevel webhook to
  your Datadog monitor notification message.
  """
  setWebhooksOnMonitors: Boolean

  """
  The abbreviated or shorthand name for this integration, if any. Otherwise returns display name.
  """
  shortName: String

  """This integration was not installed within the installation window."""
  stale: Boolean!

  """If this integration is initializing and is not fully ready for use"""
  stillLoading: Boolean!

  """The type of the integration."""
  type: String!

  """Indicates if this integration is being uninstalled from OpsLevel."""
  uninstallInProgress: Boolean!

  """
  False when the integration has been unauthorized or removed by the remote system.
  """
  valid: Boolean!

  """The version of the integration that is installed."""
  version: String

  """The endpoint to send events via webhook (if applicable)."""
  webhookUrl: String
}

type OpsgenieIntegration implements Integration {
  """The id of the group."""
  accountKey: String!

  """The path of the group."""
  accountName: String

  """The web url of the group."""
  accountUrl: String

  """Indicates whether or not the integration is currently active."""
  active: Boolean!

  """The publicly routable URL where the integration can be accessed."""
  baseUrl: String

  """Labels which relate this integration to similar integrations."""
  categories: [IntegrationCategory!]

  """The parameters used by the UI to display and configure integrations."""
  config: IntegrationConfig

  """The time this integration was created."""
  createdAt: ISO8601DateTime!

  """The display name of the integration."""
  displayName: String

  """The relative url to where the integration can be accessed."""
  href: String!

  """
  A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
  """
  htmlUrl: String!

  """The unique identifier for the integration."""
  id: ID!

  """
  The time that this integration was successfully installed, if null, this
  indicates the integration was not completed installed.
  """
  installedAt: ISO8601DateTime

  """
  The time this integration was invalidated, either from OpsLevel or via the external API.
  """
  invalidatedAt: ISO8601DateTime

  """The time an event payload was provided for this integration."""
  lastEventReceived: ISO8601DateTime

  """The name of the integration."""
  name: String!

  """The notification channel."""
  notificationChannel: String

  """
  Indicates whether OpsLevel will create service suggestions by analyzing the integration's repositories.
  """
  serviceDiscoveryEnabled: Boolean

  """
  Indicates if OpsLevel will manage Datadog monitor webhooks automatically. When
  set to false, you will be required to manually add the OpsLevel webhook to
  your Datadog monitor notification message.
  """
  setWebhooksOnMonitors: Boolean

  """
  The abbreviated or shorthand name for this integration, if any. Otherwise returns display name.
  """
  shortName: String

  """This integration was not installed within the installation window."""
  stale: Boolean!

  """If this integration is initializing and is not fully ready for use"""
  stillLoading: Boolean!

  """The type of the integration."""
  type: String!

  """Indicates if this integration is being uninstalled from OpsLevel."""
  uninstallInProgress: Boolean!

  """
  False when the integration has been unauthorized or removed by the remote system.
  """
  valid: Boolean!

  """The version of the integration that is installed."""
  version: String

  """The endpoint to send events via webhook (if applicable)."""
  webhookUrl: String
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type PagerdutyIntegration implements Integration {
  """The id of the group."""
  accountKey: String!

  """The path of the group."""
  accountName: String

  """The web url of the group."""
  accountUrl: String

  """Indicates whether or not the integration is currently active."""
  active: Boolean!

  """The publicly routable URL where the integration can be accessed."""
  baseUrl: String

  """Labels which relate this integration to similar integrations."""
  categories: [IntegrationCategory!]

  """The parameters used by the UI to display and configure integrations."""
  config: IntegrationConfig

  """The time this integration was created."""
  createdAt: ISO8601DateTime!

  """The display name of the integration."""
  displayName: String

  """The relative url to where the integration can be accessed."""
  href: String!

  """
  A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
  """
  htmlUrl: String!

  """The unique identifier for the integration."""
  id: ID!

  """
  The time that this integration was successfully installed, if null, this
  indicates the integration was not completed installed.
  """
  installedAt: ISO8601DateTime

  """
  The time this integration was invalidated, either from OpsLevel or via the external API.
  """
  invalidatedAt: ISO8601DateTime

  """The time an event payload was provided for this integration."""
  lastEventReceived: ISO8601DateTime

  """The name of the integration."""
  name: String!

  """The notification channel."""
  notificationChannel: String

  """
  Indicates whether OpsLevel will create service suggestions by analyzing the integration's repositories.
  """
  serviceDiscoveryEnabled: Boolean

  """
  Indicates if OpsLevel will manage Datadog monitor webhooks automatically. When
  set to false, you will be required to manually add the OpsLevel webhook to
  your Datadog monitor notification message.
  """
  setWebhooksOnMonitors: Boolean

  """
  The abbreviated or shorthand name for this integration, if any. Otherwise returns display name.
  """
  shortName: String

  """This integration was not installed within the installation window."""
  stale: Boolean!

  """If this integration is initializing and is not fully ready for use"""
  stillLoading: Boolean!

  """The type of the integration."""
  type: String!

  """Indicates if this integration is being uninstalled from OpsLevel."""
  uninstallInProgress: Boolean!

  """
  False when the integration has been unauthorized or removed by the remote system.
  """
  valid: Boolean!

  """The version of the integration that is installed."""
  version: String

  """The endpoint to send events via webhook (if applicable)."""
  webhookUrl: String
}

type Payload {
  """The time at which the payload was created."""
  createdAt: ISO8601DateTime!

  """The payload body that was sent."""
  data: JSON

  """The id of the payload."""
  id: ID!

  """The integration that the payload was sent to."""
  integration: Integration!

  """
  The time at which the payload was processed as part of check evaluation.
  """
  processedAt: ISO8601DateTime

  """The query params sent with the payload."""
  queryParams: String!

  """The time at which the payload was updated."""
  updatedAt: ISO8601DateTime!
}

type PayloadCheck implements Check {
  """Additional arguments required by some check types."""
  args: JSON

  """The campaign the check belongs to."""
  campaign: Campaign

  """The category that the check belongs to."""
  category: Category

  """The levels the check belongs to."""
  checkLevels: [CheckLevel!]

  """Description of the check type's purpose."""
  description: String!

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """If the check is enabled or not."""
  enabled: Boolean!

  """The filter that the check belongs to."""
  filter: Filter

  """Information needed to fix the check."""
  fix: JSON

  """The id of the check."""
  id: ID!

  """The integration this check uses."""
  integration: Integration @deprecated(reason: "Integration is now deprecated. Please use `integration` under the `CustomEventCheck` fragment instead.")

  """
  A jq expression that will be ran against your payload to evaluate the check
  result. A truthy value will result in the check passing.
  """
  jqExpression: String!

  """The level that the check belongs to."""
  level: Level

  """The display name of the check."""
  name: String!

  """Additional information about the check."""
  notes: String

  """The owner of the check."""
  owner: CheckOwner

  """The raw unsanitized additional information about the check."""
  rawNotes: String

  """The URL path for the check report."""
  reportHref: String!

  """The check result message template."""
  resultMessage: String

  """Summary of stats for services associated to this check."""
  stats: Stats

  """The type of check."""
  type: CheckType!

  """The url to the check."""
  url: String!
}

"""The connection type for Payload."""
type PayloadConnection {
  """A list of edges."""
  edges: [PayloadEdge]

  """A list of nodes."""
  nodes: [Payload]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!
}

"""An edge in a connection."""
type PayloadEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Payload
}

"""Fields that can be used as part of filters for payloads."""
enum PayloadFilterEnum {
  """
  Filter by `integration` field. Note that this is an internal id, ex. "123".
  """
  integration_id
}

"""Input to be used to filter types."""
input PayloadFilterInput {
  """Field to be filtered."""
  key: PayloadFilterEnum!

  """Value to be filtered."""
  arg: String

  """Type of operation to be applied to value on the field."""
  type: BasicTypeEnum = equals
}

type PayloadIntegration implements Integration {
  """The id of the group."""
  accountKey: String!

  """The path of the group."""
  accountName: String

  """The web url of the group."""
  accountUrl: String

  """Indicates whether or not the integration is currently active."""
  active: Boolean!

  """The publicly routable URL where the integration can be accessed."""
  baseUrl: String

  """Labels which relate this integration to similar integrations."""
  categories: [IntegrationCategory!]

  """The parameters used by the UI to display and configure integrations."""
  config: IntegrationConfig

  """The time this integration was created."""
  createdAt: ISO8601DateTime!

  """The display name of the integration."""
  displayName: String

  """The relative url to where the integration can be accessed."""
  href: String!

  """
  A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
  """
  htmlUrl: String!

  """The unique identifier for the integration."""
  id: ID!

  """
  The time that this integration was successfully installed, if null, this
  indicates the integration was not completed installed.
  """
  installedAt: ISO8601DateTime

  """
  The time this integration was invalidated, either from OpsLevel or via the external API.
  """
  invalidatedAt: ISO8601DateTime

  """The time an event payload was provided for this integration."""
  lastEventReceived: ISO8601DateTime

  """The name of the integration."""
  name: String!

  """The notification channel."""
  notificationChannel: String

  """
  Indicates whether OpsLevel will create service suggestions by analyzing the integration's repositories.
  """
  serviceDiscoveryEnabled: Boolean

  """
  Indicates if OpsLevel will manage Datadog monitor webhooks automatically. When
  set to false, you will be required to manually add the OpsLevel webhook to
  your Datadog monitor notification message.
  """
  setWebhooksOnMonitors: Boolean

  """
  The abbreviated or shorthand name for this integration, if any. Otherwise returns display name.
  """
  shortName: String

  """This integration was not installed within the installation window."""
  stale: Boolean!

  """If this integration is initializing and is not fully ready for use"""
  stillLoading: Boolean!

  """The type of the integration."""
  type: String!

  """Indicates if this integration is being uninstalled from OpsLevel."""
  uninstallInProgress: Boolean!

  """
  False when the integration has been unauthorized or removed by the remote system.
  """
  valid: Boolean!

  """The version of the integration that is installed."""
  version: String

  """The endpoint to send events via webhook (if applicable)."""
  webhookUrl: String
}

"""Sort possibilities for payloads."""
enum PayloadSortEnum {
  """Order by `created_at` ascending"""
  created_at_ASC

  """Order by `created_at` descending"""
  created_at_DESC

  """Order by `processed_at` ascending"""
  processed_at_ASC

  """Order by `processed_at` descending"""
  processed_at_DESC
}

"""A condition used to select services."""
type Predicate {
  """Type of operation to be used in the condition."""
  type: PredicateTypeEnum!

  """The value of the condition."""
  value: String
}

"""A condition that should be satisfied."""
input PredicateInput {
  """The condition type used by the predicate."""
  type: PredicateTypeEnum!

  """The condition value used by the predicate."""
  value: String
}

"""Fields that can be used as part of filter for services."""
enum PredicateKeyEnum {
  """Filter by `tier` field"""
  tier_index

  """Filter by `lifecycle` field"""
  lifecycle_index

  """Filter by `language` field"""
  language

  """Filter by `framework` field"""
  framework

  """Filter by `product` field"""
  product

  """Filter by `name` field"""
  name

  """Filter by `tags` field."""
  tags

  """Filter by `owner` field"""
  owner_id

  """
  Filter by group hierarchy. Will return resources who's owner is in the group ancestry chain.
  """
  group_ids

  """Filter by the creation source."""
  creation_source
}

"""Operations that can be used on predicates."""
enum PredicateTypeEnum {
  """Contains a specific value."""
  contains

  """Does not contain a specific value."""
  does_not_contain

  """Does not equal a specific value."""
  does_not_equal

  """Specific attribute does not exist."""
  does_not_exist

  """Ends with a specific value."""
  ends_with

  """Equals a specific value."""
  equals

  """Specific attribute exists."""
  exists

  """Greater than or equal to a specific value (numeric only)."""
  greater_than_or_equal_to

  """Less than or equal to a specific value (numeric only)."""
  less_than_or_equal_to

  """Starts with a specific value."""
  starts_with

  """Satisfies version constraint (tag value only)."""
  satisfies_version_constraint

  """Matches a value using a regular expression."""
  matches_regex

  """Belongs to a group's hierarchy."""
  belongs_to

  """Satisfies an expression defined in jq."""
  satisfies_jq_expression
}

"""A condition that should be satisfied."""
input PredicateUpdateInput {
  """The condition type used by the predicate."""
  type: PredicateTypeEnum

  """The condition value used by the predicate."""
  value: String
}

enum ProvisionedByEnum {
  integration_scim
  api_cli
  api_terraform
  api_other
  sso_okta
  sso_other
  user
  unknown
}

"""The schema's entry-point for queries."""
type Query {
  """Get information about the current account."""
  account: Account!

  """OpsLevel's public IP addresses."""
  publicIpAddresses: [String!]!
}

"""Return type for the `repositoriesUpdate` mutation."""
type RepositoriesUpdatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """
  The repository objects that were not updated along with the error that happened when attempting to update the repository.
  """
  notUpdatedRepositories: [RepositoryOperationErrorPayload!]

  """The identifiers of the updated repositories."""
  updatedRepositories: [Repository!]
}

"""A repository contains code that pertains to a service."""
type Repository {
  """Indicates if the repository is active."""
  active: Boolean

  """The date the repository was archived."""
  archivedAt: ISO8601DateTime

  """List of errors that occurred while syncing an opslevel.yml file."""
  configErrors: [ConfigError!]!

  """The date the repository was created."""
  createdOn: ISO8601DateTime

  """The default human-friendly identifier assigned to the repository."""
  defaultAlias: String

  """The default branch from the repository's settings."""
  defaultBranch: String

  """
  A url to the opslevel.defaults.yml file on the GitForge, assuming it's at the root.
  """
  defaultsConfigUrl: String!

  """The tier that has been manually set for this repository."""
  definedTier: Tier

  """A brief description of the repository."""
  description: String

  """The display name in the format (organization/repo-name)."""
  displayName: String!

  """Indicates if the repository is forked."""
  forked: Boolean

  """
  Does the tier of the repository match the required tier as determined by the highest service tier?
  """
  hasCorrectTier: Boolean!

  """The tier of the most critical service that this repository supports."""
  highestServiceTier: Tier

  """The relative path for this. Ex. /services/shopping_cart"""
  href: String!

  """
  A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
  """
  htmlUrl: String!

  """The unique identifier for the repository."""
  id: ID!

  """A list of languages used in the repository."""
  languages: [Language!]!

  """The date and time of the most recent ownership change."""
  lastOwnerChangedAt: ISO8601DateTime

  """Indicates if the repository is locked by an opslevel.yml."""
  locked: Boolean!

  """The name of the repository."""
  name: String!

  """The organization to which the repository belongs to."""
  organization: String

  """The team that owns the repository."""
  owner: Team

  """
  The human-friendly identifier for the owning team (whether such a team exists or not).
  """
  ownerAlias: String

  """Indicates if the repository is private."""
  private: Boolean @deprecated(reason: "Use visibility field instead.")

  """The repository's unique key from its management platform."""
  repoKey: String!

  """
  A url to the opslevel.yml file on the GitForge, assuming it's at the root.
  """
  rootConfigUrl: String!

  """A list of services that are linked to the repository."""
  services(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): RepositoryServiceConnection

  """A list of tags applied to the repository."""
  tags(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): TagRepositoryConnection

  """The software tier that the repository belongs to."""
  tier: Tier

  """The management platform of the repository."""
  type: String!

  """The URL of the repository."""
  url: String

  """The level of visibility of the repository."""
  visibility: RepositoryVisibilityEnum

  """Indicates if the repository is visible."""
  visible: Boolean
}

"""Specifies the input fields used to bulk update repositories."""
input RepositoryBulkUpdateInput {
  """List of ids of the repository to be updated."""
  ids: [ID!]!

  """The team that owns the repository."""
  ownerId: ID

  """Indicates if the repository is visible."""
  visible: Boolean
}

"""The return type of a `repositoryBulkUpdate` mutation."""
type RepositoryBulkUpdatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The list of repository object that could not be updated."""
  notUpdated(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): RepositoryConnection

  """The number of unsuccessful operations."""
  notUpdatedCount: Int

  """The number of successful operations."""
  successfulCount: Int

  """List of ids of successful objects."""
  successfulIds: [ID!]
}

"""The connection type for Repository."""
type RepositoryConnection {
  """A list of edges."""
  edges: [RepositoryEdge]

  """The number of hidden repositories."""
  hiddenCount: Int!

  """The number of different git integrations."""
  integrationCount: Int!

  """A list of nodes."""
  nodes: [Repository]

  """The number of different git integrations."""
  organizationCount: Int! @deprecated(reason: "Replaced by integration_count")

  """The number of owned repositories that are visible."""
  ownedCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!

  """The number of visible repositories."""
  visibleCount: Int!
}

"""An edge in a connection."""
type RepositoryEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Repository
}

type RepositoryFileCheck implements Check {
  """Additional arguments required by some check types."""
  args: JSON

  """The campaign the check belongs to."""
  campaign: Campaign

  """The category that the check belongs to."""
  category: Category

  """The levels the check belongs to."""
  checkLevels: [CheckLevel!]

  """Description of the check type's purpose."""
  description: String!

  """
  Whether the check looks for the existence of a directory instead of a file.
  """
  directorySearch: Boolean

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """If the check is enabled or not."""
  enabled: Boolean!

  """Condition to match the file content."""
  fileContentsPredicate: Predicate

  """Restrict the search to certain file paths."""
  filePaths: [String!]!

  """The filter that the check belongs to."""
  filter: Filter

  """Information needed to fix the check."""
  fix: JSON

  """The id of the check."""
  id: ID!

  """The integration this check uses."""
  integration: Integration @deprecated(reason: "Integration is now deprecated. Please use `integration` under the `CustomEventCheck` fragment instead.")

  """The level that the check belongs to."""
  level: Level

  """The display name of the check."""
  name: String!

  """Additional information about the check."""
  notes: String

  """The owner of the check."""
  owner: CheckOwner

  """The raw unsanitized additional information about the check."""
  rawNotes: String

  """The URL path for the check report."""
  reportHref: String!

  """Summary of stats for services associated to this check."""
  stats: Stats

  """The type of check."""
  type: CheckType!

  """The url to the check."""
  url: String!

  """
  Whether the checks looks at the absolute root of a repo or the relative root
  (the directory specified when attached a repo to a service).
  """
  useAbsoluteRoot: Boolean
}

"""Fields that can be used as part of filter for repositories."""
enum RepositoryFilterEnum {
  """Filter by `owner` field."""
  owner

  """Filter by repository visibility."""
  visible

  """Filter by the integration."""
  integration
}

"""Input to be used to filter types."""
input RepositoryFilterInput {
  """Field to be filtered."""
  key: RepositoryFilterEnum!

  """Value to be filtered."""
  arg: String

  """Type of operation to be applied to value on the field."""
  type: BasicTypeEnum = equals
}

type RepositoryGrepCheck implements Check {
  """Additional arguments required by some check types."""
  args: JSON

  """The campaign the check belongs to."""
  campaign: Campaign

  """The category that the check belongs to."""
  category: Category

  """The levels the check belongs to."""
  checkLevels: [CheckLevel!]

  """Description of the check type's purpose."""
  description: String!

  """
  Whether the check looks for the existence of a directory instead of a file.
  """
  directorySearch: Boolean!

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """If the check is enabled or not."""
  enabled: Boolean!

  """Condition to match the file content."""
  fileContentsPredicate: Predicate!

  """Restrict the search to certain file paths."""
  filePaths: [String!]!

  """The filter that the check belongs to."""
  filter: Filter

  """Information needed to fix the check."""
  fix: JSON

  """The id of the check."""
  id: ID!

  """The integration this check uses."""
  integration: Integration @deprecated(reason: "Integration is now deprecated. Please use `integration` under the `CustomEventCheck` fragment instead.")

  """The level that the check belongs to."""
  level: Level

  """The display name of the check."""
  name: String!

  """Additional information about the check."""
  notes: String

  """The owner of the check."""
  owner: CheckOwner

  """The raw unsanitized additional information about the check."""
  rawNotes: String

  """The URL path for the check report."""
  reportHref: String!

  """Summary of stats for services associated to this check."""
  stats: Stats

  """The type of check."""
  type: CheckType!

  """The url to the check."""
  url: String!
}

type RepositoryIntegratedCheck implements Check {
  """Additional arguments required by some check types."""
  args: JSON

  """The campaign the check belongs to."""
  campaign: Campaign

  """The category that the check belongs to."""
  category: Category

  """The levels the check belongs to."""
  checkLevels: [CheckLevel!]

  """Description of the check type's purpose."""
  description: String!

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """If the check is enabled or not."""
  enabled: Boolean!

  """The filter that the check belongs to."""
  filter: Filter

  """Information needed to fix the check."""
  fix: JSON

  """The id of the check."""
  id: ID!

  """The integration this check uses."""
  integration: Integration @deprecated(reason: "Integration is now deprecated. Please use `integration` under the `CustomEventCheck` fragment instead.")

  """The level that the check belongs to."""
  level: Level

  """The display name of the check."""
  name: String!

  """Additional information about the check."""
  notes: String

  """The owner of the check."""
  owner: CheckOwner

  """The raw unsanitized additional information about the check."""
  rawNotes: String

  """The URL path for the check report."""
  reportHref: String!

  """Summary of stats for services associated to this check."""
  stats: Stats

  """The type of check."""
  type: CheckType!

  """The url to the check."""
  url: String!
}

"""
Specifies the repository and error after attempting and failing to perform a CRUD operation on a repository.
"""
type RepositoryOperationErrorPayload {
  """The error message after an operation was attempted."""
  error: String

  """The repository on which an operation was attempted."""
  repository: Repository!
}

"""The repository path used for this service."""
type RepositoryPath {
  """
  The deep link to the repository path where the linked service's code exists.
  """
  href: String!

  """
  The path where the linked service's code exists, relative to the root of the repository.
  """
  path: String!
}

type RepositorySearchCheck implements Check {
  """Additional arguments required by some check types."""
  args: JSON

  """The campaign the check belongs to."""
  campaign: Campaign

  """The category that the check belongs to."""
  category: Category

  """The levels the check belongs to."""
  checkLevels: [CheckLevel!]

  """Description of the check type's purpose."""
  description: String!

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """If the check is enabled or not."""
  enabled: Boolean!

  """Condition to match the text content."""
  fileContentsPredicate: Predicate!

  """Restrict the search to files of given extensions."""
  fileExtensions: [String!]

  """The filter that the check belongs to."""
  filter: Filter

  """Information needed to fix the check."""
  fix: JSON

  """The id of the check."""
  id: ID!

  """The integration this check uses."""
  integration: Integration @deprecated(reason: "Integration is now deprecated. Please use `integration` under the `CustomEventCheck` fragment instead.")

  """The level that the check belongs to."""
  level: Level

  """The display name of the check."""
  name: String!

  """Additional information about the check."""
  notes: String

  """The owner of the check."""
  owner: CheckOwner

  """The raw unsanitized additional information about the check."""
  rawNotes: String

  """The URL path for the check report."""
  reportHref: String!

  """Summary of stats for services associated to this check."""
  stats: Stats

  """The type of check."""
  type: CheckType!

  """The url to the check."""
  url: String!
}

"""The results of searching a repository."""
type RepositorySearchResult {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The first file matching the search."""
  firstMatchPath: String

  """
  Whether or not the predicate was true (ie: does_not_contain + no search results = passed: true).
  """
  passed: Boolean
}

"""The connection type for Service."""
type RepositoryServiceConnection {
  """A list of edges."""
  edges: [RepositoryServiceEdge]

  """The paths where opslevel.ymls can be found for locked services."""
  lockedRepoPaths: [RepositoryPath!]

  """A list of nodes."""
  nodes: [Service]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!
}

"""An edge in a connection."""
type RepositoryServiceEdge {
  """If any of the paths mapped to this service is a root path."""
  atRoot: Boolean!

  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Service

  """The repository paths used for this service."""
  paths: [RepositoryPath!]!

  """
  A list of service repositories that link the repository and this service.
  """
  serviceRepositories: [ServiceRepository!]!
}

"""Sort possibilities for repositories."""
enum RepositorySortEnum {
  """Sort by `name` ascending."""
  name_ASC

  """Sort by `name` descending."""
  name_DESC

  """Sort by `owner` ascending."""
  owner_ASC

  """Sort by `owner` descending."""
  owner_DESC

  """Sort by `createdOn` ascending."""
  created_on_ASC

  """Sort by `createdOn` descending."""
  created_on_DESC

  """Sort by `organization` ascending."""
  organization_ASC

  """Sort by `organization` descending."""
  organization_DESC
}

"""Specifies the input fields used to update a repository."""
input RepositoryUpdateInput {
  """The id of the repository to be updated."""
  id: ID!

  """Indicates if the repository is visible."""
  visible: Boolean

  """The team that owns the repository."""
  ownerId: ID

  """The index of software tier that the repository belongs to."""
  tierIndex: Int
}

"""The return type of a `repositoryUpdate` mutation."""
type RepositoryUpdatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """A repository contains code that pertains to a service."""
  repository: Repository
}

"""Possible visibility levels for repositories."""
enum RepositoryVisibilityEnum {
  """Repositories that are private to the user."""
  PRIVATE

  """Repositories that are only accessible to organization users."""
  INTERNAL

  """Repositories that are publically accessible."""
  PUBLIC
}

"""The return type of the delete mutation."""
type ResourceDeletePayload {
  """The alias of the deleted resource."""
  deletedAlias: String

  """The id of the deleted resource."""
  deletedId: ID

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""The connection type for ResourceDocumentSource."""
type ResourceDocumentConnection {
  """A list of edges."""
  edges: [ResourceDocumentEdge]

  """A list of nodes."""
  nodes: [ResourceDocumentSource]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!
}

"""An edge in a connection."""
type ResourceDocumentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ResourceDocumentSource
  status: ResourceDocumentStatusTypeEnum
}

"""The source of a document."""
union ResourceDocumentSource = Service

"""Status of a document on a resource."""
enum ResourceDocumentStatusTypeEnum {
  """Document is pinned"""
  pinned

  """Document is visible"""
  visible

  """Document is hidden"""
  hidden
}

"""
Specifies the input fields used in the `resourceDocumentStatusUpdate` mutation.
"""
input ResourceDocumentStatusUpdateInput {
  """
  The resourece (currently on service) identifier for the resource portion of the ResourceDocument.
  """
  resource: IdentifierInput!

  """The document id of the document portion of the ResourceDocument"""
  documentId: ID!

  """The status to update for the ResourceDocument."""
  status: ResourceDocumentStatusTypeEnum!
}

"""Return type for the `resourceDocumentStatusUpdate` mutation."""
type ResourceDocumentStatusUpdatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The updated status of a ResourceDocument."""
  updatedStatus: ResourceDocumentStatusTypeEnum
}

"""
Rubrics allow you to score your services against different categories and levels.
"""
type Rubric {
  """List all rubric categories for your account."""
  categories(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): CategoryConnection

  """The checks of the rubric."""
  checks(
    """The category ID of a check."""
    categoryId: ID

    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): CheckConnection

  """The description of the rubric."""
  description: String

  """The id of the rubric."""
  id: ID!

  """List all rubric levels for your account."""
  levels(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): LevelConnection!

  """The display name of the rubric."""
  name: String!
}

"""The check result information for the service's rubric."""
type RubricReport {
  """A category is used to group related checks in a rubric."""
  categories(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): ServiceCategoryConnection

  """The level of a specific category."""
  categoryLevel(
    """The category ID of a check."""
    categoryId: ID
  ): Level

  """The service check results."""
  checkResults: ServiceCheckResults

  """The overall level of the service."""
  level: Level
}

"""Input to be used to update a rubric."""
input RubricUpdateInput {
  """The ID of the rubric to be updated."""
  id: ID!

  """The display name of the rubric."""
  name: String

  """The description of the rubric."""
  description: String
}

"""The return type of a `rubricUpdate` mutation."""
type RubricUpdatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """
  Rubrics allow you to score your services against different categories and levels.
  """
  rubric: Rubric
}

"""An OpsLevel runner runs OpsLevel Runner Jobs."""
type Runner {
  """ID of the runner."""
  id: ID!

  """The scope of the runner."""
  scope: RunnerScopeTypeEnum!

  """The status of the runner."""
  status: RunnerStatusTypeEnum!
}

"""
Specifies the input fields used to append a log chunk to a runnerJob's logs.
"""
input RunnerAppendJobLogInput {
  """The runner id."""
  runnerId: ID!

  """The job id."""
  runnerJobId: ID!

  """The runner-specified timestamp that the log chunk was sent"""
  sentAt: ISO8601DateTime!

  """The contents of the log to append"""
  logChunk: [String!]!
}

"""Return type for the `runnerAppendJobLog` mutation."""
type RunnerAppendJobLogPayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The runner job"""
  runnerJob: RunnerJob
}

"""Return type for the `runnerGetPendingJob` mutation."""
type RunnerGetPendingJobPayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """
  Token that represents the state of the queue the last time that particular
  runner had requested a job. The runner client just needs to pass this same
  value back in the next request to get a pending job.
  """
  lastUpdateToken: ID

  """The job that can is assigned to the runner."""
  runnerJob: RunnerJob
}

"""The job that can be executed by a runner."""
type RunnerJob {
  """The commands used when executing the job."""
  commands: [String!]!

  """
  An array of ad-hoc shell scripts to load in at runtime when executing the job.
  """
  files: [RunnerJobFile!]

  """The ID of the job."""
  id: ID!

  """The image for the container that should be used to execute the job in."""
  image: String!

  """The result status of the job."""
  outcome: RunnerJobOutcomeEnum

  """The current status of the job."""
  status: RunnerJobStatusEnum!

  """A set of variables to be used by the job during the execution."""
  variables: [RunnerJobVariable!]
}

"""
Represents a script to load in at runtime when running the parent RunnerJob
"""
type RunnerJobFile {
  """
  The contents of the shell script, expressed as a single multi-line string
  """
  contents: String!

  """
  The name of the script to be generated and made availble in the RunnerJob commands
  """
  name: String!
}

"""A series of received log chunks associated with a single job"""
type RunnerJobLog {
  """An array of logs received from the OpsLevel runner for a job run"""
  logChunk: [String!]!

  """The timestamp that the log chunk was sent by the OpsLevel runner."""
  sentAt: ISO8601DateTime!
}

"""The runner job outcome."""
enum RunnerJobOutcomeEnum {
  """Job was not started yet."""
  unstarted

  """Job was canceled."""
  canceled

  """Job was blackholed and not allowed to run."""
  blackholed

  """Job failed during execution."""
  failed

  """Job succeded the execution."""
  success

  """Job was not assigned to a runner for too long."""
  queue_timeout

  """Job run took too long to complete, and was marked as failed."""
  execution_timeout

  """A pod could not be scheduled for the job in time."""
  pod_timeout
}

"""A outcome variable assigned by the job"""
input RunnerJobOutcomeVariable {
  """The name of the variable"""
  key: String!

  """The value of the variable"""
  value: String!
}

"""The runner job status"""
enum RunnerJobStatusEnum {
  """A created runner job, but not yet ready to be run."""
  created

  """A runner job ready to be run."""
  pending

  """A runner job being run by a runner."""
  running

  """A finished runner job."""
  complete
}

"""A variable defined for use in a runner job."""
type RunnerJobVariable {
  """Variable key."""
  key: String!

  """
  If the variable is sensitive or not. Sensitive variable values will be masked in log output.
  """
  sensitive: Boolean!

  """Variable value."""
  value: String!
}

"""Return type for the RunnerRegister mutation."""
type RunnerRegisterPayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """Details for the newly registered runner."""
  runner: Runner
}

"""Specifies the input fields used to report a runner job outcome."""
input RunnerReportJobOutcomeInput {
  """The runner id."""
  runnerId: ID!

  """The job id."""
  runnerJobId: ID!

  """The job outcome."""
  outcome: RunnerJobOutcomeEnum!

  """Any specific variables assigned by the job process."""
  outcomeVariables: [RunnerJobOutcomeVariable!]
}

"""Return type for the `runnerReportJobOutcome` mutation."""
type RunnerReportJobOutcomePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The job that can be executed by a runner."""
  runnerJob: RunnerJob
}

"""Recommended scale to run group of OpsLevel Runner pods."""
type RunnerScale {
  """
  Recommended number of instances to run within group of OpsLevel Runner pods.
  """
  recommendedReplicaCount: Int
}

"""The account scope for an OpsLevel Runner."""
enum RunnerScopeTypeEnum {
  """Runs OpsLevel Runner Jobs from multiple accounts."""
  shared

  """Only runs OpsLevel Runner Jobs from the parent account."""
  account_owned
}

"""The status of an OpsLevel runner."""
enum RunnerStatusTypeEnum {
  """The runner will not actively take jobs."""
  inactive

  """The runner will process jobs."""
  registered
}

"""Return type for the RunnerUnregister mutation."""
type RunnerUnregisterPayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """Details for the unregistered runner."""
  runner: Runner
}

type ScimIntegration implements Integration {
  """The id of the group."""
  accountKey: String!

  """The path of the group."""
  accountName: String

  """The web url of the group."""
  accountUrl: String

  """Indicates whether or not the integration is currently active."""
  active: Boolean!

  """The publicly routable URL where the integration can be accessed."""
  baseUrl: String

  """Labels which relate this integration to similar integrations."""
  categories: [IntegrationCategory!]

  """The parameters used by the UI to display and configure integrations."""
  config: IntegrationConfig

  """The time this integration was created."""
  createdAt: ISO8601DateTime!

  """The display name of the integration."""
  displayName: String

  """The relative url to where the integration can be accessed."""
  href: String!

  """
  A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
  """
  htmlUrl: String!

  """The unique identifier for the integration."""
  id: ID!

  """
  The time that this integration was successfully installed, if null, this
  indicates the integration was not completed installed.
  """
  installedAt: ISO8601DateTime

  """
  The time this integration was invalidated, either from OpsLevel or via the external API.
  """
  invalidatedAt: ISO8601DateTime

  """The time an event payload was provided for this integration."""
  lastEventReceived: ISO8601DateTime

  """The name of the integration."""
  name: String!

  """The notification channel."""
  notificationChannel: String

  """
  Indicates whether OpsLevel will create service suggestions by analyzing the integration's repositories.
  """
  serviceDiscoveryEnabled: Boolean

  """
  Indicates if OpsLevel will manage Datadog monitor webhooks automatically. When
  set to false, you will be required to manually add the OpsLevel webhook to
  your Datadog monitor notification message.
  """
  setWebhooksOnMonitors: Boolean

  """
  The abbreviated or shorthand name for this integration, if any. Otherwise returns display name.
  """
  shortName: String

  """This integration was not installed within the installation window."""
  stale: Boolean!

  """If this integration is initializing and is not fully ready for use"""
  stillLoading: Boolean!

  """The type of the integration."""
  type: String!

  """Indicates if this integration is being uninstalled from OpsLevel."""
  uninstallInProgress: Boolean!

  """
  False when the integration has been unauthorized or removed by the remote system.
  """
  valid: Boolean!

  """The version of the integration that is installed."""
  version: String

  """The endpoint to send events via webhook (if applicable)."""
  webhookUrl: String
}

"""
A service represents software deployed in your production infrastructure.
"""
type Service {
  """
  AlertSourceService connections. Edges between AlertSource and Service that contain the status.
  """
  alertSources(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int

    """The field and direction to order the resulting alert sources by."""
    sortBy: AlertSourceSortEnum

    """Return only alert sources with on calls currently associated to them."""
    withOnCall: Boolean
  ): AlertSourceServiceConnection

  """The status of the service based on the current alerts."""
  alertStatus: AlertStatus!

  """A human-friendly, unique identifier for the service."""
  alias: String @deprecated(reason: "Alias is now deprecated. Please use `aliases` instead.")

  """A list of human-friendly, unique identifiers for the service."""
  aliases: [String!]!

  """
  The path, relative to the service repository's base directory, from which to
  fetch the API document. If null, the API document is fetched from the path in
  the account's apiDocsDefaultPath field.
  """
  apiDocumentPath: String

  """Report of how the service is performing against associated campaigns."""
  campaignReport(
    """The IDs of campaigns whose reports to fetch."""
    campaignIds: [ID!]

    """
    A list of filters to use to specify list of campaigns whose reports to return.
    """
    filter: [CampaignFilterInput!]

    """
    The logical operator to be used in conjunction with multiple filters (requires filters to be supplied).
    """
    connective: ConnectiveEnum = and
  ): CampaignReport

  """A summary of check results on the service."""
  checkStats: CheckStats

  """Information extracted from the opslevel.yml config as code."""
  config: ServiceConfig

  """The path used for linking a repository to this service"""
  createServiceRepositoryPath: String!

  """The source that created this service."""
  creationSource: ServiceCreationSourceEnum

  """
  Either the primary service repository, or the first valid non-archived repo, if any.
  """
  defaultServiceRepository: ServiceRepository

  """The services that this service depends on."""
  dependencies(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int

    """Search dependencies by name."""
    search: String

    """A list of filters to use while search for dependencies."""
    filter: [ServiceFilterInput!]

    """The field and direction to order the resulting dependencies by."""
    sortBy: ServiceSortEnum
  ): ServiceDependenciesConnection

  """
  Whether this service is a dependency of the service whose id was provided.
  """
  dependencyOf(
    """translation missing: en.graphql.types.service.dependency_of.service_id"""
    serviceId: ID!
  ): Boolean!

  """The services that depend on this service."""
  dependents(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int

    """Search dependents by name."""
    search: String

    """A list of filters to use while search for dependents."""
    filter: [ServiceFilterInput!]

    """The field and direction to order the resulting dependents by."""
    sortBy: ServiceSortEnum
  ): ServiceDependentsConnection

  """A brief description of the service."""
  description: String

  """A list of aliases and their details."""
  detailedAliases: [Alias!]!

  """All documents attached to this service."""
  documents(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int

    """The type of the document."""
    type: DocumentTypeEnum

    """Filter documents by visibility"""
    hidden: Boolean

    """Search documents by title and pathInRepository."""
    searchTerm: String
  ): ServiceDocumentConnection!

  """The external issues that are associated with the service."""
  externalIssues: [ExternalIssue!]

  """The service's external UUID."""
  externalUuid: String

  """The primary software development framework that the service uses."""
  framework: String

  """Whether or not the service has alert sources configured"""
  hasAlertSources: Boolean!

  """Whether the opslevel.yml for the service has an error or not"""
  hasServiceConfigError: Boolean!

  """A health report on the service."""
  healthReport: ServiceMaturityReport @deprecated(reason: "Please use `maturity_report` instead.")

  """The relative path for this. Ex. /services/shopping_cart"""
  href: String!

  """
  A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
  """
  htmlUrl: String!

  """The unique identifier for the service."""
  id: ID!

  """The primary programming language that the service is written in."""
  language: String

  """The most recent `Deploy` for this service."""
  lastDeploy: Deploy

  """The index of the service's overall level"""
  levelIndex: Int

  """The lifecycle stage of the service."""
  lifecycle: Lifecycle

  """Whether the service can be linked to a repository."""
  linkable: Boolean!

  """Indicates if the service is locked by an opslevel.yml."""
  locked: Boolean!

  """The number of dependencies of the service that have a lower tier."""
  lowerTierDependencyCount: Int!

  """A health report on the service."""
  maturityReport: ServiceMaturityReport

  """The display name of the service."""
  name: String!

  """Additional information about the service."""
  note: String

  """The list of users on call for this service"""
  onCalls(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int

    """translation missing: en.graphql.types.service.on_calls.sort_by"""
    sortBy: OnCallSortEnum
  ): OnCallConnection

  """The team that owns the service."""
  owner: Team

  """
  The API document selected for display on the API docs tab on the service's page.
  """
  preferredApiDocument: ServiceDocument

  """
  The API document source (push or pull) used to determine the preferred API
  document. If null, we try the pushed doc and then the pulled doc (in that order).
  """
  preferredApiDocumentSource: ApiDocumentSourceEnum

  """
  A product is an application that your end user interacts with. Multiple
  services can work together to power a single product.
  """
  product: String

  """The raw unsanitized additional information about the service."""
  rawNote: String

  """A list of repositories that are linked to the service."""
  repos(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): ServiceRepositoryConnection

  """A list of repositories that are linked to the service."""
  repositories(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): RepositoryConnection @deprecated(reason: "`repositories` is now deprecated. Please use `repos` instead.")

  """A summary of check results on the service."""
  serviceStats: ServiceStats

  """
  The ServiceTemplateRun instance that generated this service if it was created from a service template.
  """
  serviceTemplateRun: ServiceTemplateRun

  """A list of tags applied to the service."""
  tags(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): TagConnection

  """The software tier that the service belongs to."""
  tier: Tier

  """Relevant timestamps."""
  timestamps: Timestamps!

  """A list of tools that are used by the service."""
  tools(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int

    """
    A flag to filter the tools for the most important categories, in the 'best' environment
    """
    bestProdEnv: Boolean
  ): ToolConnection
}

"""The connection type for Category."""
type ServiceCategoryConnection {
  """A list of edges."""
  edges: [ServiceCategoryEdge]

  """A list of nodes."""
  nodes: [Category]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!
}

"""An edge in a connection."""
type ServiceCategoryEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The level of the service category."""
  level: Level

  """The item at the end of the edge."""
  node: Category
}

"""The service check results."""
type ServiceCheckResults {
  """The list of service check results grouped by level."""
  byLevel(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): CheckResultsByLevelConnection
}

"""Extracted fields from opslevel.yml."""
type ServiceConfig {
  """Extracted information about the lifecycle"""
  lifecycle: Slug

  """Extracted information about the owner."""
  owner: Slug

  """Extracted information about the tier"""
  tier: Slug
}

type ServiceConfigurationCheck implements Check {
  """Additional arguments required by some check types."""
  args: JSON

  """The campaign the check belongs to."""
  campaign: Campaign

  """The category that the check belongs to."""
  category: Category

  """The levels the check belongs to."""
  checkLevels: [CheckLevel!]

  """Description of the check type's purpose."""
  description: String!

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """If the check is enabled or not."""
  enabled: Boolean!

  """The filter that the check belongs to."""
  filter: Filter

  """Information needed to fix the check."""
  fix: JSON

  """The id of the check."""
  id: ID!

  """The integration this check uses."""
  integration: Integration @deprecated(reason: "Integration is now deprecated. Please use `integration` under the `CustomEventCheck` fragment instead.")

  """The level that the check belongs to."""
  level: Level

  """The display name of the check."""
  name: String!

  """Additional information about the check."""
  notes: String

  """The owner of the check."""
  owner: CheckOwner

  """The raw unsanitized additional information about the check."""
  rawNotes: String

  """The URL path for the check report."""
  reportHref: String!

  """Summary of stats for services associated to this check."""
  stats: Stats

  """The type of check."""
  type: CheckType!

  """The url to the check."""
  url: String!
}

"""The connection type for Service."""
type ServiceConnection {
  """A list of edges."""
  edges: [ServiceEdge]

  """The number of returned nodes"""
  filteredCount: Int

  """A list of nodes."""
  nodes: [Service]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Object containing the predicates for filtering services."""
  predicates: JSON

  """The total number of services."""
  totalCount: Int
}

"""Specifies the input fields used in the `serviceCreate` mutation."""
input ServiceCreateInput {
  """The parent system for the service."""
  parent: IdentifierInput

  """The display name of the service."""
  name: String!

  """
  A product is an application that your end user interacts with. Multiple
  services can work together to power a single product.
  """
  product: String

  """A brief description of the service."""
  description: String

  """The primary programming language that the service is written in."""
  language: String

  """The primary software development framework that the service uses."""
  framework: String

  """The software tier that the service belongs to."""
  tierAlias: String

  """The team that owns the service."""
  ownerAlias: String

  """The lifecycle stage of the service."""
  lifecycleAlias: String

  """A list of repositories that are linked to the service."""
  repositories: [ID!]

  """Allows for the creation of a service with invalid aliases."""
  skipAliasesValidation: Boolean = false
}

"""Return type for the `serviceCreate` mutation."""
type ServiceCreatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The newly created service."""
  service: Service
}

"""Types of sources from which Services can be created."""
enum ServiceCreationSourceEnum {
  """Service created by OpsLevel."""
  repository_analysis
}

"""Specifies the input fields used in the `serviceDelete` mutation."""
input ServiceDeleteInput {
  """The id of the service to be deleted."""
  id: ID

  """The alias of the service to be deleted."""
  alias: String
}

"""Return type for the `serviceDelete` mutation."""
type ServiceDeletePayload {
  """The alias of the deleted service."""
  deletedServiceAlias: String

  """The ID of the deleted service."""
  deletedServiceId: ID

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""
Specifies the input fields used in the `serviceDependenciesAssign` mutation.
"""
input ServiceDependenciesAssignInput {
  """
  A collection of dependency input objects identifying the dependencies to be created.
  """
  edgeInputs: [ServiceDependencyCreateInput!]!
}

"""Return type for the `serviceDependenciesCreate` mutation."""
type ServiceDependenciesAssignPayload {
  """
  A collection of source, destination pairs identifying the dependencies that were successfully deleted.
  """
  assignedDependencies: [ServiceDependency!]

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """
  A collection of source, destination pairs identifying the dependencies that were successfully deleted.
  """
  skippedDependencies: [ServiceDependencyEdgePayload!]
}

"""The connection type for Service."""
type ServiceDependenciesConnection {
  """A list of edges."""
  edges: [ServiceDependenciesEdge]

  """The number of returned nodes"""
  filteredCount: Int

  """A list of nodes."""
  nodes: [Service]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The total number of services."""
  totalCount: Int
}

"""
Specifies the input fields used in the `serviceDependenciesDelete` mutation.
"""
input ServiceDependenciesDeleteInput {
  """
  A collection of source, destination pairs identifying the dependencies to be deleted.
  """
  dependencyKeys: [ServiceDependencyKey!]!
}

"""Return type for the `serviceDependenciesDelete` mutation."""
type ServiceDependenciesDeletePayload {
  """
  A collection of source, destination pairs identifying the dependencies that were successfully deleted.
  """
  deletedKeys: [ServiceDependencyKeyPayload!]

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""An edge in a connection."""
type ServiceDependenciesEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The id representing the service dependency."""
  id: ID!

  """Is the dependency locked by a service config?"""
  locked: Boolean!

  """The url to the opslevel.yml file that specifies this dependency."""
  lockerUrl: String

  """The item at the end of the edge."""
  node: Service

  """Notes for service dependency."""
  notes: String
}

"""A service dependancy edge."""
type ServiceDependency {
  """The service that was depended upon."""
  destinationService: Service!

  """ID of the serivde dependency edge."""
  id: ID!

  """Notes about the dependency edge."""
  notes: String

  """The service that had the dependency."""
  sourceService: Service!
}

type ServiceDependencyCheck implements Check {
  """Additional arguments required by some check types."""
  args: JSON

  """The campaign the check belongs to."""
  campaign: Campaign

  """The category that the check belongs to."""
  category: Category

  """The levels the check belongs to."""
  checkLevels: [CheckLevel!]

  """Description of the check type's purpose."""
  description: String!

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """If the check is enabled or not."""
  enabled: Boolean!

  """The filter that the check belongs to."""
  filter: Filter

  """Information needed to fix the check."""
  fix: JSON

  """The id of the check."""
  id: ID!

  """The integration this check uses."""
  integration: Integration @deprecated(reason: "Integration is now deprecated. Please use `integration` under the `CustomEventCheck` fragment instead.")

  """The level that the check belongs to."""
  level: Level

  """The display name of the check."""
  name: String!

  """Additional information about the check."""
  notes: String

  """The owner of the check."""
  owner: CheckOwner

  """The raw unsanitized additional information about the check."""
  rawNotes: String

  """The URL path for the check report."""
  reportHref: String!

  """Summary of stats for services associated to this check."""
  stats: Stats

  """The type of check."""
  type: CheckType!

  """The url to the check."""
  url: String!
}

"""Specifies the input fields used for creating a service dependency."""
input ServiceDependencyCreateInput {
  """A source, destination pair specifying a dependency between services."""
  dependencyKey: ServiceDependencyKey!

  """Notes for service dependency."""
  notes: String
}

"""Return type for raw dependency edges."""
type ServiceDependencyEdgePayload {
  """The Service ID for the destination node."""
  destination: String

  """The relative path for this. Ex. /services/shopping_cart"""
  href: String!

  """
  A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
  """
  htmlUrl: String!

  """The Service ID for the source node."""
  source: String
}

"""A source, destination pair specifying a dependency between services."""
input ServiceDependencyKey {
  """The ID or alias identifier of the service with the dependency."""
  sourceIdentifier: IdentifierInput

  """The ID or alias identifier of the service that is depended upon."""
  destinationIdentifier: IdentifierInput
}

"""
translation missing: en.graphql.types.service_dependency_key_payload.self
"""
type ServiceDependencyKeyPayload {
  """
  translation missing: en.graphql.types.service_dependency_key_payload.destination
  """
  destination: ID!

  """
  translation missing: en.graphql.types.service_dependency_key_payload.source
  """
  source: ID!
}

"""Return type for the requested `serviceDependency`."""
type ServiceDependencyPayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """A service dependancy edge."""
  serviceDependency: ServiceDependency
}

"""The connection type for Service."""
type ServiceDependentsConnection {
  """A list of edges."""
  edges: [ServiceDependentsEdge]

  """The number of returned nodes"""
  filteredCount: Int

  """A list of nodes."""
  nodes: [Service]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The total number of services."""
  totalCount: Int
}

"""An edge in a connection."""
type ServiceDependentsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The id representing the service dependency."""
  id: ID!

  """Is the dependency locked by a service config?"""
  locked: Boolean!

  """The url to the opslevel.yml file that specifies this dependency."""
  lockerUrl: String

  """The item at the end of the edge."""
  node: Service

  """Notes for service dependency."""
  notes: String
}

"""A document that is attached to resource(s) in OpsLevel."""
type ServiceDocument {
  """The list of resources that are attached to this document"""
  attachedResources(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int

    """Filter documents based on visibility."""
    hidden: Boolean
  ): ResourceDocumentConnection

  """The contents of the document."""
  content: String

  """The file extension of the document, e.g. 'json'."""
  fileExtension: String

  """The URL of the document, if any."""
  htmlUrl: String

  """The ID of the Document."""
  id: ID!

  """Metadata about the document."""
  metadata: JSON

  """
  The path to the file in the repository (only available when the source is a Repository or ServiceRepository).
  """
  pathInRepository: String

  """The source of the document."""
  source: ServiceDocumentSource!

  """When the document was created and updated."""
  timestamps: Timestamps!

  """The title of the document."""
  title: String!

  """The type of the document."""
  type: DocumentTypeEnum!
}

"""The connection type for ServiceDocument."""
type ServiceDocumentConnection {
  """A list of edges."""
  edges: [ServiceDocumentEdge]

  """A list of nodes."""
  nodes: [ServiceDocument]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!
}

"""An edge in a connection."""
type ServiceDocumentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ServiceDocument
  status: ResourceDocumentStatusTypeEnum
}

"""The source of a document."""
union ServiceDocumentSource = ApiDocIntegration | Repository | ServiceRepository

"""An edge in a connection."""
type ServiceEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """
  A hash of the fields and their associated highlights from a service query.
  """
  highlights: JSON

  """The item at the end of the edge."""
  node: Service
}

"""Fields that can be used as part of filter for services."""
enum ServiceFilterEnum {
  """Filter by `framework` field"""
  framework

  """Filter by `language` field"""
  language

  """Filter by `lifecycle` field"""
  lifecycle_index

  """Filter by `name` field"""
  name

  """Filter by `owner` field"""
  owner_id

  """Filter by `product` field"""
  product

  """Filter by `tag` field"""
  tag

  """Filter by `tier` field"""
  tier_index

  """Filter by `level` field"""
  level_index

  """Filter by `alert status` field"""
  alert_status

  """
  Filter by group hierarchy. Will return resources who's owner is in the group ancestry chain.
  """
  group_ids

  """
  Filter by Domain that includes the System this service is assigned to, if any.
  """
  domain_id

  """Filter by System that this service is assigned to, if any."""
  system_id

  """Filter by the creation source."""
  creation_source
}

"""Input to be used to filter types."""
input ServiceFilterInput {
  """Field to be filtered."""
  key: ServiceFilterEnum

  """Value to be filtered."""
  arg: String

  """Type of operation to be applied to value on the field."""
  type: TypeEnum = equals

  """A list of service filter input."""
  predicates: [ServiceFilterInput!]

  """
  The logical operator to be used in conjunction with multiple filters (requires predicates to be supplied).
  """
  connective: ConnectiveEnum = or
}

"""
Inputs to specify details of template to use when creating a new service, and also metadata about the service being created.
"""
input ServiceFromTemplateCreateInput {
  """
  URL to template config file (usually 'cookiecutter.json') in the repo containing the service template.
  """
  templateRepoUrl: String!

  """
  The commit SHA of the template repo representing the version of the template to use.
  """
  templateRepoCommit: String!

  """List of input values for the template's variables."""
  serviceTemplateVariableValues: [ServiceTemplateVariableValueInput!]!

  """
  The name to to use to represent the service within OpsLevel after it has been succesfully generated.
  """
  serviceName: String!

  """The description of the service being created."""
  serviceDescription: String

  """The programming language of the service being created."""
  language: String

  """
  The primary software development framework of the service being created.
  """
  framework: String

  """ID of team that owns the service being created."""
  ownerId: ID

  """ID of the git forge integration that will host the new repository."""
  integrationId: ID

  """Name of the created repository."""
  repositoryName: String
}

"""
translation missing: en.graphql.types.service_from_template_create_payload.self
"""
type ServiceFromTemplateCreatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """
  Represents the use of a service template with a particular set of inputs to generate a new service.
  """
  serviceTemplateRun: ServiceTemplateRun
}

"""The health report for this service in terms of its levels and checks."""
type ServiceMaturityReport {
  """The level of each category for this service."""
  categoryBreakdown: [CategoryLevel!]!

  """The latest check results for this service across the given checks."""
  latestCheckResults(
    """The id of the check."""
    ids: [ID!]!
  ): [CheckResult!]

  """The overall level for this service."""
  overallLevel: Level!
}

"""Specifies the input fields used in the `serviceNoteUpdate` mutation."""
input ServiceNoteUpdateInput {
  """The identifier for the service."""
  service: IdentifierInput!

  """Note about the service."""
  note: String
}

"""Return type for the `serviceNoteUpdate` mutation."""
type ServiceNoteUpdatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """
  A service represents software deployed in your production infrastructure.
  """
  service: Service
}

"""
Specifies the service and error after attempting and failing to perform a CRUD operation on a service.
"""
type ServiceOperationErrorPayload {
  """The error message after an operation was attempted."""
  error: String

  """The service on which an operation was attempted."""
  service: Service!
}

type ServiceOwnershipCheck implements Check {
  """Additional arguments required by some check types."""
  args: JSON

  """The campaign the check belongs to."""
  campaign: Campaign

  """The category that the check belongs to."""
  category: Category

  """The levels the check belongs to."""
  checkLevels: [CheckLevel!]

  """The type of contact method that an owner should provide"""
  contactMethod: String

  """Description of the check type's purpose."""
  description: String!

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """If the check is enabled or not."""
  enabled: Boolean!

  """The filter that the check belongs to."""
  filter: Filter

  """Information needed to fix the check."""
  fix: JSON

  """The id of the check."""
  id: ID!

  """The integration this check uses."""
  integration: Integration @deprecated(reason: "Integration is now deprecated. Please use `integration` under the `CustomEventCheck` fragment instead.")

  """The level that the check belongs to."""
  level: Level

  """The display name of the check."""
  name: String!

  """Additional information about the check."""
  notes: String

  """The owner of the check."""
  owner: CheckOwner

  """The raw unsanitized additional information about the check."""
  rawNotes: String

  """The URL path for the check report."""
  reportHref: String!

  """Whether to require a contact method for a service owner or not"""
  requireContactMethod: Boolean!

  """Summary of stats for services associated to this check."""
  stats: Stats

  """The tag key that should exist for a service owner."""
  tagKey: String

  """The condition that should be satisfied by the tag value."""
  tagPredicate: Predicate

  """The type of check."""
  type: CheckType!

  """The url to the check."""
  url: String!
}

type ServicePropertyCheck implements Check {
  """Additional arguments required by some check types."""
  args: JSON

  """The campaign the check belongs to."""
  campaign: Campaign

  """The category that the check belongs to."""
  category: Category

  """The levels the check belongs to."""
  checkLevels: [CheckLevel!]

  """Description of the check type's purpose."""
  description: String!

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """If the check is enabled or not."""
  enabled: Boolean!

  """The filter that the check belongs to."""
  filter: Filter

  """Information needed to fix the check."""
  fix: JSON

  """The id of the check."""
  id: ID!

  """The integration this check uses."""
  integration: Integration @deprecated(reason: "Integration is now deprecated. Please use `integration` under the `CustomEventCheck` fragment instead.")

  """The level that the check belongs to."""
  level: Level

  """The display name of the check."""
  name: String!

  """Additional information about the check."""
  notes: String

  """The owner of the check."""
  owner: CheckOwner

  """The property of the service that the check will verify."""
  propertyValuePredicate: Predicate

  """The raw unsanitized additional information about the check."""
  rawNotes: String

  """The URL path for the check report."""
  reportHref: String!

  """The condition that should be satisfied by the service property value."""
  serviceProperty: ServicePropertyTypeEnum!

  """Summary of stats for services associated to this check."""
  stats: Stats

  """The type of check."""
  type: CheckType!

  """The url to the check."""
  url: String!
}

"""Properties of services that can be validated."""
enum ServicePropertyTypeEnum {
  """The description of a service."""
  description

  """The name of a service."""
  name

  """The primary programming language of a service."""
  language

  """The primary software development framework of a service."""
  framework

  """The product that is associated with a service."""
  product

  """The index of the lifecycle a service belongs to."""
  lifecycle_index

  """The index of the tier a service belongs to."""
  tier_index

  """Additional information about the service."""
  note
}

"""A record of the connection between a service and a repository."""
type ServiceRepository {
  """The directory in the repository containing opslevel.yml."""
  baseDirectory: String

  """The name displayed in the UI for the service repository."""
  displayName: String

  """ID of the service repository."""
  id: ID!

  """The repository that is part of this connection."""
  repository: Repository!

  """The service that is part of this connection."""
  service: Service!
}

"""The connection type for Repository."""
type ServiceRepositoryConnection {
  """A list of edges."""
  edges: [ServiceRepositoryEdge]

  """A list of nodes."""
  nodes: [Repository]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!
}

"""
Specifies the input fields used in the `serviceRepositoryCreate` mutation.
"""
input ServiceRepositoryCreateInput {
  """The identifier for the service."""
  service: IdentifierInput!

  """The identifier for the repository."""
  repository: IdentifierInput!

  """The directory in the repository containing opslevel.yml."""
  baseDirectory: String

  """The name displayed in the UI for the service repository."""
  displayName: String
}

"""Return type for the `serviceRepositoryCreate` mutation."""
type ServiceRepositoryCreatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """A record of the connection between a service and a repository."""
  serviceRepository: ServiceRepository
}

"""An edge in a connection."""
type ServiceRepositoryEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Repository

  """
  A list of service repositories that link the service and this repository.
  """
  serviceRepositories: [ServiceRepository!]!
}

"""Specifies the input fields used to update a service repository."""
input ServiceRepositoryUpdateInput {
  """The ID of the service repository to be updated."""
  id: ID!

  """The directory in the repository containing opslevel.yml."""
  baseDirectory: String

  """The name displayed in the UI for the service repository."""
  displayName: String
}

"""The return type of the `serviceRepositoryUpdate` mutation."""
type ServiceRepositoryUpdatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The updated service repository."""
  serviceRepository: ServiceRepository
}

"""Return type for the `servicesDelete` mutation."""
type ServicesDeletePayload {
  """The identifiers of the deleted services."""
  deletedServices: [IdentifierPayload!]

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """
  The services objects that were not deleted along with the error that happened when attempting to delete the service.
  """
  notDeletedServices: [ServiceOperationErrorPayload!]
}

"""Sort possibilities for services."""
enum ServiceSortEnum {
  """Sort by `name` ascending."""
  name_ASC

  """Sort by `name` descending."""
  name_DESC

  """Sort by `product` ascending."""
  product_ASC

  """Sort by `product` descending."""
  product_DESC

  """Sort by `tier` ascending."""
  tier_ASC

  """Sort by `tier` descending."""
  tier_DESC

  """Sort by lifecycle ascending."""
  lifecycle_ASC

  """Sort by lifecycle descending."""
  lifecycle_DESC

  """Sort by level ascending."""
  level_index_ASC

  """Sort by level descending."""
  level_index_DESC

  """Sort by `owner` ascending."""
  owner_ASC

  """Sort by `owner` descending."""
  owner_DESC

  """Sort by `checks_passing` ascending."""
  checks_passing_ASC

  """Sort by `checks_passing` descending."""
  checks_passing_DESC

  """Alias to sort by `checks_passing` ascending."""
  service_stat_ASC

  """Alias to sort by `checks_passing` descending."""
  service_stat_DESC

  """Sort by last deploy time ascending."""
  last_deploy_ASC

  """Sort by last deploy time descending."""
  last_deploy_DESC

  """Sort by alert status ascending."""
  alert_status_ASC

  """Sort by alert status descending."""
  alert_status_DESC
}

"""Services Report contains aggregate data used in reports."""
type ServicesReport {
  """
  The counts of how many services are in each category with a certain level.
  """
  categoryLevelCounts: [CategoryLevelCount!]!

  """The counts of many services are in each level."""
  levelCounts: [LevelCount!]!

  """The count of how many services do not have an assigned level."""
  totalServicesNotEvaluated: Int!
}

"""The summary of check results for this service."""
type ServiceStats {
  """The check result information for the service's rubric."""
  rubric: RubricReport!
}

"""
Represents a service template with a particular set of inputs to generate a new service.
"""
type ServiceTemplate {
  """The description of the service template."""
  description: String

  """
  The primary software development framework that the service template uses.
  """
  framework: String

  """The ID for this service template."""
  id: ID!

  """
  The primary programming language that the service template is written in.
  """
  language: String

  """The name for this service template."""
  name: String

  """The owner of the service template."""
  owner: ServiceTemplateOwner

  """
  The commit SHA of the template repo representing the version of the template to use.
  """
  templateRepoCommit: String

  """
  URL to template config file in the repo containing the service template.
  """
  templateRepoUrl: String!

  """When the service template was created and updated."""
  timestamps: Timestamps!

  """Service template variables list."""
  variables: [ServiceTemplateVariable!]
}

"""The connection type for ServiceTemplate."""
type ServiceTemplateConnection {
  """A list of edges."""
  edges: [ServiceTemplateEdge]

  """A list of nodes."""
  nodes: [ServiceTemplate]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!
}

"""
Inputs to specify details of template to use when creating a new service.
"""
input ServiceTemplateCreateInput {
  """
  URL to template config file (usually 'cookiecutter.json') in the repo containing the service template.
  """
  templateRepoUrl: String!

  """The name of the service template"""
  name: String

  """
  The primary programming language that the service template is written in.
  """
  language: String

  """
  The primary software development framework that the service template uses.
  """
  framework: String

  """ID of the owner of the service template being created."""
  ownerId: ID

  """The description of the service template."""
  description: String
}

"""Return type for the `serviceTemplateCreate` mutation."""
type ServiceTemplateCreatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """
  Represents a service template with a particular set of inputs to generate a new service.
  """
  serviceTemplate: ServiceTemplate
}

"""An edge in a connection."""
type ServiceTemplateEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ServiceTemplate
}

"""The owner a service template can belong to."""
union ServiceTemplateOwner = Team | User

"""
Represents the use of a service template with a particular set of inputs to generate a new service.
"""
type ServiceTemplateRun {
  """The relative path for this. Ex. /services/shopping_cart"""
  href: String!

  """The ID for this ServiceTemplateRun."""
  id: ID!

  """Logs associated with this service template run."""
  logs: [RunnerJobLog!]!

  """URL of the merge request to initialize the service repository."""
  mergeRequestUrl: String

  """The outcome of the job that was part of this ServiceTemplateRun"""
  outcome: RunnerJobOutcomeEnum!

  """
  The outcome artifact that was created as the result of this ServiceTemplateRun.
  """
  outcomeArtifact: Artifact

  """URL to associated git forge repository."""
  repoUrl: String

  """The repository created and associated with the service."""
  repository: Repository

  """The service that was created as a result of this ServiceTemplateRun."""
  service: Service

  """The name for the newly-generated service"""
  serviceName: String!

  """List of input values for the template's variables."""
  serviceTemplateVariableValues: [ServiceTemplateVariableValue!]

  """
  Status of running this template with the provided inputs to generate a new service's files.
  """
  status: ServiceTemplateRunStatusEnum

  """
  The commit SHA of the template repo representing the version of the template to use.
  """
  templateRepoCommit: String!

  """
  URL to template config file in the repo containing the service template.
  """
  templateRepoUrl: String!
}

"""The status of the ServiceTemplateRun attempt."""
enum ServiceTemplateRunStatusEnum {
  """The ServiceTemplateRun to create the new service has not started yet."""
  unstarted

  """The ServiceTemplateRun is currently running."""
  in_progress

  """
  The ServiceTemplateRun attempt succeeded in creating a new service from the service template.
  """
  success

  """
  The ServiceTemplateRun attempt failed in creating a new service from the service template.
  """
  failed
}

"""Inputs to specify new value to update a service template."""
input ServiceTemplateUpdateInput {
  """ID of the service template to update."""
  id: ID!

  """The new name of the service template."""
  name: String

  """
  The primary programming language that the service template is written in.
  """
  language: String

  """
  The primary software development framework that the service template uses.
  """
  framework: String

  """ID of the owner of the service template."""
  ownerId: ID

  """The description of the service template."""
  description: String
}

"""Return type for the `serviceTemplateUpdate` mutation."""
type ServiceTemplateUpdatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """
  Represents a service template with a particular set of inputs to generate a new service.
  """
  serviceTemplate: ServiceTemplate
}

"""A variable to be used in the service template."""
type ServiceTemplateVariable {
  """Default value"""
  defaultValue: String

  """Name"""
  name: String!

  """Options for select"""
  options: [String!]
}

"""The set of service template variables and it's metadata."""
type ServiceTemplateVariables {
  """Service template commit hash."""
  templateRepoCommit: String!

  """Service template URL."""
  templateRepoUrl: String!

  """Service template variables list."""
  variables: [ServiceTemplateVariable!]!
}

"""
Specifies the input fields used in the `serviceTemplateVariablesParse` mutation.
"""
input ServiceTemplateVariablesParseInput {
  url: String!
}

"""The return type of the `serviceTemplateVariablesParse` mutation."""
type ServiceTemplateVariablesParsePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The set of service template variables and it's metadata."""
  serviceTemplateVariables: ServiceTemplateVariables
}

"""The name and value for a service template's variable."""
type ServiceTemplateVariableValue {
  """The name of the service template variable."""
  name: String!

  """The value for the named service template variable."""
  value: String!
}

"""
Value of template variable to use in generating a service from a template.
"""
input ServiceTemplateVariableValueInput {
  """The name of the service template variable."""
  name: String!

  """The value for the named service template variable."""
  value: String!
}

"""Specifies the input fields used in the `serviceUpdate` mutation."""
input ServiceUpdateInput {
  """The parent system for the service."""
  parent: IdentifierInput

  """The id of the service to be updated."""
  id: ID

  """The alias of the service to be updated."""
  alias: String

  """The display name of the service."""
  name: String

  """
  A product is an application that your end user interacts with. Multiple
  services can work together to power a single product.
  """
  product: String

  """A brief description of the service."""
  description: String

  """The primary programming language that the service is written in."""
  language: String

  """The primary software development framework that the service uses."""
  framework: String

  """The software tier that the service belongs to."""
  tierAlias: String

  """The team that owns the service."""
  ownerAlias: String

  """The lifecycle stage of the service."""
  lifecycleAlias: String

  """Allows updating a service with invalid aliases."""
  skipAliasesValidation: Boolean = false
}

"""Return type for the `serviceUpdate` mutation."""
type ServiceUpdatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The updated service."""
  service: Service
}

"""Return type for the `signingSecretCreate` mutation."""
type SigningSecretCreatePayload {
  """The time at which the signing secret was created."""
  createdAt: ISO8601DateTime

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The raw secret value. Once returned here it is never accessible again."""
  secret: String
}

"""Return type for the `signingSecretDelete` mutation."""
type SigningSecretDeletePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

type SlackIntegration implements Integration {
  """The id of the group."""
  accountKey: String!

  """The path of the group."""
  accountName: String

  """The web url of the group."""
  accountUrl: String

  """Indicates whether or not the integration is currently active."""
  active: Boolean!

  """The publicly routable URL where the integration can be accessed."""
  baseUrl: String

  """Labels which relate this integration to similar integrations."""
  categories: [IntegrationCategory!]

  """The parameters used by the UI to display and configure integrations."""
  config: IntegrationConfig

  """The time this integration was created."""
  createdAt: ISO8601DateTime!

  """The display name of the integration."""
  displayName: String

  """The relative url to where the integration can be accessed."""
  href: String!

  """
  A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
  """
  htmlUrl: String!

  """The unique identifier for the integration."""
  id: ID!

  """
  The time that this integration was successfully installed, if null, this
  indicates the integration was not completed installed.
  """
  installedAt: ISO8601DateTime

  """
  The time this integration was invalidated, either from OpsLevel or via the external API.
  """
  invalidatedAt: ISO8601DateTime

  """The time an event payload was provided for this integration."""
  lastEventReceived: ISO8601DateTime

  """The name of the integration."""
  name: String!

  """The notification channel."""
  notificationChannel: String

  """
  Indicates whether OpsLevel will create service suggestions by analyzing the integration's repositories.
  """
  serviceDiscoveryEnabled: Boolean

  """
  Indicates if OpsLevel will manage Datadog monitor webhooks automatically. When
  set to false, you will be required to manually add the OpsLevel webhook to
  your Datadog monitor notification message.
  """
  setWebhooksOnMonitors: Boolean

  """
  The abbreviated or shorthand name for this integration, if any. Otherwise returns display name.
  """
  shortName: String

  """This integration was not installed within the installation window."""
  stale: Boolean!

  """If this integration is initializing and is not fully ready for use"""
  stillLoading: Boolean!

  """The type of the integration."""
  type: String!

  """Indicates if this integration is being uninstalled from OpsLevel."""
  uninstallInProgress: Boolean!

  """
  False when the integration has been unauthorized or removed by the remote system.
  """
  valid: Boolean!

  """The version of the integration that is installed."""
  version: String

  """The endpoint to send events via webhook (if applicable)."""
  webhookUrl: String
}

"""A human-friendly, unique identifier"""
type Slug {
  """A human-friendly, unique identifier."""
  slug: String
}

"""An object that contains statistics."""
type Stats {
  """How many there are."""
  total: Int!

  """How many are successfully passing."""
  totalSuccessful: Int!
}

"""The connection type for Group."""
type SubgroupConnection {
  """A list of edges."""
  edges: [SubgroupEdge]

  """A list of nodes."""
  nodes: [Group]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!
}

"""An edge in a connection."""
type SubgroupEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Group
}

"""translation missing: en.graphql.types.subscriber_type_enum.self"""
enum SubscriberTypeEnum {
  """translation missing: en.graphql.types.subscriber_type_enum.user"""
  user

  """translation missing: en.graphql.types.subscriber_type_enum.service"""
  service
}

"""
A record containing the notification that is subscribed to and the channels it can be received through.
"""
type Subscription {
  """Channels for the subscription."""
  channels: [Channel!]!

  """The ID of the subscription."""
  id: ID!

  """The notification this subscription is for."""
  notification: Notification!
}

"""The connection type for Subscription."""
type SubscriptionConnection {
  """A list of edges."""
  edges: [SubscriptionEdge]

  """A list of nodes."""
  nodes: [Subscription]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!
}

"""Specifies the input fields used in the `subscriptionCreate` mutation."""
input SubscriptionCreateInput {
  """The identifier for the notification that is being subscribed to."""
  notificationId: ID!

  """The identifier for the subscriber."""
  subscriberId: ID!

  """How the notification should be sent to the subscriber."""
  notificationChannelType: NotificationChannelTypeEnum!

  """
  translation missing: en.graphql.types.subscription_create_input.external_address
  """
  externalAddress: String
}

"""Return type for the `subscriptionCreate` mutation."""
type SubscriptionCreatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """
  A record containing the notification that is subscribed to and the channels it can be received through.
  """
  subscription: Subscription
}

"""An edge in a connection."""
type SubscriptionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Subscription
}

"""A suggestion to help users configure OpsLevel faster."""
type Suggestion {
  """The action recommended by the suggestion."""
  action: SuggestionAction

  """A humanized version of alias."""
  displayAlias: String!

  """The id of the suggestion."""
  id: ID!

  """
  The list of the latest check result events, per source, that generated the suggestion.
  """
  latestCheckResultEventsPerSource: [CheckResult!]

  """
  The list of the latest deploy events, per source, that generated the suggestion.
  """
  latestDeployEventsPerSource: [Deploy!]

  """The alias specified in the events."""
  serviceAlias: String!

  """The sources for this suggestion."""
  sources(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): SuggestionSourceConnection

  """When the suggestion was created and updated."""
  timestamps: Timestamps!

  """The type of the suggestion."""
  type: String!
}

"""An action recommended by the suggestion."""
type SuggestionAction {
  """The relative path to link to the service."""
  serviceHref: String

  """The id of the action's service."""
  serviceId: ID

  """The name of the action's service."""
  serviceName: String!

  """The type of action."""
  type: SuggestionActionTypeEnum!
}

"""Input for actioning suggestions."""
input SuggestionActionInput {
  """input for actioning a suggestion."""
  suggestions: [SuggestionInput!]!
}

"""Possible actions."""
enum SuggestionActionTypeEnum {
  """Create a service with the given alias as the service name."""
  create_service

  """Attach the given alias to a service."""
  attach_alias

  """Attach historical events to the service for the given alias."""
  attach_historical_events

  """Create a service from a repository."""
  create_service_from_repository

  """Create a service from an alert source."""
  create_service_from_alert_source

  """Ignore the suggestion."""
  ignored

  """Unignore the suggestion."""
  unignored
}

"""Record of actions taken via suggestions."""
type SuggestionActivity {
  """Action that was taken via the suggestion"""
  action: SuggestionActionTypeEnum

  """Resource created/modified by the action."""
  affectedResource: SuggestionActivityAffectedResource

  """The time the action was recorded."""
  createdAt: ISO8601DateTime!

  """ID of the suggestion activity."""
  id: ID!

  """Type of action that was suggested."""
  type: String

  """User that performed the action."""
  user: User

  """The alias or string used to create the suggestion."""
  value: String!
}

"""
translation missing: en.graphql.types.suggestion_activity_affected_resource.self
"""
union SuggestionActivityAffectedResource = Service | Suggestion

"""The connection type for SuggestionActivity."""
type SuggestionActivityConnection {
  """A list of edges."""
  edges: [SuggestionActivityEdge]

  """A list of nodes."""
  nodes: [SuggestionActivity]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!
}

"""An edge in a connection."""
type SuggestionActivityEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: SuggestionActivity
}

"""Fields that can be used as part of a filter for suggestion activity."""
enum SuggestionActivityFilterEnum {
  """Filter by `value` field."""
  value

  """Filter by `action` field."""
  action

  """Filter by `type` field."""
  type

  """Filter by `user` field."""
  user
}

"""Input to be used to filter types."""
input SuggestionActivityFilterInput {
  """Field to be filtered."""
  key: SuggestionActivityFilterEnum!

  """Value to be filtered."""
  arg: String

  """Type of operation to be applied to value on the field."""
  type: BasicTypeEnum = equals
}

"""Fields that can be used to sort suggestion activity."""
enum SuggestionActivitySortEnum {
  """Order by `value` ascending."""
  value_ASC

  """Order by `value` descending."""
  value_DESC

  """Order by `action` ascending."""
  action_ASC

  """Order by `action` descending."""
  action_DESC

  """Order by `created_at` ascending."""
  created_at_ASC

  """Order by `created_at` descending."""
  created_at_DESC
}

"""The connection type for Suggestion."""
type SuggestionConnection {
  """A list of edges."""
  edges: [SuggestionEdge]

  """A list of nodes."""
  nodes: [Suggestion]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!

  """The number of unignored suggestions."""
  unignoredCount: Int!
}

"""An edge in a connection."""
type SuggestionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Suggestion
}

"""Fields that can be used as part of filter for suggestions."""
enum SuggestionFilterEnum {
  """Filter by `ignored` field."""
  ignored

  """Filter by `type` field."""
  type
}

"""Input to be used to filter types."""
input SuggestionFilterInput {
  """Field to be filtered."""
  key: SuggestionFilterEnum!

  """Value to be filtered."""
  arg: String

  """Type of operation to be applied to value on the field."""
  type: BasicTypeEnum = equals
}

"""Fields for actioning an suggestion."""
input SuggestionInput {
  """The type of action to perform."""
  type: SuggestionActionTypeEnum!

  """The ID of the suggestion being actioned."""
  suggestionId: String!

  """The name of the service to create. Only needed for create type."""
  name: String

  """The alias to attach to a service. Only needed for attach type."""
  serviceAlias: String

  """
  The ID of the service to attach an alias to. Only needed for attach type.
  """
  serviceId: String

  """
  Whether this suggestion has been modified from the original suggestion.
  """
  suggestionParamsModified: Boolean

  """
  Whether this suggestion action type has changed from the original suggestion.
  """
  suggestionActionModified: Boolean
}

"""The response returned when actioning suggestions."""
type SuggestionsActionPayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """Suggestions that could not be actioned."""
  notActioned: [String!]!

  """Successfully actioned results."""
  results: [SuggestionsActionResult!]!
}

"""The result of actioning a suggestion."""
type SuggestionsActionResult {
  """The service alias that was attached."""
  alias: String

  """
  The name of the service that the action was performed on or created by the suggestion.
  """
  name: String!

  """
  The ID of the service that was created or that the action was performed on.
  """
  serviceId: String!

  """The ID of the suggestion that was actioned."""
  suggestionId: String!

  """The type of action that was performed on the suggestion."""
  type: String!
}

"""Sort possibilities for suggestions."""
enum SuggestionSortEnum {
  """Order by `alias` ascending"""
  alias_ASC

  """Order by `alias` descending"""
  alias_DESC

  """
  translation missing: en.graphql.types.suggestion_sort_enum.created_at_asc
  """
  created_at_ASC

  """
  translation missing: en.graphql.types.suggestion_sort_enum.created_at_desc
  """
  created_at_DESC
}

"""A source of a suggestion."""
union SuggestionSource = AlertSource | Repository

"""The connection type for SuggestionSource."""
type SuggestionSourceConnection {
  """A list of edges."""
  edges: [SuggestionSourceEdge]

  """A list of nodes."""
  nodes: [SuggestionSource]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!
}

"""An edge in a connection."""
type SuggestionSourceEdge {
  """A cursor for use in pagination."""
  cursor: String!
  metadata: JSON

  """The item at the end of the edge."""
  node: SuggestionSource
}

"""Specifies the input fields used to update a suggestion."""
input SuggestionUpdateInput {
  """The ids of the suggestions to be updated."""
  suggestionIds: [ID!]!

  """Whether the suggestion should be ignored or not."""
  ignored: Boolean!
}

"""The return type of a `suggestionUpdate` mutation."""
type SuggestionUpdatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The ids of suggestions that have not been updated."""
  notActioned: [ID!]

  """The newly updated suggestions."""
  results: [Suggestion!]
}

"""Return type for the `systemChildAssign` mutation."""
type SystemChildAssignPayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""Return type for the `systemChildRemove` mutation."""
type SystemChildRemovePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""Specifies the input fields used in the `systemCreate` mutation."""
input SystemCreateInput {
  """The name for the system."""
  name: String!

  """The description for the system."""
  description: String

  """The id of the owner for the system."""
  ownerId: ID

  """The parent domain for the system."""
  parent: IdentifierInput

  """Additional information about the system."""
  note: String
}

"""Return type for the `systemCreate` mutation."""
type SystemCreatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""Specifies the input fields used in the `systemUpdate` mutation."""
input SystemUpdateInput {
  """The name for the system."""
  name: String

  """The description for the system."""
  description: String

  """The id of the owner for the system."""
  ownerId: ID

  """The parent domain for the system."""
  parent: IdentifierInput

  """Additional information about the system."""
  note: String
}

"""Return type for the `systemUpdate` mutation."""
type SystemUpdatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""An arbitrary key-value pair associated with a resource."""
type Tag {
  """The unique identifier for the tag."""
  id: ID!

  """The tag's key."""
  key: String!

  """Whether the tag is locked or not."""
  locked: Boolean!

  """The resource that the tag applies to."""
  owner: TagOwner!

  """The internal ID for the tag."""
  plainId: Int!

  """The tag's value."""
  value: String!
}

"""Arguments used to query with a certain tag."""
input TagArgs {
  """The key of a tag."""
  key: String

  """The value of a tag."""
  value: String
}

"""Specifies the input fields used to assign tags."""
input TagAssignInput {
  """The id of the resource that the tags will be assigned to."""
  id: ID

  """The alias of the resource that tags will be added to."""
  alias: String

  """The type of resource `alias` refers to, if `alias` is provided."""
  type: TaggableResource = Service

  """The desired tags to assign to the resource."""
  tags: [TagInput!]!
}

"""The return type of a `tagAssign` mutation."""
type TagAssignPayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The new tags that have been assigned to the resource."""
  tags: [Tag!]
}

"""The connection type for Tag."""
type TagConnection {
  """
  The suggested items to use for selection based on the implemented type.
  """
  autocomplete(
    """The term used to find specific results."""
    searchTerm: String
  ): [String!]!

  """A list of edges."""
  edges: [TagEdge]

  """A list of nodes."""
  nodes: [Tag]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!
}

"""Specifies the input fields used to create a tag."""
input TagCreateInput {
  """The id of the resource that this tag will be added to."""
  id: ID

  """The alias of the resource that this tag will be added to."""
  alias: String

  """The type of resource `alias` refers to, if `alias` is provided."""
  type: TaggableResource = Service

  """The tag's key."""
  key: String!

  """The tag's value."""
  value: String!
}

"""The return type of a `tagCreate` mutation."""
type TagCreatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The newly created tag."""
  tag: Tag
}

type TagDefinedCheck implements Check {
  """Additional arguments required by some check types."""
  args: JSON

  """The campaign the check belongs to."""
  campaign: Campaign

  """The category that the check belongs to."""
  category: Category

  """The levels the check belongs to."""
  checkLevels: [CheckLevel!]

  """Description of the check type's purpose."""
  description: String!

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """If the check is enabled or not."""
  enabled: Boolean!

  """The filter that the check belongs to."""
  filter: Filter

  """Information needed to fix the check."""
  fix: JSON

  """The id of the check."""
  id: ID!

  """The integration this check uses."""
  integration: Integration @deprecated(reason: "Integration is now deprecated. Please use `integration` under the `CustomEventCheck` fragment instead.")

  """The level that the check belongs to."""
  level: Level

  """The display name of the check."""
  name: String!

  """Additional information about the check."""
  notes: String

  """The owner of the check."""
  owner: CheckOwner

  """The raw unsanitized additional information about the check."""
  rawNotes: String

  """The URL path for the check report."""
  reportHref: String!

  """Summary of stats for services associated to this check."""
  stats: Stats

  """The tag key where the tag predicate should be applied."""
  tagKey: String!

  """The condition that should be satisfied by the tag value."""
  tagPredicate: Predicate

  """The type of check."""
  type: CheckType!

  """The url to the check."""
  url: String!
}

"""Specifies the input fields used to delete a tag."""
input TagDeleteInput {
  """The id of the tag to be deleted."""
  id: ID!
}

"""The return type of a `tagDelete` mutation."""
type TagDeletePayload {
  """The id of the deleted tag."""
  deletedTagId: ID

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""An edge in a connection."""
type TagEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Tag
}

"""Possible types to apply tags to."""
enum TaggableResource {
  """Used to identify a Service."""
  Service

  """Used to identify a Repository."""
  Repository

  """Used to identify a Team."""
  Team
}

"""Specifies the basic input fields used to construct a tag."""
input TagInput {
  """The tag's key."""
  key: String!

  """The tag's value."""
  value: String!
}

"""A resource that a tag can be applied to."""
union TagOwner = Repository | Service | Team

"""The object type assigned to the tag"""
enum TagOwnerTypeEnum {
  """Tags that are assigned to services."""
  Service

  """Tags that are assigned to repositories."""
  Repository

  """Tags that are assigned to teams."""
  Team

  """Tags that are assigned to systems."""
  System

  """Tags that are assigned to domains."""
  Domain
}

"""The connection type for Tag."""
type TagRepositoryConnection {
  """A list of edges."""
  edges: [TagRepositoryEdge]

  """A list of nodes."""
  nodes: [Tag]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!
}

"""An edge in a connection."""
type TagRepositoryEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Tag
}

"""Specifies the input fields used to update a tag."""
input TagUpdateInput {
  """The id of the tag to be updated."""
  id: ID!

  """The tag's key."""
  key: String

  """The tag's value."""
  value: String
}

"""The return type of a `tagUpdate` mutation."""
type TagUpdatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """The newly updated tag."""
  tag: Tag
}

"""A team belongs to your organization. Teams can own multiple services."""
type Team {
  """The human-friendly, unique identifier for the team."""
  alias: String

  """A list of human-friendly, unique identifiers for the team."""
  aliases: [String!]!

  """The contacts for the team."""
  contacts: [Contact!]

  """A list of aliases and their details."""
  detailedAliases: [Alias!]!

  """The external UUID of this team."""
  externalUuid: String

  """The group this team belongs to."""
  group: Group

  """The relative path for this. Ex. /services/shopping_cart"""
  href: String!

  """
  A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
  """
  htmlUrl: String!

  """The unique identifier for the team."""
  id: ID!

  """The user who manages the team."""
  manager: User

  """The users that are on the team."""
  members(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): UserConnection

  """The team's display name."""
  name: String!

  """The raw unsanitized description of what the team is responsible for."""
  rawResponsibilities: String

  """A description of what the team is responsible for."""
  responsibilities: String

  """The check results of the team's services."""
  serviceStat: CheckStats!

  """The services the team is responsible for."""
  services(
    """
    A filter is used to select which services will have checks applied. It can also be used to filter services in reports.
    """
    filter: [ServiceFilterInput!]

    """
    The logical operator to be used in conjunction with multiple filters (requires filters to be supplied).
    """
    connective: ConnectiveEnum = and

    """A category that the resulting services will apply to."""
    category: CategoryFilterInput

    """translation missing: en.graphql.types.team.services.filter_id"""
    filterId: ID
  ): [Service!]!

  """A list of tags applied to the team."""
  tags(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): TagConnection
}

"""The connection type for Team."""
type TeamConnection {
  """A list of edges."""
  edges: [TeamEdge]

  """A list of nodes."""
  nodes: [Team]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!
}

"""Specifies the input fields used to create a team."""
input TeamCreateInput {
  """The email of the user who manages the team."""
  managerEmail: String

  """A description of what the team is responsible for."""
  responsibilities: String

  """The group this team belongs to."""
  group: IdentifierInput

  """A set of emails that identify users in OpsLevel"""
  members: [TeamMembershipUserInput!]

  """The team's display name."""
  name: String!

  """The contacts for the team."""
  contacts: [ContactInput!]
}

"""The return type of a `teamCreate` mutation."""
type TeamCreatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """A team belongs to your organization. Teams can own multiple services."""
  team: Team
}

"""Specifies the input fields used to delete a team."""
input TeamDeleteInput {
  """The id of the team to be deleted."""
  id: ID

  """The alias of the team to be deleted."""
  alias: String
}

"""The return type of a `teamDelete` mutation."""
type TeamDeletePayload {
  """The deleted team's alias."""
  deletedTeamAlias: String

  """The deleted team's id."""
  deletedTeamId: ID

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""An edge in a connection."""
type TeamEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Team
}

"""Input for adding members to a team"""
input TeamMembershipCreateInput {
  """The ID of the team to add members"""
  teamId: ID!

  """A set of emails that identify users in OpsLevel"""
  members: [TeamMembershipUserInput!]!
}

"""The response returned when creating memberships on teams"""
type TeamMembershipCreatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """A list of users that are a member of the team"""
  members: [User!]
}

"""Input for removing members from a team"""
input TeamMembershipDeleteInput {
  """The ID of the team to remove members from"""
  teamId: ID!

  """A set of emails that identify users in OpsLevel"""
  members: [TeamMembershipUserInput!]!
}

"""The response returned when removing memberships on teams"""
type TeamMembershipDeletePayload {
  """A list of users that have been removed from the team"""
  deletedMembers: [User!]

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""Input for specifiying members on a team"""
input TeamMembershipUserInput {
  """The user's email."""
  email: String!
}

"""Sort possibilities for teams."""
enum TeamSortEnum {
  """Order by `name` ascending"""
  name_ASC

  """Order by `name` descending"""
  name_DESC

  """Order by manager's name ascending."""
  manager_ASC

  """Order by manager's name descending."""
  manager_DESC

  """Alias to sort by `checks_passing` ascending."""
  service_stat_ASC

  """Alias to sort by `checks_passing` descending."""
  service_stat_DESC
}

"""Specifies the input fields used to update a team."""
input TeamUpdateInput {
  """The email of the user who manages the team."""
  managerEmail: String

  """A description of what the team is responsible for."""
  responsibilities: String

  """The group this team belongs to."""
  group: IdentifierInput

  """A set of emails that identify users in OpsLevel"""
  members: [TeamMembershipUserInput!]

  """The id of the team to be updated."""
  id: ID

  """The alias of the team to be updated."""
  alias: String

  """The team's display name."""
  name: String

  """The external UUID of this team."""
  extenralUuid: String
}

"""The return type of a `teamUpdate` mutation."""
type TeamUpdatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """A team belongs to your organization. Teams can own multiple services."""
  team: Team
}

type TerraformIntegration implements Integration {
  """The id of the group."""
  accountKey: String!

  """The path of the group."""
  accountName: String

  """The web url of the group."""
  accountUrl: String

  """Indicates whether or not the integration is currently active."""
  active: Boolean!

  """The publicly routable URL where the integration can be accessed."""
  baseUrl: String

  """Labels which relate this integration to similar integrations."""
  categories: [IntegrationCategory!]

  """The parameters used by the UI to display and configure integrations."""
  config: IntegrationConfig

  """The time this integration was created."""
  createdAt: ISO8601DateTime!

  """The display name of the integration."""
  displayName: String

  """The relative url to where the integration can be accessed."""
  href: String!

  """
  A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
  """
  htmlUrl: String!

  """The unique identifier for the integration."""
  id: ID!

  """
  The time that this integration was successfully installed, if null, this
  indicates the integration was not completed installed.
  """
  installedAt: ISO8601DateTime

  """
  The time this integration was invalidated, either from OpsLevel or via the external API.
  """
  invalidatedAt: ISO8601DateTime

  """The time an event payload was provided for this integration."""
  lastEventReceived: ISO8601DateTime

  """The name of the integration."""
  name: String!

  """The notification channel."""
  notificationChannel: String

  """
  Indicates whether OpsLevel will create service suggestions by analyzing the integration's repositories.
  """
  serviceDiscoveryEnabled: Boolean

  """
  Indicates if OpsLevel will manage Datadog monitor webhooks automatically. When
  set to false, you will be required to manually add the OpsLevel webhook to
  your Datadog monitor notification message.
  """
  setWebhooksOnMonitors: Boolean

  """
  The abbreviated or shorthand name for this integration, if any. Otherwise returns display name.
  """
  shortName: String

  """This integration was not installed within the installation window."""
  stale: Boolean!

  """If this integration is initializing and is not fully ready for use"""
  stillLoading: Boolean!

  """The type of the integration."""
  type: String!

  """Indicates if this integration is being uninstalled from OpsLevel."""
  uninstallInProgress: Boolean!

  """
  False when the integration has been unauthorized or removed by the remote system.
  """
  valid: Boolean!

  """The version of the integration that is installed."""
  version: String

  """The endpoint to send events via webhook (if applicable)."""
  webhookUrl: String
}

"""An integration is a way of extending OpsLevel functionality."""
type ThirdPartyIntegration {
  """Labels which relate this integration to similar integrations."""
  categories: [IntegrationCategory!]!

  """The integration check description."""
  checkDescription: String

  """The integration check button for create."""
  createButton: String

  """The integration check description on create."""
  createDescription: String

  """The integration check title on create."""
  createTitle: String

  """The link to the documentation."""
  docsLink: String!

  """The name of the integration."""
  name: String!

  """The tool or system that will connect with the integration."""
  type: String!
}

"""
A tier measures how critical or important a service is to your business.
"""
type Tier {
  """The human-friendly, unique identifier for the tier."""
  alias: String

  """A brief description of the tier."""
  description: String

  """The unique identifier for the tier."""
  id: ID!

  """The numerical representation of the tier."""
  index: Int

  """The display name of the tier."""
  name: String
}

"""Relevant timestamps."""
type Timestamps {
  """The time at which the entity was created."""
  createdAt: ISO8601DateTime!

  """The time at which the entity was most recently updated."""
  updatedAt: ISO8601DateTime!
}

"""A tool is used to support the operations of a service."""
type Tool {
  """The category that the tool belongs to."""
  category: ToolCategory

  """The human-friendly, unique identifier for the tool's category."""
  categoryAlias: String

  """The human readable category."""
  displayCategory: String!

  """The display name of the tool."""
  displayName: String

  """The environment that the tool belongs to."""
  environment: String

  """The unique identifier for the tool."""
  id: ID!

  """Whether the tool is locked by opslevel.yml."""
  locked: Boolean!

  """The unique DB ID for the tool."""
  plainId: Int!

  """The service that is associated to the tool."""
  service: Service!

  """The URL of the tool."""
  url: String!
}

"""The specific categories that a tool can belong to."""
enum ToolCategory {
  """Tools used for administrative purposes."""
  admin

  """Tools used as API documentation for this service."""
  api_documentation

  """Tools used for tracking issues."""
  backlog

  """Tools used for source code."""
  code

  """Tools used for building/unit testing a service."""
  continuous_integration

  """Tools used for deploying changes to a service."""
  deployment

  """Tools used for tracking/reporting errors."""
  errors

  """Tools used for managing feature flags."""
  feature_flag

  """Tools used for tracking/reporting the health of a service."""
  health_checks

  """Tools used to surface incidents on a service."""
  incidents

  """Tools used for tracking issues."""
  issue_tracking

  """Tools used for displaying logs from services."""
  logs

  """Tools used for tracking/reporting service metrics."""
  metrics

  """Tools used for orchestrating a service."""
  orchestrator

  """Tools that do not fit into the available categories."""
  other

  """Tools used for testing the resiliency of a service."""
  resiliency

  """Tools used for managing runbooks for a service."""
  runbooks

  """Tools used for performing security scans."""
  security_scans

  """Tools used for reporting the status of a service."""
  status_page

  """Tools used as a wiki for this service."""
  wiki
}

"""The connection type for Tool."""
type ToolConnection {
  """A list of edges."""
  edges: [ToolEdge]

  """A list of nodes."""
  nodes: [Tool]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of returned nodes."""
  totalCount: Int!
}

"""Specifies the input fields used to create a tool."""
input ToolCreateInput {
  """The category that the tool belongs to."""
  category: ToolCategory!

  """The display name of the tool."""
  displayName: String!

  """The URL of the tool."""
  url: String!

  """The environment that the tool belongs to."""
  environment: String

  """The id of the service the tool will be assigned to."""
  serviceId: ID

  """The alias of the service the tool will be assigned to."""
  serviceAlias: String
}

"""The return type of a `toolCreate` mutation."""
type ToolCreatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """A tool is used to support the operations of a service."""
  tool: Tool
}

"""Specifies the input fields used to delete a tool."""
input ToolDeleteInput {
  """The id of the tool to be deleted."""
  id: ID!
}

"""The return type of a `toolDelete` mutation."""
type ToolDeletePayload {
  """The deleted tool's id."""
  deletedToolId: ID

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""An edge in a connection."""
type ToolEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Tool
}

"""Specifies the input fields used to update a tool."""
input ToolUpdateInput {
  """The id of the tool to be updated."""
  id: ID!

  """The category that the tool belongs to."""
  category: ToolCategory

  """The display name of the tool."""
  displayName: String

  """The URL of the tool."""
  url: String

  """The environment that the tool belongs to."""
  environment: String
}

"""The return type of a `toolUpdate` payload."""
type ToolUpdatePayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """A tool is used to support the operations of a service."""
  tool: Tool
}

type ToolUsageCheck implements Check {
  """Additional arguments required by some check types."""
  args: JSON

  """The campaign the check belongs to."""
  campaign: Campaign

  """The category that the check belongs to."""
  category: Category

  """The levels the check belongs to."""
  checkLevels: [CheckLevel!]

  """Description of the check type's purpose."""
  description: String!

  """The date when the check will be automatically enabled."""
  enableOn: ISO8601DateTime

  """If the check is enabled or not."""
  enabled: Boolean!

  """The condition that the environment should satisfy to be evaluated."""
  environmentPredicate: Predicate

  """The filter that the check belongs to."""
  filter: Filter

  """Information needed to fix the check."""
  fix: JSON

  """The id of the check."""
  id: ID!

  """The integration this check uses."""
  integration: Integration @deprecated(reason: "Integration is now deprecated. Please use `integration` under the `CustomEventCheck` fragment instead.")

  """The level that the check belongs to."""
  level: Level

  """The display name of the check."""
  name: String!

  """Additional information about the check."""
  notes: String

  """The owner of the check."""
  owner: CheckOwner

  """The raw unsanitized additional information about the check."""
  rawNotes: String

  """The URL path for the check report."""
  reportHref: String!

  """Summary of stats for services associated to this check."""
  stats: Stats

  """The category that the tool belongs to."""
  toolCategory: ToolCategory!

  """The condition that the tool name should satisfy to be evaluated."""
  toolNamePredicate: Predicate

  """The condition that the tool url should satisfy to be evaludated."""
  toolUrlPredicate: Predicate

  """The type of check."""
  type: CheckType!

  """The url to the check."""
  url: String!
}

"""Operations that can be used on filters."""
enum TypeEnum {
  """Contains a specific value."""
  contains

  """Does not contain a specific value."""
  does_not_contain

  """Does not equal a specific value."""
  does_not_equal

  """Specific attribute does not exist."""
  does_not_exist

  """Ends with a specific value."""
  ends_with

  """Equals a specific value."""
  equals

  """Specific attribute exists."""
  exists

  """Greater than or equal to a specific value (numeric only)."""
  greater_than_or_equal_to

  """Less than or equal to a specific value (numeric only)."""
  less_than_or_equal_to

  """Starts with a specific value."""
  starts_with

  """Satisfies version constraint (tag value only)."""
  satisfies_version_constraint

  """Matches a value using a regular expression."""
  matches_regex

  """Belongs to a group's hierarchy."""
  belongs_to
}

"""A user is someone who belongs to an organization."""
type User {
  """The path to activate this user (legacy)."""
  activatePath: String!

  """True if this user is active, false if they are deactivated."""
  active: Boolean!

  """The number of api tokens owned by this user"""
  apiTokenCount: Int!

  """A link to the user's avatar."""
  avatar: String!

  """The checks owned by the user (through their teams)."""
  checks: [Check!]!

  """The contacts for the user"""
  contacts: [Contact!]

  """Policies relating to actions that can be performed on the user."""
  currentUserPolicies: UserPolicies!

  """The path to deactivate this user (legacy)."""
  deactivatePath: String!

  """True if this user is deactivated and cannot be used."""
  deactivated: Boolean!

  """The time that the user was deactivated."""
  deactivatedAt: ISO8601DateTime

  """The path to delete this user (legacy)."""
  deletePath: String!

  """The path to edit this user (legacy)."""
  editPath: String!

  """The user's email."""
  email: String!

  """Whether this user is managed externally."""
  hasProvider: Boolean!

  """The relative path for this. Ex. /services/shopping_cart"""
  href: String!

  """
  A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
  """
  htmlUrl: String!

  """The unique identifier for the user."""
  id: ID!

  """The path to log out this user from all sessions (legacy)."""
  invalidateSessionPath: String!

  """The path to list this user (legacy)."""
  listPath: String!

  """The user's full name."""
  name: String!

  """Whether the user accepted their invitation to OpsLevel or not."""
  pending: Boolean!

  """The internal ID for the user."""
  plainId: Int!

  """What provisioned this user."""
  provisionedBy: ProvisionedByEnum

  """The repositories owned by the user (through their teams)."""
  repositories(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int

    """The field and direction to order the resulting repositories by."""
    sortBy: RepositorySortEnum
  ): RepositoryConnection!

  """The path to resend the invitation to this user (legacy)."""
  resendInvitePath: String!

  """The user's assigned role."""
  role: UserRole

  """The services owned by the user (through their teams)."""
  services(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int

    """The field and direction to order the resulting services by."""
    sortBy: ServiceSortEnum
  ): ServiceConnection!

  """The path to show this user (legacy)."""
  showPath: String!

  """The notifications the user is subscribed to."""
  subscriptions(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): SubscriptionConnection!

  """The teams the user is a member of."""
  teams(
    """
    Limits the returned items to the elements in the list that come after the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items after the specified cursor.
    """
    after: String

    """
    Limits the returned items to the elements in the list that come before the
    specified cursor. If *first* and *last* are unspecified, returns the first
    100 items before the specified cursor.
    """
    before: String

    """
    Limits the number of returned items to the first *n* elements from the list. A maximum of 100 items can be returned.
    """
    first: Int

    """
    Limits the number of returned items to the last *n* elements from the list. A maximum of 100 items can be returned.
    """
    last: Int
  ): TeamConnection!

  """Relevant timestamps for the user."""
  timestamps: Timestamps!
}

"""The connection type for User."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]

  """
  The number of users on the account that match the provided filters or search criteria.
  """
  filteredCount: Int

  """A list of nodes."""
  nodes: [User]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The total number of users on the account."""
  totalCount: Int!
}

"""The return type of the user delete mutation."""
type UserDeletePayload {
  """The email address of the deleted user."""
  deletedEmail: String

  """The ID of the deleted user."""
  deletedId: ID

  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!
}

"""An edge in a connection."""
type UserEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: User
}

"""
Specifies the input fields used to identify a user. Exactly one field should be provided.
"""
input UserIdentifierInput {
  """The ID of the user."""
  id: ID

  """The email address of the user."""
  email: String
}

"""Specifies the input fields used to create and update a user."""
input UserInput {
  """The name of the user."""
  name: String

  """The access role (e.g. user vs admin) of the user."""
  role: UserRole

  """Whether or not the user is active."""
  active: Boolean
}

"""The return type of user management mutations."""
type UserPayload {
  """List of errors that occurred while executing the mutation."""
  errors: [Error!]!

  """A user is someone who belongs to an organization."""
  user: User
}

type UserPolicies {
  """Whether the user can be activated."""
  activate: Boolean!

  """Whether the user can be deactivated."""
  deactivate: Boolean!

  """Whether the user can be destroyed."""
  destroy: Boolean!

  """Whether the user's emails can be updated."""
  editEmails: Boolean!

  """Whether the user can be logged out."""
  invalidateSession: Boolean!

  """Whether the user can have the invitation resent."""
  resendInvite: Boolean!

  """Whether the current user can be updated."""
  update: Boolean!
}

"""A role that can be assigned to a user."""
enum UserRole {
  """A regular user on the account."""
  user

  """An administrator on the account."""
  admin
}

"""translation missing: en.graphql.types.users_filter_enum.self"""
enum UsersFilterEnum {
  """translation missing: en.graphql.types.users_filter_enum.name"""
  name

  """translation missing: en.graphql.types.users_filter_enum.email"""
  email

  """translation missing: en.graphql.types.users_filter_enum.role"""
  role

  """translation missing: en.graphql.types.users_filter_enum.pending"""
  pending
}

"""translation missing: en.graphql.types.users_filter_input.self"""
input UsersFilterInput {
  """translation missing: en.graphql.types.users_filter_input.key"""
  key: UsersFilterEnum!

  """translation missing: en.graphql.types.users_filter_input.arg"""
  arg: String

  """translation missing: en.graphql.types.users_filter_input.type"""
  type: BasicTypeEnum = equals
}

"""Sort possibilities for users."""
enum UsersSortEnum {
  """Sort by `name` ascending."""
  name_ASC

  """Sort by `name` descending."""
  name_DESC

  """Sort by `email` ascending."""
  email_ASC

  """Sort by `email` descending."""
  email_DESC

  """Sort by `pending` ascending."""
  pending_ASC

  """Sort by `pending` descending."""
  pending_DESC

  """Sort by `status` ascending."""
  status_ASC

  """Sort by `status` descending."""
  status_DESC

  """Sort by `role` ascending."""
  role_ASC

  """Sort by `role` descending."""
  role_DESC
}
