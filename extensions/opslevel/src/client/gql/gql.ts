/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n    query get_all_services($cursor: String) {\n        account {\n            servicesV2(after: $cursor) {\n                pageInfo {\n                    endCursor\n                    hasNextPage\n                }\n                nodes {\n                    ...Service\n                }\n            }\n        }\n    }\n\n    fragment Service on Service {\n        id\n        alias\n        name\n        linkable\n        href\n        locked\n        description\n        htmlUrl\n        owner {\n            name\n            href\n            contacts {\n                ...Contact\n            }\n        }\n        tier {\n            name\n            index\n        }\n        product\n        language\n        framework\n        aliases\n        note\n        tags {\n            nodes {\n                plainId\n                id\n                key\n                value\n            }\n        }\n        service_stat: checkStats {\n            num_checks: totalChecks\n            num_passing_checks: totalPassingChecks\n        }\n        lastDeploy {\n            deployedAt\n            commitSha\n            author\n        }\n        hasServiceConfigError\n        service_level: serviceStats {\n            ...ServiceLevel\n        }\n        level_index: levelIndex\n        tools(bestProdEnv: true) {\n            nodes {\n                ...ServiceTool\n            }\n        }\n        alertStatus {\n            index\n            type\n        }\n        creationSource\n        onCalls(first: 10, sortBy: name_ASC) {\n            nodes {\n                name\n                externalEmail\n                gravatarHref\n            }\n        }\n        defaultServiceRepository {\n            repository {\n                displayName\n                url\n            }\n        }\n    }\n\n    fragment ServiceLevel on ServiceStats {\n        rubric {\n            level {\n                index\n                name\n            }\n        }\n    }\n\n    fragment ServiceTool on Tool {\n        id\n        displayCategory\n        displayName\n        environment\n        url\n    }\n\n    fragment Contact on Contact {\n        displayName\n        targetHref\n        type\n    }\n": types.Get_All_ServicesDocument,
    "\n  query search($after: String, $first: Int, $sortBy: ServiceSortEnum, $searchText: String) {\n    account {\n      servicesV2(after: $after, first: $first, sortBy: $sortBy, searchTerm: $searchText) {\n        filteredCount\n        edges {\n          node {\n            ...ServiceParts\n          }\n        }\n      }\n    }\n  }\n\n  fragment ServiceParts on Service {\n    id\n    alias\n    name\n    linkable\n    href\n    locked\n    description\n    htmlUrl\n    owner {\n      name\n      href\n    }\n    tier {\n      name\n      index\n    }\n    product\n    language\n    framework\n    aliases\n    note\n    tags {\n      nodes {\n        plainId\n        id\n        key\n        value\n      }\n    }\n    service_stat: checkStats {\n      num_checks: totalChecks\n      num_passing_checks: totalPassingChecks\n    }\n    lastDeploy {\n      deployedAt\n      commitSha\n      author\n    }\n    hasServiceConfigError\n    service_level: serviceStats {\n      ...ServiceLevel\n    }\n    level_index: levelIndex\n    tools(bestProdEnv: true) {\n      nodes {\n        displayCategory\n        displayName\n        environment\n        url\n      }\n    }\n    alertStatus {\n      index\n      type\n    }\n    creationSource\n    onCalls(first: 10, sortBy: name_ASC) {\n        nodes {\n          name\n          externalEmail\n        }\n      }\n  }\n\n  fragment ServiceLevel on ServiceStats {\n    rubric {\n      level {\n        index\n        name\n      }\n    }\n  }\n": types.SearchDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query get_all_services($cursor: String) {\n        account {\n            servicesV2(after: $cursor) {\n                pageInfo {\n                    endCursor\n                    hasNextPage\n                }\n                nodes {\n                    ...Service\n                }\n            }\n        }\n    }\n\n    fragment Service on Service {\n        id\n        alias\n        name\n        linkable\n        href\n        locked\n        description\n        htmlUrl\n        owner {\n            name\n            href\n            contacts {\n                ...Contact\n            }\n        }\n        tier {\n            name\n            index\n        }\n        product\n        language\n        framework\n        aliases\n        note\n        tags {\n            nodes {\n                plainId\n                id\n                key\n                value\n            }\n        }\n        service_stat: checkStats {\n            num_checks: totalChecks\n            num_passing_checks: totalPassingChecks\n        }\n        lastDeploy {\n            deployedAt\n            commitSha\n            author\n        }\n        hasServiceConfigError\n        service_level: serviceStats {\n            ...ServiceLevel\n        }\n        level_index: levelIndex\n        tools(bestProdEnv: true) {\n            nodes {\n                ...ServiceTool\n            }\n        }\n        alertStatus {\n            index\n            type\n        }\n        creationSource\n        onCalls(first: 10, sortBy: name_ASC) {\n            nodes {\n                name\n                externalEmail\n                gravatarHref\n            }\n        }\n        defaultServiceRepository {\n            repository {\n                displayName\n                url\n            }\n        }\n    }\n\n    fragment ServiceLevel on ServiceStats {\n        rubric {\n            level {\n                index\n                name\n            }\n        }\n    }\n\n    fragment ServiceTool on Tool {\n        id\n        displayCategory\n        displayName\n        environment\n        url\n    }\n\n    fragment Contact on Contact {\n        displayName\n        targetHref\n        type\n    }\n"): (typeof documents)["\n    query get_all_services($cursor: String) {\n        account {\n            servicesV2(after: $cursor) {\n                pageInfo {\n                    endCursor\n                    hasNextPage\n                }\n                nodes {\n                    ...Service\n                }\n            }\n        }\n    }\n\n    fragment Service on Service {\n        id\n        alias\n        name\n        linkable\n        href\n        locked\n        description\n        htmlUrl\n        owner {\n            name\n            href\n            contacts {\n                ...Contact\n            }\n        }\n        tier {\n            name\n            index\n        }\n        product\n        language\n        framework\n        aliases\n        note\n        tags {\n            nodes {\n                plainId\n                id\n                key\n                value\n            }\n        }\n        service_stat: checkStats {\n            num_checks: totalChecks\n            num_passing_checks: totalPassingChecks\n        }\n        lastDeploy {\n            deployedAt\n            commitSha\n            author\n        }\n        hasServiceConfigError\n        service_level: serviceStats {\n            ...ServiceLevel\n        }\n        level_index: levelIndex\n        tools(bestProdEnv: true) {\n            nodes {\n                ...ServiceTool\n            }\n        }\n        alertStatus {\n            index\n            type\n        }\n        creationSource\n        onCalls(first: 10, sortBy: name_ASC) {\n            nodes {\n                name\n                externalEmail\n                gravatarHref\n            }\n        }\n        defaultServiceRepository {\n            repository {\n                displayName\n                url\n            }\n        }\n    }\n\n    fragment ServiceLevel on ServiceStats {\n        rubric {\n            level {\n                index\n                name\n            }\n        }\n    }\n\n    fragment ServiceTool on Tool {\n        id\n        displayCategory\n        displayName\n        environment\n        url\n    }\n\n    fragment Contact on Contact {\n        displayName\n        targetHref\n        type\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query search($after: String, $first: Int, $sortBy: ServiceSortEnum, $searchText: String) {\n    account {\n      servicesV2(after: $after, first: $first, sortBy: $sortBy, searchTerm: $searchText) {\n        filteredCount\n        edges {\n          node {\n            ...ServiceParts\n          }\n        }\n      }\n    }\n  }\n\n  fragment ServiceParts on Service {\n    id\n    alias\n    name\n    linkable\n    href\n    locked\n    description\n    htmlUrl\n    owner {\n      name\n      href\n    }\n    tier {\n      name\n      index\n    }\n    product\n    language\n    framework\n    aliases\n    note\n    tags {\n      nodes {\n        plainId\n        id\n        key\n        value\n      }\n    }\n    service_stat: checkStats {\n      num_checks: totalChecks\n      num_passing_checks: totalPassingChecks\n    }\n    lastDeploy {\n      deployedAt\n      commitSha\n      author\n    }\n    hasServiceConfigError\n    service_level: serviceStats {\n      ...ServiceLevel\n    }\n    level_index: levelIndex\n    tools(bestProdEnv: true) {\n      nodes {\n        displayCategory\n        displayName\n        environment\n        url\n      }\n    }\n    alertStatus {\n      index\n      type\n    }\n    creationSource\n    onCalls(first: 10, sortBy: name_ASC) {\n        nodes {\n          name\n          externalEmail\n        }\n      }\n  }\n\n  fragment ServiceLevel on ServiceStats {\n    rubric {\n      level {\n        index\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query search($after: String, $first: Int, $sortBy: ServiceSortEnum, $searchText: String) {\n    account {\n      servicesV2(after: $after, first: $first, sortBy: $sortBy, searchTerm: $searchText) {\n        filteredCount\n        edges {\n          node {\n            ...ServiceParts\n          }\n        }\n      }\n    }\n  }\n\n  fragment ServiceParts on Service {\n    id\n    alias\n    name\n    linkable\n    href\n    locked\n    description\n    htmlUrl\n    owner {\n      name\n      href\n    }\n    tier {\n      name\n      index\n    }\n    product\n    language\n    framework\n    aliases\n    note\n    tags {\n      nodes {\n        plainId\n        id\n        key\n        value\n      }\n    }\n    service_stat: checkStats {\n      num_checks: totalChecks\n      num_passing_checks: totalPassingChecks\n    }\n    lastDeploy {\n      deployedAt\n      commitSha\n      author\n    }\n    hasServiceConfigError\n    service_level: serviceStats {\n      ...ServiceLevel\n    }\n    level_index: levelIndex\n    tools(bestProdEnv: true) {\n      nodes {\n        displayCategory\n        displayName\n        environment\n        url\n      }\n    }\n    alertStatus {\n      index\n      type\n    }\n    creationSource\n    onCalls(first: 10, sortBy: name_ASC) {\n        nodes {\n          name\n          externalEmail\n        }\n      }\n  }\n\n  fragment ServiceLevel on ServiceStats {\n    rubric {\n      level {\n        index\n        name\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;