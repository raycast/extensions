import React from "react";
import { Form, ActionPanel, Action, showToast, Toast, getPreferenceValues, popToRoot } from "@raycast/api";
import { showFailureToast } from "@raycast/utils";
import fs from "fs";
import type { Preferences } from "./types";
import { parseSitesXml, loadSites, saveSites } from "./utils";

export function ImportSitesForm({ onDone }: { onDone: () => void }) {
  // read the xmlFolder preference
  const { xmlFolder } = getPreferenceValues<Preferences>();

  async function handleSubmit(values: { file: string[] }) {
    try {
      const xmlPath = values.file[0];
      const xml = await fs.promises.readFile(xmlPath, "utf-8");
      const imported = parseSitesXml(xml);
      const existing = await loadSites();
      const urls = new Set(existing.map((s) => s.url));
      const newSites = imported.filter((s) => !urls.has(s.url));
      await saveSites([...existing, ...newSites]);
      await showToast(Toast.Style.Success, `Imported ${newSites.length} new site(s)`);
      onDone();
    } catch (error) {
      console.error(error);
      await showFailureToast(error, { title: "Could not import sites" });
    }
  }

  return (
    <Form
      navigationTitle="Import Sites"
      actions={
        <ActionPanel>
          <Action.SubmitForm title="Import" onSubmit={handleSubmit} />
        </ActionPanel>
      }
    >
      <Form.FilePicker
        id="file"
        title="Choose XML File"
        allowMultipleSelection={false}
        canChooseFiles={true}
        canChooseDirectories={false}
        defaultValue={xmlFolder ? [xmlFolder] : undefined}
        info="This is expecting a file formatted like the one generated by Export Sites."
      />
    </Form>
  );
}

// Direct‚Äêlaunch command wrapper
export default function ImportSitesCommand() {
  return (
    <ImportSitesForm
      onDone={async () => {
        // runs when Import Sites is invoked directly
        try {
          // navigate back to root
          await popToRoot();
        } catch (error) {
          console.error("popToRoot failed:", error);
          await showToast(Toast.Style.Failure, "Navigation failed");
        }
      }}
    />
  );
}
