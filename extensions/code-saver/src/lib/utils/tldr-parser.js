/* eslint-disable*/
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var tldrParser = (function () {
  var o = function (k, v, o, l) {
      for (o = o || {}, l = k.length; l--; o[k[l]] = v);
      return o;
    },
    $V0 = [1, 8],
    $V1 = [5, 13],
    $V2 = [1, 5, 8, 23],
    $V3 = [2, 13],
    $V4 = [8, 23],
    $V5 = [2, 16],
    $V6 = [1, 20],
    $V7 = [1, 5, 8, 13, 23],
    $V8 = [5, 26],
    $V9 = [1, 36],
    $Va = [1, 5, 8, 23, 26],
    $Vb = [26, 28, 29];
  var parser = {
    trace: function trace() {},
    yy: {},
    symbols_: {
      error: 2,
      page: 3,
      title: 4,
      NEWLINE: 5,
      info: 6,
      examples: 7,
      TEXT: 8,
      HASH: 9,
      TITLE: 10,
      description: 11,
      information_link: 12,
      GREATER_THAN: 13,
      DESCRIPTION_LINE: 14,
      INFORMATION_LINK: 15,
      ANGLE_BRACKETED_URL: 16,
      END_INFORMATION_LINK_URL: 17,
      END_INFORMATION_LINK: 18,
      example: 19,
      maybe_newline: 20,
      example_description: 21,
      example_commands: 22,
      DASH: 23,
      EXAMPLE_DESCRIPTION: 24,
      example_command: 25,
      BACKTICK: 26,
      example_command_inner: 27,
      COMMAND_TEXT: 28,
      COMMAND_TOKEN: 29,
      $accept: 0,
      $end: 1,
    },
    terminals_: {
      2: "error",
      5: "NEWLINE",
      8: "TEXT",
      9: "HASH",
      10: "TITLE",
      13: "GREATER_THAN",
      14: "DESCRIPTION_LINE",
      15: "INFORMATION_LINK",
      16: "ANGLE_BRACKETED_URL",
      17: "END_INFORMATION_LINK_URL",
      18: "END_INFORMATION_LINK",
      23: "DASH",
      24: "EXAMPLE_DESCRIPTION",
      26: "BACKTICK",
      28: "COMMAND_TEXT",
      29: "COMMAND_TOKEN",
    },
    productions_: [
      0,
      [3, 4],
      [3, 3],
      [3, 4],
      [4, 2],
      [4, 1],
      [6, 1],
      [6, 2],
      [11, 2],
      [11, 3],
      [12, 4],
      [12, 3],
      [12, 5],
      [7, 0],
      [7, 2],
      [19, 4],
      [20, 0],
      [20, 1],
      [21, 2],
      [21, 1],
      [22, 1],
      [22, 2],
      [25, 3],
      [27, 0],
      [27, 2],
      [27, 2],
    ],
    performAction: function anonymous(
      yytext,
      yyleng,
      yylineno,
      yy,
      yystate /* action[1] */,
      $$ /* vstack */,
      _$ /* lstack */
    ) {
      /* this == yyval */

      var $0 = $$.length - 1;
      switch (yystate) {
        case 2:
          this.$ = yy.error(this._$, "TLDR006");
          break;
        case 3:
          this.$ = yy.error(this._$, "TLDR101") || yy.addDescription($$[$0 - 1]);
          break;
        case 4:
          this.$ = yy.setTitle($$[$0]);
          break;
        case 5:
          this.$ = yy.error(_$[$0], "TLDR106") || yy.setTitle($$[$0]);
          break;
        case 8:
        case 9:
          this.$ = yy.addDescription($$[$0]);
          break;
        case 10:
          this.$ = yy.addInformationLink($$[$0 - 1]);
          break;
        case 11:
          this.$ = yy.error(this._$, "TLDR017") || yy.addDescription($$[$0 - 1] + $$[$0].trim());
          break;
        case 12:
          this.$ = yy.error(this._$, "TLDR018");
          break;
        case 15:
          yy.addExample($$[$0 - 2], $$[$0]);
          // Just use the description line's location, easy to find
          if (!$$[$0 - 3]) yy.error(_$[$0 - 2], "TLDR007");
          if (!$$[$0 - 1]) yy.error(_$[$0], "TLDR007");

          break;
        case 18:
          this.$ = $$[$0];
          break;
        case 19:
          this.$ = yy.error(this._$, "TLDR102") || $$[$0];
          break;
        case 20:
          this.$ = [$$[$0]];
          break;
        case 21:
          this.$ = yy.error(_$[$0], "TLDR105") || $$[$0 - 1];
          break;
        case 22:
          this.$ = $$[$0 - 1];
          break;
        case 23:
          this.$ = [];
          break;
        case 24:
          this.$ = [].concat($$[$0 - 1], yy.createCommandText($$[$0]));
          break;
        case 25:
          this.$ = [].concat($$[$0 - 1], yy.createToken($$[$0]));
          break;
      }
    },
    table: [
      { 3: 1, 4: 2, 8: [1, 4], 9: [1, 3] },
      { 1: [3] },
      { 5: [1, 5], 6: 6, 11: 7, 13: $V0 },
      { 10: [1, 9] },
      o($V1, [2, 5]),
      { 6: 10, 8: [1, 11], 11: 7, 13: $V0 },
      o($V2, $V3, { 7: 12 }),
      o($V2, [2, 6], { 12: 13, 13: [1, 14] }),
      { 14: [1, 15] },
      o($V1, [2, 4]),
      o($V2, $V3, { 7: 16 }),
      o($V2, $V3, { 7: 17 }),
      o($V4, $V5, { 19: 18, 20: 19, 1: [2, 2], 5: $V6 }),
      o($V2, [2, 7], { 13: [1, 21] }),
      { 14: [1, 22], 15: [1, 23] },
      o($V7, [2, 8]),
      o($V4, $V5, { 19: 18, 20: 19, 1: [2, 1], 5: $V6 }),
      o($V4, $V5, { 19: 18, 20: 19, 1: [2, 3], 5: $V6 }),
      o($V2, [2, 14]),
      { 8: [1, 26], 21: 24, 23: [1, 25] },
      o([8, 23, 26], [2, 17]),
      { 15: [1, 27] },
      o($V7, [2, 9]),
      { 16: [1, 28], 18: [1, 29] },
      { 5: $V6, 20: 30, 26: $V5 },
      { 24: [1, 31] },
      o($V8, [2, 19]),
      { 16: [1, 32] },
      { 17: [1, 33] },
      o($V7, [2, 11]),
      { 22: 34, 25: 35, 26: $V9 },
      o($V8, [2, 18]),
      { 17: [1, 37] },
      o($V7, [2, 10]),
      o($V2, [2, 15], { 25: 38, 26: $V9 }),
      o($Va, [2, 20]),
      o($Vb, [2, 23], { 27: 39 }),
      o($V7, [2, 12]),
      o($Va, [2, 21]),
      { 26: [1, 40], 28: [1, 41], 29: [1, 42] },
      o($Va, [2, 22]),
      o($Vb, [2, 24]),
      o($Vb, [2, 25]),
    ],
    defaultActions: {},
    parseError: function parseError(str, hash) {
      if (hash.recoverable) {
        this.trace(str);
      } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
      }
    },
    parse: function parse(input) {
      var self = this,
        stack = [0],
        tstack = [],
        vstack = [null],
        lstack = [],
        table = this.table,
        yytext = "",
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;
      var args = lstack.slice.call(arguments, 1);
      var lexer = Object.create(this.lexer);
      var sharedState = { yy: {} };
      for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
          sharedState.yy[k] = this.yy[k];
        }
      }
      lexer.setInput(input, sharedState.yy);
      sharedState.yy.lexer = lexer;
      sharedState.yy.parser = this;
      if (typeof lexer.yylloc == "undefined") {
        lexer.yylloc = {};
      }
      var yyloc = lexer.yylloc;
      lstack.push(yyloc);
      var ranges = lexer.options && lexer.options.ranges;
      if (typeof sharedState.yy.parseError === "function") {
        this.parseError = sharedState.yy.parseError;
      } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
      }
      function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
      }
      var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        if (typeof token !== "number") {
          token = self.symbols_[token] || token;
        }
        return token;
      };
      var symbol,
        preErrorSymbol,
        state,
        action,
        a,
        r,
        yyval = {},
        p,
        len,
        newState,
        expected;
      while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
          action = this.defaultActions[state];
        } else {
          if (symbol === null || typeof symbol == "undefined") {
            symbol = lex();
          }
          action = table[state] && table[state][symbol];
        }
        if (typeof action === "undefined" || !action.length || !action[0]) {
          var errStr = "";
          expected = [];
          for (p in table[state]) {
            if (this.terminals_[p] && p > TERROR) {
              expected.push("'" + this.terminals_[p] + "'");
            }
          }
          if (lexer.showPosition) {
            errStr =
              "Parse error on line " +
              (yylineno + 1) +
              ":\n" +
              lexer.showPosition() +
              "\nExpecting " +
              expected.join(", ") +
              ", got '" +
              (this.terminals_[symbol] || symbol) +
              "'";
          } else {
            errStr =
              "Parse error on line " +
              (yylineno + 1) +
              ": Unexpected " +
              (symbol == EOF ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
          }
          this.parseError(errStr, {
            text: lexer.match,
            token: this.terminals_[symbol] || symbol,
            line: lexer.yylineno,
            loc: yyloc,
            expected: expected,
          });
        }
        if (action[0] instanceof Array && action.length > 1) {
          throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
        }
        switch (action[0]) {
          case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
              yyleng = lexer.yyleng;
              yytext = lexer.yytext;
              yylineno = lexer.yylineno;
              yyloc = lexer.yylloc;
              if (recovering > 0) {
                recovering--;
              }
            } else {
              symbol = preErrorSymbol;
              preErrorSymbol = null;
            }
            break;
          case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
              first_line: lstack[lstack.length - (len || 1)].first_line,
              last_line: lstack[lstack.length - 1].last_line,
              first_column: lstack[lstack.length - (len || 1)].first_column,
              last_column: lstack[lstack.length - 1].last_column,
            };
            if (ranges) {
              yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }
            r = this.performAction.apply(
              yyval,
              [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args)
            );
            if (typeof r !== "undefined") {
              return r;
            }
            if (len) {
              stack = stack.slice(0, -1 * len * 2);
              vstack = vstack.slice(0, -1 * len);
              lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
          case 3:
            return true;
        }
      }
      return true;
    },
  };
  /* generated by jison-lex 0.3.4 */
  var lexer = (function () {
    var lexer = {
      EOF: 1,

      parseError: function parseError(str, hash) {
        if (this.yy.parser) {
          this.yy.parser.parseError(str, hash);
        } else {
          throw new Error(str);
        }
      },

      // resets the lexer, sets new input
      setInput: function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = "";
        this.conditionStack = ["INITIAL"];
        this.yylloc = {
          first_line: 1,
          first_column: 0,
          last_line: 1,
          last_column: 0,
        };
        if (this.options.ranges) {
          this.yylloc.range = [0, 0];
        }
        this.offset = 0;
        return this;
      },

      // consumes and returns one char from the input
      input: function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
          this.yylineno++;
          this.yylloc.last_line++;
        } else {
          this.yylloc.last_column++;
        }
        if (this.options.ranges) {
          this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
      },

      // unshifts one char (or a string) into the input
      unput: function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
          this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
          first_line: this.yylloc.first_line,
          last_line: this.yylineno + 1,
          first_column: this.yylloc.first_column,
          last_column: lines
            ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) +
              oldLines[oldLines.length - lines.length].length -
              lines[0].length
            : this.yylloc.first_column - len,
        };

        if (this.options.ranges) {
          this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
      },

      // When called from action, caches matched text and appends it on next action
      more: function () {
        this._more = true;
        return this;
      },

      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
      reject: function () {
        if (this.options.backtrack_lexer) {
          this._backtrack = true;
        } else {
          return this.parseError(
            "Lexical error on line " +
              (this.yylineno + 1) +
              ". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n" +
              this.showPosition(),
            {
              text: "",
              token: null,
              line: this.yylineno,
            }
          );
        }
        return this;
      },

      // retain first n characters of the match
      less: function (n) {
        this.unput(this.match.slice(n));
      },

      // displays already matched input, i.e. for error messages
      pastInput: function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? "..." : "") + past.substr(-20).replace(/\n/g, "");
      },

      // displays upcoming input, i.e. for error messages
      upcomingInput: function () {
        var next = this.match;
        if (next.length < 20) {
          next += this._input.substr(0, 20 - next.length);
        }
        return (next.substr(0, 20) + (next.length > 20 ? "..." : "")).replace(/\n/g, "");
      },

      // displays the character position where the lexing error occurred, i.e. for error messages
      showPosition: function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
      },

      // test the lexed token: return FALSE when not a match, otherwise return token
      test_match: function (match, indexed_rule) {
        var token, lines, backup;

        if (this.options.backtrack_lexer) {
          // save context
          backup = {
            yylineno: this.yylineno,
            yylloc: {
              first_line: this.yylloc.first_line,
              last_line: this.last_line,
              first_column: this.yylloc.first_column,
              last_column: this.yylloc.last_column,
            },
            yytext: this.yytext,
            match: this.match,
            matches: this.matches,
            matched: this.matched,
            yyleng: this.yyleng,
            offset: this.offset,
            _more: this._more,
            _input: this._input,
            yy: this.yy,
            conditionStack: this.conditionStack.slice(0),
            done: this.done,
          };
          if (this.options.ranges) {
            backup.yylloc.range = this.yylloc.range.slice(0);
          }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
          this.yylineno += lines.length;
        }
        this.yylloc = {
          first_line: this.yylloc.last_line,
          last_line: this.yylineno + 1,
          first_column: this.yylloc.last_column,
          last_column: lines
            ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length
            : this.yylloc.last_column + match[0].length,
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
          this.yylloc.range = [this.offset, (this.offset += this.yyleng)];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(
          this,
          this.yy,
          this,
          indexed_rule,
          this.conditionStack[this.conditionStack.length - 1]
        );
        if (this.done && this._input) {
          this.done = false;
        }
        if (token) {
          return token;
        } else if (this._backtrack) {
          // recover context
          for (var k in backup) {
            this[k] = backup[k];
          }
          return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
      },

      // return next match in input
      next: function () {
        if (this.done) {
          return this.EOF;
        }
        if (!this._input) {
          this.done = true;
        }

        var token, match, tempMatch, index;
        if (!this._more) {
          this.yytext = "";
          this.match = "";
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
          tempMatch = this._input.match(this.rules[rules[i]]);
          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
            match = tempMatch;
            index = i;
            if (this.options.backtrack_lexer) {
              token = this.test_match(tempMatch, rules[i]);
              if (token !== false) {
                return token;
              } else if (this._backtrack) {
                match = false;
                continue; // rule action called reject() implying a rule MISmatch.
              } else {
                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                return false;
              }
            } else if (!this.options.flex) {
              break;
            }
          }
        }
        if (match) {
          token = this.test_match(match, rules[index]);
          if (token !== false) {
            return token;
          }
          // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
          return false;
        }
        if (this._input === "") {
          return this.EOF;
        } else {
          return this.parseError(
            "Lexical error on line " + (this.yylineno + 1) + ". Unrecognized text.\n" + this.showPosition(),
            {
              text: "",
              token: null,
              line: this.yylineno,
            }
          );
        }
      },

      // return next match that has a token
      lex: function lex() {
        var r = this.next();
        if (r) {
          return r;
        } else {
          return this.lex();
        }
      },

      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
      begin: function begin(condition) {
        this.conditionStack.push(condition);
      },

      // pop the previously active lexer condition state off the condition stack
      popState: function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
          return this.conditionStack.pop();
        } else {
          return this.conditionStack[0];
        }
      },

      // produce the lexer rule set which is active for the currently active lexer condition state
      _currentRules: function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
          return this.conditions["INITIAL"].rules;
        }
      },

      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
      topState: function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
          return this.conditionStack[n];
        } else {
          return "INITIAL";
        }
      },

      // alias for begin(condition)
      pushState: function pushState(condition) {
        this.begin(condition);
      },

      // return the number of states currently on the stack
      stateStackSize: function stateStackSize() {
        return this.conditionStack.length;
      },
      options: { backtrack_lexer: true },
      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
        yy.initLexer(yy.lexer);

        var YYSTATE = YY_START;
        switch ($avoiding_name_collisions) {
          case 0:
            yy.error(yy_.yylloc, "TLDR008");

            break;
          case 1:
            yy.error(yy_.yylloc, "TLDR012");
            var cleaned = this.match.replace(/\t/g, " ");
            this.unput(cleaned);

            break;
          case 2:
            // this.setInput resets the state as well, so push that back in
            var currentConditionStack = this.conditionStack;
            var currentConditions = this.conditions;
            // Basically replace EOF with a final newline so lexing can continue
            this.setInput(this.match + "\n");
            this.conditionStack = currentConditionStack;
            this.currentConditions = currentConditions;
            yy.error(yy_.yylloc, "TLDR009");

            break;
          case 3:
            if (this.topState() !== "INITIAL") {
              this.reject();
              return;
            }
            this.pushState("title");
            if (this.matches[1]) {
              yy.error(yy_.yylloc, "TLDR001");
            }
            if (this.matches[2] !== " ") {
              yy.error(yy_.yylloc, "TLDR002");
            }
            return 9;

            break;
          case 4:
            if (this.topState() !== "INITIAL") {
              this.reject();
              return;
            }
            if (this.matches[2] !== " ") {
              yy.error(yy_.yylloc, "TLDR002");
            }
            if (this.matches[1] == ">") {
              this.pushState("description");
              return 13;
            } else {
              this.pushState("example_description");
              return 23;
            }

            break;
          case 5:
            if (this.topState() !== "description") {
              this.reject();
              return;
            }
            if (this.matches[1] !== "More information: ") {
              yy.error(yy_.yylloc, "TLDR016");
            }
            this.popState();
            this.pushState("information_link");
            return 15;

            break;
          case 6:
            if (this.topState() !== "information_link") {
              this.reject();
              return;
            }
            this.popState();
            this.pushState("information_link_url");
            return 16;

            break;
          case 7:
            if (this.topState() === "title") {
              yy_.yytext = this.matches[1];
              if (this.matches[1].match(/([^\w+\[. -])|(\.$)/)) yy.error(yy_.yylloc, "TLDR013");
              this.checkTrailingWhitespace(this.matches[2], yy_.yylloc);
              this.checkNewline(this.matches[3], yy_.yylloc);
              this.popState();
              return 10;
            } else if (this.topState() === "information_link_url") {
              if (this.matches[1] != ".") yy.error(yy_.yylloc, "TLDR004");
              this.checkTrailingWhitespace(this.matches[2], yy_.yylloc);
              this.checkNewline(this.matches[3], yy_.yylloc);
              this.popState();
              return 17;
            } else if (this.topState() === "information_link") {
              this.checkTrailingWhitespace(this.matches[2], yy_.yylloc);
              this.checkNewline(this.matches[3], yy_.yylloc);
              this.popState();
              return 18;
            } else {
              this.reject();
            }

            break;
          case 8:
            if (this.topState() === "description") {
              this.popState();
              yy_.yytext = this.matches[1];
              var exceptions = ["npm", "pnpm"];
              if (!exceptions.includes(yy_.yytext.replace(/ .*/, "")) && yy_.yytext.match(/^[a-z]/)) {
                yy.error(yy_.yylloc, "TLDR003");
              }
              var punctuation = this.matches[2];
              if (punctuation !== ".") {
                yy.error(yy_.yylloc, "TLDR004");
              }
              if (punctuation.match(/[,;]/)) {
                console.warn(`Description ends in \'${punctuation}\'. Consider writing your sentence on one line.`);
              }
              this.checkTrailingWhitespace(this.matches[3], yy_.yylloc);
              this.checkNewline(this.matches[4], yy_.yylloc);
              return 14;
            } else {
              this.reject();
            }

            break;
          case 9:
            if (this.topState() === "example_description") {
              this.popState();
              yy_.yytext = this.matches[1];
              if (!yy_.yytext.match(/^[\p{Lu}\[]/u)) yy.error(yy_.yylloc, "TLDR015");
              if (this.matches[2] !== ":") yy.error(yy_.yylloc, "TLDR005");
              // Try to ensure that verbs at the beginning of the description are in the infinitive tense
              // 1. Any word at the start of a sentence that ends with "ing" and is 6 or more characters long (e.g. executing, writing) is likely a verb in the gerund
              // 2. Any word at the start of a sentence that doesn't end with "us", "ss", or "ys" (e.g. superfluous, success, always) is likely a verb in the present tense
              if (yy_.yytext.match(/(^[A-Za-z]{3,}ing )|(^[A-Za-z]+[^usy]s )/)) {
                yy.error(yy_.yylloc, "TLDR104");
              }
              // Check if any sneaky spaces have been caught
              this.checkTrailingWhitespace(this.matches[3], yy_.yylloc);
              this.checkNewline(this.matches[3], yy_.yylloc);
              return 24;
            } else {
              this.reject();
            }

            break;
          case 10:
            if (this.topState() === "example_command") {
              this.popState();
              this.checkNewline(this.matches[1], yy_.yylloc);
              return 26;
            } else {
              this.reject();
            }

            break;
          case 11:
            this.pushState("example_command");
            return 26;

            break;
          case 12:
            if (this.topState() === "example_command") {
              yy_.yytext = this.matches[1];
              if (this.matches[3]) {
                // Matched a newline where there certainly should not be one
                // This code is duplicated from two rules below.. should unify
                this.unput("`" + this.matches[2]);
                yy.error(yy_.yylloc, "TLDR103");
              }
              return 29;
            } else this.reject();

            break;
          case 13:
            if (this.topState() === "example_command") {
              this.unput("{{");
              yy_.yytext = this.matches[1];
              return 28;
            } else this.reject();

            break;
          case 14:
            if (this.topState() === "example_command") {
              // Check if there are some trailing spaces
              if (this.matches[2].match(/ /)) {
                yy.error(yy_.yylloc, "TLDR014");
              }
              // Don't swallow the trailing backtick just yet
              if (this.matches[2].match(/\`/)) this.unput("`");
              else {
                // If command doesn't end in a backtick, just add a backtick anyway
                // Also pop back the newline. Let's pretend we don't care what that is.
                this.unput("`\n");
                yy.error(yy_.yylloc, "TLDR103");
              }
              yy_.yytext = this.matches[1];
              return 28;
            } else this.reject();

            break;
          case 15:
            yy.error(yy_.yylloc, "TLDR014");

            break;
          case 16:
            // Either you've got more than a single \n or \r or more than \r\n
            var isdos = this.match.match(/\r\n/);
            if ((isdos && this.match.length > 2) || (!isdos && this.match.length > 1)) {
              yy.error(yy_.yylloc, "TLDR011");
            }
            this.checkNewline(this.match, yy_.yylloc);
            return 5;

            break;
          case 17:
            yy_.yytext = this.matches[1];
            return 8;

            break;
        }
      },
      rules: [
        /^(?:\s+$)/,
        /^(?:.*?\t+.*)/,
        /^(?:[^\n]$)/,
        /^(?:(\s*)#(\s*))/,
        /^(?:([\>-])(\s*))/,
        /^(?:([Mm]ore\s+[Ii]nfo(?:rmation)?:?\s*))/,
        /^(?:(<https?:\/\/[^\s\>]*>))/,
        /^(?:(.+?)([ ]*)((?:\r\n)|\n|\r))/,
        /^(?:(.+?)([\.,;!\?]?)([ ]*)((?:\r\n)|\n|\r))/,
        /^(?:(.+?)([\.:,;]?)([ ]*)((?:\r\n)|\n|\r))/,
        /^(?:`((?:\r\n)|\n|\r))/,
        /^(?:`)/,
        /^(?:\{\{([^\n\`\{\}]*)\}\}(((?:\r\n)|\n|\r)?))/,
        /^(?:([^\`\n]+?)\{\{)/,
        /^(?:([^\`\n]+?)(`[ ]*|[ ]*((?:\r\n)|\n|\r)))/,
        /^(?:[ ]+)/,
        /^(?:((?:\r\n)|\n|\r)+)/,
        /^(?:(.+?)[\.:]?((?:\r\n)|\n|\r))/,
      ],
      conditions: {
        INITIAL: { rules: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], inclusive: true },
      },
    };
    return lexer;
  })();
  parser.lexer = lexer;
  function Parser() {
    this.yy = {};
  }
  Parser.prototype = parser;
  parser.Parser = Parser;
  return new Parser();
})();

if (typeof require !== "undefined" && typeof exports !== "undefined") {
  exports.parser = tldrParser;
  exports.Parser = tldrParser.Parser;
  exports.parse = function () {
    return tldrParser.parse.apply(tldrParser, arguments);
  };
  exports.main = function commonjsMain(args) {
    if (!args[1]) {
      console.log("Usage: " + args[0] + " FILE");
      process.exit(1);
    }
    var source = require("fs").readFileSync(require("path").normalize(args[1]), "utf8");
    return exports.parser.parse(source);
  };
  if (typeof module !== "undefined" && require.main === module) {
    exports.main(process.argv.slice(1));
  }
}
